
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008168  08008168  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008170  08008170  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08008178  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000244  080083bc  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080083bc  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011349  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c52  00000000  00000000  000315b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00034208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  00034fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a757  00000000  00000000  00035c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8cd  00000000  00000000  00050387  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f911  00000000  00000000  0005ec54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004694  00000000  00000000  000ee5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f2c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f2c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	080079b4 	.word	0x080079b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	080079b4 	.word	0x080079b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <__aeabi_frsub>:
 8000950:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000954:	e002      	b.n	800095c <__addsf3>
 8000956:	bf00      	nop

08000958 <__aeabi_fsub>:
 8000958:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800095c <__addsf3>:
 800095c:	0042      	lsls	r2, r0, #1
 800095e:	bf1f      	itttt	ne
 8000960:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000964:	ea92 0f03 	teqne	r2, r3
 8000968:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800096c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000970:	d06a      	beq.n	8000a48 <__addsf3+0xec>
 8000972:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000976:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800097a:	bfc1      	itttt	gt
 800097c:	18d2      	addgt	r2, r2, r3
 800097e:	4041      	eorgt	r1, r0
 8000980:	4048      	eorgt	r0, r1
 8000982:	4041      	eorgt	r1, r0
 8000984:	bfb8      	it	lt
 8000986:	425b      	neglt	r3, r3
 8000988:	2b19      	cmp	r3, #25
 800098a:	bf88      	it	hi
 800098c:	4770      	bxhi	lr
 800098e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000992:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4240      	negne	r0, r0
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009aa:	bf18      	it	ne
 80009ac:	4249      	negne	r1, r1
 80009ae:	ea92 0f03 	teq	r2, r3
 80009b2:	d03f      	beq.n	8000a34 <__addsf3+0xd8>
 80009b4:	f1a2 0201 	sub.w	r2, r2, #1
 80009b8:	fa41 fc03 	asr.w	ip, r1, r3
 80009bc:	eb10 000c 	adds.w	r0, r0, ip
 80009c0:	f1c3 0320 	rsb	r3, r3, #32
 80009c4:	fa01 f103 	lsl.w	r1, r1, r3
 80009c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009cc:	d502      	bpl.n	80009d4 <__addsf3+0x78>
 80009ce:	4249      	negs	r1, r1
 80009d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d8:	d313      	bcc.n	8000a02 <__addsf3+0xa6>
 80009da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009de:	d306      	bcc.n	80009ee <__addsf3+0x92>
 80009e0:	0840      	lsrs	r0, r0, #1
 80009e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e6:	f102 0201 	add.w	r2, r2, #1
 80009ea:	2afe      	cmp	r2, #254	; 0xfe
 80009ec:	d251      	bcs.n	8000a92 <__addsf3+0x136>
 80009ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f6:	bf08      	it	eq
 80009f8:	f020 0001 	biceq.w	r0, r0, #1
 80009fc:	ea40 0003 	orr.w	r0, r0, r3
 8000a00:	4770      	bx	lr
 8000a02:	0049      	lsls	r1, r1, #1
 8000a04:	eb40 0000 	adc.w	r0, r0, r0
 8000a08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a10:	d1ed      	bne.n	80009ee <__addsf3+0x92>
 8000a12:	fab0 fc80 	clz	ip, r0
 8000a16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a22:	bfaa      	itet	ge
 8000a24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a28:	4252      	neglt	r2, r2
 8000a2a:	4318      	orrge	r0, r3
 8000a2c:	bfbc      	itt	lt
 8000a2e:	40d0      	lsrlt	r0, r2
 8000a30:	4318      	orrlt	r0, r3
 8000a32:	4770      	bx	lr
 8000a34:	f092 0f00 	teq	r2, #0
 8000a38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a3c:	bf06      	itte	eq
 8000a3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a42:	3201      	addeq	r2, #1
 8000a44:	3b01      	subne	r3, #1
 8000a46:	e7b5      	b.n	80009b4 <__addsf3+0x58>
 8000a48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a56:	d021      	beq.n	8000a9c <__addsf3+0x140>
 8000a58:	ea92 0f03 	teq	r2, r3
 8000a5c:	d004      	beq.n	8000a68 <__addsf3+0x10c>
 8000a5e:	f092 0f00 	teq	r2, #0
 8000a62:	bf08      	it	eq
 8000a64:	4608      	moveq	r0, r1
 8000a66:	4770      	bx	lr
 8000a68:	ea90 0f01 	teq	r0, r1
 8000a6c:	bf1c      	itt	ne
 8000a6e:	2000      	movne	r0, #0
 8000a70:	4770      	bxne	lr
 8000a72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a76:	d104      	bne.n	8000a82 <__addsf3+0x126>
 8000a78:	0040      	lsls	r0, r0, #1
 8000a7a:	bf28      	it	cs
 8000a7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a80:	4770      	bx	lr
 8000a82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a86:	bf3c      	itt	cc
 8000a88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a8c:	4770      	bxcc	lr
 8000a8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	4770      	bx	lr
 8000a9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aa0:	bf16      	itet	ne
 8000aa2:	4608      	movne	r0, r1
 8000aa4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa8:	4601      	movne	r1, r0
 8000aaa:	0242      	lsls	r2, r0, #9
 8000aac:	bf06      	itte	eq
 8000aae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ab2:	ea90 0f01 	teqeq	r0, r1
 8000ab6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aba:	4770      	bx	lr

08000abc <__aeabi_ui2f>:
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e004      	b.n	8000acc <__aeabi_i2f+0x8>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_i2f>:
 8000ac4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	bf48      	it	mi
 8000aca:	4240      	negmi	r0, r0
 8000acc:	ea5f 0c00 	movs.w	ip, r0
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad8:	4601      	mov	r1, r0
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	e01c      	b.n	8000b1a <__aeabi_l2f+0x2a>

08000ae0 <__aeabi_ul2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e00a      	b.n	8000b04 <__aeabi_l2f+0x14>
 8000aee:	bf00      	nop

08000af0 <__aeabi_l2f>:
 8000af0:	ea50 0201 	orrs.w	r2, r0, r1
 8000af4:	bf08      	it	eq
 8000af6:	4770      	bxeq	lr
 8000af8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__aeabi_l2f+0x14>
 8000afe:	4240      	negs	r0, r0
 8000b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b04:	ea5f 0c01 	movs.w	ip, r1
 8000b08:	bf02      	ittt	eq
 8000b0a:	4684      	moveq	ip, r0
 8000b0c:	4601      	moveq	r1, r0
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b14:	bf08      	it	eq
 8000b16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1e:	fabc f28c 	clz	r2, ip
 8000b22:	3a08      	subs	r2, #8
 8000b24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b28:	db10      	blt.n	8000b4c <__aeabi_l2f+0x5c>
 8000b2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2e:	4463      	add	r3, ip
 8000b30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b34:	f1c2 0220 	rsb	r2, r2, #32
 8000b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b40:	eb43 0002 	adc.w	r0, r3, r2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f102 0220 	add.w	r2, r2, #32
 8000b50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b54:	f1c2 0220 	rsb	r2, r2, #32
 8000b58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b60:	eb43 0002 	adc.w	r0, r3, r2
 8000b64:	bf08      	it	eq
 8000b66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_fmul>:
 8000b6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b74:	bf1e      	ittt	ne
 8000b76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b7a:	ea92 0f0c 	teqne	r2, ip
 8000b7e:	ea93 0f0c 	teqne	r3, ip
 8000b82:	d06f      	beq.n	8000c64 <__aeabi_fmul+0xf8>
 8000b84:	441a      	add	r2, r3
 8000b86:	ea80 0c01 	eor.w	ip, r0, r1
 8000b8a:	0240      	lsls	r0, r0, #9
 8000b8c:	bf18      	it	ne
 8000b8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b92:	d01e      	beq.n	8000bd2 <__aeabi_fmul+0x66>
 8000b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ba0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bac:	bf3e      	ittt	cc
 8000bae:	0049      	lslcc	r1, r1, #1
 8000bb0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb4:	005b      	lslcc	r3, r3, #1
 8000bb6:	ea40 0001 	orr.w	r0, r0, r1
 8000bba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bbe:	2afd      	cmp	r2, #253	; 0xfd
 8000bc0:	d81d      	bhi.n	8000bfe <__aeabi_fmul+0x92>
 8000bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	4770      	bx	lr
 8000bd2:	f090 0f00 	teq	r0, #0
 8000bd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bda:	bf08      	it	eq
 8000bdc:	0249      	lsleq	r1, r1, #9
 8000bde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be6:	3a7f      	subs	r2, #127	; 0x7f
 8000be8:	bfc2      	ittt	gt
 8000bea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bf2:	4770      	bxgt	lr
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	dc5d      	bgt.n	8000cbc <__aeabi_fmul+0x150>
 8000c00:	f112 0f19 	cmn.w	r2, #25
 8000c04:	bfdc      	itt	le
 8000c06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c0a:	4770      	bxle	lr
 8000c0c:	f1c2 0200 	rsb	r2, r2, #0
 8000c10:	0041      	lsls	r1, r0, #1
 8000c12:	fa21 f102 	lsr.w	r1, r1, r2
 8000c16:	f1c2 0220 	rsb	r2, r2, #32
 8000c1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c22:	f140 0000 	adc.w	r0, r0, #0
 8000c26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c2a:	bf08      	it	eq
 8000c2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c30:	4770      	bx	lr
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0040      	lsleq	r0, r0, #1
 8000c3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c42:	3a01      	subeq	r2, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xce>
 8000c46:	ea40 000c 	orr.w	r0, r0, ip
 8000c4a:	f093 0f00 	teq	r3, #0
 8000c4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c52:	bf02      	ittt	eq
 8000c54:	0049      	lsleq	r1, r1, #1
 8000c56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c5a:	3b01      	subeq	r3, #1
 8000c5c:	d0f9      	beq.n	8000c52 <__aeabi_fmul+0xe6>
 8000c5e:	ea41 010c 	orr.w	r1, r1, ip
 8000c62:	e78f      	b.n	8000b84 <__aeabi_fmul+0x18>
 8000c64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c68:	ea92 0f0c 	teq	r2, ip
 8000c6c:	bf18      	it	ne
 8000c6e:	ea93 0f0c 	teqne	r3, ip
 8000c72:	d00a      	beq.n	8000c8a <__aeabi_fmul+0x11e>
 8000c74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c78:	bf18      	it	ne
 8000c7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7e:	d1d8      	bne.n	8000c32 <__aeabi_fmul+0xc6>
 8000c80:	ea80 0001 	eor.w	r0, r0, r1
 8000c84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f090 0f00 	teq	r0, #0
 8000c8e:	bf17      	itett	ne
 8000c90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c94:	4608      	moveq	r0, r1
 8000c96:	f091 0f00 	teqne	r1, #0
 8000c9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9e:	d014      	beq.n	8000cca <__aeabi_fmul+0x15e>
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	d101      	bne.n	8000caa <__aeabi_fmul+0x13e>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	d10f      	bne.n	8000cca <__aeabi_fmul+0x15e>
 8000caa:	ea93 0f0c 	teq	r3, ip
 8000cae:	d103      	bne.n	8000cb8 <__aeabi_fmul+0x14c>
 8000cb0:	024b      	lsls	r3, r1, #9
 8000cb2:	bf18      	it	ne
 8000cb4:	4608      	movne	r0, r1
 8000cb6:	d108      	bne.n	8000cca <__aeabi_fmul+0x15e>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc8:	4770      	bx	lr
 8000cca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fdiv>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d069      	beq.n	8000dc0 <__aeabi_fdiv+0xec>
 8000cec:	eba2 0203 	sub.w	r2, r2, r3
 8000cf0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf4:	0249      	lsls	r1, r1, #9
 8000cf6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cfa:	d037      	beq.n	8000d6c <__aeabi_fdiv+0x98>
 8000cfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	bf38      	it	cc
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	bf24      	itt	cs
 8000d1e:	1a5b      	subcs	r3, r3, r1
 8000d20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d28:	bf24      	itt	cs
 8000d2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d36:	bf24      	itt	cs
 8000d38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d44:	bf24      	itt	cs
 8000d46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d56:	d1e0      	bne.n	8000d1a <__aeabi_fdiv+0x46>
 8000d58:	2afd      	cmp	r2, #253	; 0xfd
 8000d5a:	f63f af50 	bhi.w	8000bfe <__aeabi_fmul+0x92>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d64:	bf08      	it	eq
 8000d66:	f020 0001 	biceq.w	r0, r0, #1
 8000d6a:	4770      	bx	lr
 8000d6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d74:	327f      	adds	r2, #127	; 0x7f
 8000d76:	bfc2      	ittt	gt
 8000d78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d80:	4770      	bxgt	lr
 8000d82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	3a01      	subs	r2, #1
 8000d8c:	e737      	b.n	8000bfe <__aeabi_fmul+0x92>
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xc2>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fdiv+0xda>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e795      	b.n	8000cec <__aeabi_fdiv+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	d108      	bne.n	8000ddc <__aeabi_fdiv+0x108>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	f47f af7d 	bne.w	8000cca <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	f47f af70 	bne.w	8000cb8 <__aeabi_fmul+0x14c>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	e776      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000ddc:	ea93 0f0c 	teq	r3, ip
 8000de0:	d104      	bne.n	8000dec <__aeabi_fdiv+0x118>
 8000de2:	024b      	lsls	r3, r1, #9
 8000de4:	f43f af4c 	beq.w	8000c80 <__aeabi_fmul+0x114>
 8000de8:	4608      	mov	r0, r1
 8000dea:	e76e      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1ca      	bne.n	8000d8e <__aeabi_fdiv+0xba>
 8000df8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dfc:	f47f af5c 	bne.w	8000cb8 <__aeabi_fmul+0x14c>
 8000e00:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	f47f af3c 	bne.w	8000c80 <__aeabi_fmul+0x114>
 8000e08:	e75f      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000e0a:	bf00      	nop

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2uiz>:
 8000ef8:	0042      	lsls	r2, r0, #1
 8000efa:	d20e      	bcs.n	8000f1a <__aeabi_f2uiz+0x22>
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f00:	d30b      	bcc.n	8000f1a <__aeabi_f2uiz+0x22>
 8000f02:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d409      	bmi.n	8000f20 <__aeabi_f2uiz+0x28>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2uiz+0x32>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d102      	bne.n	8000f30 <__aeabi_f2uiz+0x38>
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__aeabi_ldivmod>:
 8000f38:	b97b      	cbnz	r3, 8000f5a <__aeabi_ldivmod+0x22>
 8000f3a:	b972      	cbnz	r2, 8000f5a <__aeabi_ldivmod+0x22>
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	bfbe      	ittt	lt
 8000f40:	2000      	movlt	r0, #0
 8000f42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f46:	e006      	blt.n	8000f56 <__aeabi_ldivmod+0x1e>
 8000f48:	bf08      	it	eq
 8000f4a:	2800      	cmpeq	r0, #0
 8000f4c:	bf1c      	itt	ne
 8000f4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f52:	f04f 30ff 	movne.w	r0, #4294967295
 8000f56:	f000 b9a7 	b.w	80012a8 <__aeabi_idiv0>
 8000f5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f62:	2900      	cmp	r1, #0
 8000f64:	db09      	blt.n	8000f7a <__aeabi_ldivmod+0x42>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db1a      	blt.n	8000fa0 <__aeabi_ldivmod+0x68>
 8000f6a:	f000 f835 	bl	8000fd8 <__udivmoddi4>
 8000f6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f76:	b004      	add	sp, #16
 8000f78:	4770      	bx	lr
 8000f7a:	4240      	negs	r0, r0
 8000f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db1b      	blt.n	8000fbc <__aeabi_ldivmod+0x84>
 8000f84:	f000 f828 	bl	8000fd8 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4240      	negs	r0, r0
 8000f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f98:	4252      	negs	r2, r2
 8000f9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f9e:	4770      	bx	lr
 8000fa0:	4252      	negs	r2, r2
 8000fa2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fa6:	f000 f817 	bl	8000fd8 <__udivmoddi4>
 8000faa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fba:	4770      	bx	lr
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	f000 f809 	bl	8000fd8 <__udivmoddi4>
 8000fc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fce:	b004      	add	sp, #16
 8000fd0:	4252      	negs	r2, r2
 8000fd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fd6:	4770      	bx	lr

08000fd8 <__udivmoddi4>:
 8000fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fdc:	468c      	mov	ip, r1
 8000fde:	4604      	mov	r4, r0
 8000fe0:	9e08      	ldr	r6, [sp, #32]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d14b      	bne.n	800107e <__udivmoddi4+0xa6>
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	4615      	mov	r5, r2
 8000fea:	d967      	bls.n	80010bc <__udivmoddi4+0xe4>
 8000fec:	fab2 f282 	clz	r2, r2
 8000ff0:	b14a      	cbz	r2, 8001006 <__udivmoddi4+0x2e>
 8000ff2:	f1c2 0720 	rsb	r7, r2, #32
 8000ff6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffa:	fa20 f707 	lsr.w	r7, r0, r7
 8000ffe:	4095      	lsls	r5, r2
 8001000:	ea47 0c03 	orr.w	ip, r7, r3
 8001004:	4094      	lsls	r4, r2
 8001006:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800100a:	fbbc f7fe 	udiv	r7, ip, lr
 800100e:	fa1f f885 	uxth.w	r8, r5
 8001012:	fb0e c317 	mls	r3, lr, r7, ip
 8001016:	fb07 f908 	mul.w	r9, r7, r8
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001020:	4599      	cmp	r9, r3
 8001022:	d909      	bls.n	8001038 <__udivmoddi4+0x60>
 8001024:	18eb      	adds	r3, r5, r3
 8001026:	f107 31ff 	add.w	r1, r7, #4294967295
 800102a:	f080 811c 	bcs.w	8001266 <__udivmoddi4+0x28e>
 800102e:	4599      	cmp	r9, r3
 8001030:	f240 8119 	bls.w	8001266 <__udivmoddi4+0x28e>
 8001034:	3f02      	subs	r7, #2
 8001036:	442b      	add	r3, r5
 8001038:	eba3 0309 	sub.w	r3, r3, r9
 800103c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001040:	fb0e 3310 	mls	r3, lr, r0, r3
 8001044:	fb00 f108 	mul.w	r1, r0, r8
 8001048:	b2a4      	uxth	r4, r4
 800104a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800104e:	42a1      	cmp	r1, r4
 8001050:	d909      	bls.n	8001066 <__udivmoddi4+0x8e>
 8001052:	192c      	adds	r4, r5, r4
 8001054:	f100 33ff 	add.w	r3, r0, #4294967295
 8001058:	f080 8107 	bcs.w	800126a <__udivmoddi4+0x292>
 800105c:	42a1      	cmp	r1, r4
 800105e:	f240 8104 	bls.w	800126a <__udivmoddi4+0x292>
 8001062:	3802      	subs	r0, #2
 8001064:	442c      	add	r4, r5
 8001066:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800106a:	2700      	movs	r7, #0
 800106c:	1a64      	subs	r4, r4, r1
 800106e:	b11e      	cbz	r6, 8001078 <__udivmoddi4+0xa0>
 8001070:	2300      	movs	r3, #0
 8001072:	40d4      	lsrs	r4, r2
 8001074:	e9c6 4300 	strd	r4, r3, [r6]
 8001078:	4639      	mov	r1, r7
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	428b      	cmp	r3, r1
 8001080:	d909      	bls.n	8001096 <__udivmoddi4+0xbe>
 8001082:	2e00      	cmp	r6, #0
 8001084:	f000 80ec 	beq.w	8001260 <__udivmoddi4+0x288>
 8001088:	2700      	movs	r7, #0
 800108a:	e9c6 0100 	strd	r0, r1, [r6]
 800108e:	4638      	mov	r0, r7
 8001090:	4639      	mov	r1, r7
 8001092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001096:	fab3 f783 	clz	r7, r3
 800109a:	2f00      	cmp	r7, #0
 800109c:	d148      	bne.n	8001130 <__udivmoddi4+0x158>
 800109e:	428b      	cmp	r3, r1
 80010a0:	d302      	bcc.n	80010a8 <__udivmoddi4+0xd0>
 80010a2:	4282      	cmp	r2, r0
 80010a4:	f200 80fb 	bhi.w	800129e <__udivmoddi4+0x2c6>
 80010a8:	1a84      	subs	r4, r0, r2
 80010aa:	eb61 0303 	sbc.w	r3, r1, r3
 80010ae:	2001      	movs	r0, #1
 80010b0:	469c      	mov	ip, r3
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	d0e0      	beq.n	8001078 <__udivmoddi4+0xa0>
 80010b6:	e9c6 4c00 	strd	r4, ip, [r6]
 80010ba:	e7dd      	b.n	8001078 <__udivmoddi4+0xa0>
 80010bc:	b902      	cbnz	r2, 80010c0 <__udivmoddi4+0xe8>
 80010be:	deff      	udf	#255	; 0xff
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	f040 808f 	bne.w	80011e8 <__udivmoddi4+0x210>
 80010ca:	2701      	movs	r7, #1
 80010cc:	1b49      	subs	r1, r1, r5
 80010ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80010d2:	fa1f f985 	uxth.w	r9, r5
 80010d6:	fbb1 fef8 	udiv	lr, r1, r8
 80010da:	fb08 111e 	mls	r1, r8, lr, r1
 80010de:	fb09 f00e 	mul.w	r0, r9, lr
 80010e2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80010e6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d907      	bls.n	80010fe <__udivmoddi4+0x126>
 80010ee:	18eb      	adds	r3, r5, r3
 80010f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80010f4:	d202      	bcs.n	80010fc <__udivmoddi4+0x124>
 80010f6:	4298      	cmp	r0, r3
 80010f8:	f200 80cd 	bhi.w	8001296 <__udivmoddi4+0x2be>
 80010fc:	468e      	mov	lr, r1
 80010fe:	1a1b      	subs	r3, r3, r0
 8001100:	fbb3 f0f8 	udiv	r0, r3, r8
 8001104:	fb08 3310 	mls	r3, r8, r0, r3
 8001108:	fb09 f900 	mul.w	r9, r9, r0
 800110c:	b2a4      	uxth	r4, r4
 800110e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001112:	45a1      	cmp	r9, r4
 8001114:	d907      	bls.n	8001126 <__udivmoddi4+0x14e>
 8001116:	192c      	adds	r4, r5, r4
 8001118:	f100 33ff 	add.w	r3, r0, #4294967295
 800111c:	d202      	bcs.n	8001124 <__udivmoddi4+0x14c>
 800111e:	45a1      	cmp	r9, r4
 8001120:	f200 80b6 	bhi.w	8001290 <__udivmoddi4+0x2b8>
 8001124:	4618      	mov	r0, r3
 8001126:	eba4 0409 	sub.w	r4, r4, r9
 800112a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800112e:	e79e      	b.n	800106e <__udivmoddi4+0x96>
 8001130:	f1c7 0520 	rsb	r5, r7, #32
 8001134:	40bb      	lsls	r3, r7
 8001136:	fa22 fc05 	lsr.w	ip, r2, r5
 800113a:	ea4c 0c03 	orr.w	ip, ip, r3
 800113e:	fa21 f405 	lsr.w	r4, r1, r5
 8001142:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001146:	fbb4 f9fe 	udiv	r9, r4, lr
 800114a:	fa1f f88c 	uxth.w	r8, ip
 800114e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001152:	fa20 f305 	lsr.w	r3, r0, r5
 8001156:	40b9      	lsls	r1, r7
 8001158:	fb09 fa08 	mul.w	sl, r9, r8
 800115c:	4319      	orrs	r1, r3
 800115e:	0c0b      	lsrs	r3, r1, #16
 8001160:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001164:	45a2      	cmp	sl, r4
 8001166:	fa02 f207 	lsl.w	r2, r2, r7
 800116a:	fa00 f307 	lsl.w	r3, r0, r7
 800116e:	d90b      	bls.n	8001188 <__udivmoddi4+0x1b0>
 8001170:	eb1c 0404 	adds.w	r4, ip, r4
 8001174:	f109 30ff 	add.w	r0, r9, #4294967295
 8001178:	f080 8088 	bcs.w	800128c <__udivmoddi4+0x2b4>
 800117c:	45a2      	cmp	sl, r4
 800117e:	f240 8085 	bls.w	800128c <__udivmoddi4+0x2b4>
 8001182:	f1a9 0902 	sub.w	r9, r9, #2
 8001186:	4464      	add	r4, ip
 8001188:	eba4 040a 	sub.w	r4, r4, sl
 800118c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001190:	fb0e 4410 	mls	r4, lr, r0, r4
 8001194:	fb00 fa08 	mul.w	sl, r0, r8
 8001198:	b289      	uxth	r1, r1
 800119a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800119e:	45a2      	cmp	sl, r4
 80011a0:	d908      	bls.n	80011b4 <__udivmoddi4+0x1dc>
 80011a2:	eb1c 0404 	adds.w	r4, ip, r4
 80011a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80011aa:	d26b      	bcs.n	8001284 <__udivmoddi4+0x2ac>
 80011ac:	45a2      	cmp	sl, r4
 80011ae:	d969      	bls.n	8001284 <__udivmoddi4+0x2ac>
 80011b0:	3802      	subs	r0, #2
 80011b2:	4464      	add	r4, ip
 80011b4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011b8:	fba0 8902 	umull	r8, r9, r0, r2
 80011bc:	eba4 040a 	sub.w	r4, r4, sl
 80011c0:	454c      	cmp	r4, r9
 80011c2:	4641      	mov	r1, r8
 80011c4:	46ce      	mov	lr, r9
 80011c6:	d354      	bcc.n	8001272 <__udivmoddi4+0x29a>
 80011c8:	d051      	beq.n	800126e <__udivmoddi4+0x296>
 80011ca:	2e00      	cmp	r6, #0
 80011cc:	d069      	beq.n	80012a2 <__udivmoddi4+0x2ca>
 80011ce:	1a5a      	subs	r2, r3, r1
 80011d0:	eb64 040e 	sbc.w	r4, r4, lr
 80011d4:	fa04 f505 	lsl.w	r5, r4, r5
 80011d8:	fa22 f307 	lsr.w	r3, r2, r7
 80011dc:	40fc      	lsrs	r4, r7
 80011de:	431d      	orrs	r5, r3
 80011e0:	e9c6 5400 	strd	r5, r4, [r6]
 80011e4:	2700      	movs	r7, #0
 80011e6:	e747      	b.n	8001078 <__udivmoddi4+0xa0>
 80011e8:	4095      	lsls	r5, r2
 80011ea:	f1c2 0320 	rsb	r3, r2, #32
 80011ee:	fa21 f003 	lsr.w	r0, r1, r3
 80011f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011f6:	fbb0 f7f8 	udiv	r7, r0, r8
 80011fa:	fa1f f985 	uxth.w	r9, r5
 80011fe:	fb08 0017 	mls	r0, r8, r7, r0
 8001202:	fa24 f303 	lsr.w	r3, r4, r3
 8001206:	4091      	lsls	r1, r2
 8001208:	fb07 fc09 	mul.w	ip, r7, r9
 800120c:	430b      	orrs	r3, r1
 800120e:	0c19      	lsrs	r1, r3, #16
 8001210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001214:	458c      	cmp	ip, r1
 8001216:	fa04 f402 	lsl.w	r4, r4, r2
 800121a:	d907      	bls.n	800122c <__udivmoddi4+0x254>
 800121c:	1869      	adds	r1, r5, r1
 800121e:	f107 30ff 	add.w	r0, r7, #4294967295
 8001222:	d231      	bcs.n	8001288 <__udivmoddi4+0x2b0>
 8001224:	458c      	cmp	ip, r1
 8001226:	d92f      	bls.n	8001288 <__udivmoddi4+0x2b0>
 8001228:	3f02      	subs	r7, #2
 800122a:	4429      	add	r1, r5
 800122c:	eba1 010c 	sub.w	r1, r1, ip
 8001230:	fbb1 f0f8 	udiv	r0, r1, r8
 8001234:	fb08 1c10 	mls	ip, r8, r0, r1
 8001238:	fb00 fe09 	mul.w	lr, r0, r9
 800123c:	b299      	uxth	r1, r3
 800123e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001242:	458e      	cmp	lr, r1
 8001244:	d907      	bls.n	8001256 <__udivmoddi4+0x27e>
 8001246:	1869      	adds	r1, r5, r1
 8001248:	f100 33ff 	add.w	r3, r0, #4294967295
 800124c:	d218      	bcs.n	8001280 <__udivmoddi4+0x2a8>
 800124e:	458e      	cmp	lr, r1
 8001250:	d916      	bls.n	8001280 <__udivmoddi4+0x2a8>
 8001252:	3802      	subs	r0, #2
 8001254:	4429      	add	r1, r5
 8001256:	eba1 010e 	sub.w	r1, r1, lr
 800125a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800125e:	e73a      	b.n	80010d6 <__udivmoddi4+0xfe>
 8001260:	4637      	mov	r7, r6
 8001262:	4630      	mov	r0, r6
 8001264:	e708      	b.n	8001078 <__udivmoddi4+0xa0>
 8001266:	460f      	mov	r7, r1
 8001268:	e6e6      	b.n	8001038 <__udivmoddi4+0x60>
 800126a:	4618      	mov	r0, r3
 800126c:	e6fb      	b.n	8001066 <__udivmoddi4+0x8e>
 800126e:	4543      	cmp	r3, r8
 8001270:	d2ab      	bcs.n	80011ca <__udivmoddi4+0x1f2>
 8001272:	ebb8 0102 	subs.w	r1, r8, r2
 8001276:	eb69 020c 	sbc.w	r2, r9, ip
 800127a:	3801      	subs	r0, #1
 800127c:	4696      	mov	lr, r2
 800127e:	e7a4      	b.n	80011ca <__udivmoddi4+0x1f2>
 8001280:	4618      	mov	r0, r3
 8001282:	e7e8      	b.n	8001256 <__udivmoddi4+0x27e>
 8001284:	4608      	mov	r0, r1
 8001286:	e795      	b.n	80011b4 <__udivmoddi4+0x1dc>
 8001288:	4607      	mov	r7, r0
 800128a:	e7cf      	b.n	800122c <__udivmoddi4+0x254>
 800128c:	4681      	mov	r9, r0
 800128e:	e77b      	b.n	8001188 <__udivmoddi4+0x1b0>
 8001290:	3802      	subs	r0, #2
 8001292:	442c      	add	r4, r5
 8001294:	e747      	b.n	8001126 <__udivmoddi4+0x14e>
 8001296:	f1ae 0e02 	sub.w	lr, lr, #2
 800129a:	442b      	add	r3, r5
 800129c:	e72f      	b.n	80010fe <__udivmoddi4+0x126>
 800129e:	4638      	mov	r0, r7
 80012a0:	e707      	b.n	80010b2 <__udivmoddi4+0xda>
 80012a2:	4637      	mov	r7, r6
 80012a4:	e6e8      	b.n	8001078 <__udivmoddi4+0xa0>
 80012a6:	bf00      	nop

080012a8 <__aeabi_idiv0>:
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <ADC_Init>:
 * @retval none
 * @param hadc1 objeto do ADC_1
 *
 */
void ADC_Init(ADC_HandleTypeDef hadc1)
{
 80012ac:	b084      	sub	sp, #16
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	f107 0c08 	add.w	ip, r7, #8
 80012b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//calibração do ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80012ba:	f107 0008 	add.w	r0, r7, #8
 80012be:	f002 f855 	bl	800336c <HAL_ADCEx_Calibration_Start>
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ca:	b004      	add	sp, #16
 80012cc:	4770      	bx	lr
	...

080012d0 <ADC_GetValue>:
 * @param hadc1 objeto do ADC_1
 * @param cahannel_id id do canal a ser lido
 *
 */
uint32_t ADC_GetValue(ADC_HandleTypeDef hadc1, ADC_CHANNEL_Id channel_id)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	f107 0c08 	add.w	ip, r7, #8
 80012da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	adc_data_ready = 0;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <ADC_GetValue+0x40>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc_data, NUMBER_OF_CONVERSTION);
 80012e4:	2204      	movs	r2, #4
 80012e6:	490b      	ldr	r1, [pc, #44]	; (8001314 <ADC_GetValue+0x44>)
 80012e8:	f107 0008 	add.w	r0, r7, #8
 80012ec:	f001 fd64 	bl	8002db8 <HAL_ADC_Start_DMA>

	HAL_ADC_Stop(&hadc1);
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	f001 fd34 	bl	8002d60 <HAL_ADC_Stop>

	return adc_data[channel_id];
 80012f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <ADC_GetValue+0x44>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800130a:	b004      	add	sp, #16
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000260 	.word	0x20000260
 8001314:	20000298 	.word	0x20000298

08001318 <HAL_ADC_ConvCpltCallback>:
 *
 * Avisa que a leitura completa do adc foi realizada
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	adc_data_ready = 1;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_ADC_ConvCpltCallback+0x18>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000260 	.word	0x20000260

08001334 <LCD_Send>:
 *
 * Aciona pino enable, espera 15ms, desaciona pino enable
 *
 * @retval Nenhum
 */
void LCD_Send() {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_PINS, EN, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <LCD_Send+0x28>)
 8001340:	f002 fd1d 	bl	8003d7e <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001344:	200f      	movs	r0, #15
 8001346:	f001 fc11 	bl	8002b6c <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_PINS, EN, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <LCD_Send+0x28>)
 8001352:	f002 fd14 	bl	8003d7e <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40010c00 	.word	0x40010c00

08001360 <LCD_Write>:
 *
 * @retval Nenhum
 * @param[in] data byte a ser enviado
 * @param[in] is_data 1 se for dado, 0 se for instrução
 */
void LCD_Write(uint8_t data, bool is_data) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CTRL_PINS, RS, is_data);  //instrução / data
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	461a      	mov	r2, r3
 8001374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001378:	4825      	ldr	r0, [pc, #148]	; (8001410 <LCD_Write+0xb0>)
 800137a:	f002 fd00 	bl	8003d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_PINS, RW, 0);		//escrita
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001384:	4822      	ldr	r0, [pc, #136]	; (8001410 <LCD_Write+0xb0>)
 8001386:	f002 fcfa 	bl	8003d7e <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e017      	b.n	80013c0 <LCD_Write+0x60>
			{
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	b299      	uxth	r1, r3
				data & (1 << (i + 4)));
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3304      	adds	r3, #4
 80013a0:	2201      	movs	r2, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4013      	ands	r3, r2
 80013ae:	b25b      	sxtb	r3, r3
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	4816      	ldr	r0, [pc, #88]	; (8001410 <LCD_Write+0xb0>)
 80013b6:	f002 fce2 	bl	8003d7e <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d9e4      	bls.n	8001390 <LCD_Write+0x30>
		//00100111
	}

	LCD_Send();
 80013c6:	f7ff ffb5 	bl	8001334 <LCD_Send>

	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]
 80013ce:	e016      	b.n	80013fe <LCD_Write+0x9e>
			{
		HAL_GPIO_WritePin(DATA_PINS, (uint16_t) FRST_PIN << i, data & (1 << i));
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	b299      	uxth	r1, r3
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	2201      	movs	r2, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4013      	ands	r3, r2
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <LCD_Write+0xb0>)
 80013f4:	f002 fcc3 	bl	8003d7e <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73bb      	strb	r3, [r7, #14]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d9e5      	bls.n	80013d0 <LCD_Write+0x70>
	}

	LCD_Send();
 8001404:	f7ff ff96 	bl	8001334 <LCD_Send>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010c00 	.word	0x40010c00

08001414 <LCD_Write_Buffer>:
 *
 *
 * @retval Nenhum
 * @param[in] *data string a ser enviado
 */
void LCD_Write_Buffer(uint8_t *data) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e069      	b.n	80014f6 <LCD_Write_Buffer+0xe2>
		if(i == 17)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b11      	cmp	r3, #17
 8001426:	d103      	bne.n	8001430 <LCD_Write_Buffer+0x1c>
		{
			LCD_Write(0xC0, 0);
 8001428:	2100      	movs	r1, #0
 800142a:	20c0      	movs	r0, #192	; 0xc0
 800142c:	f7ff ff98 	bl	8001360 <LCD_Write>
		}
		//caracter espciais
		switch (*data) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2bc3      	cmp	r3, #195	; 0xc3
 8001436:	d152      	bne.n	80014de <LCD_Write_Buffer+0xca>
			case 195:
				data++;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
				switch (*data) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3ba1      	subs	r3, #161	; 0xa1
 8001444:	2b14      	cmp	r3, #20
 8001446:	d846      	bhi.n	80014d6 <LCD_Write_Buffer+0xc2>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <LCD_Write_Buffer+0x3c>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	080014a5 	.word	0x080014a5
 8001454:	080014d7 	.word	0x080014d7
 8001458:	080014c3 	.word	0x080014c3
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014d7 	.word	0x080014d7
 8001464:	080014d7 	.word	0x080014d7
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014d7 	.word	0x080014d7
 8001470:	080014af 	.word	0x080014af
 8001474:	080014d7 	.word	0x080014d7
 8001478:	080014d7 	.word	0x080014d7
 800147c:	080014d7 	.word	0x080014d7
 8001480:	080014d7 	.word	0x080014d7
 8001484:	080014d7 	.word	0x080014d7
 8001488:	080014d7 	.word	0x080014d7
 800148c:	080014d7 	.word	0x080014d7
 8001490:	080014d7 	.word	0x080014d7
 8001494:	080014d7 	.word	0x080014d7
 8001498:	080014d7 	.word	0x080014d7
 800149c:	080014d7 	.word	0x080014d7
 80014a0:	080014cd 	.word	0x080014cd
					case 161:
						LCD_Write(0, 1);
 80014a4:	2101      	movs	r1, #1
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ff5a 	bl	8001360 <LCD_Write>
						break;
 80014ac:	e013      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 169:
						LCD_Write(1, 1);
 80014ae:	2101      	movs	r1, #1
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff ff55 	bl	8001360 <LCD_Write>
						break;
 80014b6:	e00e      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 167:
						LCD_Write(2, 1);
 80014b8:	2101      	movs	r1, #1
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff ff50 	bl	8001360 <LCD_Write>
						break;
 80014c0:	e009      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 163:
						LCD_Write(3, 1);
 80014c2:	2101      	movs	r1, #1
 80014c4:	2003      	movs	r0, #3
 80014c6:	f7ff ff4b 	bl	8001360 <LCD_Write>
						break;
 80014ca:	e004      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 181:
						LCD_Write(4, 1);
 80014cc:	2101      	movs	r1, #1
 80014ce:	2004      	movs	r0, #4
 80014d0:	f7ff ff46 	bl	8001360 <LCD_Write>
						break;
 80014d4:	bf00      	nop
				}
				data++;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3301      	adds	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
				break;
 80014dc:	e008      	b.n	80014f0 <LCD_Write_Buffer+0xdc>
			default:
				LCD_Write(*data++, 1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff39 	bl	8001360 <LCD_Write>
				break;
 80014ee:	bf00      	nop
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3301      	adds	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d390      	bcc.n	8001422 <LCD_Write_Buffer+0xe>
		}
	}
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <LCD_Clear>:
/**
 * @brief limpa display e retorna cursor para primeira linha
 *
 * @retval Nenhum
 */
void LCD_Clear(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	LCD_Write(0x01, 0);
 800150c:	2100      	movs	r1, #0
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ff26 	bl	8001360 <LCD_Write>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <LCD_Seccond_Line>:
 * @brief Desloca o cursor para a posição inicial da segunda linha
 *
 * @retval Nenhum
 */
void LCD_Seccond_Line()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	LCD_Write(0xC0, 0);
 800151c:	2100      	movs	r1, #0
 800151e:	20c0      	movs	r0, #192	; 0xc0
 8001520:	f7ff ff1e 	bl	8001360 <LCD_Write>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <LCD_Create_Custom_Char>:
 *
 * @retval Nenhum
 * @param[in] loc localização para escrever o caracter
 * @param[in] *c ponteiro para o vetor de 8 bytes do caracter
 */
void LCD_Create_Custom_Char(uint8_t loc, uint8_t *c) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	if (loc < 8) {
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d819      	bhi.n	800156e <LCD_Create_Custom_Char+0x46>
		LCD_Write(0x40 + (loc * 8), 0); /* aponta para 0x40 + loc * 8 */
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	3308      	adds	r3, #8
 800153e:	b2db      	uxtb	r3, r3
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff0a 	bl	8001360 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e00a      	b.n	8001568 <LCD_Create_Custom_Char+0x40>
			LCD_Write(c[i], 1);
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2101      	movs	r1, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feff 	bl	8001360 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b07      	cmp	r3, #7
 800156c:	d9f1      	bls.n	8001552 <LCD_Create_Custom_Char+0x2a>
	}
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <LCD_Init_Custom_Characters>:
 *
 *	Define vetor de caracteres customizados e escreve na CGRAM
 *
 * @retval Nenhum
 */
void LCD_Init_Custom_Characters() {
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
	uint8_t character1[8] = { 0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <LCD_Init_Custom_Characters+0x8c>)
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001588:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character2[8] = { 0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,
 800158c:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <LCD_Init_Custom_Characters+0x90>)
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character3[8] = { 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x04,
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <LCD_Init_Custom_Characters+0x94>)
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a4:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character4[8] = { 0x1F, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 80015a8:	4a19      	ldr	r2, [pc, #100]	; (8001610 <LCD_Init_Custom_Characters+0x98>)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b2:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character5[8] = { 0x1F, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <LCD_Init_Custom_Characters+0x9c>)
 80015b8:	463b      	mov	r3, r7
 80015ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015be:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	LCD_Create_Custom_Char(0, character1);
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	4619      	mov	r1, r3
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ffad 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(1, character2);
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	4619      	mov	r1, r3
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff ffa7 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(2, character3);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7ff ffa1 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(3, character4);
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4619      	mov	r1, r3
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff ff9b 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(4, character5);
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	2004      	movs	r0, #4
 80015f8:	f7ff ff96 	bl	8001528 <LCD_Create_Custom_Char>
}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	080079d0 	.word	0x080079d0
 8001608:	080079d8 	.word	0x080079d8
 800160c:	080079e0 	.word	0x080079e0
 8001610:	080079e8 	.word	0x080079e8
 8001614:	080079f0 	.word	0x080079f0

08001618 <LCD_Init>:
 *	Escreve deslocando a mensagem para a esquerda
 *	Inicializa caracteres especiais
 *
 * @retval Nenhum
 */
void LCD_Init() {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 800161c:	200f      	movs	r0, #15
 800161e:	f001 faa5 	bl	8002b6c <HAL_Delay>
	LCD_Write(0x03, 0); // 1
 8001622:	2100      	movs	r1, #0
 8001624:	2003      	movs	r0, #3
 8001626:	f7ff fe9b 	bl	8001360 <LCD_Write>
	LCD_Write(0x03, 0); // 2
 800162a:	2100      	movs	r1, #0
 800162c:	2003      	movs	r0, #3
 800162e:	f7ff fe97 	bl	8001360 <LCD_Write>
	LCD_Write(0x03, 0); // 3
 8001632:	2100      	movs	r1, #0
 8001634:	2003      	movs	r0, #3
 8001636:	f7ff fe93 	bl	8001360 <LCD_Write>
	LCD_Write(0x02, 0); // 4
 800163a:	2100      	movs	r1, #0
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff fe8f 	bl	8001360 <LCD_Write>
	LCD_Write(0x02, 0); // 5
 8001642:	2100      	movs	r1, #0
 8001644:	2002      	movs	r0, #2
 8001646:	f7ff fe8b 	bl	8001360 <LCD_Write>
	LCD_Write(0x08, 0); // 6
 800164a:	2100      	movs	r1, #0
 800164c:	2008      	movs	r0, #8
 800164e:	f7ff fe87 	bl	8001360 <LCD_Write>
	LCD_Write(0x00, 0); // 7
 8001652:	2100      	movs	r1, #0
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fe83 	bl	8001360 <LCD_Write>
	LCD_Write(0x08, 0); // 8
 800165a:	2100      	movs	r1, #0
 800165c:	2008      	movs	r0, #8
 800165e:	f7ff fe7f 	bl	8001360 <LCD_Write>
	LCD_Write(0x00, 0); // 9
 8001662:	2100      	movs	r1, #0
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fe7b 	bl	8001360 <LCD_Write>
	LCD_Write(0x01, 0); // 10
 800166a:	2100      	movs	r1, #0
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff fe77 	bl	8001360 <LCD_Write>
	LCD_Write(0x00, 0); // 11
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fe73 	bl	8001360 <LCD_Write>
	LCD_Write(0x01, 0); // 12
 800167a:	2100      	movs	r1, #0
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fe6f 	bl	8001360 <LCD_Write>

	LCD_Write(0x28, 0); //2 linhas 5x7 (4 bits)
 8001682:	2100      	movs	r1, #0
 8001684:	2028      	movs	r0, #40	; 0x28
 8001686:	f7ff fe6b 	bl	8001360 <LCD_Write>
	LCD_Write(0x0E, 0); //Display aceso c/ cursor fixo
 800168a:	2100      	movs	r1, #0
 800168c:	200e      	movs	r0, #14
 800168e:	f7ff fe67 	bl	8001360 <LCD_Write>
	LCD_Write(0x06, 0); //Escreve deslocando a mensagem para a esquerda
 8001692:	2100      	movs	r1, #0
 8001694:	2006      	movs	r0, #6
 8001696:	f7ff fe63 	bl	8001360 <LCD_Write>

	LCD_Init_Custom_Characters();
 800169a:	f7ff ff6d 	bl	8001578 <LCD_Init_Custom_Characters>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <PWM_Init>:
 * @retval none
 * @param htim2 objeto do Timer2
 *
 */
void PWM_Init(TIM_HandleTypeDef* htim2)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 80016aa:	2100      	movs	r1, #0
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f003 fa03 	bl	8004ab8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 80016b2:	2104      	movs	r1, #4
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f003 f9ff 	bl	8004ab8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 80016ba:	2108      	movs	r1, #8
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f003 f9fb 	bl	8004ab8 <HAL_TIM_PWM_Start>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <PWM_Increase>:
 * @retval none
 * @param pwm_data objeto que contém faixa de pwm e o canal do mesmo
 *
 */
void PWM_Increase(PWM_TypeDef pwm_data)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b08b      	sub	sp, #44	; 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	463b      	mov	r3, r7
 80016d4:	e883 0003 	stmia.w	r3, {r0, r1}
	//converte de porcentagem para valor
	uint32_t duty_value_max = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	492f      	ldr	r1, [pc, #188]	; (8001798 <PWM_Increase+0xcc>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fa45 	bl	8000b6c <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fc07 	bl	8000ef8 <__aeabi_f2uiz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	61fb      	str	r3, [r7, #28]
	uint32_t duty_value = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t init_time = HAL_GetTick();
 80016f2:	f001 fa31 	bl	8002b58 <HAL_GetTick>
 80016f6:	6238      	str	r0, [r7, #32]
	uint32_t current_time = init_time;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	61bb      	str	r3, [r7, #24]

	uint32_t inc = duty_value_max / 200.0;
 80016fc:	69f8      	ldr	r0, [r7, #28]
 80016fe:	f7fe fe7b 	bl	80003f8 <__aeabi_ui2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <PWM_Increase+0xd0>)
 8001708:	f7ff f81a 	bl	8000740 <__aeabi_ddiv>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	f7ff f8fc 	bl	8000910 <__aeabi_d2uiz>
 8001718:	4603      	mov	r3, r0
 800171a:	617b      	str	r3, [r7, #20]

	uint32_t first_time = HAL_GetTick();
 800171c:	f001 fa1c 	bl	8002b58 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]
	while(duty_value < duty_value_max)
 8001722:	e02d      	b.n	8001780 <PWM_Increase+0xb4>
	{
		//Como identificar canal?
		if(pwm_data.pwm_channel == 1)
 8001724:	783b      	ldrb	r3, [r7, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d104      	bne.n	8001734 <PWM_Increase+0x68>
		{
			TIM2->CCR1 = duty_value;
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	6353      	str	r3, [r2, #52]	; 0x34
 8001732:	e00e      	b.n	8001752 <PWM_Increase+0x86>
		}
		else if(pwm_data.pwm_channel == 2)
 8001734:	783b      	ldrb	r3, [r7, #0]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d104      	bne.n	8001744 <PWM_Increase+0x78>
		{
			TIM2->CCR2 = duty_value;
 800173a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	6393      	str	r3, [r2, #56]	; 0x38
 8001742:	e006      	b.n	8001752 <PWM_Increase+0x86>
		}
		else if(pwm_data.pwm_channel == 3)
 8001744:	783b      	ldrb	r3, [r7, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d103      	bne.n	8001752 <PWM_Increase+0x86>
		{
			TIM2->CCR3 = duty_value;
 800174a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
		duty_value += inc;
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f001 fa06 	bl	8002b6c <HAL_Delay>

		//pisca led
		current_time = HAL_GetTick();
 8001760:	f001 f9fa 	bl	8002b58 <HAL_GetTick>
 8001764:	61b8      	str	r0, [r7, #24]
		if(current_time > (init_time + 300)){
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	429a      	cmp	r2, r3
 8001770:	d906      	bls.n	8001780 <PWM_Increase+0xb4>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001776:	480a      	ldr	r0, [pc, #40]	; (80017a0 <PWM_Increase+0xd4>)
 8001778:	f002 fb19 	bl	8003dae <HAL_GPIO_TogglePin>
			init_time = current_time;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	623b      	str	r3, [r7, #32]
	while(duty_value < duty_value_max)
 8001780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	429a      	cmp	r2, r3
 8001786:	d3cd      	bcc.n	8001724 <PWM_Increase+0x58>
		}
	}
	uint32_t last_time = HAL_GetTick();
 8001788:	f001 f9e6 	bl	8002b58 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]
	return;
 800178e:	bf00      	nop
}
 8001790:	372c      	adds	r7, #44	; 0x2c
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	4526a000 	.word	0x4526a000
 800179c:	40690000 	.word	0x40690000
 80017a0:	40011000 	.word	0x40011000

080017a4 <PWM_Decrease>:
 * @retval none
 * @param pwm_data objeto que contém faixa de pwm e o canal do mesmo.
 *
 */
void PWM_Decrease(PWM_TypeDef pwm_data)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	463b      	mov	r3, r7
 80017ac:	e883 0003 	stmia.w	r3, {r0, r1}
	//converte de porcentagem para valor
	uint32_t duty_value_max = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4922      	ldr	r1, [pc, #136]	; (800183c <PWM_Decrease+0x98>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f9d9 	bl	8000b6c <__aeabi_fmul>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb9b 	bl	8000ef8 <__aeabi_f2uiz>
 80017c2:	4603      	mov	r3, r0
 80017c4:	617b      	str	r3, [r7, #20]
	uint32_t init_time = HAL_GetTick();
 80017c6:	f001 f9c7 	bl	8002b58 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]
	uint32_t current_time = init_time;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	60fb      	str	r3, [r7, #12]

	while(duty_value_max > 0)
 80017d0:	e02c      	b.n	800182c <PWM_Decrease+0x88>
	{
		if(pwm_data.pwm_channel == 1)
 80017d2:	783b      	ldrb	r3, [r7, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d104      	bne.n	80017e2 <PWM_Decrease+0x3e>
		{
			TIM2->CCR1 = duty_value_max;
 80017d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	6353      	str	r3, [r2, #52]	; 0x34
 80017e0:	e00e      	b.n	8001800 <PWM_Decrease+0x5c>
		}
		else if(pwm_data.pwm_channel == 2)
 80017e2:	783b      	ldrb	r3, [r7, #0]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d104      	bne.n	80017f2 <PWM_Decrease+0x4e>
		{
			TIM2->CCR2 = duty_value_max;
 80017e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	6393      	str	r3, [r2, #56]	; 0x38
 80017f0:	e006      	b.n	8001800 <PWM_Decrease+0x5c>
		}
		else if(pwm_data.pwm_channel == 3)
 80017f2:	783b      	ldrb	r3, [r7, #0]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d103      	bne.n	8001800 <PWM_Decrease+0x5c>
		{
			TIM2->CCR3 = duty_value_max;
 80017f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
		duty_value_max -= 1;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3b01      	subs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 8001806:	2001      	movs	r0, #1
 8001808:	f001 f9b0 	bl	8002b6c <HAL_Delay>

		//pisca led
		current_time = HAL_GetTick();
 800180c:	f001 f9a4 	bl	8002b58 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]
		if(current_time > (init_time + 300)){
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	429a      	cmp	r2, r3
 800181c:	d906      	bls.n	800182c <PWM_Decrease+0x88>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <PWM_Decrease+0x9c>)
 8001824:	f002 fac3 	bl	8003dae <HAL_GPIO_TogglePin>
			init_time = current_time;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	613b      	str	r3, [r7, #16]
	while(duty_value_max > 0)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1cf      	bne.n	80017d2 <PWM_Decrease+0x2e>
		}
	}
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	4526a000 	.word	0x4526a000
 8001840:	40011000 	.word	0x40011000

08001844 <CAPSULE_Verify_Insertion>:
 *
 * @retval CAPSULE_Recipe_TypeDef
 *
 */
CAPSULE_Recipe_TypeDef CAPSULE_Verify_Insertion()
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b0bc      	sub	sp, #240	; 0xf0
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	uint8_t bit_0 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_0);
 800184c:	2108      	movs	r1, #8
 800184e:	4861      	ldr	r0, [pc, #388]	; (80019d4 <CAPSULE_Verify_Insertion+0x190>)
 8001850:	f002 fa7e 	bl	8003d50 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t bit_1 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_1);
 800185a:	2110      	movs	r1, #16
 800185c:	485d      	ldr	r0, [pc, #372]	; (80019d4 <CAPSULE_Verify_Insertion+0x190>)
 800185e:	f002 fa77 	bl	8003d50 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	uint8_t bit_2 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_2);
 8001868:	2120      	movs	r1, #32
 800186a:	485a      	ldr	r0, [pc, #360]	; (80019d4 <CAPSULE_Verify_Insertion+0x190>)
 800186c:	f002 fa70 	bl	8003d50 <HAL_GPIO_ReadPin>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	//monta número que identifica capsula
	CAPSULE_Type capsule_type = bit_0 | (bit_1 << 1) | (bit_2 << 2);
 8001876:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	b25a      	sxtb	r2, r3
 800187e:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 8001882:	4313      	orrs	r3, r2
 8001884:	b25a      	sxtb	r2, r3
 8001886:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	b25b      	sxtb	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b25b      	sxtb	r3, r3
 8001892:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

	CAPSULE_Recipe_TypeDef recipe;

	//inicializa receitas
	RECIPE_NONE_CAPSULE_TYPE_DATA(recipe_none);
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <CAPSULE_Verify_Insertion+0x194>)
 8001898:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800189c:	461d      	mov	r5, r3
 800189e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_WATER_DATA(recipe_water);
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <CAPSULE_Verify_Insertion+0x198>)
 80018ac:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80018b0:	461d      	mov	r5, r3
 80018b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SPARKLINK_WATER_DATA(recipe_sparklink_water);
 80018be:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <CAPSULE_Verify_Insertion+0x19c>)
 80018c0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80018c4:	461d      	mov	r5, r3
 80018c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_ICE_TEA_DATA(recipe_ice_tea);
 80018d2:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <CAPSULE_Verify_Insertion+0x1a0>)
 80018d4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80018d8:	461d      	mov	r5, r3
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_HOT_TEA_DATA(recipe_hot_tea);
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <CAPSULE_Verify_Insertion+0x1a4>)
 80018e8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80018ec:	461d      	mov	r5, r3
 80018ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SODA_DATA(recipe_soda);
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <CAPSULE_Verify_Insertion+0x1a8>)
 80018fc:	f107 040c 	add.w	r4, r7, #12
 8001900:	461d      	mov	r5, r3
 8001902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001906:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800190a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (capsule_type) {
 800190e:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8001912:	2b05      	cmp	r3, #5
 8001914:	d850      	bhi.n	80019b8 <CAPSULE_Verify_Insertion+0x174>
 8001916:	a201      	add	r2, pc, #4	; (adr r2, 800191c <CAPSULE_Verify_Insertion+0xd8>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001935 	.word	0x08001935
 8001920:	0800194b 	.word	0x0800194b
 8001924:	08001961 	.word	0x08001961
 8001928:	08001977 	.word	0x08001977
 800192c:	0800198d 	.word	0x0800198d
 8001930:	080019a3 	.word	0x080019a3
		case NONE_CAPSULE_TYPE:
			return recipe_none;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	461d      	mov	r5, r3
 8001938:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800193c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001940:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001944:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001948:	e040      	b.n	80019cc <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_WATER:
				return recipe_water;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	461d      	mov	r5, r3
 800194e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800195a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800195e:	e035      	b.n	80019cc <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SPARKLINK_WATER:
			return recipe_sparklink_water;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	461d      	mov	r5, r3
 8001964:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001970:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001974:	e02a      	b.n	80019cc <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_ICE_TEA:
				return recipe_ice_tea;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	461d      	mov	r5, r3
 800197a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800197e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001982:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001986:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800198a:	e01f      	b.n	80019cc <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_HOT_TEA:
				return recipe_hot_tea;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	461d      	mov	r5, r3
 8001990:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001998:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800199c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019a0:	e014      	b.n	80019cc <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SODA:
				return recipe_soda;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	461d      	mov	r5, r3
 80019a6:	f107 040c 	add.w	r4, r7, #12
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019b6:	e009      	b.n	80019cc <CAPSULE_Verify_Insertion+0x188>
				break;
		default:
			return recipe_none;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	461d      	mov	r5, r3
 80019bc:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			break;
	}

}
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	37f0      	adds	r7, #240	; 0xf0
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	080079f8 	.word	0x080079f8
 80019dc:	08007a18 	.word	0x08007a18
 80019e0:	08007a38 	.word	0x08007a38
 80019e4:	08007a58 	.word	0x08007a58
 80019e8:	08007a78 	.word	0x08007a78
 80019ec:	08007a98 	.word	0x08007a98

080019f0 <CONTROLLER_Execute>:
 * @param hadc objeto do ADC_1
 * @param capsule capsula que determina se precisará aquecer ou resfriar a água.
 *
 */
void CONTROLLER_Execute(ADC_HandleTypeDef hadc, CAPSULE_Recipe_TypeDef capsule)
{
 80019f0:	b084      	sub	sp, #16
 80019f2:	b5b0      	push	{r4, r5, r7, lr}
 80019f4:	b0a6      	sub	sp, #152	; 0x98
 80019f6:	af0a      	add	r7, sp, #40	; 0x28
 80019f8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80019fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int32_t sensor_signal = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t sensor_temp = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	65bb      	str	r3, [r7, #88]	; 0x58
	int32_t error_signal = 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t ref_sinal = capsule.water_temp;
 8001a0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a10:	657b      	str	r3, [r7, #84]	; 0x54
	ADC_CHANNEL_Id sensor_channel_id;
	uint32_t init_time = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t current_time = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60

	Controler_TypeDef block;
	LCD_Clear();
 8001a1a:	f7ff fd75 	bl	8001508 <LCD_Clear>

	Y3(natural_water_output);
 8001a1e:	4a84      	ldr	r2, [pc, #528]	; (8001c30 <CONTROLLER_Execute+0x240>)
 8001a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a28:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (capsule.water_type) {
 8001a2c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d004      	beq.n	8001a3e <CONTROLLER_Execute+0x4e>
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d03a      	beq.n	8001aae <CONTROLLER_Execute+0xbe>
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d01d      	beq.n	8001a78 <CONTROLLER_Execute+0x88>
		case NATURAL_WATER:
			block.output = natural_water_output;
			goto activate_pump;
			break;
		default:
			break;
 8001a3c:	e040      	b.n	8001ac0 <CONTROLLER_Execute+0xd0>
			LCD_Write_Buffer("Aquecendo a água.");
 8001a3e:	487d      	ldr	r0, [pc, #500]	; (8001c34 <CONTROLLER_Execute+0x244>)
 8001a40:	f7ff fce8 	bl	8001414 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_HEATER_DATA(heater_block);
 8001a44:	4b7c      	ldr	r3, [pc, #496]	; (8001c38 <CONTROLLER_Execute+0x248>)
 8001a46:	f107 0414 	add.w	r4, r7, #20
 8001a4a:	461d      	mov	r5, r3
 8001a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a50:	682b      	ldr	r3, [r5, #0]
 8001a52:	6023      	str	r3, [r4, #0]
			block = heater_block;
 8001a54:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001a58:	f107 0514 	add.w	r5, r7, #20
 8001a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	6023      	str	r3, [r4, #0]
			PWM_Increase(block.pwm);
 8001a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a6c:	f7ff fe2e 	bl	80016cc <PWM_Increase>
			sensor_channel_id = heater_block.adc_channel_id;
 8001a70:	7f3b      	ldrb	r3, [r7, #28]
 8001a72:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			break;
 8001a76:	e023      	b.n	8001ac0 <CONTROLLER_Execute+0xd0>
			LCD_Write_Buffer("Refrigerando a água.");
 8001a78:	4870      	ldr	r0, [pc, #448]	; (8001c3c <CONTROLLER_Execute+0x24c>)
 8001a7a:	f7ff fccb 	bl	8001414 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_COOLER_DATA(cooler_block);
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <CONTROLLER_Execute+0x250>)
 8001a80:	463c      	mov	r4, r7
 8001a82:	461d      	mov	r5, r3
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	6023      	str	r3, [r4, #0]
			block = cooler_block;
 8001a8c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001a90:	463d      	mov	r5, r7
 8001a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	6023      	str	r3, [r4, #0]
			PWM_Increase(block.pwm);
 8001a9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aa2:	f7ff fe13 	bl	80016cc <PWM_Increase>
			sensor_channel_id = cooler_block.adc_channel_id;
 8001aa6:	7a3b      	ldrb	r3, [r7, #8]
 8001aa8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			break;
 8001aac:	e008      	b.n	8001ac0 <CONTROLLER_Execute+0xd0>
			block.output = natural_water_output;
 8001aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ab2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aba:	e883 0003 	stmia.w	r3, {r0, r1}
 8001abe:	e03d      	b.n	8001b3c <CONTROLLER_Execute+0x14c>
	}

	init_time = HAL_GetTick();
 8001ac0:	f001 f84a 	bl	8002b58 <HAL_GetTick>
 8001ac4:	6678      	str	r0, [r7, #100]	; 0x64
	current_time = init_time;
 8001ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ac8:	663b      	str	r3, [r7, #96]	; 0x60
	//fica no while até chegar na temperatura desejada
	while(error_signal != 0)
 8001aca:	e02e      	b.n	8001b2a <CONTROLLER_Execute+0x13a>
	{
		sensor_signal = ADC_GetValue(hadc, sensor_channel_id);
 8001acc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001ad0:	9308      	str	r3, [sp, #32]
 8001ad2:	466d      	mov	r5, sp
 8001ad4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001adc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ae4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aea:	f7ff fbf1 	bl	80012d0 <ADC_GetValue>
 8001aee:	4603      	mov	r3, r0
 8001af0:	65fb      	str	r3, [r7, #92]	; 0x5c

		sensor_temp = UTILS_To_Temp(sensor_signal);
 8001af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 ff87 	bl	8002a08 <UTILS_To_Temp>
 8001afa:	65b8      	str	r0, [r7, #88]	; 0x58

		error_signal = ref_sinal - sensor_temp;
 8001afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	66fb      	str	r3, [r7, #108]	; 0x6c

		HAL_Delay(50);
 8001b04:	2032      	movs	r0, #50	; 0x32
 8001b06:	f001 f831 	bl	8002b6c <HAL_Delay>
		current_time = HAL_GetTick();
 8001b0a:	f001 f825 	bl	8002b58 <HAL_GetTick>
 8001b0e:	6638      	str	r0, [r7, #96]	; 0x60
		if(current_time > (init_time + 300)){
 8001b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b12:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d906      	bls.n	8001b2a <CONTROLLER_Execute+0x13a>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b20:	4848      	ldr	r0, [pc, #288]	; (8001c44 <CONTROLLER_Execute+0x254>)
 8001b22:	f002 f944 	bl	8003dae <HAL_GPIO_TogglePin>
			init_time = current_time;
 8001b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b28:	667b      	str	r3, [r7, #100]	; 0x64
	while(error_signal != 0)
 8001b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1cd      	bne.n	8001acc <CONTROLLER_Execute+0xdc>
		}
	}

	PWM_Decrease(block.pwm);
 8001b30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b38:	f7ff fe34 	bl	80017a4 <PWM_Decrease>

	activate_pump: ;

	LCD_Clear();
 8001b3c:	f7ff fce4 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer("Ativando bomba...");
 8001b40:	4841      	ldr	r0, [pc, #260]	; (8001c48 <CONTROLLER_Execute+0x258>)
 8001b42:	f7ff fc67 	bl	8001414 <LCD_Write_Buffer>

	//ativa bomba de saída
	PWM_TypeDef b1 = {.duty_cycle = 1, .pwm_channel = 3};
 8001b46:	4a41      	ldr	r2, [pc, #260]	; (8001c4c <CONTROLLER_Execute+0x25c>)
 8001b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b50:	e883 0003 	stmia.w	r3, {r0, r1}
	PWM_Increase(b1);
 8001b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b5c:	f7ff fdb6 	bl	80016cc <PWM_Increase>

	LCD_Clear();
 8001b60:	f7ff fcd2 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer("-Despejando água");
 8001b64:	483a      	ldr	r0, [pc, #232]	; (8001c50 <CONTROLLER_Execute+0x260>)
 8001b66:	f7ff fc55 	bl	8001414 <LCD_Write_Buffer>


	init_time = HAL_GetTick();
 8001b6a:	f000 fff5 	bl	8002b58 <HAL_GetTick>
 8001b6e:	6678      	str	r0, [r7, #100]	; 0x64
	current_time = init_time;
 8001b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b72:	663b      	str	r3, [r7, #96]	; 0x60

	//se precisar de CO2, ativa CO2
	Y4(co2_output);
 8001b74:	4a37      	ldr	r2, [pc, #220]	; (8001c54 <CONTROLLER_Execute+0x264>)
 8001b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b7e:	e883 0003 	stmia.w	r3, {r0, r1}
	if(capsule.co2_time > 0){
 8001b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00c      	beq.n	8001ba4 <CONTROLLER_Execute+0x1b4>
		LCD_Seccond_Line();
 8001b8a:	f7ff fcc5 	bl	8001518 <LCD_Seccond_Line>
		LCD_Write_Buffer("-Despejando CO2");
 8001b8e:	4832      	ldr	r0, [pc, #200]	; (8001c58 <CONTROLLER_Execute+0x268>)
 8001b90:	f7ff fc40 	bl	8001414 <LCD_Write_Buffer>
		HAL_GPIO_WritePin(co2_output.gpio_class, co2_output.gpio_pin, GPIO_PIN_SET);
 8001b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b96:	4618      	mov	r0, r3
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f002 f8ed 	bl	8003d7e <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_SET);
 8001ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2201      	movs	r2, #1
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f002 f8e5 	bl	8003d7e <HAL_GPIO_WritePin>

	//aguarda até passar o tempo de despejo de água e de CO2.
	while(current_time < (init_time + capsule.water_time) || current_time < (init_time + capsule.co2_time)){
 8001bb4:	e020      	b.n	8001bf8 <CONTROLLER_Execute+0x208>
		current_time = HAL_GetTick();
 8001bb6:	f000 ffcf 	bl	8002b58 <HAL_GetTick>
 8001bba:	6638      	str	r0, [r7, #96]	; 0x60

		//se chegou no tempo desejado de água, desliga.
		if(current_time >=  (init_time + capsule.water_time)){
 8001bbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bc2:	4413      	add	r3, r2
 8001bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d307      	bcc.n	8001bda <CONTROLLER_Execute+0x1ea>
			HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_RESET);
 8001bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bcc:	4618      	mov	r0, r3
 8001bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f002 f8d2 	bl	8003d7e <HAL_GPIO_WritePin>
		}

		//se chegou no tempo desejado de co2, desliga.
		if(current_time >= (init_time + capsule.co2_time)){
 8001bda:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001be0:	4413      	add	r3, r2
 8001be2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d307      	bcc.n	8001bf8 <CONTROLLER_Execute+0x208>
			HAL_GPIO_WritePin(co2_output.gpio_class, co2_output.gpio_pin, GPIO_PIN_RESET);
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	4618      	mov	r0, r3
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f002 f8c3 	bl	8003d7e <HAL_GPIO_WritePin>
	while(current_time < (init_time + capsule.water_time) || current_time < (init_time + capsule.co2_time)){
 8001bf8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bfe:	4413      	add	r3, r2
 8001c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3d7      	bcc.n	8001bb6 <CONTROLLER_Execute+0x1c6>
 8001c06:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c0c:	4413      	add	r3, r2
 8001c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3d0      	bcc.n	8001bb6 <CONTROLLER_Execute+0x1c6>
		}
	}
	PWM_Decrease(b1);
 8001c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c1c:	f7ff fdc2 	bl	80017a4 <PWM_Decrease>
	return;
 8001c20:	bf00      	nop
}
 8001c22:	3770      	adds	r7, #112	; 0x70
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c2a:	b004      	add	sp, #16
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	08007b1c 	.word	0x08007b1c
 8001c34:	08007ab8 	.word	0x08007ab8
 8001c38:	08007b24 	.word	0x08007b24
 8001c3c:	08007acc 	.word	0x08007acc
 8001c40:	08007b38 	.word	0x08007b38
 8001c44:	40011000 	.word	0x40011000
 8001c48:	08007ae4 	.word	0x08007ae4
 8001c4c:	08007b4c 	.word	0x08007b4c
 8001c50:	08007af8 	.word	0x08007af8
 8001c54:	08007b54 	.word	0x08007b54
 8001c58:	08007b0c 	.word	0x08007b0c

08001c5c <Get_Button_Pressed>:
 *
 * @retval Pressed_Type Tipo do botão pressionado
 *
 */
Pressed_Type Get_Button_Pressed()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
	BUTTON_CONFIRMAR(confirm_button);
 8001c62:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <Get_Button_Pressed+0xc0>)
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c6c:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_CANCELAR(cancel_button);
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <Get_Button_Pressed+0xc4>)
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c7a:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_INCREASE(increase_button);
 8001c7e:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <Get_Button_Pressed+0xc8>)
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c88:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_DECREASE(decrease_button);
 8001c8c:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <Get_Button_Pressed+0xcc>)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c94:	e883 0003 	stmia.w	r3, {r0, r1}

	while(1)
	{
		if(HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin)){
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f002 f854 	bl	8003d50 <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <Get_Button_Pressed+0x56>
			return CONFIRM_PRESSED;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e030      	b.n	8001d14 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(cancel_button.gpio_class, cancel_button.gpio_pin)){
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f002 f847 	bl	8003d50 <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <Get_Button_Pressed+0x70>
			return CANCEL_PRESSED;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e023      	b.n	8001d14 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(increase_button.gpio_class, increase_button.gpio_pin)){
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f002 f83a 	bl	8003d50 <HAL_GPIO_ReadPin>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <Get_Button_Pressed+0x8a>
			return INCREASE_PRESSED;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e016      	b.n	8001d14 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(decrease_button.gpio_class, decrease_button.gpio_pin)){
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	f002 f82d 	bl	8003d50 <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <Get_Button_Pressed+0xa4>
			return DECREASE_PRESSED;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e009      	b.n	8001d14 <Get_Button_Pressed+0xb8>
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d04:	4809      	ldr	r0, [pc, #36]	; (8001d2c <Get_Button_Pressed+0xd0>)
 8001d06:	f002 f852 	bl	8003dae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001d0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d0e:	f000 ff2d 	bl	8002b6c <HAL_Delay>
		if(HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin)){
 8001d12:	e7c1      	b.n	8001c98 <Get_Button_Pressed+0x3c>
	}
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	08007b5c 	.word	0x08007b5c
 8001d20:	08007b64 	.word	0x08007b64
 8001d24:	08007b6c 	.word	0x08007b6c
 8001d28:	08007b74 	.word	0x08007b74
 8001d2c:	40011000 	.word	0x40011000

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b0a5      	sub	sp, #148	; 0x94
 8001d34:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f000 feb7 	bl	8002aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 f889 	bl	8001e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f000 fa43 	bl	80021c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d42:	f000 fa23 	bl	800218c <MX_DMA_Init>
  MX_TIM2_Init();
 8001d46:	f000 f995 	bl	8002074 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001d4a:	f000 f8d9 	bl	8001f00 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d4e:	f000 f941 	bl	8001fd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  //inicializa LCD em modo 4 bits
  LCD_Init();
 8001d52:	f7ff fc61 	bl	8001618 <LCD_Init>
  ADC_Init(hadc1);
 8001d56:	4e3a      	ldr	r6, [pc, #232]	; (8001e40 <main+0x110>)
 8001d58:	466d      	mov	r5, sp
 8001d5a:	f106 0410 	add.w	r4, r6, #16
 8001d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d6a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d6e:	f7ff fa9d 	bl	80012ac <ADC_Init>
  HAL_TIM_Base_Start(&htim1);
 8001d72:	4834      	ldr	r0, [pc, #208]	; (8001e44 <main+0x114>)
 8001d74:	f002 fdfe 	bl	8004974 <HAL_TIM_Base_Start>
  PWM_Init(&htim2);
 8001d78:	4833      	ldr	r0, [pc, #204]	; (8001e48 <main+0x118>)
 8001d7a:	f7ff fc92 	bl	80016a2 <PWM_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  STATE current_state = STATE_SHOWING_CLOCK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	switch (current_state) {
 8001d84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <main+0x62>
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d009      	beq.n	8001da4 <main+0x74>
				current_state = STATE_SHOWING_CLOCK;
			}
			current_state = STATE_SHOWING_CLOCK;
			break;
		default:
			break;
 8001d90:	e04b      	b.n	8001e2a <main+0xfa>
			capsule = STATE_Show_Clock();
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fa9a 	bl	80022d0 <STATE_Show_Clock>
			current_state = STATE_STARTING_PROCESS;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001da2:	e042      	b.n	8001e2a <main+0xfa>
			capsule = STATE_Starting_Process(capsule, hadc1);
 8001da4:	463e      	mov	r6, r7
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <main+0x110>)
 8001da8:	ac05      	add	r4, sp, #20
 8001daa:	461d      	mov	r5, r3
 8001dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dbc:	466d      	mov	r5, sp
 8001dbe:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	602b      	str	r3, [r5, #0]
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd0:	4630      	mov	r0, r6
 8001dd2:	f000 fad3 	bl	800237c <STATE_Starting_Process>
 8001dd6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001dda:	463d      	mov	r5, r7
 8001ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(capsule.capsule_type != NONE_CAPSULE_TYPE)
 8001de8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d018      	beq.n	8001e22 <main+0xf2>
				STATE_Started_Process(capsule, hadc1);
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <main+0x110>)
 8001df2:	ac04      	add	r4, sp, #16
 8001df4:	461d      	mov	r5, r3
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e06:	466c      	mov	r4, sp
 8001e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e18:	f000 fc38 	bl	800268c <STATE_Started_Process>
				current_state = STATE_SHOWING_CLOCK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			current_state = STATE_SHOWING_CLOCK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001e28:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <main+0x11c>)
 8001e30:	f001 ffbd 	bl	8003dae <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8001e34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e38:	f000 fe98 	bl	8002b6c <HAL_Delay>
	switch (current_state) {
 8001e3c:	e7a2      	b.n	8001d84 <main+0x54>
 8001e3e:	bf00      	nop
 8001e40:	200002a8 	.word	0x200002a8
 8001e44:	2000031c 	.word	0x2000031c
 8001e48:	20000364 	.word	0x20000364
 8001e4c:	40011000 	.word	0x40011000

08001e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	; 0x50
 8001e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5a:	2228      	movs	r2, #40	; 0x28
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fc3c 	bl	80056dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e84:	2301      	movs	r3, #1
 8001e86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e88:	2310      	movs	r3, #16
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001e94:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 ff9e 	bl	8003de0 <HAL_RCC_OscConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001eaa:	f000 fa0b 	bl	80022c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eae:	230f      	movs	r3, #15
 8001eb0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 fa08 	bl	80042e0 <HAL_RCC_ClockConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001ed6:	f000 f9f5 	bl	80022c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eda:	2302      	movs	r3, #2
 8001edc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fb82 	bl	80045f0 <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ef2:	f000 f9e7 	bl	80022c4 <Error_Handler>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3750      	adds	r7, #80	; 0x50
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f12:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <MX_ADC1_Init+0xd0>)
 8001f14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f2c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f3e:	4823      	ldr	r0, [pc, #140]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f40:	f000 fe36 	bl	8002bb0 <HAL_ADC_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001f4a:	f000 f9bb 	bl	80022c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481b      	ldr	r0, [pc, #108]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f60:	f001 f81a 	bl	8002f98 <HAL_ADC_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f6a:	f000 f9ab 	bl	80022c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f6e:	2306      	movs	r3, #6
 8001f70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f72:	2302      	movs	r3, #2
 8001f74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4814      	ldr	r0, [pc, #80]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f7c:	f001 f80c 	bl	8002f98 <HAL_ADC_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001f86:	f000 f99d 	bl	80022c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001f98:	f000 fffe 	bl	8002f98 <HAL_ADC_ConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001fa2:	f000 f98f 	bl	80022c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001faa:	2304      	movs	r3, #4
 8001fac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <MX_ADC1_Init+0xcc>)
 8001fb4:	f000 fff0 	bl	8002f98 <HAL_ADC_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001fbe:	f000 f981 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200002a8 	.word	0x200002a8
 8001fd0:	40012400 	.word	0x40012400

08001fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_TIM1_Init+0x98>)
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <MX_TIM1_Init+0x9c>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 56 - 1;
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <MX_TIM1_Init+0x98>)
 8001ff8:	2237      	movs	r2, #55	; 0x37
 8001ffa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_TIM1_Init+0x98>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_TIM1_Init+0x98>)
 8002004:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002008:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_TIM1_Init+0x98>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <MX_TIM1_Init+0x98>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_TIM1_Init+0x98>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800201c:	4813      	ldr	r0, [pc, #76]	; (800206c <MX_TIM1_Init+0x98>)
 800201e:	f002 fc59 	bl	80048d4 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002028:	f000 f94c 	bl	80022c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <MX_TIM1_Init+0x98>)
 800203a:	f002 fe9d 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002044:	f000 f93e 	bl	80022c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_TIM1_Init+0x98>)
 8002056:	f003 f9eb 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002060:	f000 f930 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000031c 	.word	0x2000031c
 8002070:	40012c00 	.word	0x40012c00

08002074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	615a      	str	r2, [r3, #20]
 80020a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <MX_TIM2_Init+0x114>)
 80020a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <MX_TIM2_Init+0x114>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b35      	ldr	r3, [pc, #212]	; (8002188 <MX_TIM2_Init+0x114>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2667 - 1;
 80020b8:	4b33      	ldr	r3, [pc, #204]	; (8002188 <MX_TIM2_Init+0x114>)
 80020ba:	f640 226a 	movw	r2, #2666	; 0xa6a
 80020be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b31      	ldr	r3, [pc, #196]	; (8002188 <MX_TIM2_Init+0x114>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <MX_TIM2_Init+0x114>)
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020cc:	482e      	ldr	r0, [pc, #184]	; (8002188 <MX_TIM2_Init+0x114>)
 80020ce:	f002 fc01 	bl	80048d4 <HAL_TIM_Base_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020d8:	f000 f8f4 	bl	80022c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	4619      	mov	r1, r3
 80020e8:	4827      	ldr	r0, [pc, #156]	; (8002188 <MX_TIM2_Init+0x114>)
 80020ea:	f002 fe45 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020f4:	f000 f8e6 	bl	80022c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020f8:	4823      	ldr	r0, [pc, #140]	; (8002188 <MX_TIM2_Init+0x114>)
 80020fa:	f002 fc85 	bl	8004a08 <HAL_TIM_PWM_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002104:	f000 f8de 	bl	80022c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002110:	f107 0320 	add.w	r3, r7, #32
 8002114:	4619      	mov	r1, r3
 8002116:	481c      	ldr	r0, [pc, #112]	; (8002188 <MX_TIM2_Init+0x114>)
 8002118:	f003 f98a 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002122:	f000 f8cf 	bl	80022c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002126:	2360      	movs	r3, #96	; 0x60
 8002128:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2200      	movs	r2, #0
 800213a:	4619      	mov	r1, r3
 800213c:	4812      	ldr	r0, [pc, #72]	; (8002188 <MX_TIM2_Init+0x114>)
 800213e:	f002 fd5d 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002148:	f000 f8bc 	bl	80022c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2204      	movs	r2, #4
 8002150:	4619      	mov	r1, r3
 8002152:	480d      	ldr	r0, [pc, #52]	; (8002188 <MX_TIM2_Init+0x114>)
 8002154:	f002 fd52 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800215e:	f000 f8b1 	bl	80022c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2208      	movs	r2, #8
 8002166:	4619      	mov	r1, r3
 8002168:	4807      	ldr	r0, [pc, #28]	; (8002188 <MX_TIM2_Init+0x114>)
 800216a:	f002 fd47 	bl	8004bfc <HAL_TIM_PWM_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002174:	f000 f8a6 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <MX_TIM2_Init+0x114>)
 800217a:	f000 fb85 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800217e:	bf00      	nop
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000364 	.word	0x20000364

0800218c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_DMA_Init+0x38>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <MX_DMA_Init+0x38>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6153      	str	r3, [r2, #20]
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_DMA_Init+0x38>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	200b      	movs	r0, #11
 80021b0:	f001 fa4f 	bl	8003652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021b4:	200b      	movs	r0, #11
 80021b6:	f001 fa68 	bl	800368a <HAL_NVIC_EnableIRQ>

}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021dc:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <MX_GPIO_Init+0xec>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <MX_GPIO_Init+0xec>)
 80021e2:	f043 0310 	orr.w	r3, r3, #16
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <MX_GPIO_Init+0xec>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <MX_GPIO_Init+0xec>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a2e      	ldr	r2, [pc, #184]	; (80022b4 <MX_GPIO_Init+0xec>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <MX_GPIO_Init+0xec>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <MX_GPIO_Init+0xec>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <MX_GPIO_Init+0xec>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <MX_GPIO_Init+0xec>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222a:	4823      	ldr	r0, [pc, #140]	; (80022b8 <MX_GPIO_Init+0xf0>)
 800222c:	f001 fda7 	bl	8003d7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8002230:	2200      	movs	r2, #0
 8002232:	f64f 61c3 	movw	r1, #65219	; 0xfec3
 8002236:	4821      	ldr	r0, [pc, #132]	; (80022bc <MX_GPIO_Init+0xf4>)
 8002238:	f001 fda1 	bl	8003d7e <HAL_GPIO_WritePin>
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Y3_Pin|Y4_Pin|Display_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800223c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2302      	movs	r3, #2
 800224c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	4619      	mov	r1, r3
 8002254:	4818      	ldr	r0, [pc, #96]	; (80022b8 <MX_GPIO_Init+0xf0>)
 8002256:	f001 fc21 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Y1_Pin Y2_Pin Display_RW_Pin Display_EN_Pin
                           Display_D4_Pin Display_D5_Pin Display_D6_Pin Display_D7_Pin
                           Y3_Pin Y4_Pin Display_RS_Pin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 800225a:	f64f 63c3 	movw	r3, #65219	; 0xfec3
 800225e:	613b      	str	r3, [r7, #16]
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Y3_Pin|Y4_Pin|Display_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2302      	movs	r3, #2
 800226a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	4619      	mov	r1, r3
 8002272:	4812      	ldr	r0, [pc, #72]	; (80022bc <MX_GPIO_Init+0xf4>)
 8002274:	f001 fc12 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Decrease_Pin Button_Increase_Pin Button_Cancelar_Pin Button_Confirmar_Pin */
  GPIO_InitStruct.Pin = Button_Decrease_Pin|Button_Increase_Pin|Button_Cancelar_Pin|Button_Confirmar_Pin;
 8002278:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800227c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <MX_GPIO_Init+0xf8>)
 800228e:	f001 fc05 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1_Bit_0_Pin BN1_bit_1_Pin BN1_bit_2_Pin Inserir_Capsula_Pin */
  GPIO_InitStruct.Pin = BN1_Bit_0_Pin|BN1_bit_1_Pin|BN1_bit_2_Pin|Inserir_Capsula_Pin;
 8002292:	f44f 739c 	mov.w	r3, #312	; 0x138
 8002296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_GPIO_Init+0xf4>)
 80022a8:	f001 fbf8 	bl	8003a9c <HAL_GPIO_Init>

}
 80022ac:	bf00      	nop
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	40010800 	.word	0x40010800

080022c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <STATE_Show_Clock>:
 *
 * @retval CAPSULE_Recipe_TypeDef capsula inserida
 *
 */
CAPSULE_Recipe_TypeDef STATE_Show_Clock()
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b090      	sub	sp, #64	; 0x40
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	char hour[10];
	CAPSULE_Recipe_TypeDef capsule = {
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2220      	movs	r2, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 f9fb 	bl	80056dc <memset>
			.capsule_type = NONE_CAPSULE_TYPE,
	};
	uint8_t insert_button = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	while(1)
	{
		UTILS_get_Hour(hour);
 80022ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fb69 	bl	80029c8 <UTILS_get_Hour>
		LCD_Clear();
 80022f6:	f7ff f907 	bl	8001508 <LCD_Clear>
		LCD_Write_Buffer(hour);
 80022fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f888 	bl	8001414 <LCD_Write_Buffer>

		BUTTON_CONFIRMAR(confirm_button);
 8002304:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <STATE_Show_Clock+0xa4>)
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230e:	e883 0003 	stmia.w	r3, {r0, r1}
		insert_button = HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	461a      	mov	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	b29b      	uxth	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f001 fd17 	bl	8003d50 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		//se botão de inserir capsula for pressionado, verifica  qual é a receita
		if(insert_button)
 8002328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <STATE_Show_Clock+0x6a>
		{
			capsule = CAPSULE_Verify_Insertion();
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fa85 	bl	8001844 <CAPSULE_Verify_Insertion>
		}

		//se tiver uma cápsula, retorna
		if(capsule.capsule_type != NONE_CAPSULE_TYPE ){
 800233a:	7d3b      	ldrb	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <STATE_Show_Clock+0x86>

			return capsule;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	461d      	mov	r5, r3
 8002344:	f107 0414 	add.w	r4, r7, #20
 8002348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002350:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002354:	e009      	b.n	800236a <STATE_Show_Clock+0x9a>
		}
		HAL_Delay(300);
 8002356:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800235a:	f000 fc07 	bl	8002b6c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800235e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <STATE_Show_Clock+0xa8>)
 8002364:	f001 fd23 	bl	8003dae <HAL_GPIO_TogglePin>
	{
 8002368:	e7c0      	b.n	80022ec <STATE_Show_Clock+0x1c>
	}
}
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	3740      	adds	r7, #64	; 0x40
 800236e:	46bd      	mov	sp, r7
 8002370:	bdb0      	pop	{r4, r5, r7, pc}
 8002372:	bf00      	nop
 8002374:	08007b7c 	.word	0x08007b7c
 8002378:	40011000 	.word	0x40011000

0800237c <STATE_Starting_Process>:
 * @retval CAPSULE_Recipe_TypeDef receita da capsula inserida, se cancelar usuário cancelar inicio, retorna vazia
 * @param capsule capsula que foi inserida
 * @param hadc objeto do ADC_1
 */
CAPSULE_Recipe_TypeDef STATE_Starting_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 800237c:	b084      	sub	sp, #16
 800237e:	b5b0      	push	{r4, r5, r7, lr}
 8002380:	b0a2      	sub	sp, #136	; 0x88
 8002382:	af0a      	add	r7, sp, #40	; 0x28
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800238a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t confirm_button = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	LCD_Clear();
 8002394:	f7ff f8b8 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer(capsule.capsule_name);
 8002398:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800239c:	3302      	adds	r3, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f838 	bl	8001414 <LCD_Write_Buffer>
	LCD_Seccond_Line();
 80023a4:	f7ff f8b8 	bl	8001518 <LCD_Seccond_Line>

	GPIO_PinState pin_state;

	//se for apenas água, escolhe entre quente, natural e gelada.
	if(capsule.capsule_type == RECIPE_WATER)
 80023a8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d171      	bne.n	8002494 <STATE_Starting_Process+0x118>
	{
		//vetor para mostrar no display
		char choices[CHOICES_NUMBER][16] = {"Natural", "Gelada", "Quente"};
 80023b0:	4bac      	ldr	r3, [pc, #688]	; (8002664 <STATE_Starting_Process+0x2e8>)
 80023b2:	f107 0408 	add.w	r4, r7, #8
 80023b6:	461d      	mov	r5, r3
 80023b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//vetor para obter qual informação foi escolhida
		WATER_Type choices_values[CHOICES_NUMBER] = {NATURAL_WATER, ICE_WATER, HOT_WATER};
 80023c8:	4aa7      	ldr	r2, [pc, #668]	; (8002668 <STATE_Starting_Process+0x2ec>)
 80023ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4611      	mov	r1, r2
 80023d2:	8019      	strh	r1, [r3, #0]
 80023d4:	3302      	adds	r3, #2
 80023d6:	0c12      	lsrs	r2, r2, #16
 80023d8:	701a      	strb	r2, [r3, #0]

		//vetor para obter qual temparatura foi escolhida, perguntar para Professor
		uint32_t choices_values_temp[CHOICES_NUMBER] = {0, 20, 60};
 80023da:	4aa4      	ldr	r2, [pc, #656]	; (800266c <STATE_Starting_Process+0x2f0>)
 80023dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}


		uint8_t choice_index = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while(1){

			LCD_Clear();
 80023ec:	f7ff f88c 	bl	8001508 <LCD_Clear>
			LCD_Write_Buffer(choices[choice_index]);
 80023f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80023f4:	f107 0208 	add.w	r2, r7, #8
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f809 	bl	8001414 <LCD_Write_Buffer>

			Pressed_Type pressed_type = Get_Button_Pressed();
 8002402:	f7ff fc2b 	bl	8001c5c <Get_Button_Pressed>
 8002406:	4603      	mov	r3, r0
 8002408:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			switch (pressed_type) {
 800240c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002410:	2b03      	cmp	r3, #3
 8002412:	d83d      	bhi.n	8002490 <STATE_Starting_Process+0x114>
 8002414:	a201      	add	r2, pc, #4	; (adr r2, 800241c <STATE_Starting_Process+0xa0>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	0800242d 	.word	0x0800242d
 8002420:	08002455 	.word	0x08002455
 8002424:	0800245d 	.word	0x0800245d
 8002428:	08002477 	.word	0x08002477
				case CONFIRM_PRESSED:
					capsule.water_type = choices_values[choice_index];
 800242c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002430:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002434:	4413      	add	r3, r2
 8002436:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800243a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					capsule.water_temp = choices_values_temp[choice_index];
 800243e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002448:	4413      	add	r3, r2
 800244a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800244e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					goto choiced;
 8002452:	e01f      	b.n	8002494 <STATE_Starting_Process+0x118>
					break;
				case CANCEL_PRESSED:
					capsule.capsule_type = NONE_CAPSULE_TYPE;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					goto choiced;
 800245a:	e01b      	b.n	8002494 <STATE_Starting_Process+0x118>
					break;
				case INCREASE_PRESSED:
					choice_index = (choice_index < CHOICES_NUMBER - 1) ? choice_index + 1 : 0;
 800245c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002460:	2b01      	cmp	r3, #1
 8002462:	d804      	bhi.n	800246e <STATE_Starting_Process+0xf2>
 8002464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002468:	3301      	adds	r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	e000      	b.n	8002470 <STATE_Starting_Process+0xf4>
 800246e:	2300      	movs	r3, #0
 8002470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 8002474:	e00d      	b.n	8002492 <STATE_Starting_Process+0x116>
				case DECREASE_PRESSED:
					choice_index = (choice_index > 0) ? choice_index - 1 : CHOICES_NUMBER - 1;
 8002476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <STATE_Starting_Process+0x10c>
 800247e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002482:	3b01      	subs	r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e000      	b.n	800248a <STATE_Starting_Process+0x10e>
 8002488:	2302      	movs	r3, #2
 800248a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 800248e:	e000      	b.n	8002492 <STATE_Starting_Process+0x116>
				default:
					break;
 8002490:	bf00      	nop
		while(1){
 8002492:	e7ab      	b.n	80023ec <STATE_Starting_Process+0x70>
		}
		choiced: ;
	}


	LCD_Clear();
 8002494:	f7ff f838 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer("S --> Iniciar.");
 8002498:	4875      	ldr	r0, [pc, #468]	; (8002670 <STATE_Starting_Process+0x2f4>)
 800249a:	f7fe ffbb 	bl	8001414 <LCD_Write_Buffer>
	LCD_Seccond_Line();
 800249e:	f7ff f83b 	bl	8001518 <LCD_Seccond_Line>
	LCD_Write_Buffer("C --> Cancelar.");
 80024a2:	4874      	ldr	r0, [pc, #464]	; (8002674 <STATE_Starting_Process+0x2f8>)
 80024a4:	f7fe ffb6 	bl	8001414 <LCD_Write_Buffer>

	int32_t sensor_signal = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	65bb      	str	r3, [r7, #88]	; 0x58
	float avg_value_P1 = 0;
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	float avg_value_P2 = 0;
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48

	int32_t var = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	657b      	str	r3, [r7, #84]	; 0x54
	for (var = 0; var < 32; ++var) {
 80024bc:	2300      	movs	r3, #0
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
 80024c0:	e016      	b.n	80024f0 <STATE_Starting_Process+0x174>
		sensor_signal += ADC_GetValue(hadc, P1);
 80024c2:	2300      	movs	r3, #0
 80024c4:	9308      	str	r3, [sp, #32]
 80024c6:	466d      	mov	r5, sp
 80024c8:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80024cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024de:	f7fe fef7 	bl	80012d0 <ADC_GetValue>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024e6:	4413      	add	r3, r2
 80024e8:	65bb      	str	r3, [r7, #88]	; 0x58
	for (var = 0; var < 32; ++var) {
 80024ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ec:	3301      	adds	r3, #1
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	2b1f      	cmp	r3, #31
 80024f4:	dde5      	ble.n	80024c2 <STATE_Starting_Process+0x146>
	}

	avg_value_P1 = sensor_signal / var;
 80024f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fae0 	bl	8000ac4 <__aeabi_i2f>
 8002504:	4603      	mov	r3, r0
 8002506:	64fb      	str	r3, [r7, #76]	; 0x4c

	//se P1 passar do nivel considerado saturado....
	if(avg_value_P1 > 3000){
 8002508:	495b      	ldr	r1, [pc, #364]	; (8002678 <STATE_Starting_Process+0x2fc>)
 800250a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800250c:	f7fe fcea 	bl	8000ee4 <__aeabi_fcmpgt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01d      	beq.n	8002552 <STATE_Starting_Process+0x1d6>
		LCD_Clear();
 8002516:	f7fe fff7 	bl	8001508 <LCD_Clear>
		LCD_Write_Buffer("P1 SATURADO!");
 800251a:	4858      	ldr	r0, [pc, #352]	; (800267c <STATE_Starting_Process+0x300>)
 800251c:	f7fe ff7a 	bl	8001414 <LCD_Write_Buffer>
		HAL_Delay(2000);
 8002520:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002524:	f000 fb22 	bl	8002b6c <HAL_Delay>
		RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 8002528:	4b55      	ldr	r3, [pc, #340]	; (8002680 <STATE_Starting_Process+0x304>)
 800252a:	f107 0408 	add.w	r4, r7, #8
 800252e:	461d      	mov	r5, r3
 8002530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return none_capsule;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	461d      	mov	r5, r3
 8002540:	f107 0408 	add.w	r4, r7, #8
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800254c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002550:	e080      	b.n	8002654 <STATE_Starting_Process+0x2d8>
	}

	//se receita precisar de CO2, verifica se está P2 saturado
	if(capsule.co2_time > 0)
 8002552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002556:	2b00      	cmp	r3, #0
 8002558:	d04c      	beq.n	80025f4 <STATE_Starting_Process+0x278>
	{
		sensor_signal = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	65bb      	str	r3, [r7, #88]	; 0x58
		for (var = 0; var < 32; ++var) {
 800255e:	2300      	movs	r3, #0
 8002560:	657b      	str	r3, [r7, #84]	; 0x54
 8002562:	e016      	b.n	8002592 <STATE_Starting_Process+0x216>
			sensor_signal += ADC_GetValue(hadc, P2);
 8002564:	2303      	movs	r3, #3
 8002566:	9308      	str	r3, [sp, #32]
 8002568:	466d      	mov	r5, sp
 800256a:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 800256e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002572:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002576:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800257a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800257e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002580:	f7fe fea6 	bl	80012d0 <ADC_GetValue>
 8002584:	4602      	mov	r2, r0
 8002586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002588:	4413      	add	r3, r2
 800258a:	65bb      	str	r3, [r7, #88]	; 0x58
		for (var = 0; var < 32; ++var) {
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	3301      	adds	r3, #1
 8002590:	657b      	str	r3, [r7, #84]	; 0x54
 8002592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002594:	2b1f      	cmp	r3, #31
 8002596:	dde5      	ble.n	8002564 <STATE_Starting_Process+0x1e8>
		}

		avg_value_P2 = sensor_signal / var;
 8002598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800259a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259c:	fb92 f3f3 	sdiv	r3, r2, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fa8f 	bl	8000ac4 <__aeabi_i2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	64bb      	str	r3, [r7, #72]	; 0x48

		//se P2 passar do nivel considerado saturado....
		if(avg_value_P2 > 3000){
 80025aa:	4933      	ldr	r1, [pc, #204]	; (8002678 <STATE_Starting_Process+0x2fc>)
 80025ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80025ae:	f7fe fc99 	bl	8000ee4 <__aeabi_fcmpgt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01d      	beq.n	80025f4 <STATE_Starting_Process+0x278>
			LCD_Clear();
 80025b8:	f7fe ffa6 	bl	8001508 <LCD_Clear>
			LCD_Write_Buffer("P2 SATURADO!");
 80025bc:	4831      	ldr	r0, [pc, #196]	; (8002684 <STATE_Starting_Process+0x308>)
 80025be:	f7fe ff29 	bl	8001414 <LCD_Write_Buffer>
			HAL_Delay(2000);
 80025c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025c6:	f000 fad1 	bl	8002b6c <HAL_Delay>
			RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <STATE_Starting_Process+0x304>)
 80025cc:	f107 0408 	add.w	r4, r7, #8
 80025d0:	461d      	mov	r5, r3
 80025d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return none_capsule;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	461d      	mov	r5, r3
 80025e2:	f107 0408 	add.w	r4, r7, #8
 80025e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80025f2:	e02f      	b.n	8002654 <STATE_Starting_Process+0x2d8>
	}

	while(1)
	{

		Pressed_Type pressed_type = Get_Button_Pressed();
 80025f4:	f7ff fb32 	bl	8001c5c <Get_Button_Pressed>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if(pressed_type == CONFIRM_PRESSED)
 80025fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <STATE_Starting_Process+0x2a0>
		{
			return capsule;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	461d      	mov	r5, r3
 800260a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800260e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002612:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002616:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800261a:	e01b      	b.n	8002654 <STATE_Starting_Process+0x2d8>
		}
		if(pressed_type == CANCEL_PRESSED)
 800261c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10d      	bne.n	8002640 <STATE_Starting_Process+0x2c4>
		{
			capsule.capsule_type = NONE_CAPSULE_TYPE;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			return capsule;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	461d      	mov	r5, r3
 800262e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002636:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800263a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800263e:	e009      	b.n	8002654 <STATE_Starting_Process+0x2d8>
		}

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002644:	4810      	ldr	r0, [pc, #64]	; (8002688 <STATE_Starting_Process+0x30c>)
 8002646:	f001 fbb2 	bl	8003dae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800264a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800264e:	f000 fa8d 	bl	8002b6c <HAL_Delay>
	{
 8002652:	e7cf      	b.n	80025f4 <STATE_Starting_Process+0x278>
	}
}
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	3760      	adds	r7, #96	; 0x60
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800265e:	b004      	add	sp, #16
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	08007bc4 	.word	0x08007bc4
 8002668:	08007bf4 	.word	0x08007bf4
 800266c:	08007bf8 	.word	0x08007bf8
 8002670:	08007b84 	.word	0x08007b84
 8002674:	08007b94 	.word	0x08007b94
 8002678:	453b8000 	.word	0x453b8000
 800267c:	08007ba4 	.word	0x08007ba4
 8002680:	08007c04 	.word	0x08007c04
 8002684:	08007bb4 	.word	0x08007bb4
 8002688:	40011000 	.word	0x40011000

0800268c <STATE_Started_Process>:
 * @retval CAPSULE_Recipe_TypeDef receita da capsula inserida, se cancelar usuário cancelar inicio, retorna vazia
 * @param capsule capsula que foi inserida
 * @param hadc objeto do ADC_1
 */
void STATE_Started_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 800268c:	b084      	sub	sp, #16
 800268e:	b5b0      	push	{r4, r5, r7, lr}
 8002690:	b092      	sub	sp, #72	; 0x48
 8002692:	af10      	add	r7, sp, #64	; 0x40
 8002694:	f107 0418 	add.w	r4, r7, #24
 8002698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD_Clear();
 800269c:	f7fe ff34 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer("Iniciando...");
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <STATE_Started_Process+0x64>)
 80026a2:	f7fe feb7 	bl	8001414 <LCD_Write_Buffer>
	HAL_Delay(1500);
 80026a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80026aa:	f000 fa5f 	bl	8002b6c <HAL_Delay>

	uint8_t confirm_button = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		CONTROLLER_Execute(hadc, capsule);
 80026b2:	ac08      	add	r4, sp, #32
 80026b4:	f107 0518 	add.w	r5, r7, #24
 80026b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80026c4:	466d      	mov	r5, sp
 80026c6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80026ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80026d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026dc:	f7ff f988 	bl	80019f0 <CONTROLLER_Execute>

		return;
 80026e0:	bf00      	nop

	}
}
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80026ea:	b004      	add	sp, #16
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	08007c24 	.word	0x08007c24

080026f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_MspInit+0x5c>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_MspInit+0x5c>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6193      	str	r3, [r2, #24]
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_MspInit+0x5c>)
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <HAL_MspInit+0x5c>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <HAL_MspInit+0x5c>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_MspInit+0x5c>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_MspInit+0x60>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_MspInit+0x60>)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40021000 	.word	0x40021000
 8002754:	40010000 	.word	0x40010000

08002758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_ADC_MspInit+0xbc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d149      	bne.n	800280c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_ADC_MspInit+0xc0>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a26      	ldr	r2, [pc, #152]	; (8002818 <HAL_ADC_MspInit+0xc0>)
 800277e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_ADC_MspInit+0xc0>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_ADC_MspInit+0xc0>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a20      	ldr	r2, [pc, #128]	; (8002818 <HAL_ADC_MspInit+0xc0>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_ADC_MspInit+0xc0>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC1_IN4_____T1_Pin|ADC1_IN5_____T2_Pin|ADC1_IN6_____P1_Pin|ADC1_IN7_____P2_Pin;
 80027a8:	23f0      	movs	r3, #240	; 0xf0
 80027aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ac:	2303      	movs	r3, #3
 80027ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4619      	mov	r1, r3
 80027b6:	4819      	ldr	r0, [pc, #100]	; (800281c <HAL_ADC_MspInit+0xc4>)
 80027b8:	f001 f970 	bl	8003a9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_ADC_MspInit+0xcc>)
 80027c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027f0:	480b      	ldr	r0, [pc, #44]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 80027f2:	f000 ff65 	bl	80036c0 <HAL_DMA_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80027fc:	f7ff fd62 	bl	80022c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 8002804:	621a      	str	r2, [r3, #32]
 8002806:	4a06      	ldr	r2, [pc, #24]	; (8002820 <HAL_ADC_MspInit+0xc8>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40012400 	.word	0x40012400
 8002818:	40021000 	.word	0x40021000
 800281c:	40010800 	.word	0x40010800
 8002820:	200002d8 	.word	0x200002d8
 8002824:	40020008 	.word	0x40020008

08002828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a12      	ldr	r2, [pc, #72]	; (8002880 <HAL_TIM_Base_MspInit+0x58>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10c      	bne.n	8002854 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_TIM_Base_MspInit+0x5c>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_TIM_Base_MspInit+0x5c>)
 8002840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002844:	6193      	str	r3, [r2, #24]
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_TIM_Base_MspInit+0x5c>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002852:	e010      	b.n	8002876 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d10b      	bne.n	8002876 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_TIM_Base_MspInit+0x5c>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a08      	ldr	r2, [pc, #32]	; (8002884 <HAL_TIM_Base_MspInit+0x5c>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	61d3      	str	r3, [r2, #28]
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_TIM_Base_MspInit+0x5c>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a6:	d117      	bne.n	80028d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_TIM_MspPostInit+0x58>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_TIM_MspPostInit+0x58>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_TIM_MspPostInit+0x58>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM2_CH1_____R1_Pin|TIM2_CH2_____CP1_Pin|TIM2_CH3_____B1_Pin;
 80028c0:	2307      	movs	r3, #7
 80028c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2302      	movs	r3, #2
 80028ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	4804      	ldr	r0, [pc, #16]	; (80028e4 <HAL_TIM_MspPostInit+0x5c>)
 80028d4:	f001 f8e2 	bl	8003a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40010800 	.word	0x40010800

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <HardFault_Handler+0x4>

080028fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <MemManage_Handler+0x4>

08002900 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <BusFault_Handler+0x4>

08002906 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <UsageFault_Handler+0x4>

0800290c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f000 f8fe 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA1_Channel1_IRQHandler+0x10>)
 8002942:	f000 ff77 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200002d8 	.word	0x200002d8

08002950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002980:	f002 fdb4 	bl	80054ec <__errno>
 8002984:	4602      	mov	r2, r0
 8002986:	230c      	movs	r3, #12
 8002988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <_sbrk+0x64>)
 80029a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20005000 	.word	0x20005000
 80029b0:	00000400 	.word	0x00000400
 80029b4:	20000268 	.word	0x20000268
 80029b8:	200003b8 	.word	0x200003b8

080029bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <UTILS_get_Hour>:
 * Na lihna acima, deve-se passar por parâmetro na função time() o valor do tempo atual;
 *
 * @param [out]hour vetor de char que será armazenado a hora
 */
void UTILS_get_Hour(char* hour)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	  struct tm *sTm;

	  time_t now = time (0);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f003 fd5b 	bl	800648c <time>
 80029d6:	4603      	mov	r3, r0
 80029d8:	460c      	mov	r4, r1
 80029da:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  sTm = gmtime (&now);
 80029de:	f107 0308 	add.w	r3, r7, #8
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 fd88 	bl	80054f8 <gmtime>
 80029e8:	6178      	str	r0, [r7, #20]

	  strftime (hour, 9, "%H:%M:%S", sTm);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <UTILS_get_Hour+0x38>)
 80029ee:	2109      	movs	r1, #9
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f003 fc97 	bl	8006324 <strftime>
	  return;
 80029f6:	bf00      	nop
}
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08007c34 	.word	0x08007c34
 8002a04:	00000000 	.word	0x00000000

08002a08 <UTILS_To_Temp>:
 *
 * @retval uint32_t temperatura
 * @param value_adc valor lido em um canal do adc
 */
uint32_t UTILS_To_Temp(uint32_t value_adc)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	uint32_t temperature = (value_adc * ADC_SCALE) * 25;
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd fcf1 	bl	80003f8 <__aeabi_ui2d>
 8002a16:	a30e      	add	r3, pc, #56	; (adr r3, 8002a50 <UTILS_To_Temp+0x48>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fd66 	bl	80004ec <__aeabi_dmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	460c      	mov	r4, r1
 8002a24:	4618      	mov	r0, r3
 8002a26:	4621      	mov	r1, r4
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <UTILS_To_Temp+0x50>)
 8002a2e:	f7fd fd5d 	bl	80004ec <__aeabi_dmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	4618      	mov	r0, r3
 8002a38:	4621      	mov	r1, r4
 8002a3a:	f7fd ff69 	bl	8000910 <__aeabi_d2uiz>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	60fb      	str	r3, [r7, #12]
	return temperature;
 8002a42:	68fb      	ldr	r3, [r7, #12]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	f3af 8000 	nop.w
 8002a50:	e734d9b4 	.word	0xe734d9b4
 8002a54:	3f4a680c 	.word	0x3f4a680c
 8002a58:	40390000 	.word	0x40390000

08002a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a5e:	e003      	b.n	8002a68 <LoopCopyDataInit>

08002a60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a66:	3104      	adds	r1, #4

08002a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a68:	480a      	ldr	r0, [pc, #40]	; (8002a94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a70:	d3f6      	bcc.n	8002a60 <CopyDataInit>
  ldr r2, =_sbss
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a74:	e002      	b.n	8002a7c <LoopFillZerobss>

08002a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a78:	f842 3b04 	str.w	r3, [r2], #4

08002a7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a80:	d3f9      	bcc.n	8002a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a82:	f7ff ff9b 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a86:	f002 fdf5 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a8a:	f7ff f951 	bl	8001d30 <main>
  bx lr
 8002a8e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a90:	08008178 	.word	0x08008178
  ldr r0, =_sdata
 8002a94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a98:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 8002a9c:	20000244 	.word	0x20000244
  ldr r3, = _ebss
 8002aa0:	200003b4 	.word	0x200003b4

08002aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC1_2_IRQHandler>
	...

08002aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_Init+0x28>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <HAL_Init+0x28>)
 8002ab2:	f043 0310 	orr.w	r3, r3, #16
 8002ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f000 fdbf 	bl	800363c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f000 f808 	bl	8002ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac4:	f7ff fe16 	bl	80026f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_InitTick+0x54>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_InitTick+0x58>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fdd7 	bl	80036a6 <HAL_SYSTICK_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00e      	b.n	8002b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0f      	cmp	r3, #15
 8002b06:	d80a      	bhi.n	8002b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	f000 fd9f 	bl	8003652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b14:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <HAL_InitTick+0x5c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	2000000c 	.word	0x2000000c
 8002b30:	20000008 	.word	0x20000008

08002b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_IncTick+0x1c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_IncTick+0x20>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_IncTick+0x20>)
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	200003ac 	.word	0x200003ac

08002b58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <HAL_GetTick+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	200003ac 	.word	0x200003ac

08002b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d005      	beq.n	8002b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_Delay+0x40>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b92:	bf00      	nop
 8002b94:	f7ff ffe0 	bl	8002b58 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8f7      	bhi.n	8002b94 <HAL_Delay+0x28>
  {
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	2000000c 	.word	0x2000000c

08002bb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0be      	b.n	8002d50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d109      	bne.n	8002bf4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fdb2 	bl	8002758 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb19 	bl	800322c <ADC_ConversionStop_Disable>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8099 	bne.w	8002d3e <HAL_ADC_Init+0x18e>
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 8095 	bne.w	8002d3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c1c:	f023 0302 	bic.w	r3, r3, #2
 8002c20:	f043 0202 	orr.w	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7b1b      	ldrb	r3, [r3, #12]
 8002c36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c48:	d003      	beq.n	8002c52 <HAL_ADC_Init+0xa2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_ADC_Init+0xa8>
 8002c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c56:	e000      	b.n	8002c5a <HAL_ADC_Init+0xaa>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7d1b      	ldrb	r3, [r3, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d119      	bne.n	8002c9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	035a      	lsls	r2, r3, #13
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e00b      	b.n	8002c9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_ADC_Init+0x1a8>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ccc:	d003      	beq.n	8002cd6 <HAL_ADC_Init+0x126>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d104      	bne.n	8002ce0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	051b      	lsls	r3, r3, #20
 8002cde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_ADC_Init+0x1ac>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d10b      	bne.n	8002d1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d1a:	e018      	b.n	8002d4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	f023 0312 	bic.w	r3, r3, #18
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d3c:	e007      	b.n	8002d4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	ffe1f7fd 	.word	0xffe1f7fd
 8002d5c:	ff1f0efe 	.word	0xff1f0efe

08002d60 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Stop+0x1a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e01a      	b.n	8002db0 <HAL_ADC_Stop+0x50>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa52 	bl	800322c <ADC_ConversionStop_Disable>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a64      	ldr	r2, [pc, #400]	; (8002f60 <HAL_ADC_Start_DMA+0x1a8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_ADC_Start_DMA+0x24>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a63      	ldr	r2, [pc, #396]	; (8002f64 <HAL_ADC_Start_DMA+0x1ac>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d106      	bne.n	8002dea <HAL_ADC_Start_DMA+0x32>
 8002ddc:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <HAL_ADC_Start_DMA+0x1a8>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 80b3 	bne.w	8002f50 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_Start_DMA+0x40>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e0ae      	b.n	8002f56 <HAL_ADC_Start_DMA+0x19e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f9c1 	bl	8003188 <ADC_Enable>
 8002e06:	4603      	mov	r3, r0
 8002e08:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 809a 	bne.w	8002f46 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a4e      	ldr	r2, [pc, #312]	; (8002f64 <HAL_ADC_Start_DMA+0x1ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d105      	bne.n	8002e3c <HAL_ADC_Start_DMA+0x84>
 8002e30:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_ADC_Start_DMA+0x1a8>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d115      	bne.n	8002e68 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d026      	beq.n	8002ea4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e66:	e01d      	b.n	8002ea4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a39      	ldr	r2, [pc, #228]	; (8002f60 <HAL_ADC_Start_DMA+0x1a8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_ADC_Start_DMA+0xd0>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <HAL_ADC_Start_DMA+0x1ac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d10d      	bne.n	8002ea4 <HAL_ADC_Start_DMA+0xec>
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_ADC_Start_DMA+0x1a8>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f023 0206 	bic.w	r2, r3, #6
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <HAL_ADC_Start_DMA+0x1b0>)
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <HAL_ADC_Start_DMA+0x1b4>)
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <HAL_ADC_Start_DMA+0x1b8>)
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0202 	mvn.w	r2, #2
 8002eec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a18      	ldr	r0, [r3, #32]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	334c      	adds	r3, #76	; 0x4c
 8002f08:	4619      	mov	r1, r3
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f000 fc31 	bl	8003774 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f20:	d108      	bne.n	8002f34 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f30:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f32:	e00f      	b.n	8002f54 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f42:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f44:	e006      	b.n	8002f54 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002f4e:	e001      	b.n	8002f54 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40012400 	.word	0x40012400
 8002f64:	40012800 	.word	0x40012800
 8002f68:	080032a1 	.word	0x080032a1
 8002f6c:	0800331d 	.word	0x0800331d
 8002f70:	08003339 	.word	0x08003339

08002f74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x20>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0dc      	b.n	8003172 <HAL_ADC_ConfigChannel+0x1da>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d81c      	bhi.n	8003002 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b05      	subs	r3, #5
 8002fda:	221f      	movs	r2, #31
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	4019      	ands	r1, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3b05      	subs	r3, #5
 8002ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8003000:	e03c      	b.n	800307c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d81c      	bhi.n	8003044 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	3b23      	subs	r3, #35	; 0x23
 800301c:	221f      	movs	r2, #31
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	4019      	ands	r1, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b23      	subs	r3, #35	; 0x23
 8003036:	fa00 f203 	lsl.w	r2, r0, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
 8003042:	e01b      	b.n	800307c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b41      	subs	r3, #65	; 0x41
 8003056:	221f      	movs	r2, #31
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	4019      	ands	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	3b41      	subs	r3, #65	; 0x41
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b09      	cmp	r3, #9
 8003082:	d91c      	bls.n	80030be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68d9      	ldr	r1, [r3, #12]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	3b1e      	subs	r3, #30
 8003096:	2207      	movs	r2, #7
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	4019      	ands	r1, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6898      	ldr	r0, [r3, #8]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	3b1e      	subs	r3, #30
 80030b0:	fa00 f203 	lsl.w	r2, r0, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	e019      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6919      	ldr	r1, [r3, #16]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	2207      	movs	r2, #7
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	4019      	ands	r1, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6898      	ldr	r0, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d003      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030fe:	2b11      	cmp	r3, #17
 8003100:	d132      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_ADC_ConfigChannel+0x1e4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d125      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d126      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003128:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d11a      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_ADC_ConfigChannel+0x1e8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <HAL_ADC_ConfigChannel+0x1ec>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	0c9a      	lsrs	r2, r3, #18
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003148:	e002      	b.n	8003150 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3b01      	subs	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_ConfigChannel+0x1b2>
 8003156:	e007      	b.n	8003168 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40012400 	.word	0x40012400
 8003180:	20000004 	.word	0x20000004
 8003184:	431bde83 	.word	0x431bde83

08003188 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d039      	beq.n	800321a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <ADC_Enable+0x9c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <ADC_Enable+0xa0>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	0c9b      	lsrs	r3, r3, #18
 80031c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031c4:	e002      	b.n	80031cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031d2:	f7ff fcc1 	bl	8002b58 <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031d8:	e018      	b.n	800320c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031da:	f7ff fcbd 	bl	8002b58 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d911      	bls.n	800320c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	f043 0210 	orr.w	r2, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d1df      	bne.n	80031da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000004 	.word	0x20000004
 8003228:	431bde83 	.word	0x431bde83

0800322c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d127      	bne.n	8003296 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003256:	f7ff fc7f 	bl	8002b58 <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800325c:	e014      	b.n	8003288 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800325e:	f7ff fc7b 	bl	8002b58 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d90d      	bls.n	8003288 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	f043 0210 	orr.w	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e007      	b.n	8003298 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d0e3      	beq.n	800325e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d127      	bne.n	800330a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032d4:	d115      	bne.n	8003302 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d111      	bne.n	8003302 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7fe f808 	bl	8001318 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003308:	e004      	b.n	8003314 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff fe22 	bl	8002f74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff fe11 	bl	8002f86 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_ADCEx_Calibration_Start+0x1e>
 8003386:	2302      	movs	r3, #2
 8003388:	e086      	b.n	8003498 <HAL_ADCEx_Calibration_Start+0x12c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff4a 	bl	800322c <ADC_ConversionStop_Disable>
 8003398:	4603      	mov	r3, r0
 800339a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d175      	bne.n	800348e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033aa:	f023 0302 	bic.w	r3, r3, #2
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033b6:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <HAL_ADCEx_Calibration_Start+0x134>)
 80033b8:	681c      	ldr	r4, [r3, #0]
 80033ba:	2002      	movs	r0, #2
 80033bc:	f001 f9ce 	bl	800475c <HAL_RCCEx_GetPeriphCLKFreq>
 80033c0:	4603      	mov	r3, r0
 80033c2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80033c6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80033c8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80033ca:	e002      	b.n	80033d2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f9      	bne.n	80033cc <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fed5 	bl	8003188 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0208 	orr.w	r2, r2, #8
 80033ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80033ee:	f7ff fbb3 	bl	8002b58 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033f4:	e014      	b.n	8003420 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033f6:	f7ff fbaf 	bl	8002b58 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b0a      	cmp	r3, #10
 8003402:	d90d      	bls.n	8003420 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	f023 0312 	bic.w	r3, r3, #18
 800340c:	f043 0210 	orr.w	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e03b      	b.n	8003498 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e3      	bne.n	80033f6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0204 	orr.w	r2, r2, #4
 800343c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800343e:	f7ff fb8b 	bl	8002b58 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003444:	e014      	b.n	8003470 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003446:	f7ff fb87 	bl	8002b58 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b0a      	cmp	r3, #10
 8003452:	d90d      	bls.n	8003470 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f023 0312 	bic.w	r3, r3, #18
 800345c:	f043 0210 	orr.w	r2, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e013      	b.n	8003498 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e3      	bne.n	8003446 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	20000004 	.word	0x20000004

080034a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d6:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	60d3      	str	r3, [r2, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <__NVIC_GetPriorityGrouping+0x18>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 0307 	and.w	r3, r3, #7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db0b      	blt.n	8003532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	4906      	ldr	r1, [pc, #24]	; (800353c <__NVIC_EnableIRQ+0x34>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2001      	movs	r0, #1
 800352a:	fa00 f202 	lsl.w	r2, r0, r2
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100

08003540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	6039      	str	r1, [r7, #0]
 800354a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	db0a      	blt.n	800356a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	490c      	ldr	r1, [pc, #48]	; (800358c <__NVIC_SetPriority+0x4c>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	440b      	add	r3, r1
 8003564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003568:	e00a      	b.n	8003580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4908      	ldr	r1, [pc, #32]	; (8003590 <__NVIC_SetPriority+0x50>)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	3b04      	subs	r3, #4
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	440b      	add	r3, r1
 800357e:	761a      	strb	r2, [r3, #24]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000e100 	.word	0xe000e100
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f1c3 0307 	rsb	r3, r3, #7
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	bf28      	it	cs
 80035b2:	2304      	movcs	r3, #4
 80035b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d902      	bls.n	80035c4 <NVIC_EncodePriority+0x30>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3b03      	subs	r3, #3
 80035c2:	e000      	b.n	80035c6 <NVIC_EncodePriority+0x32>
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	401a      	ands	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035dc:	f04f 31ff 	mov.w	r1, #4294967295
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43d9      	mvns	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	4313      	orrs	r3, r2
         );
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	; 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003608:	d301      	bcc.n	800360e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360a:	2301      	movs	r3, #1
 800360c:	e00f      	b.n	800362e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <SysTick_Config+0x40>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003616:	210f      	movs	r1, #15
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	f7ff ff90 	bl	8003540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <SysTick_Config+0x40>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <SysTick_Config+0x40>)
 8003628:	2207      	movs	r2, #7
 800362a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	e000e010 	.word	0xe000e010

0800363c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff2d 	bl	80034a4 <__NVIC_SetPriorityGrouping>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003664:	f7ff ff42 	bl	80034ec <__NVIC_GetPriorityGrouping>
 8003668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	6978      	ldr	r0, [r7, #20]
 8003670:	f7ff ff90 	bl	8003594 <NVIC_EncodePriority>
 8003674:	4602      	mov	r2, r0
 8003676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff5f 	bl	8003540 <__NVIC_SetPriority>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff35 	bl	8003508 <__NVIC_EnableIRQ>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ffa2 	bl	80035f8 <SysTick_Config>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e043      	b.n	800375e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_DMA_Init+0xa8>)
 80036de:	4413      	add	r3, r2
 80036e0:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_DMA_Init+0xac>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	009a      	lsls	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_DMA_Init+0xb0>)
 80036f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800370a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800370e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	bffdfff8 	.word	0xbffdfff8
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	40020000 	.word	0x40020000

08003774 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_DMA_Start_IT+0x20>
 8003790:	2302      	movs	r3, #2
 8003792:	e04a      	b.n	800382a <HAL_DMA_Start_IT+0xb6>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d13a      	bne.n	800381c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f938 	bl	8003a40 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 020e 	orr.w	r2, r2, #14
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e00f      	b.n	800380a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0204 	bic.w	r2, r2, #4
 80037f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020a 	orr.w	r2, r2, #10
 8003808:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e005      	b.n	8003828 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	2204      	movs	r2, #4
 8003852:	409a      	lsls	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d04f      	beq.n	80038fc <HAL_DMA_IRQHandler+0xc8>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d04a      	beq.n	80038fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0204 	bic.w	r2, r2, #4
 8003882:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a66      	ldr	r2, [pc, #408]	; (8003a24 <HAL_DMA_IRQHandler+0x1f0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d029      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xae>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <HAL_DMA_IRQHandler+0x1f4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_DMA_IRQHandler+0xaa>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a63      	ldr	r2, [pc, #396]	; (8003a2c <HAL_DMA_IRQHandler+0x1f8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0xa4>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a62      	ldr	r2, [pc, #392]	; (8003a30 <HAL_DMA_IRQHandler+0x1fc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d012      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x9e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a60      	ldr	r2, [pc, #384]	; (8003a34 <HAL_DMA_IRQHandler+0x200>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00a      	beq.n	80038cc <HAL_DMA_IRQHandler+0x98>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5f      	ldr	r2, [pc, #380]	; (8003a38 <HAL_DMA_IRQHandler+0x204>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d102      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x92>
 80038c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038c4:	e00e      	b.n	80038e4 <HAL_DMA_IRQHandler+0xb0>
 80038c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038ca:	e00b      	b.n	80038e4 <HAL_DMA_IRQHandler+0xb0>
 80038cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038d0:	e008      	b.n	80038e4 <HAL_DMA_IRQHandler+0xb0>
 80038d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038d6:	e005      	b.n	80038e4 <HAL_DMA_IRQHandler+0xb0>
 80038d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038dc:	e002      	b.n	80038e4 <HAL_DMA_IRQHandler+0xb0>
 80038de:	2340      	movs	r3, #64	; 0x40
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_IRQHandler+0xb0>
 80038e2:	2304      	movs	r3, #4
 80038e4:	4a55      	ldr	r2, [pc, #340]	; (8003a3c <HAL_DMA_IRQHandler+0x208>)
 80038e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8094 	beq.w	8003a1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038fa:	e08e      	b.n	8003a1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	2202      	movs	r2, #2
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d056      	beq.n	80039ba <HAL_DMA_IRQHandler+0x186>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d051      	beq.n	80039ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020a 	bic.w	r2, r2, #10
 8003932:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a38      	ldr	r2, [pc, #224]	; (8003a24 <HAL_DMA_IRQHandler+0x1f0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d029      	beq.n	800399a <HAL_DMA_IRQHandler+0x166>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a37      	ldr	r2, [pc, #220]	; (8003a28 <HAL_DMA_IRQHandler+0x1f4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_DMA_IRQHandler+0x162>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <HAL_DMA_IRQHandler+0x1f8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01a      	beq.n	8003990 <HAL_DMA_IRQHandler+0x15c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_DMA_IRQHandler+0x1fc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d012      	beq.n	800398a <HAL_DMA_IRQHandler+0x156>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <HAL_DMA_IRQHandler+0x200>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00a      	beq.n	8003984 <HAL_DMA_IRQHandler+0x150>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a31      	ldr	r2, [pc, #196]	; (8003a38 <HAL_DMA_IRQHandler+0x204>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <HAL_DMA_IRQHandler+0x14a>
 8003978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800397c:	e00e      	b.n	800399c <HAL_DMA_IRQHandler+0x168>
 800397e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003982:	e00b      	b.n	800399c <HAL_DMA_IRQHandler+0x168>
 8003984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003988:	e008      	b.n	800399c <HAL_DMA_IRQHandler+0x168>
 800398a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800398e:	e005      	b.n	800399c <HAL_DMA_IRQHandler+0x168>
 8003990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003994:	e002      	b.n	800399c <HAL_DMA_IRQHandler+0x168>
 8003996:	2320      	movs	r3, #32
 8003998:	e000      	b.n	800399c <HAL_DMA_IRQHandler+0x168>
 800399a:	2302      	movs	r3, #2
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <HAL_DMA_IRQHandler+0x208>)
 800399e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d034      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039b8:	e02f      	b.n	8003a1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2208      	movs	r2, #8
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d028      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x1e8>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d023      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 020e 	bic.w	r2, r2, #14
 80039e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f202 	lsl.w	r2, r1, r2
 80039f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
    }
  }
  return;
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
}
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40020008 	.word	0x40020008
 8003a28:	4002001c 	.word	0x4002001c
 8003a2c:	40020030 	.word	0x40020030
 8003a30:	40020044 	.word	0x40020044
 8003a34:	40020058 	.word	0x40020058
 8003a38:	4002006c 	.word	0x4002006c
 8003a3c:	40020000 	.word	0x40020000

08003a40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2101      	movs	r1, #1
 8003a58:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d108      	bne.n	8003a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a7e:	e007      	b.n	8003a90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b08b      	sub	sp, #44	; 0x2c
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aae:	e127      	b.n	8003d00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	f040 8116 	bne.w	8003cfa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b12      	cmp	r3, #18
 8003ad4:	d034      	beq.n	8003b40 <HAL_GPIO_Init+0xa4>
 8003ad6:	2b12      	cmp	r3, #18
 8003ad8:	d80d      	bhi.n	8003af6 <HAL_GPIO_Init+0x5a>
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d02b      	beq.n	8003b36 <HAL_GPIO_Init+0x9a>
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d804      	bhi.n	8003aec <HAL_GPIO_Init+0x50>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d031      	beq.n	8003b4a <HAL_GPIO_Init+0xae>
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d01c      	beq.n	8003b24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aea:	e048      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d043      	beq.n	8003b78 <HAL_GPIO_Init+0xdc>
 8003af0:	2b11      	cmp	r3, #17
 8003af2:	d01b      	beq.n	8003b2c <HAL_GPIO_Init+0x90>
          break;
 8003af4:	e043      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003af6:	4a89      	ldr	r2, [pc, #548]	; (8003d1c <HAL_GPIO_Init+0x280>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d026      	beq.n	8003b4a <HAL_GPIO_Init+0xae>
 8003afc:	4a87      	ldr	r2, [pc, #540]	; (8003d1c <HAL_GPIO_Init+0x280>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d806      	bhi.n	8003b10 <HAL_GPIO_Init+0x74>
 8003b02:	4a87      	ldr	r2, [pc, #540]	; (8003d20 <HAL_GPIO_Init+0x284>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d020      	beq.n	8003b4a <HAL_GPIO_Init+0xae>
 8003b08:	4a86      	ldr	r2, [pc, #536]	; (8003d24 <HAL_GPIO_Init+0x288>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_GPIO_Init+0xae>
          break;
 8003b0e:	e036      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b10:	4a85      	ldr	r2, [pc, #532]	; (8003d28 <HAL_GPIO_Init+0x28c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d019      	beq.n	8003b4a <HAL_GPIO_Init+0xae>
 8003b16:	4a85      	ldr	r2, [pc, #532]	; (8003d2c <HAL_GPIO_Init+0x290>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d016      	beq.n	8003b4a <HAL_GPIO_Init+0xae>
 8003b1c:	4a84      	ldr	r2, [pc, #528]	; (8003d30 <HAL_GPIO_Init+0x294>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_GPIO_Init+0xae>
          break;
 8003b22:	e02c      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	623b      	str	r3, [r7, #32]
          break;
 8003b2a:	e028      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	3304      	adds	r3, #4
 8003b32:	623b      	str	r3, [r7, #32]
          break;
 8003b34:	e023      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	623b      	str	r3, [r7, #32]
          break;
 8003b3e:	e01e      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	330c      	adds	r3, #12
 8003b46:	623b      	str	r3, [r7, #32]
          break;
 8003b48:	e019      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b52:	2304      	movs	r3, #4
 8003b54:	623b      	str	r3, [r7, #32]
          break;
 8003b56:	e012      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b60:	2308      	movs	r3, #8
 8003b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	611a      	str	r2, [r3, #16]
          break;
 8003b6a:	e008      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	615a      	str	r2, [r3, #20]
          break;
 8003b76:	e002      	b.n	8003b7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
          break;
 8003b7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2bff      	cmp	r3, #255	; 0xff
 8003b82:	d801      	bhi.n	8003b88 <HAL_GPIO_Init+0xec>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	e001      	b.n	8003b8c <HAL_GPIO_Init+0xf0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2bff      	cmp	r3, #255	; 0xff
 8003b92:	d802      	bhi.n	8003b9a <HAL_GPIO_Init+0xfe>
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	e002      	b.n	8003ba0 <HAL_GPIO_Init+0x104>
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	3b08      	subs	r3, #8
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	210f      	movs	r1, #15
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	6a39      	ldr	r1, [r7, #32]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8096 	beq.w	8003cfa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bce:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_GPIO_Init+0x298>)
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	4a58      	ldr	r2, [pc, #352]	; (8003d34 <HAL_GPIO_Init+0x298>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6193      	str	r3, [r2, #24]
 8003bda:	4b56      	ldr	r3, [pc, #344]	; (8003d34 <HAL_GPIO_Init+0x298>)
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003be6:	4a54      	ldr	r2, [pc, #336]	; (8003d38 <HAL_GPIO_Init+0x29c>)
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <HAL_GPIO_Init+0x2a0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_GPIO_Init+0x19e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_GPIO_Init+0x2a4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00d      	beq.n	8003c36 <HAL_GPIO_Init+0x19a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a49      	ldr	r2, [pc, #292]	; (8003d44 <HAL_GPIO_Init+0x2a8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <HAL_GPIO_Init+0x196>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a48      	ldr	r2, [pc, #288]	; (8003d48 <HAL_GPIO_Init+0x2ac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_GPIO_Init+0x192>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x1a0>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	e004      	b.n	8003c3c <HAL_GPIO_Init+0x1a0>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_Init+0x1a0>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_GPIO_Init+0x1a0>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	f002 0203 	and.w	r2, r2, #3
 8003c42:	0092      	lsls	r2, r2, #2
 8003c44:	4093      	lsls	r3, r2
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c4c:	493a      	ldr	r1, [pc, #232]	; (8003d38 <HAL_GPIO_Init+0x29c>)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c66:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4938      	ldr	r1, [pc, #224]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
 8003c72:	e006      	b.n	8003c82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c74:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	4933      	ldr	r1, [pc, #204]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	492e      	ldr	r1, [pc, #184]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
 8003c9a:	e006      	b.n	8003caa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cb6:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	4924      	ldr	r1, [pc, #144]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
 8003cc2:	e006      	b.n	8003cd2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	491f      	ldr	r1, [pc, #124]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cde:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	491a      	ldr	r1, [pc, #104]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60cb      	str	r3, [r1, #12]
 8003cea:	e006      	b.n	8003cfa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	4915      	ldr	r1, [pc, #84]	; (8003d4c <HAL_GPIO_Init+0x2b0>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f aed0 	bne.w	8003ab0 <HAL_GPIO_Init+0x14>
  }
}
 8003d10:	bf00      	nop
 8003d12:	372c      	adds	r7, #44	; 0x2c
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	10210000 	.word	0x10210000
 8003d20:	10110000 	.word	0x10110000
 8003d24:	10120000 	.word	0x10120000
 8003d28:	10310000 	.word	0x10310000
 8003d2c:	10320000 	.word	0x10320000
 8003d30:	10220000 	.word	0x10220000
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40010800 	.word	0x40010800
 8003d40:	40010c00 	.word	0x40010c00
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40011400 	.word	0x40011400
 8003d4c:	40010400 	.word	0x40010400

08003d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	887b      	ldrh	r3, [r7, #2]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e001      	b.n	8003d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	807b      	strh	r3, [r7, #2]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d8e:	787b      	ldrb	r3, [r7, #1]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d94:	887a      	ldrh	r2, [r7, #2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d9a:	e003      	b.n	8003da4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	041a      	lsls	r2, r3, #16
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	611a      	str	r2, [r3, #16]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dc0:	887a      	ldrh	r2, [r7, #2]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	041a      	lsls	r2, r3, #16
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43d9      	mvns	r1, r3
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	400b      	ands	r3, r1
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e26c      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8087 	beq.w	8003f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e00:	4b92      	ldr	r3, [pc, #584]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d00c      	beq.n	8003e26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e0c:	4b8f      	ldr	r3, [pc, #572]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d112      	bne.n	8003e3e <HAL_RCC_OscConfig+0x5e>
 8003e18:	4b8c      	ldr	r3, [pc, #560]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d10b      	bne.n	8003e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e26:	4b89      	ldr	r3, [pc, #548]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d06c      	beq.n	8003f0c <HAL_RCC_OscConfig+0x12c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d168      	bne.n	8003f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e246      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x76>
 8003e48:	4b80      	ldr	r3, [pc, #512]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a7f      	ldr	r2, [pc, #508]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	e02e      	b.n	8003eb4 <HAL_RCC_OscConfig+0xd4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x98>
 8003e5e:	4b7b      	ldr	r3, [pc, #492]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7a      	ldr	r2, [pc, #488]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b78      	ldr	r3, [pc, #480]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a77      	ldr	r2, [pc, #476]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e01d      	b.n	8003eb4 <HAL_RCC_OscConfig+0xd4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0xbc>
 8003e82:	4b72      	ldr	r3, [pc, #456]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a71      	ldr	r2, [pc, #452]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b6f      	ldr	r3, [pc, #444]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6e      	ldr	r2, [pc, #440]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0xd4>
 8003e9c:	4b6b      	ldr	r3, [pc, #428]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a6a      	ldr	r2, [pc, #424]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b68      	ldr	r3, [pc, #416]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a67      	ldr	r2, [pc, #412]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fe4c 	bl	8002b58 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fe48 	bl	8002b58 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e1fa      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b5d      	ldr	r3, [pc, #372]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xe4>
 8003ee2:	e014      	b.n	8003f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fe38 	bl	8002b58 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe fe34 	bl	8002b58 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1e6      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x10c>
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d063      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f1a:	4b4c      	ldr	r3, [pc, #304]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f26:	4b49      	ldr	r3, [pc, #292]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d11c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x18c>
 8003f32:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d116      	bne.n	8003f6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3e:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_RCC_OscConfig+0x176>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e1ba      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4939      	ldr	r1, [pc, #228]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	e03a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f74:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fded 	bl	8002b58 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fe fde9 	bl	8002b58 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e19b      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	4b2d      	ldr	r3, [pc, #180]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa0:	4b2a      	ldr	r3, [pc, #168]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4927      	ldr	r1, [pc, #156]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fdcc 	bl	8002b58 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc4:	f7fe fdc8 	bl	8002b58 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e17a      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d03a      	beq.n	8004064 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d019      	beq.n	800402a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffc:	f7fe fdac 	bl	8002b58 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004004:	f7fe fda8 	bl	8002b58 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e15a      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_RCC_OscConfig+0x26c>)
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004022:	2001      	movs	r0, #1
 8004024:	f000 fac6 	bl	80045b4 <RCC_Delay>
 8004028:	e01c      	b.n	8004064 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_RCC_OscConfig+0x274>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004030:	f7fe fd92 	bl	8002b58 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004036:	e00f      	b.n	8004058 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004038:	f7fe fd8e 	bl	8002b58 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d908      	bls.n	8004058 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e140      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
 8004050:	42420000 	.word	0x42420000
 8004054:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	4b9e      	ldr	r3, [pc, #632]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e9      	bne.n	8004038 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80a6 	beq.w	80041be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004076:	4b97      	ldr	r3, [pc, #604]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10d      	bne.n	800409e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	4b94      	ldr	r3, [pc, #592]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	4a93      	ldr	r2, [pc, #588]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408c:	61d3      	str	r3, [r2, #28]
 800408e:	4b91      	ldr	r3, [pc, #580]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b8e      	ldr	r3, [pc, #568]	; (80042d8 <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d118      	bne.n	80040dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040aa:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x4f8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a8a      	ldr	r2, [pc, #552]	; (80042d8 <HAL_RCC_OscConfig+0x4f8>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b6:	f7fe fd4f 	bl	8002b58 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7fe fd4b 	bl	8002b58 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	; 0x64
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e0fd      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	4b81      	ldr	r3, [pc, #516]	; (80042d8 <HAL_RCC_OscConfig+0x4f8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x312>
 80040e4:	4b7b      	ldr	r3, [pc, #492]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4a7a      	ldr	r2, [pc, #488]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6213      	str	r3, [r2, #32]
 80040f0:	e02d      	b.n	800414e <HAL_RCC_OscConfig+0x36e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x334>
 80040fa:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	4a75      	ldr	r2, [pc, #468]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6213      	str	r3, [r2, #32]
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4a72      	ldr	r2, [pc, #456]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	6213      	str	r3, [r2, #32]
 8004112:	e01c      	b.n	800414e <HAL_RCC_OscConfig+0x36e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b05      	cmp	r3, #5
 800411a:	d10c      	bne.n	8004136 <HAL_RCC_OscConfig+0x356>
 800411c:	4b6d      	ldr	r3, [pc, #436]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	4a6c      	ldr	r2, [pc, #432]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004122:	f043 0304 	orr.w	r3, r3, #4
 8004126:	6213      	str	r3, [r2, #32]
 8004128:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4a69      	ldr	r2, [pc, #420]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6213      	str	r3, [r2, #32]
 8004134:	e00b      	b.n	800414e <HAL_RCC_OscConfig+0x36e>
 8004136:	4b67      	ldr	r3, [pc, #412]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4a66      	ldr	r2, [pc, #408]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	6213      	str	r3, [r2, #32]
 8004142:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	4a63      	ldr	r2, [pc, #396]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d015      	beq.n	8004182 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7fe fcff 	bl	8002b58 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fe fcfb 	bl	8002b58 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0ab      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ee      	beq.n	800415e <HAL_RCC_OscConfig+0x37e>
 8004180:	e014      	b.n	80041ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004182:	f7fe fce9 	bl	8002b58 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fe fce5 	bl	8002b58 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e095      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a0:	4b4c      	ldr	r3, [pc, #304]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ee      	bne.n	800418a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d105      	bne.n	80041be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b2:	4b48      	ldr	r3, [pc, #288]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4a47      	ldr	r2, [pc, #284]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80041b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8081 	beq.w	80042ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c8:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d061      	beq.n	8004298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d146      	bne.n	800426a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041dc:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_RCC_OscConfig+0x4fc>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fe fcb9 	bl	8002b58 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ea:	f7fe fcb5 	bl	8002b58 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e067      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fc:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f0      	bne.n	80041ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d108      	bne.n	8004224 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004212:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	492d      	ldr	r1, [pc, #180]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a19      	ldr	r1, [r3, #32]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	430b      	orrs	r3, r1
 8004236:	4927      	ldr	r1, [pc, #156]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_OscConfig+0x4fc>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fe fc89 	bl	8002b58 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424a:	f7fe fc85 	bl	8002b58 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e037      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x46a>
 8004268:	e02f      	b.n	80042ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_RCC_OscConfig+0x4fc>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fe fc72 	bl	8002b58 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe fc6e 	bl	8002b58 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e020      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x498>
 8004296:	e018      	b.n	80042ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e013      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_OscConfig+0x4f4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40007000 	.word	0x40007000
 80042dc:	42420060 	.word	0x42420060

080042e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0d0      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0207 	bic.w	r2, r3, #7
 800430a:	4965      	ldr	r1, [pc, #404]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0b8      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800433c:	4b59      	ldr	r3, [pc, #356]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004354:	4b53      	ldr	r3, [pc, #332]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a52      	ldr	r2, [pc, #328]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800435e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004360:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	494d      	ldr	r1, [pc, #308]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d040      	beq.n	8004400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d115      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e07f      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439e:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e073      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06b      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043be:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f023 0203 	bic.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4936      	ldr	r1, [pc, #216]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043d0:	f7fe fbc2 	bl	8002b58 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d8:	f7fe fbbe 	bl	8002b58 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e053      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 020c 	and.w	r2, r3, #12
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1eb      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d210      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 0207 	bic.w	r2, r3, #7
 8004416:	4922      	ldr	r1, [pc, #136]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e032      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443c:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4916      	ldr	r1, [pc, #88]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	490e      	ldr	r1, [pc, #56]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800446e:	f000 f821 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004472:	4601      	mov	r1, r0
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004480:	5cd3      	ldrb	r3, [r2, r3]
 8004482:	fa21 f303 	lsr.w	r3, r1, r3
 8004486:	4a09      	ldr	r2, [pc, #36]	; (80044ac <HAL_RCC_ClockConfig+0x1cc>)
 8004488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_RCC_ClockConfig+0x1d0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fb20 	bl	8002ad4 <HAL_InitTick>

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40022000 	.word	0x40022000
 80044a4:	40021000 	.word	0x40021000
 80044a8:	08007c74 	.word	0x08007c74
 80044ac:	20000004 	.word	0x20000004
 80044b0:	20000008 	.word	0x20000008

080044b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	b490      	push	{r4, r7}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044ba:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044bc:	1d3c      	adds	r4, r7, #4
 80044be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x40>
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x46>
 80044f2:	e02d      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044f6:	623b      	str	r3, [r7, #32]
      break;
 80044f8:	e02d      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	0c9b      	lsrs	r3, r3, #18
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004506:	4413      	add	r3, r2
 8004508:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800450c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	0c5b      	lsrs	r3, r3, #17
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004526:	4413      	add	r3, r2
 8004528:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800452c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004532:	fb02 f203 	mul.w	r2, r2, r3
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	e004      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004544:	fb02 f303 	mul.w	r3, r2, r3
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	623b      	str	r3, [r7, #32]
      break;
 800454e:	e002      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004552:	623b      	str	r3, [r7, #32]
      break;
 8004554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004556:	6a3b      	ldr	r3, [r7, #32]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bc90      	pop	{r4, r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	08007c40 	.word	0x08007c40
 8004568:	08007c50 	.word	0x08007c50
 800456c:	40021000 	.word	0x40021000
 8004570:	007a1200 	.word	0x007a1200
 8004574:	003d0900 	.word	0x003d0900

08004578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800457c:	4b02      	ldr	r3, [pc, #8]	; (8004588 <HAL_RCC_GetHCLKFreq+0x10>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	20000004 	.word	0x20000004

0800458c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004590:	f7ff fff2 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 8004594:	4601      	mov	r1, r0
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	0adb      	lsrs	r3, r3, #11
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	08007c84 	.word	0x08007c84

080045b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <RCC_Delay+0x34>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <RCC_Delay+0x38>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	0a5b      	lsrs	r3, r3, #9
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045d0:	bf00      	nop
  }
  while (Delay --);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1e5a      	subs	r2, r3, #1
 80045d6:	60fa      	str	r2, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <RCC_Delay+0x1c>
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000004 	.word	0x20000004
 80045ec:	10624dd3 	.word	0x10624dd3

080045f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d07d      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4a4b      	ldr	r2, [pc, #300]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004626:	61d3      	str	r3, [r2, #28]
 8004628:	4b49      	ldr	r3, [pc, #292]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004634:	2301      	movs	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	4b46      	ldr	r3, [pc, #280]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d118      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004644:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a42      	ldr	r2, [pc, #264]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800464a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004650:	f7fe fa82 	bl	8002b58 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	e008      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004658:	f7fe fa7e 	bl	8002b58 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e06d      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004676:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02e      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d027      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004694:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469e:	4b2e      	ldr	r3, [pc, #184]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046a4:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d014      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fe fa4d 	bl	8002b58 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fe fa49 	bl	8002b58 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e036      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ee      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4917      	ldr	r1, [pc, #92]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fc:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004706:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	490b      	ldr	r1, [pc, #44]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4904      	ldr	r1, [pc, #16]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	40007000 	.word	0x40007000
 8004758:	42420440 	.word	0x42420440

0800475c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b08d      	sub	sp, #52	; 0x34
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004766:	f107 040c 	add.w	r4, r7, #12
 800476a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800476c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
 800477a:	2300      	movs	r3, #0
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477e:	2300      	movs	r3, #0
 8004780:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	2300      	movs	r3, #0
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d07f      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004790:	2b10      	cmp	r3, #16
 8004792:	d002      	beq.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004794:	2b01      	cmp	r3, #1
 8004796:	d048      	beq.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004798:	e08b      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800479a:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047a0:	4b48      	ldr	r3, [pc, #288]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d07f      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	0c9b      	lsrs	r3, r3, #18
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047b8:	4413      	add	r3, r2
 80047ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047be:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d018      	beq.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ca:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	0c5b      	lsrs	r3, r3, #17
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047d8:	4413      	add	r3, r2
 80047da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047ea:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	4a33      	ldr	r2, [pc, #204]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004806:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004812:	d102      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004818:	e048      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004828:	e040      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800482a:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	d108      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
 800484c:	e01f      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004858:	d109      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800485a:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004866:	f649 4340 	movw	r3, #40000	; 0x9c40
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
 800486c:	e00f      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d11a      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d014      	beq.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004886:	f24f 4324 	movw	r3, #62500	; 0xf424
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800488c:	e010      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800488e:	e00f      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004890:	f7ff fe7c 	bl	800458c <HAL_RCC_GetPCLK2Freq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	0b9b      	lsrs	r3, r3, #14
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	3301      	adds	r3, #1
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048b0:	bf00      	nop
    }
  }
  return (frequency);
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3734      	adds	r7, #52	; 0x34
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	08007c54 	.word	0x08007c54
 80048c0:	08007c64 	.word	0x08007c64
 80048c4:	40021000 	.word	0x40021000
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	003d0900 	.word	0x003d0900
 80048d0:	aaaaaaab 	.word	0xaaaaaaab

080048d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e041      	b.n	800496a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fd ff94 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 fae8 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e032      	b.n	80049f2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a18      	ldr	r2, [pc, #96]	; (80049fc <HAL_TIM_Base_Start+0x88>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_TIM_Base_Start+0x48>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d009      	beq.n	80049bc <HAL_TIM_Base_Start+0x48>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <HAL_TIM_Base_Start+0x8c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIM_Base_Start+0x48>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <HAL_TIM_Base_Start+0x90>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d010      	beq.n	80049f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	e007      	b.n	80049f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800

08004a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e041      	b.n	8004a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f839 	bl	8004aa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f000 fa4e 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <HAL_TIM_PWM_Start+0x24>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e022      	b.n	8004b22 <HAL_TIM_PWM_Start+0x6a>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d109      	bne.n	8004af6 <HAL_TIM_PWM_Start+0x3e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	bf14      	ite	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	2300      	moveq	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e015      	b.n	8004b22 <HAL_TIM_PWM_Start+0x6a>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d109      	bne.n	8004b10 <HAL_TIM_PWM_Start+0x58>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	bf14      	ite	ne
 8004b08:	2301      	movne	r3, #1
 8004b0a:	2300      	moveq	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e008      	b.n	8004b22 <HAL_TIM_PWM_Start+0x6a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e05e      	b.n	8004be8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_PWM_Start+0x82>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b38:	e013      	b.n	8004b62 <HAL_TIM_PWM_Start+0xaa>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d104      	bne.n	8004b4a <HAL_TIM_PWM_Start+0x92>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b48:	e00b      	b.n	8004b62 <HAL_TIM_PWM_Start+0xaa>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_PWM_Start+0xa2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b58:	e003      	b.n	8004b62 <HAL_TIM_PWM_Start+0xaa>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fc3c 	bl	80053e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <HAL_TIM_PWM_Start+0x138>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d107      	bne.n	8004b8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIM_PWM_Start+0x138>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00e      	beq.n	8004bb2 <HAL_TIM_PWM_Start+0xfa>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIM_PWM_Start+0xfa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <HAL_TIM_PWM_Start+0x13c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIM_PWM_Start+0xfa>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <HAL_TIM_PWM_Start+0x140>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b06      	cmp	r3, #6
 8004bc2:	d010      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	e007      	b.n	8004be6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800

08004bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0ac      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	f200 809f 	bhi.w	8004d64 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004d65 	.word	0x08004d65
 8004c34:	08004d65 	.word	0x08004d65
 8004c38:	08004d65 	.word	0x08004d65
 8004c3c:	08004ca1 	.word	0x08004ca1
 8004c40:	08004d65 	.word	0x08004d65
 8004c44:	08004d65 	.word	0x08004d65
 8004c48:	08004d65 	.word	0x08004d65
 8004c4c:	08004ce3 	.word	0x08004ce3
 8004c50:	08004d65 	.word	0x08004d65
 8004c54:	08004d65 	.word	0x08004d65
 8004c58:	08004d65 	.word	0x08004d65
 8004c5c:	08004d23 	.word	0x08004d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f9a0 	bl	8004fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0208 	orr.w	r2, r2, #8
 8004c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0204 	bic.w	r2, r2, #4
 8004c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6999      	ldr	r1, [r3, #24]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	619a      	str	r2, [r3, #24]
      break;
 8004c9e:	e062      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f9e6 	bl	8005078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6999      	ldr	r1, [r3, #24]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	021a      	lsls	r2, r3, #8
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	619a      	str	r2, [r3, #24]
      break;
 8004ce0:	e041      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fa2f 	bl	800514c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0208 	orr.w	r2, r2, #8
 8004cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0204 	bic.w	r2, r2, #4
 8004d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69d9      	ldr	r1, [r3, #28]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	61da      	str	r2, [r3, #28]
      break;
 8004d20:	e021      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fa79 	bl	8005220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69d9      	ldr	r1, [r3, #28]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	021a      	lsls	r2, r3, #8
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	61da      	str	r2, [r3, #28]
      break;
 8004d62:	e000      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_ConfigClockSource+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0a6      	b.n	8004ede <HAL_TIM_ConfigClockSource+0x166>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d067      	beq.n	8004e98 <HAL_TIM_ConfigClockSource+0x120>
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d80b      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x6c>
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d073      	beq.n	8004eb8 <HAL_TIM_ConfigClockSource+0x140>
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d802      	bhi.n	8004dda <HAL_TIM_ConfigClockSource+0x62>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d06f      	beq.n	8004eb8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004dd8:	e078      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d06c      	beq.n	8004eb8 <HAL_TIM_ConfigClockSource+0x140>
 8004dde:	2b30      	cmp	r3, #48	; 0x30
 8004de0:	d06a      	beq.n	8004eb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004de2:	e073      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d00d      	beq.n	8004e04 <HAL_TIM_ConfigClockSource+0x8c>
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d804      	bhi.n	8004df6 <HAL_TIM_ConfigClockSource+0x7e>
 8004dec:	2b50      	cmp	r3, #80	; 0x50
 8004dee:	d033      	beq.n	8004e58 <HAL_TIM_ConfigClockSource+0xe0>
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d041      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004df4:	e06a      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	d066      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x152>
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	d017      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e02:	e063      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6899      	ldr	r1, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f000 fac9 	bl	80053aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e04c      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6899      	ldr	r1, [r3, #8]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f000 fab2 	bl	80053aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e54:	609a      	str	r2, [r3, #8]
      break;
 8004e56:	e039      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6859      	ldr	r1, [r3, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f000 fa29 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2150      	movs	r1, #80	; 0x50
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fa80 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004e76:	e029      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	461a      	mov	r2, r3
 8004e86:	f000 fa47 	bl	8005318 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2160      	movs	r1, #96	; 0x60
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fa70 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004e96:	e019      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6859      	ldr	r1, [r3, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f000 fa09 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2140      	movs	r1, #64	; 0x40
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fa60 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004eb6:	e009      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 fa57 	bl	8005376 <TIM_ITRx_SetConfig>
        break;
 8004ec8:	e000      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <TIM_Base_SetConfig+0xb8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <TIM_Base_SetConfig+0x30>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d007      	beq.n	8004f18 <TIM_Base_SetConfig+0x30>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <TIM_Base_SetConfig+0xbc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0x30>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <TIM_Base_SetConfig+0xc0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d108      	bne.n	8004f2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <TIM_Base_SetConfig+0xb8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <TIM_Base_SetConfig+0x62>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d007      	beq.n	8004f4a <TIM_Base_SetConfig+0x62>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <TIM_Base_SetConfig+0xbc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_Base_SetConfig+0x62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <TIM_Base_SetConfig+0xc0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d108      	bne.n	8004f5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a07      	ldr	r2, [pc, #28]	; (8004fa0 <TIM_Base_SetConfig+0xb8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	615a      	str	r2, [r3, #20]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800

08004fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 0302 	bic.w	r3, r3, #2
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <TIM_OC1_SetConfig+0xc8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10c      	bne.n	8005022 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0308 	bic.w	r3, r3, #8
 800500e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <TIM_OC1_SetConfig+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d111      	bne.n	800504e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00

08005078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0210 	bic.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0320 	bic.w	r3, r3, #32
 80050c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <TIM_OC2_SetConfig+0xd0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10d      	bne.n	80050f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a14      	ldr	r2, [pc, #80]	; (8005148 <TIM_OC2_SetConfig+0xd0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d113      	bne.n	8005124 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00

0800514c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <TIM_OC3_SetConfig+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10d      	bne.n	80051c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a14      	ldr	r2, [pc, #80]	; (800521c <TIM_OC3_SetConfig+0xd0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d113      	bne.n	80051f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00

08005220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800526a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <TIM_OC4_SetConfig+0x98>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d109      	bne.n	8005294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	40012c00 	.word	0x40012c00

080052bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 030a 	bic.w	r3, r3, #10
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 0210 	bic.w	r2, r3, #16
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005342:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	031b      	lsls	r3, r3, #12
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	f043 0307 	orr.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	021a      	lsls	r2, r3, #8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	609a      	str	r2, [r3, #8]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2201      	movs	r2, #1
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	43db      	mvns	r3, r3
 800540a:	401a      	ands	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005444:	2302      	movs	r3, #2
 8005446:	e046      	b.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005494:	d009      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d10c      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800

080054ec <__errno>:
 80054ec:	4b01      	ldr	r3, [pc, #4]	; (80054f4 <__errno+0x8>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000010 	.word	0x20000010

080054f8 <gmtime>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <gmtime+0x20>)
 80054fc:	4605      	mov	r5, r0
 80054fe:	681c      	ldr	r4, [r3, #0]
 8005500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005502:	b91b      	cbnz	r3, 800550c <gmtime+0x14>
 8005504:	2024      	movs	r0, #36	; 0x24
 8005506:	f000 f8d9 	bl	80056bc <malloc>
 800550a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800550c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800550e:	4628      	mov	r0, r5
 8005510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005514:	f000 b802 	b.w	800551c <gmtime_r>
 8005518:	20000010 	.word	0x20000010

0800551c <gmtime_r>:
 800551c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005520:	e9d0 8900 	ldrd	r8, r9, [r0]
 8005524:	460c      	mov	r4, r1
 8005526:	4a4f      	ldr	r2, [pc, #316]	; (8005664 <gmtime_r+0x148>)
 8005528:	2300      	movs	r3, #0
 800552a:	4640      	mov	r0, r8
 800552c:	4649      	mov	r1, r9
 800552e:	f7fb fd03 	bl	8000f38 <__aeabi_ldivmod>
 8005532:	4a4c      	ldr	r2, [pc, #304]	; (8005664 <gmtime_r+0x148>)
 8005534:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8005538:	2300      	movs	r3, #0
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fb fcfb 	bl	8000f38 <__aeabi_ldivmod>
 8005542:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005546:	2a00      	cmp	r2, #0
 8005548:	bfbc      	itt	lt
 800554a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800554e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8005552:	fb92 f3f1 	sdiv	r3, r2, r1
 8005556:	fb01 2213 	mls	r2, r1, r3, r2
 800555a:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800555e:	60a3      	str	r3, [r4, #8]
 8005560:	fb92 f3f1 	sdiv	r3, r2, r1
 8005564:	fb01 2213 	mls	r2, r1, r3, r2
 8005568:	6022      	str	r2, [r4, #0]
 800556a:	f04f 0207 	mov.w	r2, #7
 800556e:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 8005572:	bfb8      	it	lt
 8005574:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	1ceb      	adds	r3, r5, #3
 800557c:	fb93 f2f2 	sdiv	r2, r3, r2
 8005580:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	bf48      	it	mi
 8005588:	3307      	addmi	r3, #7
 800558a:	2d00      	cmp	r5, #0
 800558c:	4836      	ldr	r0, [pc, #216]	; (8005668 <gmtime_r+0x14c>)
 800558e:	61a3      	str	r3, [r4, #24]
 8005590:	bfbd      	ittte	lt
 8005592:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 8005596:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800559a:	fb93 f0f0 	sdivlt	r0, r3, r0
 800559e:	fb95 f0f0 	sdivge	r0, r5, r0
 80055a2:	f648 61ac 	movw	r1, #36524	; 0x8eac
 80055a6:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80055aa:	4b30      	ldr	r3, [pc, #192]	; (800566c <gmtime_r+0x150>)
 80055ac:	f240 166d 	movw	r6, #365	; 0x16d
 80055b0:	fb03 5300 	mla	r3, r3, r0, r5
 80055b4:	fbb3 f1f1 	udiv	r1, r3, r1
 80055b8:	fbb3 f2f7 	udiv	r2, r3, r7
 80055bc:	4419      	add	r1, r3
 80055be:	1a89      	subs	r1, r1, r2
 80055c0:	4a2b      	ldr	r2, [pc, #172]	; (8005670 <gmtime_r+0x154>)
 80055c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80055c6:	1a8a      	subs	r2, r1, r2
 80055c8:	f648 6194 	movw	r1, #36500	; 0x8e94
 80055cc:	fbb2 f1f1 	udiv	r1, r2, r1
 80055d0:	fbb2 f5f6 	udiv	r5, r2, r6
 80055d4:	fbb2 f2f7 	udiv	r2, r2, r7
 80055d8:	440b      	add	r3, r1
 80055da:	2199      	movs	r1, #153	; 0x99
 80055dc:	1a9a      	subs	r2, r3, r2
 80055de:	fb06 2315 	mls	r3, r6, r5, r2
 80055e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80055e6:	3202      	adds	r2, #2
 80055e8:	fbb2 f2f1 	udiv	r2, r2, r1
 80055ec:	2705      	movs	r7, #5
 80055ee:	4351      	muls	r1, r2
 80055f0:	3102      	adds	r1, #2
 80055f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80055f6:	2a0a      	cmp	r2, #10
 80055f8:	f103 0601 	add.w	r6, r3, #1
 80055fc:	eba6 0101 	sub.w	r1, r6, r1
 8005600:	bf34      	ite	cc
 8005602:	2602      	movcc	r6, #2
 8005604:	f06f 0609 	mvncs.w	r6, #9
 8005608:	4416      	add	r6, r2
 800560a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800560e:	fb02 5000 	mla	r0, r2, r0, r5
 8005612:	2e01      	cmp	r6, #1
 8005614:	bf98      	it	ls
 8005616:	3001      	addls	r0, #1
 8005618:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800561c:	d30c      	bcc.n	8005638 <gmtime_r+0x11c>
 800561e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005622:	61e3      	str	r3, [r4, #28]
 8005624:	2300      	movs	r3, #0
 8005626:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 800562a:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800562e:	60e1      	str	r1, [r4, #12]
 8005630:	6223      	str	r3, [r4, #32]
 8005632:	4620      	mov	r0, r4
 8005634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005638:	07aa      	lsls	r2, r5, #30
 800563a:	d105      	bne.n	8005648 <gmtime_r+0x12c>
 800563c:	2764      	movs	r7, #100	; 0x64
 800563e:	fbb5 f2f7 	udiv	r2, r5, r7
 8005642:	fb07 5212 	mls	r2, r7, r2, r5
 8005646:	b95a      	cbnz	r2, 8005660 <gmtime_r+0x144>
 8005648:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800564c:	fbb5 f2f7 	udiv	r2, r5, r7
 8005650:	fb07 5212 	mls	r2, r7, r2, r5
 8005654:	fab2 f282 	clz	r2, r2
 8005658:	0952      	lsrs	r2, r2, #5
 800565a:	333b      	adds	r3, #59	; 0x3b
 800565c:	4413      	add	r3, r2
 800565e:	e7e0      	b.n	8005622 <gmtime_r+0x106>
 8005660:	2201      	movs	r2, #1
 8005662:	e7fa      	b.n	800565a <gmtime_r+0x13e>
 8005664:	00015180 	.word	0x00015180
 8005668:	00023ab1 	.word	0x00023ab1
 800566c:	fffdc54f 	.word	0xfffdc54f
 8005670:	00023ab0 	.word	0x00023ab0

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	2500      	movs	r5, #0
 8005678:	4e0c      	ldr	r6, [pc, #48]	; (80056ac <__libc_init_array+0x38>)
 800567a:	4c0d      	ldr	r4, [pc, #52]	; (80056b0 <__libc_init_array+0x3c>)
 800567c:	1ba4      	subs	r4, r4, r6
 800567e:	10a4      	asrs	r4, r4, #2
 8005680:	42a5      	cmp	r5, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	f002 f996 	bl	80079b4 <_init>
 8005688:	2500      	movs	r5, #0
 800568a:	4e0a      	ldr	r6, [pc, #40]	; (80056b4 <__libc_init_array+0x40>)
 800568c:	4c0a      	ldr	r4, [pc, #40]	; (80056b8 <__libc_init_array+0x44>)
 800568e:	1ba4      	subs	r4, r4, r6
 8005690:	10a4      	asrs	r4, r4, #2
 8005692:	42a5      	cmp	r5, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800569c:	4798      	blx	r3
 800569e:	3501      	adds	r5, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056a6:	4798      	blx	r3
 80056a8:	3501      	adds	r5, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	08008170 	.word	0x08008170
 80056b0:	08008170 	.word	0x08008170
 80056b4:	08008170 	.word	0x08008170
 80056b8:	08008174 	.word	0x08008174

080056bc <malloc>:
 80056bc:	4b02      	ldr	r3, [pc, #8]	; (80056c8 <malloc+0xc>)
 80056be:	4601      	mov	r1, r0
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	f000 b85f 	b.w	8005784 <_malloc_r>
 80056c6:	bf00      	nop
 80056c8:	20000010 	.word	0x20000010

080056cc <free>:
 80056cc:	4b02      	ldr	r3, [pc, #8]	; (80056d8 <free+0xc>)
 80056ce:	4601      	mov	r1, r0
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	f000 b80b 	b.w	80056ec <_free_r>
 80056d6:	bf00      	nop
 80056d8:	20000010 	.word	0x20000010

080056dc <memset>:
 80056dc:	4603      	mov	r3, r0
 80056de:	4402      	add	r2, r0
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d100      	bne.n	80056e6 <memset+0xa>
 80056e4:	4770      	bx	lr
 80056e6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ea:	e7f9      	b.n	80056e0 <memset+0x4>

080056ec <_free_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4605      	mov	r5, r0
 80056f0:	2900      	cmp	r1, #0
 80056f2:	d043      	beq.n	800577c <_free_r+0x90>
 80056f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f8:	1f0c      	subs	r4, r1, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfb8      	it	lt
 80056fe:	18e4      	addlt	r4, r4, r3
 8005700:	f001 f8ea 	bl	80068d8 <__malloc_lock>
 8005704:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <_free_r+0x94>)
 8005706:	6813      	ldr	r3, [r2, #0]
 8005708:	4610      	mov	r0, r2
 800570a:	b933      	cbnz	r3, 800571a <_free_r+0x2e>
 800570c:	6063      	str	r3, [r4, #4]
 800570e:	6014      	str	r4, [r2, #0]
 8005710:	4628      	mov	r0, r5
 8005712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005716:	f001 b8e0 	b.w	80068da <__malloc_unlock>
 800571a:	42a3      	cmp	r3, r4
 800571c:	d90b      	bls.n	8005736 <_free_r+0x4a>
 800571e:	6821      	ldr	r1, [r4, #0]
 8005720:	1862      	adds	r2, r4, r1
 8005722:	4293      	cmp	r3, r2
 8005724:	bf01      	itttt	eq
 8005726:	681a      	ldreq	r2, [r3, #0]
 8005728:	685b      	ldreq	r3, [r3, #4]
 800572a:	1852      	addeq	r2, r2, r1
 800572c:	6022      	streq	r2, [r4, #0]
 800572e:	6063      	str	r3, [r4, #4]
 8005730:	6004      	str	r4, [r0, #0]
 8005732:	e7ed      	b.n	8005710 <_free_r+0x24>
 8005734:	4613      	mov	r3, r2
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	b10a      	cbz	r2, 800573e <_free_r+0x52>
 800573a:	42a2      	cmp	r2, r4
 800573c:	d9fa      	bls.n	8005734 <_free_r+0x48>
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	1858      	adds	r0, r3, r1
 8005742:	42a0      	cmp	r0, r4
 8005744:	d10b      	bne.n	800575e <_free_r+0x72>
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	4401      	add	r1, r0
 800574a:	1858      	adds	r0, r3, r1
 800574c:	4282      	cmp	r2, r0
 800574e:	6019      	str	r1, [r3, #0]
 8005750:	d1de      	bne.n	8005710 <_free_r+0x24>
 8005752:	6810      	ldr	r0, [r2, #0]
 8005754:	6852      	ldr	r2, [r2, #4]
 8005756:	4401      	add	r1, r0
 8005758:	6019      	str	r1, [r3, #0]
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	e7d8      	b.n	8005710 <_free_r+0x24>
 800575e:	d902      	bls.n	8005766 <_free_r+0x7a>
 8005760:	230c      	movs	r3, #12
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	e7d4      	b.n	8005710 <_free_r+0x24>
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1821      	adds	r1, r4, r0
 800576a:	428a      	cmp	r2, r1
 800576c:	bf01      	itttt	eq
 800576e:	6811      	ldreq	r1, [r2, #0]
 8005770:	6852      	ldreq	r2, [r2, #4]
 8005772:	1809      	addeq	r1, r1, r0
 8005774:	6021      	streq	r1, [r4, #0]
 8005776:	6062      	str	r2, [r4, #4]
 8005778:	605c      	str	r4, [r3, #4]
 800577a:	e7c9      	b.n	8005710 <_free_r+0x24>
 800577c:	bd38      	pop	{r3, r4, r5, pc}
 800577e:	bf00      	nop
 8005780:	2000026c 	.word	0x2000026c

08005784 <_malloc_r>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	1ccd      	adds	r5, r1, #3
 8005788:	f025 0503 	bic.w	r5, r5, #3
 800578c:	3508      	adds	r5, #8
 800578e:	2d0c      	cmp	r5, #12
 8005790:	bf38      	it	cc
 8005792:	250c      	movcc	r5, #12
 8005794:	2d00      	cmp	r5, #0
 8005796:	4606      	mov	r6, r0
 8005798:	db01      	blt.n	800579e <_malloc_r+0x1a>
 800579a:	42a9      	cmp	r1, r5
 800579c:	d903      	bls.n	80057a6 <_malloc_r+0x22>
 800579e:	230c      	movs	r3, #12
 80057a0:	6033      	str	r3, [r6, #0]
 80057a2:	2000      	movs	r0, #0
 80057a4:	bd70      	pop	{r4, r5, r6, pc}
 80057a6:	f001 f897 	bl	80068d8 <__malloc_lock>
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <_malloc_r+0xac>)
 80057ac:	6814      	ldr	r4, [r2, #0]
 80057ae:	4621      	mov	r1, r4
 80057b0:	b991      	cbnz	r1, 80057d8 <_malloc_r+0x54>
 80057b2:	4c20      	ldr	r4, [pc, #128]	; (8005834 <_malloc_r+0xb0>)
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	b91b      	cbnz	r3, 80057c0 <_malloc_r+0x3c>
 80057b8:	4630      	mov	r0, r6
 80057ba:	f000 f83d 	bl	8005838 <_sbrk_r>
 80057be:	6020      	str	r0, [r4, #0]
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f000 f838 	bl	8005838 <_sbrk_r>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d124      	bne.n	8005816 <_malloc_r+0x92>
 80057cc:	230c      	movs	r3, #12
 80057ce:	4630      	mov	r0, r6
 80057d0:	6033      	str	r3, [r6, #0]
 80057d2:	f001 f882 	bl	80068da <__malloc_unlock>
 80057d6:	e7e4      	b.n	80057a2 <_malloc_r+0x1e>
 80057d8:	680b      	ldr	r3, [r1, #0]
 80057da:	1b5b      	subs	r3, r3, r5
 80057dc:	d418      	bmi.n	8005810 <_malloc_r+0x8c>
 80057de:	2b0b      	cmp	r3, #11
 80057e0:	d90f      	bls.n	8005802 <_malloc_r+0x7e>
 80057e2:	600b      	str	r3, [r1, #0]
 80057e4:	18cc      	adds	r4, r1, r3
 80057e6:	50cd      	str	r5, [r1, r3]
 80057e8:	4630      	mov	r0, r6
 80057ea:	f001 f876 	bl	80068da <__malloc_unlock>
 80057ee:	f104 000b 	add.w	r0, r4, #11
 80057f2:	1d23      	adds	r3, r4, #4
 80057f4:	f020 0007 	bic.w	r0, r0, #7
 80057f8:	1ac3      	subs	r3, r0, r3
 80057fa:	d0d3      	beq.n	80057a4 <_malloc_r+0x20>
 80057fc:	425a      	negs	r2, r3
 80057fe:	50e2      	str	r2, [r4, r3]
 8005800:	e7d0      	b.n	80057a4 <_malloc_r+0x20>
 8005802:	684b      	ldr	r3, [r1, #4]
 8005804:	428c      	cmp	r4, r1
 8005806:	bf16      	itet	ne
 8005808:	6063      	strne	r3, [r4, #4]
 800580a:	6013      	streq	r3, [r2, #0]
 800580c:	460c      	movne	r4, r1
 800580e:	e7eb      	b.n	80057e8 <_malloc_r+0x64>
 8005810:	460c      	mov	r4, r1
 8005812:	6849      	ldr	r1, [r1, #4]
 8005814:	e7cc      	b.n	80057b0 <_malloc_r+0x2c>
 8005816:	1cc4      	adds	r4, r0, #3
 8005818:	f024 0403 	bic.w	r4, r4, #3
 800581c:	42a0      	cmp	r0, r4
 800581e:	d005      	beq.n	800582c <_malloc_r+0xa8>
 8005820:	1a21      	subs	r1, r4, r0
 8005822:	4630      	mov	r0, r6
 8005824:	f000 f808 	bl	8005838 <_sbrk_r>
 8005828:	3001      	adds	r0, #1
 800582a:	d0cf      	beq.n	80057cc <_malloc_r+0x48>
 800582c:	6025      	str	r5, [r4, #0]
 800582e:	e7db      	b.n	80057e8 <_malloc_r+0x64>
 8005830:	2000026c 	.word	0x2000026c
 8005834:	20000270 	.word	0x20000270

08005838 <_sbrk_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	2300      	movs	r3, #0
 800583c:	4c05      	ldr	r4, [pc, #20]	; (8005854 <_sbrk_r+0x1c>)
 800583e:	4605      	mov	r5, r0
 8005840:	4608      	mov	r0, r1
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	f7fd f884 	bl	8002950 <_sbrk>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_sbrk_r+0x1a>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	b103      	cbz	r3, 8005852 <_sbrk_r+0x1a>
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	200003b0 	.word	0x200003b0

08005858 <iso_year_adjust>:
 8005858:	6942      	ldr	r2, [r0, #20]
 800585a:	f240 736c 	movw	r3, #1900	; 0x76c
 800585e:	2a00      	cmp	r2, #0
 8005860:	bfa8      	it	ge
 8005862:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8005866:	441a      	add	r2, r3
 8005868:	0793      	lsls	r3, r2, #30
 800586a:	d105      	bne.n	8005878 <iso_year_adjust+0x20>
 800586c:	2164      	movs	r1, #100	; 0x64
 800586e:	fb92 f3f1 	sdiv	r3, r2, r1
 8005872:	fb01 2313 	mls	r3, r1, r3, r2
 8005876:	b9d3      	cbnz	r3, 80058ae <iso_year_adjust+0x56>
 8005878:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800587c:	fb92 f3f1 	sdiv	r3, r2, r1
 8005880:	fb01 2313 	mls	r3, r1, r3, r2
 8005884:	fab3 f283 	clz	r2, r3
 8005888:	0952      	lsrs	r2, r2, #5
 800588a:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005894:	4413      	add	r3, r2
 8005896:	2b21      	cmp	r3, #33	; 0x21
 8005898:	dc11      	bgt.n	80058be <iso_year_adjust+0x66>
 800589a:	2b20      	cmp	r3, #32
 800589c:	da30      	bge.n	8005900 <iso_year_adjust+0xa8>
 800589e:	2b0d      	cmp	r3, #13
 80058a0:	dc07      	bgt.n	80058b2 <iso_year_adjust+0x5a>
 80058a2:	2b0a      	cmp	r3, #10
 80058a4:	da2c      	bge.n	8005900 <iso_year_adjust+0xa8>
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d92a      	bls.n	8005900 <iso_year_adjust+0xa8>
 80058aa:	2000      	movs	r0, #0
 80058ac:	4770      	bx	lr
 80058ae:	2201      	movs	r2, #1
 80058b0:	e7eb      	b.n	800588a <iso_year_adjust+0x32>
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	dbf9      	blt.n	80058aa <iso_year_adjust+0x52>
 80058b6:	2b11      	cmp	r3, #17
 80058b8:	dd22      	ble.n	8005900 <iso_year_adjust+0xa8>
 80058ba:	3b1c      	subs	r3, #28
 80058bc:	e7f3      	b.n	80058a6 <iso_year_adjust+0x4e>
 80058be:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80058c2:	4293      	cmp	r3, r2
 80058c4:	dc0f      	bgt.n	80058e6 <iso_year_adjust+0x8e>
 80058c6:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80058ca:	4293      	cmp	r3, r2
 80058cc:	da09      	bge.n	80058e2 <iso_year_adjust+0x8a>
 80058ce:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d005      	beq.n	80058e2 <iso_year_adjust+0x8a>
 80058d6:	dbe8      	blt.n	80058aa <iso_year_adjust+0x52>
 80058d8:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80058dc:	3b12      	subs	r3, #18
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d8e3      	bhi.n	80058aa <iso_year_adjust+0x52>
 80058e2:	2001      	movs	r0, #1
 80058e4:	4770      	bx	lr
 80058e6:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d0f9      	beq.n	80058e2 <iso_year_adjust+0x8a>
 80058ee:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d0f5      	beq.n	80058e2 <iso_year_adjust+0x8a>
 80058f6:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d1d5      	bne.n	80058aa <iso_year_adjust+0x52>
 80058fe:	e7f0      	b.n	80058e2 <iso_year_adjust+0x8a>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	4770      	bx	lr
	...

08005908 <__strftime>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	461d      	mov	r5, r3
 800590e:	2300      	movs	r3, #0
 8005910:	4607      	mov	r7, r0
 8005912:	460e      	mov	r6, r1
 8005914:	461c      	mov	r4, r3
 8005916:	b091      	sub	sp, #68	; 0x44
 8005918:	9303      	str	r3, [sp, #12]
 800591a:	f101 3bff 	add.w	fp, r1, #4294967295
 800591e:	7813      	ldrb	r3, [r2, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 84e2 	beq.w	80062ea <__strftime+0x9e2>
 8005926:	2b25      	cmp	r3, #37	; 0x25
 8005928:	d11f      	bne.n	800596a <__strftime+0x62>
 800592a:	f892 a001 	ldrb.w	sl, [r2, #1]
 800592e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8005932:	d023      	beq.n	800597c <__strftime+0x74>
 8005934:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005938:	d020      	beq.n	800597c <__strftime+0x74>
 800593a:	f04f 0a00 	mov.w	sl, #0
 800593e:	f102 0801 	add.w	r8, r2, #1
 8005942:	f898 3000 	ldrb.w	r3, [r8]
 8005946:	3b31      	subs	r3, #49	; 0x31
 8005948:	2b08      	cmp	r3, #8
 800594a:	d81a      	bhi.n	8005982 <__strftime+0x7a>
 800594c:	4640      	mov	r0, r8
 800594e:	220a      	movs	r2, #10
 8005950:	a908      	add	r1, sp, #32
 8005952:	f000 fd85 	bl	8006460 <strtoul>
 8005956:	4681      	mov	r9, r0
 8005958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800595c:	f898 3000 	ldrb.w	r3, [r8]
 8005960:	2b45      	cmp	r3, #69	; 0x45
 8005962:	d111      	bne.n	8005988 <__strftime+0x80>
 8005964:	f108 0801 	add.w	r8, r8, #1
 8005968:	e010      	b.n	800598c <__strftime+0x84>
 800596a:	45a3      	cmp	fp, r4
 800596c:	d802      	bhi.n	8005974 <__strftime+0x6c>
 800596e:	2400      	movs	r4, #0
 8005970:	f000 bcbe 	b.w	80062f0 <__strftime+0x9e8>
 8005974:	553b      	strb	r3, [r7, r4]
 8005976:	3201      	adds	r2, #1
 8005978:	3401      	adds	r4, #1
 800597a:	e7d0      	b.n	800591e <__strftime+0x16>
 800597c:	f102 0802 	add.w	r8, r2, #2
 8005980:	e7df      	b.n	8005942 <__strftime+0x3a>
 8005982:	f04f 0900 	mov.w	r9, #0
 8005986:	e7e9      	b.n	800595c <__strftime+0x54>
 8005988:	2b4f      	cmp	r3, #79	; 0x4f
 800598a:	d0eb      	beq.n	8005964 <__strftime+0x5c>
 800598c:	f898 1000 	ldrb.w	r1, [r8]
 8005990:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8005994:	2b55      	cmp	r3, #85	; 0x55
 8005996:	d8ea      	bhi.n	800596e <__strftime+0x66>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <__strftime+0x98>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080062e1 	.word	0x080062e1
 80059a4:	0800596f 	.word	0x0800596f
 80059a8:	0800596f 	.word	0x0800596f
 80059ac:	0800596f 	.word	0x0800596f
 80059b0:	0800596f 	.word	0x0800596f
 80059b4:	0800596f 	.word	0x0800596f
 80059b8:	0800596f 	.word	0x0800596f
 80059bc:	0800596f 	.word	0x0800596f
 80059c0:	0800596f 	.word	0x0800596f
 80059c4:	0800596f 	.word	0x0800596f
 80059c8:	0800596f 	.word	0x0800596f
 80059cc:	0800596f 	.word	0x0800596f
 80059d0:	0800596f 	.word	0x0800596f
 80059d4:	0800596f 	.word	0x0800596f
 80059d8:	0800596f 	.word	0x0800596f
 80059dc:	0800596f 	.word	0x0800596f
 80059e0:	0800596f 	.word	0x0800596f
 80059e4:	0800596f 	.word	0x0800596f
 80059e8:	0800596f 	.word	0x0800596f
 80059ec:	0800596f 	.word	0x0800596f
 80059f0:	0800596f 	.word	0x0800596f
 80059f4:	0800596f 	.word	0x0800596f
 80059f8:	0800596f 	.word	0x0800596f
 80059fc:	0800596f 	.word	0x0800596f
 8005a00:	0800596f 	.word	0x0800596f
 8005a04:	0800596f 	.word	0x0800596f
 8005a08:	0800596f 	.word	0x0800596f
 8005a0c:	0800596f 	.word	0x0800596f
 8005a10:	08005b35 	.word	0x08005b35
 8005a14:	08005b89 	.word	0x08005b89
 8005a18:	08005bf9 	.word	0x08005bf9
 8005a1c:	08005c93 	.word	0x08005c93
 8005a20:	0800596f 	.word	0x0800596f
 8005a24:	08005ce1 	.word	0x08005ce1
 8005a28:	08005dd1 	.word	0x08005dd1
 8005a2c:	08005ee9 	.word	0x08005ee9
 8005a30:	08005ef7 	.word	0x08005ef7
 8005a34:	0800596f 	.word	0x0800596f
 8005a38:	0800596f 	.word	0x0800596f
 8005a3c:	0800596f 	.word	0x0800596f
 8005a40:	08005f27 	.word	0x08005f27
 8005a44:	0800596f 	.word	0x0800596f
 8005a48:	0800596f 	.word	0x0800596f
 8005a4c:	08005f39 	.word	0x08005f39
 8005a50:	0800596f 	.word	0x0800596f
 8005a54:	08005f97 	.word	0x08005f97
 8005a58:	080060af 	.word	0x080060af
 8005a5c:	080060bd 	.word	0x080060bd
 8005a60:	0800610d 	.word	0x0800610d
 8005a64:	0800611d 	.word	0x0800611d
 8005a68:	0800618d 	.word	0x0800618d
 8005a6c:	08005bf1 	.word	0x08005bf1
 8005a70:	080061c7 	.word	0x080061c7
 8005a74:	0800628d 	.word	0x0800628d
 8005a78:	0800596f 	.word	0x0800596f
 8005a7c:	0800596f 	.word	0x0800596f
 8005a80:	0800596f 	.word	0x0800596f
 8005a84:	0800596f 	.word	0x0800596f
 8005a88:	0800596f 	.word	0x0800596f
 8005a8c:	0800596f 	.word	0x0800596f
 8005a90:	08005af9 	.word	0x08005af9
 8005a94:	08005b61 	.word	0x08005b61
 8005a98:	08005bb3 	.word	0x08005bb3
 8005a9c:	08005c6f 	.word	0x08005c6f
 8005aa0:	08005c6f 	.word	0x08005c6f
 8005aa4:	0800596f 	.word	0x0800596f
 8005aa8:	08005d39 	.word	0x08005d39
 8005aac:	08005b61 	.word	0x08005b61
 8005ab0:	0800596f 	.word	0x0800596f
 8005ab4:	08005f19 	.word	0x08005f19
 8005ab8:	08005ee9 	.word	0x08005ee9
 8005abc:	08005ef7 	.word	0x08005ef7
 8005ac0:	08005f21 	.word	0x08005f21
 8005ac4:	08005f2b 	.word	0x08005f2b
 8005ac8:	0800596f 	.word	0x0800596f
 8005acc:	08005f39 	.word	0x08005f39
 8005ad0:	0800596f 	.word	0x0800596f
 8005ad4:	08005be1 	.word	0x08005be1
 8005ad8:	08005fa9 	.word	0x08005fa9
 8005adc:	080060b3 	.word	0x080060b3
 8005ae0:	080060f5 	.word	0x080060f5
 8005ae4:	0800596f 	.word	0x0800596f
 8005ae8:	08006181 	.word	0x08006181
 8005aec:	08005be9 	.word	0x08005be9
 8005af0:	080061a5 	.word	0x080061a5
 8005af4:	0800621b 	.word	0x0800621b
 8005af8:	69ab      	ldr	r3, [r5, #24]
 8005afa:	4aa8      	ldr	r2, [pc, #672]	; (8005d9c <__strftime+0x494>)
 8005afc:	3318      	adds	r3, #24
 8005afe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005b02:	4648      	mov	r0, r9
 8005b04:	f7fa fb24 	bl	8000150 <strlen>
 8005b08:	eba9 0904 	sub.w	r9, r9, r4
 8005b0c:	4420      	add	r0, r4
 8005b0e:	42a0      	cmp	r0, r4
 8005b10:	d108      	bne.n	8005b24 <__strftime+0x21c>
 8005b12:	4604      	mov	r4, r0
 8005b14:	f898 3000 	ldrb.w	r3, [r8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 83e6 	beq.w	80062ea <__strftime+0x9e2>
 8005b1e:	f108 0201 	add.w	r2, r8, #1
 8005b22:	e6fc      	b.n	800591e <__strftime+0x16>
 8005b24:	45a3      	cmp	fp, r4
 8005b26:	f67f af22 	bls.w	800596e <__strftime+0x66>
 8005b2a:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005b2e:	553b      	strb	r3, [r7, r4]
 8005b30:	3401      	adds	r4, #1
 8005b32:	e7ec      	b.n	8005b0e <__strftime+0x206>
 8005b34:	69aa      	ldr	r2, [r5, #24]
 8005b36:	4b99      	ldr	r3, [pc, #612]	; (8005d9c <__strftime+0x494>)
 8005b38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005b3c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8005b40:	4648      	mov	r0, r9
 8005b42:	f7fa fb05 	bl	8000150 <strlen>
 8005b46:	eba9 0904 	sub.w	r9, r9, r4
 8005b4a:	4420      	add	r0, r4
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d0e0      	beq.n	8005b12 <__strftime+0x20a>
 8005b50:	45a3      	cmp	fp, r4
 8005b52:	f67f af0c 	bls.w	800596e <__strftime+0x66>
 8005b56:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005b5a:	553b      	strb	r3, [r7, r4]
 8005b5c:	3401      	adds	r4, #1
 8005b5e:	e7f5      	b.n	8005b4c <__strftime+0x244>
 8005b60:	692a      	ldr	r2, [r5, #16]
 8005b62:	4b8e      	ldr	r3, [pc, #568]	; (8005d9c <__strftime+0x494>)
 8005b64:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8005b68:	4648      	mov	r0, r9
 8005b6a:	f7fa faf1 	bl	8000150 <strlen>
 8005b6e:	eba9 0904 	sub.w	r9, r9, r4
 8005b72:	4420      	add	r0, r4
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	d0cc      	beq.n	8005b12 <__strftime+0x20a>
 8005b78:	45a3      	cmp	fp, r4
 8005b7a:	f67f aef8 	bls.w	800596e <__strftime+0x66>
 8005b7e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005b82:	553b      	strb	r3, [r7, r4]
 8005b84:	3401      	adds	r4, #1
 8005b86:	e7f5      	b.n	8005b74 <__strftime+0x26c>
 8005b88:	692b      	ldr	r3, [r5, #16]
 8005b8a:	4a84      	ldr	r2, [pc, #528]	; (8005d9c <__strftime+0x494>)
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005b92:	4648      	mov	r0, r9
 8005b94:	f7fa fadc 	bl	8000150 <strlen>
 8005b98:	eba9 0904 	sub.w	r9, r9, r4
 8005b9c:	4420      	add	r0, r4
 8005b9e:	42a0      	cmp	r0, r4
 8005ba0:	d0b7      	beq.n	8005b12 <__strftime+0x20a>
 8005ba2:	45a3      	cmp	fp, r4
 8005ba4:	f67f aee3 	bls.w	800596e <__strftime+0x66>
 8005ba8:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005bac:	553b      	strb	r3, [r7, r4]
 8005bae:	3401      	adds	r4, #1
 8005bb0:	e7f5      	b.n	8005b9e <__strftime+0x296>
 8005bb2:	4b7a      	ldr	r3, [pc, #488]	; (8005d9c <__strftime+0x494>)
 8005bb4:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8005bb8:	4648      	mov	r0, r9
 8005bba:	f7fa fac9 	bl	8000150 <strlen>
 8005bbe:	f899 3000 	ldrb.w	r3, [r9]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0a6      	beq.n	8005b14 <__strftime+0x20c>
 8005bc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005bc8:	464a      	mov	r2, r9
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462b      	mov	r3, r5
 8005bce:	1b31      	subs	r1, r6, r4
 8005bd0:	1938      	adds	r0, r7, r4
 8005bd2:	f7ff fe99 	bl	8005908 <__strftime>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f77f aec9 	ble.w	800596e <__strftime+0x66>
 8005bdc:	4404      	add	r4, r0
 8005bde:	e799      	b.n	8005b14 <__strftime+0x20c>
 8005be0:	4b6e      	ldr	r3, [pc, #440]	; (8005d9c <__strftime+0x494>)
 8005be2:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8005be6:	e7e7      	b.n	8005bb8 <__strftime+0x2b0>
 8005be8:	4b6c      	ldr	r3, [pc, #432]	; (8005d9c <__strftime+0x494>)
 8005bea:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8005bee:	e7e3      	b.n	8005bb8 <__strftime+0x2b0>
 8005bf0:	4b6a      	ldr	r3, [pc, #424]	; (8005d9c <__strftime+0x494>)
 8005bf2:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8005bf6:	e7df      	b.n	8005bb8 <__strftime+0x2b0>
 8005bf8:	4b69      	ldr	r3, [pc, #420]	; (8005da0 <__strftime+0x498>)
 8005bfa:	6969      	ldr	r1, [r5, #20]
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	bfac      	ite	ge
 8005c00:	2300      	movge	r3, #0
 8005c02:	2301      	movlt	r3, #1
 8005c04:	2900      	cmp	r1, #0
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	db10      	blt.n	8005c2c <__strftime+0x324>
 8005c0a:	2064      	movs	r0, #100	; 0x64
 8005c0c:	fb91 f0f0 	sdiv	r0, r1, r0
 8005c10:	3013      	adds	r0, #19
 8005c12:	f1ba 0f00 	cmp.w	sl, #0
 8005c16:	d013      	beq.n	8005c40 <__strftime+0x338>
 8005c18:	2863      	cmp	r0, #99	; 0x63
 8005c1a:	dd26      	ble.n	8005c6a <__strftime+0x362>
 8005c1c:	4a61      	ldr	r2, [pc, #388]	; (8005da4 <__strftime+0x49c>)
 8005c1e:	4b62      	ldr	r3, [pc, #392]	; (8005da8 <__strftime+0x4a0>)
 8005c20:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005c24:	bf18      	it	ne
 8005c26:	4613      	movne	r3, r2
 8005c28:	4a60      	ldr	r2, [pc, #384]	; (8005dac <__strftime+0x4a4>)
 8005c2a:	e00b      	b.n	8005c44 <__strftime+0x33c>
 8005c2c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8005c30:	9105      	str	r1, [sp, #20]
 8005c32:	f000 fdcb 	bl	80067cc <abs>
 8005c36:	2364      	movs	r3, #100	; 0x64
 8005c38:	9905      	ldr	r1, [sp, #20]
 8005c3a:	fb90 f0f3 	sdiv	r0, r0, r3
 8005c3e:	e7e8      	b.n	8005c12 <__strftime+0x30a>
 8005c40:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <__strftime+0x49c>)
 8005c42:	4a5b      	ldr	r2, [pc, #364]	; (8005db0 <__strftime+0x4a8>)
 8005c44:	9001      	str	r0, [sp, #4]
 8005c46:	9804      	ldr	r0, [sp, #16]
 8005c48:	f8df c154 	ldr.w	ip, [pc, #340]	; 8005da0 <__strftime+0x498>
 8005c4c:	f1b9 0f02 	cmp.w	r9, #2
 8005c50:	bf2c      	ite	cs
 8005c52:	ebc0 0009 	rsbcs	r0, r0, r9
 8005c56:	f1c0 0002 	rsbcc	r0, r0, #2
 8005c5a:	9000      	str	r0, [sp, #0]
 8005c5c:	4855      	ldr	r0, [pc, #340]	; (8005db4 <__strftime+0x4ac>)
 8005c5e:	4561      	cmp	r1, ip
 8005c60:	bfb8      	it	lt
 8005c62:	4603      	movlt	r3, r0
 8005c64:	1b31      	subs	r1, r6, r4
 8005c66:	1938      	adds	r0, r7, r4
 8005c68:	e029      	b.n	8005cbe <__strftime+0x3b6>
 8005c6a:	4b4e      	ldr	r3, [pc, #312]	; (8005da4 <__strftime+0x49c>)
 8005c6c:	e7dc      	b.n	8005c28 <__strftime+0x320>
 8005c6e:	4852      	ldr	r0, [pc, #328]	; (8005db8 <__strftime+0x4b0>)
 8005c70:	4a52      	ldr	r2, [pc, #328]	; (8005dbc <__strftime+0x4b4>)
 8005c72:	68eb      	ldr	r3, [r5, #12]
 8005c74:	2964      	cmp	r1, #100	; 0x64
 8005c76:	bf18      	it	ne
 8005c78:	4602      	movne	r2, r0
 8005c7a:	1b31      	subs	r1, r6, r4
 8005c7c:	1938      	adds	r0, r7, r4
 8005c7e:	f001 f907 	bl	8006e90 <sniprintf>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f6ff ae73 	blt.w	800596e <__strftime+0x66>
 8005c88:	4404      	add	r4, r0
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	f63f af42 	bhi.w	8005b14 <__strftime+0x20c>
 8005c90:	e66d      	b.n	800596e <__strftime+0x66>
 8005c92:	6968      	ldr	r0, [r5, #20]
 8005c94:	692b      	ldr	r3, [r5, #16]
 8005c96:	2800      	cmp	r0, #0
 8005c98:	eb07 0904 	add.w	r9, r7, r4
 8005c9c:	eba6 0a04 	sub.w	sl, r6, r4
 8005ca0:	f103 0301 	add.w	r3, r3, #1
 8005ca4:	68ea      	ldr	r2, [r5, #12]
 8005ca6:	db0d      	blt.n	8005cc4 <__strftime+0x3bc>
 8005ca8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005cac:	fb90 f1fc 	sdiv	r1, r0, ip
 8005cb0:	fb0c 0011 	mls	r0, ip, r1, r0
 8005cb4:	e9cd 2000 	strd	r2, r0, [sp]
 8005cb8:	4651      	mov	r1, sl
 8005cba:	4648      	mov	r0, r9
 8005cbc:	4a40      	ldr	r2, [pc, #256]	; (8005dc0 <__strftime+0x4b8>)
 8005cbe:	f001 f8e7 	bl	8006e90 <sniprintf>
 8005cc2:	e7de      	b.n	8005c82 <__strftime+0x37a>
 8005cc4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005cc8:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8005ccc:	f000 fd7e 	bl	80067cc <abs>
 8005cd0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8005cd4:	2164      	movs	r1, #100	; 0x64
 8005cd6:	fb90 fcf1 	sdiv	ip, r0, r1
 8005cda:	fb0c 0011 	mls	r0, ip, r1, r0
 8005cde:	e7e9      	b.n	8005cb4 <__strftime+0x3ac>
 8005ce0:	2325      	movs	r3, #37	; 0x25
 8005ce2:	f88d 3020 	strb.w	r3, [sp, #32]
 8005ce6:	f1ba 0f00 	cmp.w	sl, #0
 8005cea:	d013      	beq.n	8005d14 <__strftime+0x40c>
 8005cec:	f1b9 0f06 	cmp.w	r9, #6
 8005cf0:	bf38      	it	cc
 8005cf2:	f04f 0906 	movcc.w	r9, #6
 8005cf6:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 8005cfa:	f1b9 0306 	subs.w	r3, r9, #6
 8005cfe:	d10f      	bne.n	8005d20 <__strftime+0x418>
 8005d00:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8005d04:	492f      	ldr	r1, [pc, #188]	; (8005dc4 <__strftime+0x4bc>)
 8005d06:	f001 f923 	bl	8006f50 <strcpy>
 8005d0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d0c:	aa08      	add	r2, sp, #32
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	462b      	mov	r3, r5
 8005d12:	e75c      	b.n	8005bce <__strftime+0x2c6>
 8005d14:	232b      	movs	r3, #43	; 0x2b
 8005d16:	f04f 090a 	mov.w	r9, #10
 8005d1a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8005d1e:	e7ec      	b.n	8005cfa <__strftime+0x3f2>
 8005d20:	4a29      	ldr	r2, [pc, #164]	; (8005dc8 <__strftime+0x4c0>)
 8005d22:	211e      	movs	r1, #30
 8005d24:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8005d28:	f001 f8b2 	bl	8006e90 <sniprintf>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	dde7      	ble.n	8005d00 <__strftime+0x3f8>
 8005d30:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8005d34:	4418      	add	r0, r3
 8005d36:	e7e5      	b.n	8005d04 <__strftime+0x3fc>
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7ff fd8d 	bl	8005858 <iso_year_adjust>
 8005d3e:	4681      	mov	r9, r0
 8005d40:	6968      	ldr	r0, [r5, #20]
 8005d42:	2800      	cmp	r0, #0
 8005d44:	db1a      	blt.n	8005d7c <__strftime+0x474>
 8005d46:	2264      	movs	r2, #100	; 0x64
 8005d48:	fb90 f3f2 	sdiv	r3, r0, r2
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	fb02 0013 	mls	r0, r2, r3, r0
 8005d54:	da1a      	bge.n	8005d8c <__strftime+0x484>
 8005d56:	696a      	ldr	r2, [r5, #20]
 8005d58:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <__strftime+0x4c4>)
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bfb8      	it	lt
 8005d5e:	f04f 0901 	movlt.w	r9, #1
 8005d62:	2364      	movs	r3, #100	; 0x64
 8005d64:	4481      	add	r9, r0
 8005d66:	fb99 f0f3 	sdiv	r0, r9, r3
 8005d6a:	fb03 9910 	mls	r9, r3, r0, r9
 8005d6e:	4499      	add	r9, r3
 8005d70:	fb99 f2f3 	sdiv	r2, r9, r3
 8005d74:	fb03 9312 	mls	r3, r3, r2, r9
 8005d78:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <__strftime+0x4b4>)
 8005d7a:	e77e      	b.n	8005c7a <__strftime+0x372>
 8005d7c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005d80:	f000 fd24 	bl	80067cc <abs>
 8005d84:	2364      	movs	r3, #100	; 0x64
 8005d86:	fb90 f2f3 	sdiv	r2, r0, r3
 8005d8a:	e7df      	b.n	8005d4c <__strftime+0x444>
 8005d8c:	d0e9      	beq.n	8005d62 <__strftime+0x45a>
 8005d8e:	696a      	ldr	r2, [r5, #20]
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <__strftime+0x498>)
 8005d92:	429a      	cmp	r2, r3
 8005d94:	bfb8      	it	lt
 8005d96:	f04f 39ff 	movlt.w	r9, #4294967295
 8005d9a:	e7e2      	b.n	8005d62 <__strftime+0x45a>
 8005d9c:	08007ce8 	.word	0x08007ce8
 8005da0:	fffff894 	.word	0xfffff894
 8005da4:	08007f5a 	.word	0x08007f5a
 8005da8:	08007c9b 	.word	0x08007c9b
 8005dac:	08007c93 	.word	0x08007c93
 8005db0:	08007c8c 	.word	0x08007c8c
 8005db4:	080080ff 	.word	0x080080ff
 8005db8:	08007c9d 	.word	0x08007c9d
 8005dbc:	08007cab 	.word	0x08007cab
 8005dc0:	08007ca1 	.word	0x08007ca1
 8005dc4:	08007cb4 	.word	0x08007cb4
 8005dc8:	08007cb0 	.word	0x08007cb0
 8005dcc:	fffff895 	.word	0xfffff895
 8005dd0:	696b      	ldr	r3, [r5, #20]
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	9a04      	ldr	r2, [sp, #16]
 8005dd8:	4bbc      	ldr	r3, [pc, #752]	; (80060cc <__strftime+0x7c4>)
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	bfac      	ite	ge
 8005dde:	2300      	movge	r3, #0
 8005de0:	2301      	movlt	r3, #1
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	f7ff fd38 	bl	8005858 <iso_year_adjust>
 8005de8:	9a04      	ldr	r2, [sp, #16]
 8005dea:	4603      	mov	r3, r0
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	db3a      	blt.n	8005e66 <__strftime+0x55e>
 8005df0:	2264      	movs	r2, #100	; 0x64
 8005df2:	9904      	ldr	r1, [sp, #16]
 8005df4:	fb91 f2f2 	sdiv	r2, r1, r2
 8005df8:	3213      	adds	r2, #19
 8005dfa:	6968      	ldr	r0, [r5, #20]
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	db3d      	blt.n	8005e7c <__strftime+0x574>
 8005e00:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005e04:	fb90 fefc 	sdiv	lr, r0, ip
 8005e08:	fb0c 001e 	mls	r0, ip, lr, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	da44      	bge.n	8005e9a <__strftime+0x592>
 8005e10:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80060f0 <__strftime+0x7e8>
 8005e14:	6969      	ldr	r1, [r5, #20]
 8005e16:	4561      	cmp	r1, ip
 8005e18:	da01      	bge.n	8005e1e <__strftime+0x516>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	9305      	str	r3, [sp, #20]
 8005e1e:	4403      	add	r3, r0
 8005e20:	1c59      	adds	r1, r3, #1
 8005e22:	d146      	bne.n	8005eb2 <__strftime+0x5aa>
 8005e24:	2363      	movs	r3, #99	; 0x63
 8005e26:	3a01      	subs	r2, #1
 8005e28:	2064      	movs	r0, #100	; 0x64
 8005e2a:	fb00 3202 	mla	r2, r0, r2, r3
 8005e2e:	9b05      	ldr	r3, [sp, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d043      	beq.n	8005ebc <__strftime+0x5b4>
 8005e34:	232d      	movs	r3, #45	; 0x2d
 8005e36:	f88d 3020 	strb.w	r3, [sp, #32]
 8005e3a:	f1b9 0f00 	cmp.w	r9, #0
 8005e3e:	d001      	beq.n	8005e44 <__strftime+0x53c>
 8005e40:	f109 39ff 	add.w	r9, r9, #4294967295
 8005e44:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8005e48:	2125      	movs	r1, #37	; 0x25
 8005e4a:	7019      	strb	r1, [r3, #0]
 8005e4c:	f1ba 0f00 	cmp.w	sl, #0
 8005e50:	d144      	bne.n	8005edc <__strftime+0x5d4>
 8005e52:	1c58      	adds	r0, r3, #1
 8005e54:	499e      	ldr	r1, [pc, #632]	; (80060d0 <__strftime+0x7c8>)
 8005e56:	9204      	str	r2, [sp, #16]
 8005e58:	f001 f87a 	bl	8006f50 <strcpy>
 8005e5c:	9a04      	ldr	r2, [sp, #16]
 8005e5e:	9200      	str	r2, [sp, #0]
 8005e60:	464b      	mov	r3, r9
 8005e62:	aa08      	add	r2, sp, #32
 8005e64:	e09b      	b.n	8005f9e <__strftime+0x696>
 8005e66:	9b04      	ldr	r3, [sp, #16]
 8005e68:	9006      	str	r0, [sp, #24]
 8005e6a:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 8005e6e:	f000 fcad 	bl	80067cc <abs>
 8005e72:	2264      	movs	r2, #100	; 0x64
 8005e74:	9b06      	ldr	r3, [sp, #24]
 8005e76:	fb90 f2f2 	sdiv	r2, r0, r2
 8005e7a:	e7be      	b.n	8005dfa <__strftime+0x4f2>
 8005e7c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005e80:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8005e84:	f000 fca2 	bl	80067cc <abs>
 8005e88:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005e8c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005e90:	fb90 fefc 	sdiv	lr, r0, ip
 8005e94:	fb0e 001c 	mls	r0, lr, ip, r0
 8005e98:	e7b8      	b.n	8005e0c <__strftime+0x504>
 8005e9a:	d0c0      	beq.n	8005e1e <__strftime+0x516>
 8005e9c:	9904      	ldr	r1, [sp, #16]
 8005e9e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 80060cc <__strftime+0x7c4>
 8005ea2:	4561      	cmp	r1, ip
 8005ea4:	bfae      	itee	ge
 8005ea6:	2100      	movge	r1, #0
 8005ea8:	2101      	movlt	r1, #1
 8005eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eae:	9105      	str	r1, [sp, #20]
 8005eb0:	e7b5      	b.n	8005e1e <__strftime+0x516>
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	bf04      	itt	eq
 8005eb6:	3201      	addeq	r2, #1
 8005eb8:	2300      	moveq	r3, #0
 8005eba:	e7b5      	b.n	8005e28 <__strftime+0x520>
 8005ebc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005ec0:	d110      	bne.n	8005ee4 <__strftime+0x5dc>
 8005ec2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d90c      	bls.n	8005ee4 <__strftime+0x5dc>
 8005eca:	f88d a020 	strb.w	sl, [sp, #32]
 8005ece:	f1b9 0f00 	cmp.w	r9, #0
 8005ed2:	d1b5      	bne.n	8005e40 <__strftime+0x538>
 8005ed4:	2125      	movs	r1, #37	; 0x25
 8005ed6:	ab10      	add	r3, sp, #64	; 0x40
 8005ed8:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 8005edc:	2130      	movs	r1, #48	; 0x30
 8005ede:	1c98      	adds	r0, r3, #2
 8005ee0:	7059      	strb	r1, [r3, #1]
 8005ee2:	e7b7      	b.n	8005e54 <__strftime+0x54c>
 8005ee4:	ab08      	add	r3, sp, #32
 8005ee6:	e7af      	b.n	8005e48 <__strftime+0x540>
 8005ee8:	487a      	ldr	r0, [pc, #488]	; (80060d4 <__strftime+0x7cc>)
 8005eea:	4a7b      	ldr	r2, [pc, #492]	; (80060d8 <__strftime+0x7d0>)
 8005eec:	68ab      	ldr	r3, [r5, #8]
 8005eee:	296b      	cmp	r1, #107	; 0x6b
 8005ef0:	bf18      	it	ne
 8005ef2:	4602      	movne	r2, r0
 8005ef4:	e6c1      	b.n	8005c7a <__strftime+0x372>
 8005ef6:	68ab      	ldr	r3, [r5, #8]
 8005ef8:	220c      	movs	r2, #12
 8005efa:	b15b      	cbz	r3, 8005f14 <__strftime+0x60c>
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <__strftime+0x600>
 8005f00:	fb93 f0f2 	sdiv	r0, r3, r2
 8005f04:	fb02 3310 	mls	r3, r2, r0, r3
 8005f08:	4873      	ldr	r0, [pc, #460]	; (80060d8 <__strftime+0x7d0>)
 8005f0a:	4a72      	ldr	r2, [pc, #456]	; (80060d4 <__strftime+0x7cc>)
 8005f0c:	2949      	cmp	r1, #73	; 0x49
 8005f0e:	bf18      	it	ne
 8005f10:	4602      	movne	r2, r0
 8005f12:	e6b2      	b.n	8005c7a <__strftime+0x372>
 8005f14:	4613      	mov	r3, r2
 8005f16:	e7f7      	b.n	8005f08 <__strftime+0x600>
 8005f18:	69eb      	ldr	r3, [r5, #28]
 8005f1a:	4a70      	ldr	r2, [pc, #448]	; (80060dc <__strftime+0x7d4>)
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	e6ac      	b.n	8005c7a <__strftime+0x372>
 8005f20:	692b      	ldr	r3, [r5, #16]
 8005f22:	3301      	adds	r3, #1
 8005f24:	e728      	b.n	8005d78 <__strftime+0x470>
 8005f26:	686b      	ldr	r3, [r5, #4]
 8005f28:	e726      	b.n	8005d78 <__strftime+0x470>
 8005f2a:	45a3      	cmp	fp, r4
 8005f2c:	f67f ad1f 	bls.w	800596e <__strftime+0x66>
 8005f30:	230a      	movs	r3, #10
 8005f32:	553b      	strb	r3, [r7, r4]
 8005f34:	3401      	adds	r4, #1
 8005f36:	e5ed      	b.n	8005b14 <__strftime+0x20c>
 8005f38:	68ab      	ldr	r3, [r5, #8]
 8005f3a:	2b0b      	cmp	r3, #11
 8005f3c:	bfcc      	ite	gt
 8005f3e:	22a4      	movgt	r2, #164	; 0xa4
 8005f40:	22a0      	movle	r2, #160	; 0xa0
 8005f42:	4b67      	ldr	r3, [pc, #412]	; (80060e0 <__strftime+0x7d8>)
 8005f44:	4413      	add	r3, r2
 8005f46:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005f4a:	4648      	mov	r0, r9
 8005f4c:	f7fa f900 	bl	8000150 <strlen>
 8005f50:	eba9 0304 	sub.w	r3, r9, r4
 8005f54:	eb04 0a00 	add.w	sl, r4, r0
 8005f58:	45a2      	cmp	sl, r4
 8005f5a:	d101      	bne.n	8005f60 <__strftime+0x658>
 8005f5c:	4654      	mov	r4, sl
 8005f5e:	e5d9      	b.n	8005b14 <__strftime+0x20c>
 8005f60:	45a3      	cmp	fp, r4
 8005f62:	f67f ad04 	bls.w	800596e <__strftime+0x66>
 8005f66:	f898 2000 	ldrb.w	r2, [r8]
 8005f6a:	f813 9004 	ldrb.w	r9, [r3, r4]
 8005f6e:	2a50      	cmp	r2, #80	; 0x50
 8005f70:	d10d      	bne.n	8005f8e <__strftime+0x686>
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	f000 fc90 	bl	8006898 <__locale_ctype_ptr>
 8005f78:	4448      	add	r0, r9
 8005f7a:	7842      	ldrb	r2, [r0, #1]
 8005f7c:	9b04      	ldr	r3, [sp, #16]
 8005f7e:	f002 0203 	and.w	r2, r2, #3
 8005f82:	2a01      	cmp	r2, #1
 8005f84:	bf08      	it	eq
 8005f86:	f109 0920 	addeq.w	r9, r9, #32
 8005f8a:	fa5f f989 	uxtb.w	r9, r9
 8005f8e:	f807 9004 	strb.w	r9, [r7, r4]
 8005f92:	3401      	adds	r4, #1
 8005f94:	e7e0      	b.n	8005f58 <__strftime+0x650>
 8005f96:	686b      	ldr	r3, [r5, #4]
 8005f98:	4a52      	ldr	r2, [pc, #328]	; (80060e4 <__strftime+0x7dc>)
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	68ab      	ldr	r3, [r5, #8]
 8005f9e:	1b31      	subs	r1, r6, r4
 8005fa0:	1938      	adds	r0, r7, r4
 8005fa2:	f000 ff75 	bl	8006e90 <sniprintf>
 8005fa6:	e66c      	b.n	8005c82 <__strftime+0x37a>
 8005fa8:	6a2b      	ldr	r3, [r5, #32]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	db7c      	blt.n	80060a8 <__strftime+0x7a0>
 8005fae:	f000 fa87 	bl	80064c0 <__tz_lock>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	b90b      	cbnz	r3, 8005fba <__strftime+0x6b2>
 8005fb6:	f000 fa85 	bl	80064c4 <_tzset_unlocked>
 8005fba:	f000 fc61 	bl	8006880 <__gettzinfo>
 8005fbe:	6a2b      	ldr	r3, [r5, #32]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bfcc      	ite	gt
 8005fc4:	2350      	movgt	r3, #80	; 0x50
 8005fc6:	2328      	movle	r3, #40	; 0x28
 8005fc8:	58c3      	ldr	r3, [r0, r3]
 8005fca:	425b      	negs	r3, r3
 8005fcc:	9304      	str	r3, [sp, #16]
 8005fce:	f000 fa78 	bl	80064c2 <__tz_unlock>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	9303      	str	r3, [sp, #12]
 8005fd6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8005fda:	193b      	adds	r3, r7, r4
 8005fdc:	4662      	mov	r2, ip
 8005fde:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005fe8:	f143 31ff 	adc.w	r1, r3, #4294967295
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f171 0e00 	sbcs.w	lr, r1, #0
 8005ff2:	da03      	bge.n	8005ffc <__strftime+0x6f4>
 8005ff4:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8005ff8:	f143 31ff 	adc.w	r1, r3, #4294967295
 8005ffc:	0883      	lsrs	r3, r0, #2
 8005ffe:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8006002:	4699      	mov	r9, r3
 8006004:	108b      	asrs	r3, r1, #2
 8006006:	2164      	movs	r1, #100	; 0x64
 8006008:	f10c 30ff 	add.w	r0, ip, #4294967295
 800600c:	fb90 f1f1 	sdiv	r1, r0, r1
 8006010:	ebb9 0201 	subs.w	r2, r9, r1
 8006014:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8006018:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800601c:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 8006020:	fb90 f1f1 	sdiv	r1, r0, r1
 8006024:	eb12 0901 	adds.w	r9, r2, r1
 8006028:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 800602c:	f240 116d 	movw	r1, #365	; 0x16d
 8006030:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8006034:	fb01 fc0c 	mul.w	ip, r1, ip
 8006038:	eb19 020c 	adds.w	r2, r9, ip
 800603c:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 8006040:	f04f 0c18 	mov.w	ip, #24
 8006044:	69e9      	ldr	r1, [r5, #28]
 8006046:	eb12 0901 	adds.w	r9, r2, r1
 800604a:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 800604e:	fba9 230c 	umull	r2, r3, r9, ip
 8006052:	4619      	mov	r1, r3
 8006054:	fb0c 130a 	mla	r3, ip, sl, r1
 8006058:	4610      	mov	r0, r2
 800605a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800605e:	4619      	mov	r1, r3
 8006060:	68ab      	ldr	r3, [r5, #8]
 8006062:	18c0      	adds	r0, r0, r3
 8006064:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8006068:	fba0 230c 	umull	r2, r3, r0, ip
 800606c:	4691      	mov	r9, r2
 800606e:	fb0c 3301 	mla	r3, ip, r1, r3
 8006072:	6869      	ldr	r1, [r5, #4]
 8006074:	eb19 0201 	adds.w	r2, r9, r1
 8006078:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800607c:	fba2 010c 	umull	r0, r1, r2, ip
 8006080:	fb0c 1103 	mla	r1, ip, r3, r1
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <__strftime+0x7e0>)
 8006088:	eb10 0903 	adds.w	r9, r0, r3
 800608c:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 8006090:	9b04      	ldr	r3, [sp, #16]
 8006092:	ebb9 0003 	subs.w	r0, r9, r3
 8006096:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 800609a:	e9cd 0100 	strd	r0, r1, [sp]
 800609e:	1b31      	subs	r1, r6, r4
 80060a0:	1938      	adds	r0, r7, r4
 80060a2:	f000 fef5 	bl	8006e90 <sniprintf>
 80060a6:	e5ec      	b.n	8005c82 <__strftime+0x37a>
 80060a8:	2300      	movs	r3, #0
 80060aa:	9304      	str	r3, [sp, #16]
 80060ac:	e793      	b.n	8005fd6 <__strftime+0x6ce>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	e662      	b.n	8005d78 <__strftime+0x470>
 80060b2:	45a3      	cmp	fp, r4
 80060b4:	f67f ac5b 	bls.w	800596e <__strftime+0x66>
 80060b8:	2309      	movs	r3, #9
 80060ba:	e73a      	b.n	8005f32 <__strftime+0x62a>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	4a0b      	ldr	r2, [pc, #44]	; (80060ec <__strftime+0x7e4>)
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	686b      	ldr	r3, [r5, #4]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68ab      	ldr	r3, [r5, #8]
 80060c8:	e5cc      	b.n	8005c64 <__strftime+0x35c>
 80060ca:	bf00      	nop
 80060cc:	fffff894 	.word	0xfffff894
 80060d0:	08007cbc 	.word	0x08007cbc
 80060d4:	08007cab 	.word	0x08007cab
 80060d8:	08007c9d 	.word	0x08007c9d
 80060dc:	08007cc0 	.word	0x08007cc0
 80060e0:	08007ce8 	.word	0x08007ce8
 80060e4:	08007ccf 	.word	0x08007ccf
 80060e8:	08007cc5 	.word	0x08007cc5
 80060ec:	08007cca 	.word	0x08007cca
 80060f0:	fffff895 	.word	0xfffff895
 80060f4:	45a3      	cmp	fp, r4
 80060f6:	f67f ac3a 	bls.w	800596e <__strftime+0x66>
 80060fa:	69ab      	ldr	r3, [r5, #24]
 80060fc:	193a      	adds	r2, r7, r4
 80060fe:	3401      	adds	r4, #1
 8006100:	b913      	cbnz	r3, 8006108 <__strftime+0x800>
 8006102:	2337      	movs	r3, #55	; 0x37
 8006104:	7013      	strb	r3, [r2, #0]
 8006106:	e505      	b.n	8005b14 <__strftime+0x20c>
 8006108:	3330      	adds	r3, #48	; 0x30
 800610a:	e7fb      	b.n	8006104 <__strftime+0x7fc>
 800610c:	69eb      	ldr	r3, [r5, #28]
 800610e:	69aa      	ldr	r2, [r5, #24]
 8006110:	3307      	adds	r3, #7
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	2207      	movs	r2, #7
 8006116:	fb93 f3f2 	sdiv	r3, r3, r2
 800611a:	e62d      	b.n	8005d78 <__strftime+0x470>
 800611c:	4628      	mov	r0, r5
 800611e:	f7ff fb9b 	bl	8005858 <iso_year_adjust>
 8006122:	69aa      	ldr	r2, [r5, #24]
 8006124:	b132      	cbz	r2, 8006134 <__strftime+0x82c>
 8006126:	3a01      	subs	r2, #1
 8006128:	2800      	cmp	r0, #0
 800612a:	dc27      	bgt.n	800617c <__strftime+0x874>
 800612c:	69eb      	ldr	r3, [r5, #28]
 800612e:	d103      	bne.n	8006138 <__strftime+0x830>
 8006130:	330a      	adds	r3, #10
 8006132:	e7ee      	b.n	8006112 <__strftime+0x80a>
 8006134:	2206      	movs	r2, #6
 8006136:	e7f7      	b.n	8006128 <__strftime+0x820>
 8006138:	6968      	ldr	r0, [r5, #20]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2800      	cmp	r0, #0
 800613e:	f240 726b 	movw	r2, #1899	; 0x76b
 8006142:	bfa8      	it	ge
 8006144:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8006148:	4410      	add	r0, r2
 800614a:	0782      	lsls	r2, r0, #30
 800614c:	d105      	bne.n	800615a <__strftime+0x852>
 800614e:	2264      	movs	r2, #100	; 0x64
 8006150:	fb90 f1f2 	sdiv	r1, r0, r2
 8006154:	fb02 0111 	mls	r1, r2, r1, r0
 8006158:	b971      	cbnz	r1, 8006178 <__strftime+0x870>
 800615a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800615e:	fb90 f2f1 	sdiv	r2, r0, r1
 8006162:	fb01 0212 	mls	r2, r1, r2, r0
 8006166:	fab2 f282 	clz	r2, r2
 800616a:	0952      	lsrs	r2, r2, #5
 800616c:	1a9a      	subs	r2, r3, r2
 800616e:	2a04      	cmp	r2, #4
 8006170:	bfcc      	ite	gt
 8006172:	2334      	movgt	r3, #52	; 0x34
 8006174:	2335      	movle	r3, #53	; 0x35
 8006176:	e5ff      	b.n	8005d78 <__strftime+0x470>
 8006178:	2201      	movs	r2, #1
 800617a:	e7f7      	b.n	800616c <__strftime+0x864>
 800617c:	2301      	movs	r3, #1
 800617e:	e5fb      	b.n	8005d78 <__strftime+0x470>
 8006180:	45a3      	cmp	fp, r4
 8006182:	f67f abf4 	bls.w	800596e <__strftime+0x66>
 8006186:	69ab      	ldr	r3, [r5, #24]
 8006188:	3330      	adds	r3, #48	; 0x30
 800618a:	e6d2      	b.n	8005f32 <__strftime+0x62a>
 800618c:	69ab      	ldr	r3, [r5, #24]
 800618e:	b13b      	cbz	r3, 80061a0 <__strftime+0x898>
 8006190:	3b01      	subs	r3, #1
 8006192:	69ea      	ldr	r2, [r5, #28]
 8006194:	3207      	adds	r2, #7
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	2307      	movs	r3, #7
 800619a:	fb92 f3f3 	sdiv	r3, r2, r3
 800619e:	e5eb      	b.n	8005d78 <__strftime+0x470>
 80061a0:	2306      	movs	r3, #6
 80061a2:	e7f6      	b.n	8006192 <__strftime+0x88a>
 80061a4:	6968      	ldr	r0, [r5, #20]
 80061a6:	2800      	cmp	r0, #0
 80061a8:	db05      	blt.n	80061b6 <__strftime+0x8ae>
 80061aa:	2264      	movs	r2, #100	; 0x64
 80061ac:	fb90 f3f2 	sdiv	r3, r0, r2
 80061b0:	fb02 0313 	mls	r3, r2, r3, r0
 80061b4:	e5e0      	b.n	8005d78 <__strftime+0x470>
 80061b6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80061ba:	f000 fb07 	bl	80067cc <abs>
 80061be:	2364      	movs	r3, #100	; 0x64
 80061c0:	fb90 f2f3 	sdiv	r2, r0, r3
 80061c4:	e7f4      	b.n	80061b0 <__strftime+0x8a8>
 80061c6:	696b      	ldr	r3, [r5, #20]
 80061c8:	4a52      	ldr	r2, [pc, #328]	; (8006314 <__strftime+0xa0c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	da18      	bge.n	8006200 <__strftime+0x8f8>
 80061ce:	212d      	movs	r1, #45	; 0x2d
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f88d 1020 	strb.w	r1, [sp, #32]
 80061d6:	f1b9 0f00 	cmp.w	r9, #0
 80061da:	d001      	beq.n	80061e0 <__strftime+0x8d8>
 80061dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80061e0:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 80061e4:	2125      	movs	r1, #37	; 0x25
 80061e6:	7011      	strb	r1, [r2, #0]
 80061e8:	f1ba 0f00 	cmp.w	sl, #0
 80061ec:	f040 8088 	bne.w	8006300 <__strftime+0x9f8>
 80061f0:	1c50      	adds	r0, r2, #1
 80061f2:	4949      	ldr	r1, [pc, #292]	; (8006318 <__strftime+0xa10>)
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	f000 feab 	bl	8006f50 <strcpy>
 80061fa:	9b04      	ldr	r3, [sp, #16]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	e62f      	b.n	8005e60 <__strftime+0x558>
 8006200:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8006204:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8006208:	f040 8081 	bne.w	800630e <__strftime+0xa06>
 800620c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006210:	4293      	cmp	r3, r2
 8006212:	d979      	bls.n	8006308 <__strftime+0xa00>
 8006214:	f88d a020 	strb.w	sl, [sp, #32]
 8006218:	e7dd      	b.n	80061d6 <__strftime+0x8ce>
 800621a:	6a2b      	ldr	r3, [r5, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f6ff ac79 	blt.w	8005b14 <__strftime+0x20c>
 8006222:	f000 f94d 	bl	80064c0 <__tz_lock>
 8006226:	9b03      	ldr	r3, [sp, #12]
 8006228:	b90b      	cbnz	r3, 800622e <__strftime+0x926>
 800622a:	f000 f94b 	bl	80064c4 <_tzset_unlocked>
 800622e:	f000 fb27 	bl	8006880 <__gettzinfo>
 8006232:	6a2b      	ldr	r3, [r5, #32]
 8006234:	eb07 0a04 	add.w	sl, r7, r4
 8006238:	2b00      	cmp	r3, #0
 800623a:	bfcc      	ite	gt
 800623c:	2350      	movgt	r3, #80	; 0x50
 800623e:	2328      	movle	r3, #40	; 0x28
 8006240:	58c3      	ldr	r3, [r0, r3]
 8006242:	f1c3 0900 	rsb	r9, r3, #0
 8006246:	f000 f93c 	bl	80064c2 <__tz_unlock>
 800624a:	233c      	movs	r3, #60	; 0x3c
 800624c:	1b31      	subs	r1, r6, r4
 800624e:	fb99 f0f3 	sdiv	r0, r9, r3
 8006252:	9104      	str	r1, [sp, #16]
 8006254:	9303      	str	r3, [sp, #12]
 8006256:	f000 fb17 	bl	8006888 <labs>
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	9904      	ldr	r1, [sp, #16]
 800625e:	fb90 f2f3 	sdiv	r2, r0, r3
 8006262:	fb02 0013 	mls	r0, r2, r3, r0
 8006266:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800626a:	9000      	str	r0, [sp, #0]
 800626c:	fb99 f3f3 	sdiv	r3, r9, r3
 8006270:	4a2a      	ldr	r2, [pc, #168]	; (800631c <__strftime+0xa14>)
 8006272:	4650      	mov	r0, sl
 8006274:	f000 fe0c 	bl	8006e90 <sniprintf>
 8006278:	2800      	cmp	r0, #0
 800627a:	f6ff ab78 	blt.w	800596e <__strftime+0x66>
 800627e:	4404      	add	r4, r0
 8006280:	42a6      	cmp	r6, r4
 8006282:	f67f ab74 	bls.w	800596e <__strftime+0x66>
 8006286:	2301      	movs	r3, #1
 8006288:	9303      	str	r3, [sp, #12]
 800628a:	e443      	b.n	8005b14 <__strftime+0x20c>
 800628c:	6a2b      	ldr	r3, [r5, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f6ff ac40 	blt.w	8005b14 <__strftime+0x20c>
 8006294:	f000 f914 	bl	80064c0 <__tz_lock>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	b90b      	cbnz	r3, 80062a0 <__strftime+0x998>
 800629c:	f000 f912 	bl	80064c4 <_tzset_unlocked>
 80062a0:	6a2b      	ldr	r3, [r5, #32]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <__strftime+0xa18>)
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bfd4      	ite	le
 80062a8:	2300      	movle	r3, #0
 80062aa:	2301      	movgt	r3, #1
 80062ac:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80062b0:	4648      	mov	r0, r9
 80062b2:	f7f9 ff4d 	bl	8000150 <strlen>
 80062b6:	eba9 0904 	sub.w	r9, r9, r4
 80062ba:	eb04 0a00 	add.w	sl, r4, r0
 80062be:	45a2      	cmp	sl, r4
 80062c0:	d103      	bne.n	80062ca <__strftime+0x9c2>
 80062c2:	f000 f8fe 	bl	80064c2 <__tz_unlock>
 80062c6:	4654      	mov	r4, sl
 80062c8:	e7dd      	b.n	8006286 <__strftime+0x97e>
 80062ca:	45a3      	cmp	fp, r4
 80062cc:	d904      	bls.n	80062d8 <__strftime+0x9d0>
 80062ce:	f819 3004 	ldrb.w	r3, [r9, r4]
 80062d2:	553b      	strb	r3, [r7, r4]
 80062d4:	3401      	adds	r4, #1
 80062d6:	e7f2      	b.n	80062be <__strftime+0x9b6>
 80062d8:	f000 f8f3 	bl	80064c2 <__tz_unlock>
 80062dc:	f7ff bb47 	b.w	800596e <__strftime+0x66>
 80062e0:	45a3      	cmp	fp, r4
 80062e2:	f67f ab44 	bls.w	800596e <__strftime+0x66>
 80062e6:	2325      	movs	r3, #37	; 0x25
 80062e8:	e623      	b.n	8005f32 <__strftime+0x62a>
 80062ea:	b10e      	cbz	r6, 80062f0 <__strftime+0x9e8>
 80062ec:	2300      	movs	r3, #0
 80062ee:	553b      	strb	r3, [r7, r4]
 80062f0:	4620      	mov	r0, r4
 80062f2:	b011      	add	sp, #68	; 0x44
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	2225      	movs	r2, #37	; 0x25
 80062fa:	f88d 2020 	strb.w	r2, [sp, #32]
 80062fe:	aa08      	add	r2, sp, #32
 8006300:	2130      	movs	r1, #48	; 0x30
 8006302:	1c90      	adds	r0, r2, #2
 8006304:	7051      	strb	r1, [r2, #1]
 8006306:	e774      	b.n	80061f2 <__strftime+0x8ea>
 8006308:	f1b9 0f00 	cmp.w	r9, #0
 800630c:	d1f4      	bne.n	80062f8 <__strftime+0x9f0>
 800630e:	aa08      	add	r2, sp, #32
 8006310:	e768      	b.n	80061e4 <__strftime+0x8dc>
 8006312:	bf00      	nop
 8006314:	fffff894 	.word	0xfffff894
 8006318:	08007cbc 	.word	0x08007cbc
 800631c:	08007cd9 	.word	0x08007cd9
 8006320:	20000074 	.word	0x20000074

08006324 <strftime>:
 8006324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006326:	4c06      	ldr	r4, [pc, #24]	; (8006340 <strftime+0x1c>)
 8006328:	4d06      	ldr	r5, [pc, #24]	; (8006344 <strftime+0x20>)
 800632a:	6824      	ldr	r4, [r4, #0]
 800632c:	6a24      	ldr	r4, [r4, #32]
 800632e:	2c00      	cmp	r4, #0
 8006330:	bf08      	it	eq
 8006332:	462c      	moveq	r4, r5
 8006334:	9400      	str	r4, [sp, #0]
 8006336:	f7ff fae7 	bl	8005908 <__strftime>
 800633a:	b003      	add	sp, #12
 800633c:	bd30      	pop	{r4, r5, pc}
 800633e:	bf00      	nop
 8006340:	20000010 	.word	0x20000010
 8006344:	200000d8 	.word	0x200000d8

08006348 <_strtoul_l.isra.0>:
 8006348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	4680      	mov	r8, r0
 800634e:	4689      	mov	r9, r1
 8006350:	4692      	mov	sl, r2
 8006352:	461e      	mov	r6, r3
 8006354:	460f      	mov	r7, r1
 8006356:	463d      	mov	r5, r7
 8006358:	9808      	ldr	r0, [sp, #32]
 800635a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800635e:	f000 fa97 	bl	8006890 <__locale_ctype_ptr_l>
 8006362:	4420      	add	r0, r4
 8006364:	7843      	ldrb	r3, [r0, #1]
 8006366:	f013 0308 	ands.w	r3, r3, #8
 800636a:	d130      	bne.n	80063ce <_strtoul_l.isra.0+0x86>
 800636c:	2c2d      	cmp	r4, #45	; 0x2d
 800636e:	d130      	bne.n	80063d2 <_strtoul_l.isra.0+0x8a>
 8006370:	2101      	movs	r1, #1
 8006372:	787c      	ldrb	r4, [r7, #1]
 8006374:	1cbd      	adds	r5, r7, #2
 8006376:	2e00      	cmp	r6, #0
 8006378:	d05c      	beq.n	8006434 <_strtoul_l.isra.0+0xec>
 800637a:	2e10      	cmp	r6, #16
 800637c:	d109      	bne.n	8006392 <_strtoul_l.isra.0+0x4a>
 800637e:	2c30      	cmp	r4, #48	; 0x30
 8006380:	d107      	bne.n	8006392 <_strtoul_l.isra.0+0x4a>
 8006382:	782b      	ldrb	r3, [r5, #0]
 8006384:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006388:	2b58      	cmp	r3, #88	; 0x58
 800638a:	d14e      	bne.n	800642a <_strtoul_l.isra.0+0xe2>
 800638c:	2610      	movs	r6, #16
 800638e:	786c      	ldrb	r4, [r5, #1]
 8006390:	3502      	adds	r5, #2
 8006392:	f04f 32ff 	mov.w	r2, #4294967295
 8006396:	fbb2 f2f6 	udiv	r2, r2, r6
 800639a:	2300      	movs	r3, #0
 800639c:	fb06 fc02 	mul.w	ip, r6, r2
 80063a0:	4618      	mov	r0, r3
 80063a2:	ea6f 0c0c 	mvn.w	ip, ip
 80063a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80063aa:	2f09      	cmp	r7, #9
 80063ac:	d817      	bhi.n	80063de <_strtoul_l.isra.0+0x96>
 80063ae:	463c      	mov	r4, r7
 80063b0:	42a6      	cmp	r6, r4
 80063b2:	dd23      	ble.n	80063fc <_strtoul_l.isra.0+0xb4>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	db1e      	blt.n	80063f6 <_strtoul_l.isra.0+0xae>
 80063b8:	4282      	cmp	r2, r0
 80063ba:	d31c      	bcc.n	80063f6 <_strtoul_l.isra.0+0xae>
 80063bc:	d101      	bne.n	80063c2 <_strtoul_l.isra.0+0x7a>
 80063be:	45a4      	cmp	ip, r4
 80063c0:	db19      	blt.n	80063f6 <_strtoul_l.isra.0+0xae>
 80063c2:	2301      	movs	r3, #1
 80063c4:	fb00 4006 	mla	r0, r0, r6, r4
 80063c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063cc:	e7eb      	b.n	80063a6 <_strtoul_l.isra.0+0x5e>
 80063ce:	462f      	mov	r7, r5
 80063d0:	e7c1      	b.n	8006356 <_strtoul_l.isra.0+0xe>
 80063d2:	2c2b      	cmp	r4, #43	; 0x2b
 80063d4:	bf04      	itt	eq
 80063d6:	1cbd      	addeq	r5, r7, #2
 80063d8:	787c      	ldrbeq	r4, [r7, #1]
 80063da:	4619      	mov	r1, r3
 80063dc:	e7cb      	b.n	8006376 <_strtoul_l.isra.0+0x2e>
 80063de:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80063e2:	2f19      	cmp	r7, #25
 80063e4:	d801      	bhi.n	80063ea <_strtoul_l.isra.0+0xa2>
 80063e6:	3c37      	subs	r4, #55	; 0x37
 80063e8:	e7e2      	b.n	80063b0 <_strtoul_l.isra.0+0x68>
 80063ea:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80063ee:	2f19      	cmp	r7, #25
 80063f0:	d804      	bhi.n	80063fc <_strtoul_l.isra.0+0xb4>
 80063f2:	3c57      	subs	r4, #87	; 0x57
 80063f4:	e7dc      	b.n	80063b0 <_strtoul_l.isra.0+0x68>
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	e7e5      	b.n	80063c8 <_strtoul_l.isra.0+0x80>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	da09      	bge.n	8006414 <_strtoul_l.isra.0+0xcc>
 8006400:	2322      	movs	r3, #34	; 0x22
 8006402:	f04f 30ff 	mov.w	r0, #4294967295
 8006406:	f8c8 3000 	str.w	r3, [r8]
 800640a:	f1ba 0f00 	cmp.w	sl, #0
 800640e:	d107      	bne.n	8006420 <_strtoul_l.isra.0+0xd8>
 8006410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006414:	b101      	cbz	r1, 8006418 <_strtoul_l.isra.0+0xd0>
 8006416:	4240      	negs	r0, r0
 8006418:	f1ba 0f00 	cmp.w	sl, #0
 800641c:	d0f8      	beq.n	8006410 <_strtoul_l.isra.0+0xc8>
 800641e:	b10b      	cbz	r3, 8006424 <_strtoul_l.isra.0+0xdc>
 8006420:	f105 39ff 	add.w	r9, r5, #4294967295
 8006424:	f8ca 9000 	str.w	r9, [sl]
 8006428:	e7f2      	b.n	8006410 <_strtoul_l.isra.0+0xc8>
 800642a:	2430      	movs	r4, #48	; 0x30
 800642c:	2e00      	cmp	r6, #0
 800642e:	d1b0      	bne.n	8006392 <_strtoul_l.isra.0+0x4a>
 8006430:	2608      	movs	r6, #8
 8006432:	e7ae      	b.n	8006392 <_strtoul_l.isra.0+0x4a>
 8006434:	2c30      	cmp	r4, #48	; 0x30
 8006436:	d0a4      	beq.n	8006382 <_strtoul_l.isra.0+0x3a>
 8006438:	260a      	movs	r6, #10
 800643a:	e7aa      	b.n	8006392 <_strtoul_l.isra.0+0x4a>

0800643c <_strtoul_r>:
 800643c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800643e:	4c06      	ldr	r4, [pc, #24]	; (8006458 <_strtoul_r+0x1c>)
 8006440:	4d06      	ldr	r5, [pc, #24]	; (800645c <_strtoul_r+0x20>)
 8006442:	6824      	ldr	r4, [r4, #0]
 8006444:	6a24      	ldr	r4, [r4, #32]
 8006446:	2c00      	cmp	r4, #0
 8006448:	bf08      	it	eq
 800644a:	462c      	moveq	r4, r5
 800644c:	9400      	str	r4, [sp, #0]
 800644e:	f7ff ff7b 	bl	8006348 <_strtoul_l.isra.0>
 8006452:	b003      	add	sp, #12
 8006454:	bd30      	pop	{r4, r5, pc}
 8006456:	bf00      	nop
 8006458:	20000010 	.word	0x20000010
 800645c:	200000d8 	.word	0x200000d8

08006460 <strtoul>:
 8006460:	4b08      	ldr	r3, [pc, #32]	; (8006484 <strtoul+0x24>)
 8006462:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006464:	681c      	ldr	r4, [r3, #0]
 8006466:	4d08      	ldr	r5, [pc, #32]	; (8006488 <strtoul+0x28>)
 8006468:	6a23      	ldr	r3, [r4, #32]
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf08      	it	eq
 800646e:	462b      	moveq	r3, r5
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	4613      	mov	r3, r2
 8006474:	460a      	mov	r2, r1
 8006476:	4601      	mov	r1, r0
 8006478:	4620      	mov	r0, r4
 800647a:	f7ff ff65 	bl	8006348 <_strtoul_l.isra.0>
 800647e:	b003      	add	sp, #12
 8006480:	bd30      	pop	{r4, r5, pc}
 8006482:	bf00      	nop
 8006484:	20000010 	.word	0x20000010
 8006488:	200000d8 	.word	0x200000d8

0800648c <time>:
 800648c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800648e:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <time+0x30>)
 8006490:	4604      	mov	r4, r0
 8006492:	2200      	movs	r2, #0
 8006494:	4669      	mov	r1, sp
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	f000 f9e0 	bl	800685c <_gettimeofday_r>
 800649c:	2800      	cmp	r0, #0
 800649e:	da05      	bge.n	80064ac <time+0x20>
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295
 80064a4:	f04f 33ff 	mov.w	r3, #4294967295
 80064a8:	e9cd 2300 	strd	r2, r3, [sp]
 80064ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b0:	b10c      	cbz	r4, 80064b6 <time+0x2a>
 80064b2:	e9c4 0100 	strd	r0, r1, [r4]
 80064b6:	b004      	add	sp, #16
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	bf00      	nop
 80064bc:	20000010 	.word	0x20000010

080064c0 <__tz_lock>:
 80064c0:	4770      	bx	lr

080064c2 <__tz_unlock>:
 80064c2:	4770      	bx	lr

080064c4 <_tzset_unlocked>:
 80064c4:	4b01      	ldr	r3, [pc, #4]	; (80064cc <_tzset_unlocked+0x8>)
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	f000 b802 	b.w	80064d0 <_tzset_unlocked_r>
 80064cc:	20000010 	.word	0x20000010

080064d0 <_tzset_unlocked_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b08d      	sub	sp, #52	; 0x34
 80064d6:	4607      	mov	r7, r0
 80064d8:	f000 f9d2 	bl	8006880 <__gettzinfo>
 80064dc:	49af      	ldr	r1, [pc, #700]	; (800679c <_tzset_unlocked_r+0x2cc>)
 80064de:	4605      	mov	r5, r0
 80064e0:	4638      	mov	r0, r7
 80064e2:	f000 f9b3 	bl	800684c <_getenv_r>
 80064e6:	4eae      	ldr	r6, [pc, #696]	; (80067a0 <_tzset_unlocked_r+0x2d0>)
 80064e8:	4604      	mov	r4, r0
 80064ea:	b970      	cbnz	r0, 800650a <_tzset_unlocked_r+0x3a>
 80064ec:	4bad      	ldr	r3, [pc, #692]	; (80067a4 <_tzset_unlocked_r+0x2d4>)
 80064ee:	4aae      	ldr	r2, [pc, #696]	; (80067a8 <_tzset_unlocked_r+0x2d8>)
 80064f0:	6018      	str	r0, [r3, #0]
 80064f2:	4bae      	ldr	r3, [pc, #696]	; (80067ac <_tzset_unlocked_r+0x2dc>)
 80064f4:	6018      	str	r0, [r3, #0]
 80064f6:	4bae      	ldr	r3, [pc, #696]	; (80067b0 <_tzset_unlocked_r+0x2e0>)
 80064f8:	6830      	ldr	r0, [r6, #0]
 80064fa:	e9c3 2200 	strd	r2, r2, [r3]
 80064fe:	f7ff f8e5 	bl	80056cc <free>
 8006502:	6034      	str	r4, [r6, #0]
 8006504:	b00d      	add	sp, #52	; 0x34
 8006506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650a:	6831      	ldr	r1, [r6, #0]
 800650c:	2900      	cmp	r1, #0
 800650e:	d15f      	bne.n	80065d0 <_tzset_unlocked_r+0x100>
 8006510:	6830      	ldr	r0, [r6, #0]
 8006512:	f7ff f8db 	bl	80056cc <free>
 8006516:	4620      	mov	r0, r4
 8006518:	f7f9 fe1a 	bl	8000150 <strlen>
 800651c:	1c41      	adds	r1, r0, #1
 800651e:	4638      	mov	r0, r7
 8006520:	f7ff f930 	bl	8005784 <_malloc_r>
 8006524:	6030      	str	r0, [r6, #0]
 8006526:	2800      	cmp	r0, #0
 8006528:	d157      	bne.n	80065da <_tzset_unlocked_r+0x10a>
 800652a:	7823      	ldrb	r3, [r4, #0]
 800652c:	ae0a      	add	r6, sp, #40	; 0x28
 800652e:	2b3a      	cmp	r3, #58	; 0x3a
 8006530:	bf08      	it	eq
 8006532:	3401      	addeq	r4, #1
 8006534:	4633      	mov	r3, r6
 8006536:	4a9f      	ldr	r2, [pc, #636]	; (80067b4 <_tzset_unlocked_r+0x2e4>)
 8006538:	499f      	ldr	r1, [pc, #636]	; (80067b8 <_tzset_unlocked_r+0x2e8>)
 800653a:	4620      	mov	r0, r4
 800653c:	f000 fcdc 	bl	8006ef8 <siscanf>
 8006540:	2800      	cmp	r0, #0
 8006542:	dddf      	ble.n	8006504 <_tzset_unlocked_r+0x34>
 8006544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006546:	18e7      	adds	r7, r4, r3
 8006548:	5ce3      	ldrb	r3, [r4, r3]
 800654a:	2b2d      	cmp	r3, #45	; 0x2d
 800654c:	d149      	bne.n	80065e2 <_tzset_unlocked_r+0x112>
 800654e:	f04f 34ff 	mov.w	r4, #4294967295
 8006552:	3701      	adds	r7, #1
 8006554:	f04f 0800 	mov.w	r8, #0
 8006558:	f10d 0a20 	add.w	sl, sp, #32
 800655c:	f10d 0b1e 	add.w	fp, sp, #30
 8006560:	9603      	str	r6, [sp, #12]
 8006562:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8006566:	f8cd b000 	str.w	fp, [sp]
 800656a:	4633      	mov	r3, r6
 800656c:	aa07      	add	r2, sp, #28
 800656e:	4993      	ldr	r1, [pc, #588]	; (80067bc <_tzset_unlocked_r+0x2ec>)
 8006570:	4638      	mov	r0, r7
 8006572:	f8ad 801e 	strh.w	r8, [sp, #30]
 8006576:	f8ad 8020 	strh.w	r8, [sp, #32]
 800657a:	f000 fcbd 	bl	8006ef8 <siscanf>
 800657e:	4540      	cmp	r0, r8
 8006580:	ddc0      	ble.n	8006504 <_tzset_unlocked_r+0x34>
 8006582:	213c      	movs	r1, #60	; 0x3c
 8006584:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006588:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800658c:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80067c8 <_tzset_unlocked_r+0x2f8>
 8006590:	fb01 2203 	mla	r2, r1, r3, r2
 8006594:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006598:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800659c:	fb01 2303 	mla	r3, r1, r3, r2
 80065a0:	435c      	muls	r4, r3
 80065a2:	4b84      	ldr	r3, [pc, #528]	; (80067b4 <_tzset_unlocked_r+0x2e4>)
 80065a4:	62ac      	str	r4, [r5, #40]	; 0x28
 80065a6:	4c82      	ldr	r4, [pc, #520]	; (80067b0 <_tzset_unlocked_r+0x2e0>)
 80065a8:	464a      	mov	r2, r9
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ae:	4982      	ldr	r1, [pc, #520]	; (80067b8 <_tzset_unlocked_r+0x2e8>)
 80065b0:	441f      	add	r7, r3
 80065b2:	4638      	mov	r0, r7
 80065b4:	4633      	mov	r3, r6
 80065b6:	f000 fc9f 	bl	8006ef8 <siscanf>
 80065ba:	4540      	cmp	r0, r8
 80065bc:	dc16      	bgt.n	80065ec <_tzset_unlocked_r+0x11c>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80065c2:	6063      	str	r3, [r4, #4]
 80065c4:	4b77      	ldr	r3, [pc, #476]	; (80067a4 <_tzset_unlocked_r+0x2d4>)
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	4b78      	ldr	r3, [pc, #480]	; (80067ac <_tzset_unlocked_r+0x2dc>)
 80065ca:	f8c3 8000 	str.w	r8, [r3]
 80065ce:	e799      	b.n	8006504 <_tzset_unlocked_r+0x34>
 80065d0:	f7f9 fdc6 	bl	8000160 <strcmp>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d095      	beq.n	8006504 <_tzset_unlocked_r+0x34>
 80065d8:	e79a      	b.n	8006510 <_tzset_unlocked_r+0x40>
 80065da:	4621      	mov	r1, r4
 80065dc:	f000 fcb8 	bl	8006f50 <strcpy>
 80065e0:	e7a3      	b.n	800652a <_tzset_unlocked_r+0x5a>
 80065e2:	2b2b      	cmp	r3, #43	; 0x2b
 80065e4:	bf08      	it	eq
 80065e6:	3701      	addeq	r7, #1
 80065e8:	2401      	movs	r4, #1
 80065ea:	e7b3      	b.n	8006554 <_tzset_unlocked_r+0x84>
 80065ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ee:	f8c4 9004 	str.w	r9, [r4, #4]
 80065f2:	18fc      	adds	r4, r7, r3
 80065f4:	5cfb      	ldrb	r3, [r7, r3]
 80065f6:	2b2d      	cmp	r3, #45	; 0x2d
 80065f8:	f040 808c 	bne.w	8006714 <_tzset_unlocked_r+0x244>
 80065fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006600:	3401      	adds	r4, #1
 8006602:	2300      	movs	r3, #0
 8006604:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006608:	f8ad 301c 	strh.w	r3, [sp, #28]
 800660c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006610:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006614:	930a      	str	r3, [sp, #40]	; 0x28
 8006616:	e9cd b600 	strd	fp, r6, [sp]
 800661a:	4633      	mov	r3, r6
 800661c:	aa07      	add	r2, sp, #28
 800661e:	4967      	ldr	r1, [pc, #412]	; (80067bc <_tzset_unlocked_r+0x2ec>)
 8006620:	4620      	mov	r0, r4
 8006622:	f000 fc69 	bl	8006ef8 <siscanf>
 8006626:	2800      	cmp	r0, #0
 8006628:	dc79      	bgt.n	800671e <_tzset_unlocked_r+0x24e>
 800662a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800662c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8006630:	652b      	str	r3, [r5, #80]	; 0x50
 8006632:	462f      	mov	r7, r5
 8006634:	f04f 0900 	mov.w	r9, #0
 8006638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663a:	441c      	add	r4, r3
 800663c:	7823      	ldrb	r3, [r4, #0]
 800663e:	2b2c      	cmp	r3, #44	; 0x2c
 8006640:	bf08      	it	eq
 8006642:	3401      	addeq	r4, #1
 8006644:	f894 8000 	ldrb.w	r8, [r4]
 8006648:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800664c:	d17a      	bne.n	8006744 <_tzset_unlocked_r+0x274>
 800664e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8006652:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006656:	ab09      	add	r3, sp, #36	; 0x24
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	9603      	str	r6, [sp, #12]
 800665c:	4633      	mov	r3, r6
 800665e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8006662:	4957      	ldr	r1, [pc, #348]	; (80067c0 <_tzset_unlocked_r+0x2f0>)
 8006664:	4620      	mov	r0, r4
 8006666:	f000 fc47 	bl	8006ef8 <siscanf>
 800666a:	2803      	cmp	r0, #3
 800666c:	f47f af4a 	bne.w	8006504 <_tzset_unlocked_r+0x34>
 8006670:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8006674:	1e4b      	subs	r3, r1, #1
 8006676:	2b0b      	cmp	r3, #11
 8006678:	f63f af44 	bhi.w	8006504 <_tzset_unlocked_r+0x34>
 800667c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006680:	1e53      	subs	r3, r2, #1
 8006682:	2b04      	cmp	r3, #4
 8006684:	f63f af3e 	bhi.w	8006504 <_tzset_unlocked_r+0x34>
 8006688:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800668c:	2b06      	cmp	r3, #6
 800668e:	f63f af39 	bhi.w	8006504 <_tzset_unlocked_r+0x34>
 8006692:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8006696:	f887 8008 	strb.w	r8, [r7, #8]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669e:	eb04 0803 	add.w	r8, r4, r3
 80066a2:	2302      	movs	r3, #2
 80066a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80066ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80066b2:	930a      	str	r3, [sp, #40]	; 0x28
 80066b4:	f898 3000 	ldrb.w	r3, [r8]
 80066b8:	2b2f      	cmp	r3, #47	; 0x2f
 80066ba:	d109      	bne.n	80066d0 <_tzset_unlocked_r+0x200>
 80066bc:	e9cd a602 	strd	sl, r6, [sp, #8]
 80066c0:	e9cd b600 	strd	fp, r6, [sp]
 80066c4:	4633      	mov	r3, r6
 80066c6:	aa07      	add	r2, sp, #28
 80066c8:	493e      	ldr	r1, [pc, #248]	; (80067c4 <_tzset_unlocked_r+0x2f4>)
 80066ca:	4640      	mov	r0, r8
 80066cc:	f000 fc14 	bl	8006ef8 <siscanf>
 80066d0:	213c      	movs	r1, #60	; 0x3c
 80066d2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80066d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80066da:	3728      	adds	r7, #40	; 0x28
 80066dc:	fb01 2203 	mla	r2, r1, r3, r2
 80066e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80066e4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80066e8:	fb01 2303 	mla	r3, r1, r3, r2
 80066ec:	f847 3c10 	str.w	r3, [r7, #-16]
 80066f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066f2:	4444      	add	r4, r8
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	d021      	beq.n	800673e <_tzset_unlocked_r+0x26e>
 80066fa:	6868      	ldr	r0, [r5, #4]
 80066fc:	f000 fc42 	bl	8006f84 <__tzcalc_limits>
 8006700:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006702:	4b28      	ldr	r3, [pc, #160]	; (80067a4 <_tzset_unlocked_r+0x2d4>)
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	bf18      	it	ne
 800670c:	2301      	movne	r3, #1
 800670e:	4a27      	ldr	r2, [pc, #156]	; (80067ac <_tzset_unlocked_r+0x2dc>)
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e6f7      	b.n	8006504 <_tzset_unlocked_r+0x34>
 8006714:	2b2b      	cmp	r3, #43	; 0x2b
 8006716:	bf08      	it	eq
 8006718:	3401      	addeq	r4, #1
 800671a:	2701      	movs	r7, #1
 800671c:	e771      	b.n	8006602 <_tzset_unlocked_r+0x132>
 800671e:	213c      	movs	r1, #60	; 0x3c
 8006720:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006724:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006728:	fb01 2203 	mla	r2, r1, r3, r2
 800672c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006730:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006734:	fb01 2303 	mla	r3, r1, r3, r2
 8006738:	435f      	muls	r7, r3
 800673a:	652f      	str	r7, [r5, #80]	; 0x50
 800673c:	e779      	b.n	8006632 <_tzset_unlocked_r+0x162>
 800673e:	f04f 0901 	mov.w	r9, #1
 8006742:	e77b      	b.n	800663c <_tzset_unlocked_r+0x16c>
 8006744:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8006748:	bf0a      	itet	eq
 800674a:	4643      	moveq	r3, r8
 800674c:	2344      	movne	r3, #68	; 0x44
 800674e:	3401      	addeq	r4, #1
 8006750:	220a      	movs	r2, #10
 8006752:	a90b      	add	r1, sp, #44	; 0x2c
 8006754:	4620      	mov	r0, r4
 8006756:	9305      	str	r3, [sp, #20]
 8006758:	f7ff fe82 	bl	8006460 <strtoul>
 800675c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006760:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8006764:	45a0      	cmp	r8, r4
 8006766:	9b05      	ldr	r3, [sp, #20]
 8006768:	d114      	bne.n	8006794 <_tzset_unlocked_r+0x2c4>
 800676a:	234d      	movs	r3, #77	; 0x4d
 800676c:	f1b9 0f00 	cmp.w	r9, #0
 8006770:	d107      	bne.n	8006782 <_tzset_unlocked_r+0x2b2>
 8006772:	722b      	strb	r3, [r5, #8]
 8006774:	2103      	movs	r1, #3
 8006776:	2302      	movs	r3, #2
 8006778:	f8c5 9014 	str.w	r9, [r5, #20]
 800677c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8006780:	e78f      	b.n	80066a2 <_tzset_unlocked_r+0x1d2>
 8006782:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8006786:	220b      	movs	r2, #11
 8006788:	2301      	movs	r3, #1
 800678a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800678e:	2300      	movs	r3, #0
 8006790:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006792:	e786      	b.n	80066a2 <_tzset_unlocked_r+0x1d2>
 8006794:	b280      	uxth	r0, r0
 8006796:	723b      	strb	r3, [r7, #8]
 8006798:	6178      	str	r0, [r7, #20]
 800679a:	e782      	b.n	80066a2 <_tzset_unlocked_r+0x1d2>
 800679c:	08007f0f 	.word	0x08007f0f
 80067a0:	2000028c 	.word	0x2000028c
 80067a4:	20000294 	.word	0x20000294
 80067a8:	08007f12 	.word	0x08007f12
 80067ac:	20000290 	.word	0x20000290
 80067b0:	20000074 	.word	0x20000074
 80067b4:	2000027f 	.word	0x2000027f
 80067b8:	08007f16 	.word	0x08007f16
 80067bc:	08007f39 	.word	0x08007f39
 80067c0:	08007f25 	.word	0x08007f25
 80067c4:	08007f38 	.word	0x08007f38
 80067c8:	20000274 	.word	0x20000274

080067cc <abs>:
 80067cc:	2800      	cmp	r0, #0
 80067ce:	bfb8      	it	lt
 80067d0:	4240      	neglt	r0, r0
 80067d2:	4770      	bx	lr

080067d4 <_findenv_r>:
 80067d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	4607      	mov	r7, r0
 80067da:	468b      	mov	fp, r1
 80067dc:	4690      	mov	r8, r2
 80067de:	f000 fc86 	bl	80070ee <__env_lock>
 80067e2:	4b19      	ldr	r3, [pc, #100]	; (8006848 <_findenv_r+0x74>)
 80067e4:	681d      	ldr	r5, [r3, #0]
 80067e6:	469a      	mov	sl, r3
 80067e8:	b13d      	cbz	r5, 80067fa <_findenv_r+0x26>
 80067ea:	465c      	mov	r4, fp
 80067ec:	4623      	mov	r3, r4
 80067ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f2:	b32a      	cbz	r2, 8006840 <_findenv_r+0x6c>
 80067f4:	2a3d      	cmp	r2, #61	; 0x3d
 80067f6:	461c      	mov	r4, r3
 80067f8:	d1f8      	bne.n	80067ec <_findenv_r+0x18>
 80067fa:	4638      	mov	r0, r7
 80067fc:	f000 fc78 	bl	80070f0 <__env_unlock>
 8006800:	2000      	movs	r0, #0
 8006802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006806:	464d      	mov	r5, r9
 8006808:	46a9      	mov	r9, r5
 800680a:	f859 0b04 	ldr.w	r0, [r9], #4
 800680e:	2800      	cmp	r0, #0
 8006810:	d0f3      	beq.n	80067fa <_findenv_r+0x26>
 8006812:	4622      	mov	r2, r4
 8006814:	4659      	mov	r1, fp
 8006816:	f000 fba3 	bl	8006f60 <strncmp>
 800681a:	2800      	cmp	r0, #0
 800681c:	d1f3      	bne.n	8006806 <_findenv_r+0x32>
 800681e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8006822:	191e      	adds	r6, r3, r4
 8006824:	5d1b      	ldrb	r3, [r3, r4]
 8006826:	2b3d      	cmp	r3, #61	; 0x3d
 8006828:	d1ed      	bne.n	8006806 <_findenv_r+0x32>
 800682a:	f8da 3000 	ldr.w	r3, [sl]
 800682e:	4638      	mov	r0, r7
 8006830:	1aed      	subs	r5, r5, r3
 8006832:	10ad      	asrs	r5, r5, #2
 8006834:	f8c8 5000 	str.w	r5, [r8]
 8006838:	f000 fc5a 	bl	80070f0 <__env_unlock>
 800683c:	1c70      	adds	r0, r6, #1
 800683e:	e7e0      	b.n	8006802 <_findenv_r+0x2e>
 8006840:	eba4 040b 	sub.w	r4, r4, fp
 8006844:	e7e0      	b.n	8006808 <_findenv_r+0x34>
 8006846:	bf00      	nop
 8006848:	20000000 	.word	0x20000000

0800684c <_getenv_r>:
 800684c:	b507      	push	{r0, r1, r2, lr}
 800684e:	aa01      	add	r2, sp, #4
 8006850:	f7ff ffc0 	bl	80067d4 <_findenv_r>
 8006854:	b003      	add	sp, #12
 8006856:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800685c <_gettimeofday_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	2300      	movs	r3, #0
 8006860:	4c06      	ldr	r4, [pc, #24]	; (800687c <_gettimeofday_r+0x20>)
 8006862:	4605      	mov	r5, r0
 8006864:	4608      	mov	r0, r1
 8006866:	4611      	mov	r1, r2
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	f001 f89b 	bl	80079a4 <_gettimeofday>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d102      	bne.n	8006878 <_gettimeofday_r+0x1c>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	b103      	cbz	r3, 8006878 <_gettimeofday_r+0x1c>
 8006876:	602b      	str	r3, [r5, #0]
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	200003b0 	.word	0x200003b0

08006880 <__gettzinfo>:
 8006880:	4800      	ldr	r0, [pc, #0]	; (8006884 <__gettzinfo+0x4>)
 8006882:	4770      	bx	lr
 8006884:	20000080 	.word	0x20000080

08006888 <labs>:
 8006888:	2800      	cmp	r0, #0
 800688a:	bfb8      	it	lt
 800688c:	4240      	neglt	r0, r0
 800688e:	4770      	bx	lr

08006890 <__locale_ctype_ptr_l>:
 8006890:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006894:	4770      	bx	lr
	...

08006898 <__locale_ctype_ptr>:
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <__locale_ctype_ptr+0x14>)
 800689a:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <__locale_ctype_ptr+0x18>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bf08      	it	eq
 80068a4:	4613      	moveq	r3, r2
 80068a6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80068aa:	4770      	bx	lr
 80068ac:	20000010 	.word	0x20000010
 80068b0:	200000d8 	.word	0x200000d8

080068b4 <__ascii_mbtowc>:
 80068b4:	b082      	sub	sp, #8
 80068b6:	b901      	cbnz	r1, 80068ba <__ascii_mbtowc+0x6>
 80068b8:	a901      	add	r1, sp, #4
 80068ba:	b142      	cbz	r2, 80068ce <__ascii_mbtowc+0x1a>
 80068bc:	b14b      	cbz	r3, 80068d2 <__ascii_mbtowc+0x1e>
 80068be:	7813      	ldrb	r3, [r2, #0]
 80068c0:	600b      	str	r3, [r1, #0]
 80068c2:	7812      	ldrb	r2, [r2, #0]
 80068c4:	1c10      	adds	r0, r2, #0
 80068c6:	bf18      	it	ne
 80068c8:	2001      	movne	r0, #1
 80068ca:	b002      	add	sp, #8
 80068cc:	4770      	bx	lr
 80068ce:	4610      	mov	r0, r2
 80068d0:	e7fb      	b.n	80068ca <__ascii_mbtowc+0x16>
 80068d2:	f06f 0001 	mvn.w	r0, #1
 80068d6:	e7f8      	b.n	80068ca <__ascii_mbtowc+0x16>

080068d8 <__malloc_lock>:
 80068d8:	4770      	bx	lr

080068da <__malloc_unlock>:
 80068da:	4770      	bx	lr

080068dc <__ssputs_r>:
 80068dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	688e      	ldr	r6, [r1, #8]
 80068e2:	4682      	mov	sl, r0
 80068e4:	429e      	cmp	r6, r3
 80068e6:	460c      	mov	r4, r1
 80068e8:	4690      	mov	r8, r2
 80068ea:	4699      	mov	r9, r3
 80068ec:	d837      	bhi.n	800695e <__ssputs_r+0x82>
 80068ee:	898a      	ldrh	r2, [r1, #12]
 80068f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068f4:	d031      	beq.n	800695a <__ssputs_r+0x7e>
 80068f6:	2302      	movs	r3, #2
 80068f8:	6825      	ldr	r5, [r4, #0]
 80068fa:	6909      	ldr	r1, [r1, #16]
 80068fc:	1a6f      	subs	r7, r5, r1
 80068fe:	6965      	ldr	r5, [r4, #20]
 8006900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006904:	fb95 f5f3 	sdiv	r5, r5, r3
 8006908:	f109 0301 	add.w	r3, r9, #1
 800690c:	443b      	add	r3, r7
 800690e:	429d      	cmp	r5, r3
 8006910:	bf38      	it	cc
 8006912:	461d      	movcc	r5, r3
 8006914:	0553      	lsls	r3, r2, #21
 8006916:	d530      	bpl.n	800697a <__ssputs_r+0x9e>
 8006918:	4629      	mov	r1, r5
 800691a:	f7fe ff33 	bl	8005784 <_malloc_r>
 800691e:	4606      	mov	r6, r0
 8006920:	b950      	cbnz	r0, 8006938 <__ssputs_r+0x5c>
 8006922:	230c      	movs	r3, #12
 8006924:	f04f 30ff 	mov.w	r0, #4294967295
 8006928:	f8ca 3000 	str.w	r3, [sl]
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006932:	81a3      	strh	r3, [r4, #12]
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	463a      	mov	r2, r7
 800693a:	6921      	ldr	r1, [r4, #16]
 800693c:	f000 fbe7 	bl	800710e <memcpy>
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694a:	81a3      	strh	r3, [r4, #12]
 800694c:	6126      	str	r6, [r4, #16]
 800694e:	443e      	add	r6, r7
 8006950:	6026      	str	r6, [r4, #0]
 8006952:	464e      	mov	r6, r9
 8006954:	6165      	str	r5, [r4, #20]
 8006956:	1bed      	subs	r5, r5, r7
 8006958:	60a5      	str	r5, [r4, #8]
 800695a:	454e      	cmp	r6, r9
 800695c:	d900      	bls.n	8006960 <__ssputs_r+0x84>
 800695e:	464e      	mov	r6, r9
 8006960:	4632      	mov	r2, r6
 8006962:	4641      	mov	r1, r8
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	f000 fbdd 	bl	8007124 <memmove>
 800696a:	68a3      	ldr	r3, [r4, #8]
 800696c:	2000      	movs	r0, #0
 800696e:	1b9b      	subs	r3, r3, r6
 8006970:	60a3      	str	r3, [r4, #8]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	441e      	add	r6, r3
 8006976:	6026      	str	r6, [r4, #0]
 8006978:	e7dc      	b.n	8006934 <__ssputs_r+0x58>
 800697a:	462a      	mov	r2, r5
 800697c:	f000 fbeb 	bl	8007156 <_realloc_r>
 8006980:	4606      	mov	r6, r0
 8006982:	2800      	cmp	r0, #0
 8006984:	d1e2      	bne.n	800694c <__ssputs_r+0x70>
 8006986:	6921      	ldr	r1, [r4, #16]
 8006988:	4650      	mov	r0, sl
 800698a:	f7fe feaf 	bl	80056ec <_free_r>
 800698e:	e7c8      	b.n	8006922 <__ssputs_r+0x46>

08006990 <_svfiprintf_r>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	461d      	mov	r5, r3
 8006996:	898b      	ldrh	r3, [r1, #12]
 8006998:	b09d      	sub	sp, #116	; 0x74
 800699a:	061f      	lsls	r7, r3, #24
 800699c:	4680      	mov	r8, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	4616      	mov	r6, r2
 80069a2:	d50f      	bpl.n	80069c4 <_svfiprintf_r+0x34>
 80069a4:	690b      	ldr	r3, [r1, #16]
 80069a6:	b96b      	cbnz	r3, 80069c4 <_svfiprintf_r+0x34>
 80069a8:	2140      	movs	r1, #64	; 0x40
 80069aa:	f7fe feeb 	bl	8005784 <_malloc_r>
 80069ae:	6020      	str	r0, [r4, #0]
 80069b0:	6120      	str	r0, [r4, #16]
 80069b2:	b928      	cbnz	r0, 80069c0 <_svfiprintf_r+0x30>
 80069b4:	230c      	movs	r3, #12
 80069b6:	f8c8 3000 	str.w	r3, [r8]
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295
 80069be:	e0c8      	b.n	8006b52 <_svfiprintf_r+0x1c2>
 80069c0:	2340      	movs	r3, #64	; 0x40
 80069c2:	6163      	str	r3, [r4, #20]
 80069c4:	2300      	movs	r3, #0
 80069c6:	9309      	str	r3, [sp, #36]	; 0x24
 80069c8:	2320      	movs	r3, #32
 80069ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ce:	2330      	movs	r3, #48	; 0x30
 80069d0:	f04f 0b01 	mov.w	fp, #1
 80069d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069d8:	9503      	str	r5, [sp, #12]
 80069da:	4637      	mov	r7, r6
 80069dc:	463d      	mov	r5, r7
 80069de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069e2:	b10b      	cbz	r3, 80069e8 <_svfiprintf_r+0x58>
 80069e4:	2b25      	cmp	r3, #37	; 0x25
 80069e6:	d13e      	bne.n	8006a66 <_svfiprintf_r+0xd6>
 80069e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80069ec:	d00b      	beq.n	8006a06 <_svfiprintf_r+0x76>
 80069ee:	4653      	mov	r3, sl
 80069f0:	4632      	mov	r2, r6
 80069f2:	4621      	mov	r1, r4
 80069f4:	4640      	mov	r0, r8
 80069f6:	f7ff ff71 	bl	80068dc <__ssputs_r>
 80069fa:	3001      	adds	r0, #1
 80069fc:	f000 80a4 	beq.w	8006b48 <_svfiprintf_r+0x1b8>
 8006a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a02:	4453      	add	r3, sl
 8006a04:	9309      	str	r3, [sp, #36]	; 0x24
 8006a06:	783b      	ldrb	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 809d 	beq.w	8006b48 <_svfiprintf_r+0x1b8>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	9307      	str	r3, [sp, #28]
 8006a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a20:	931a      	str	r3, [sp, #104]	; 0x68
 8006a22:	462f      	mov	r7, r5
 8006a24:	2205      	movs	r2, #5
 8006a26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a2a:	4850      	ldr	r0, [pc, #320]	; (8006b6c <_svfiprintf_r+0x1dc>)
 8006a2c:	f000 fb61 	bl	80070f2 <memchr>
 8006a30:	9b04      	ldr	r3, [sp, #16]
 8006a32:	b9d0      	cbnz	r0, 8006a6a <_svfiprintf_r+0xda>
 8006a34:	06d9      	lsls	r1, r3, #27
 8006a36:	bf44      	itt	mi
 8006a38:	2220      	movmi	r2, #32
 8006a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a3e:	071a      	lsls	r2, r3, #28
 8006a40:	bf44      	itt	mi
 8006a42:	222b      	movmi	r2, #43	; 0x2b
 8006a44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a48:	782a      	ldrb	r2, [r5, #0]
 8006a4a:	2a2a      	cmp	r2, #42	; 0x2a
 8006a4c:	d015      	beq.n	8006a7a <_svfiprintf_r+0xea>
 8006a4e:	462f      	mov	r7, r5
 8006a50:	2000      	movs	r0, #0
 8006a52:	250a      	movs	r5, #10
 8006a54:	9a07      	ldr	r2, [sp, #28]
 8006a56:	4639      	mov	r1, r7
 8006a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a5c:	3b30      	subs	r3, #48	; 0x30
 8006a5e:	2b09      	cmp	r3, #9
 8006a60:	d94d      	bls.n	8006afe <_svfiprintf_r+0x16e>
 8006a62:	b1b8      	cbz	r0, 8006a94 <_svfiprintf_r+0x104>
 8006a64:	e00f      	b.n	8006a86 <_svfiprintf_r+0xf6>
 8006a66:	462f      	mov	r7, r5
 8006a68:	e7b8      	b.n	80069dc <_svfiprintf_r+0x4c>
 8006a6a:	4a40      	ldr	r2, [pc, #256]	; (8006b6c <_svfiprintf_r+0x1dc>)
 8006a6c:	463d      	mov	r5, r7
 8006a6e:	1a80      	subs	r0, r0, r2
 8006a70:	fa0b f000 	lsl.w	r0, fp, r0
 8006a74:	4318      	orrs	r0, r3
 8006a76:	9004      	str	r0, [sp, #16]
 8006a78:	e7d3      	b.n	8006a22 <_svfiprintf_r+0x92>
 8006a7a:	9a03      	ldr	r2, [sp, #12]
 8006a7c:	1d11      	adds	r1, r2, #4
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	9103      	str	r1, [sp, #12]
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	db01      	blt.n	8006a8a <_svfiprintf_r+0xfa>
 8006a86:	9207      	str	r2, [sp, #28]
 8006a88:	e004      	b.n	8006a94 <_svfiprintf_r+0x104>
 8006a8a:	4252      	negs	r2, r2
 8006a8c:	f043 0302 	orr.w	r3, r3, #2
 8006a90:	9207      	str	r2, [sp, #28]
 8006a92:	9304      	str	r3, [sp, #16]
 8006a94:	783b      	ldrb	r3, [r7, #0]
 8006a96:	2b2e      	cmp	r3, #46	; 0x2e
 8006a98:	d10c      	bne.n	8006ab4 <_svfiprintf_r+0x124>
 8006a9a:	787b      	ldrb	r3, [r7, #1]
 8006a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a9e:	d133      	bne.n	8006b08 <_svfiprintf_r+0x178>
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	3702      	adds	r7, #2
 8006aa4:	1d1a      	adds	r2, r3, #4
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	9203      	str	r2, [sp, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bfb8      	it	lt
 8006aae:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ab2:	9305      	str	r3, [sp, #20]
 8006ab4:	4d2e      	ldr	r5, [pc, #184]	; (8006b70 <_svfiprintf_r+0x1e0>)
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	7839      	ldrb	r1, [r7, #0]
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 fb19 	bl	80070f2 <memchr>
 8006ac0:	b138      	cbz	r0, 8006ad2 <_svfiprintf_r+0x142>
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	1b40      	subs	r0, r0, r5
 8006ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8006aca:	9b04      	ldr	r3, [sp, #16]
 8006acc:	3701      	adds	r7, #1
 8006ace:	4303      	orrs	r3, r0
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	7839      	ldrb	r1, [r7, #0]
 8006ad4:	2206      	movs	r2, #6
 8006ad6:	4827      	ldr	r0, [pc, #156]	; (8006b74 <_svfiprintf_r+0x1e4>)
 8006ad8:	1c7e      	adds	r6, r7, #1
 8006ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ade:	f000 fb08 	bl	80070f2 <memchr>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d038      	beq.n	8006b58 <_svfiprintf_r+0x1c8>
 8006ae6:	4b24      	ldr	r3, [pc, #144]	; (8006b78 <_svfiprintf_r+0x1e8>)
 8006ae8:	bb13      	cbnz	r3, 8006b30 <_svfiprintf_r+0x1a0>
 8006aea:	9b03      	ldr	r3, [sp, #12]
 8006aec:	3307      	adds	r3, #7
 8006aee:	f023 0307 	bic.w	r3, r3, #7
 8006af2:	3308      	adds	r3, #8
 8006af4:	9303      	str	r3, [sp, #12]
 8006af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af8:	444b      	add	r3, r9
 8006afa:	9309      	str	r3, [sp, #36]	; 0x24
 8006afc:	e76d      	b.n	80069da <_svfiprintf_r+0x4a>
 8006afe:	fb05 3202 	mla	r2, r5, r2, r3
 8006b02:	2001      	movs	r0, #1
 8006b04:	460f      	mov	r7, r1
 8006b06:	e7a6      	b.n	8006a56 <_svfiprintf_r+0xc6>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	250a      	movs	r5, #10
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	3701      	adds	r7, #1
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	4638      	mov	r0, r7
 8006b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b18:	3a30      	subs	r2, #48	; 0x30
 8006b1a:	2a09      	cmp	r2, #9
 8006b1c:	d903      	bls.n	8006b26 <_svfiprintf_r+0x196>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0c8      	beq.n	8006ab4 <_svfiprintf_r+0x124>
 8006b22:	9105      	str	r1, [sp, #20]
 8006b24:	e7c6      	b.n	8006ab4 <_svfiprintf_r+0x124>
 8006b26:	fb05 2101 	mla	r1, r5, r1, r2
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	e7f0      	b.n	8006b12 <_svfiprintf_r+0x182>
 8006b30:	ab03      	add	r3, sp, #12
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	4622      	mov	r2, r4
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <_svfiprintf_r+0x1ec>)
 8006b38:	a904      	add	r1, sp, #16
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	f3af 8000 	nop.w
 8006b40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b44:	4681      	mov	r9, r0
 8006b46:	d1d6      	bne.n	8006af6 <_svfiprintf_r+0x166>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	065b      	lsls	r3, r3, #25
 8006b4c:	f53f af35 	bmi.w	80069ba <_svfiprintf_r+0x2a>
 8006b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b52:	b01d      	add	sp, #116	; 0x74
 8006b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b58:	ab03      	add	r3, sp, #12
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <_svfiprintf_r+0x1ec>)
 8006b60:	a904      	add	r1, sp, #16
 8006b62:	4640      	mov	r0, r8
 8006b64:	f000 f882 	bl	8006c6c <_printf_i>
 8006b68:	e7ea      	b.n	8006b40 <_svfiprintf_r+0x1b0>
 8006b6a:	bf00      	nop
 8006b6c:	08007f55 	.word	0x08007f55
 8006b70:	08007f5b 	.word	0x08007f5b
 8006b74:	08007f5f 	.word	0x08007f5f
 8006b78:	00000000 	.word	0x00000000
 8006b7c:	080068dd 	.word	0x080068dd

08006b80 <_printf_common>:
 8006b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	4691      	mov	r9, r2
 8006b86:	461f      	mov	r7, r3
 8006b88:	688a      	ldr	r2, [r1, #8]
 8006b8a:	690b      	ldr	r3, [r1, #16]
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bfb8      	it	lt
 8006b92:	4613      	movlt	r3, r2
 8006b94:	f8c9 3000 	str.w	r3, [r9]
 8006b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ba2:	b112      	cbz	r2, 8006baa <_printf_common+0x2a>
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	f8c9 3000 	str.w	r3, [r9]
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	0699      	lsls	r1, r3, #26
 8006bae:	bf42      	ittt	mi
 8006bb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006bb4:	3302      	addmi	r3, #2
 8006bb6:	f8c9 3000 	strmi.w	r3, [r9]
 8006bba:	6825      	ldr	r5, [r4, #0]
 8006bbc:	f015 0506 	ands.w	r5, r5, #6
 8006bc0:	d107      	bne.n	8006bd2 <_printf_common+0x52>
 8006bc2:	f104 0a19 	add.w	sl, r4, #25
 8006bc6:	68e3      	ldr	r3, [r4, #12]
 8006bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	42ab      	cmp	r3, r5
 8006bd0:	dc29      	bgt.n	8006c26 <_printf_common+0xa6>
 8006bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	3300      	adds	r3, #0
 8006bda:	bf18      	it	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	0692      	lsls	r2, r2, #26
 8006be0:	d42e      	bmi.n	8006c40 <_printf_common+0xc0>
 8006be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006be6:	4639      	mov	r1, r7
 8006be8:	4630      	mov	r0, r6
 8006bea:	47c0      	blx	r8
 8006bec:	3001      	adds	r0, #1
 8006bee:	d021      	beq.n	8006c34 <_printf_common+0xb4>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	68e5      	ldr	r5, [r4, #12]
 8006bf4:	f003 0306 	and.w	r3, r3, #6
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	bf18      	it	ne
 8006bfc:	2500      	movne	r5, #0
 8006bfe:	f8d9 2000 	ldr.w	r2, [r9]
 8006c02:	f04f 0900 	mov.w	r9, #0
 8006c06:	bf08      	it	eq
 8006c08:	1aad      	subeq	r5, r5, r2
 8006c0a:	68a3      	ldr	r3, [r4, #8]
 8006c0c:	6922      	ldr	r2, [r4, #16]
 8006c0e:	bf08      	it	eq
 8006c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bfc4      	itt	gt
 8006c18:	1a9b      	subgt	r3, r3, r2
 8006c1a:	18ed      	addgt	r5, r5, r3
 8006c1c:	341a      	adds	r4, #26
 8006c1e:	454d      	cmp	r5, r9
 8006c20:	d11a      	bne.n	8006c58 <_printf_common+0xd8>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e008      	b.n	8006c38 <_printf_common+0xb8>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	47c0      	blx	r8
 8006c30:	3001      	adds	r0, #1
 8006c32:	d103      	bne.n	8006c3c <_printf_common+0xbc>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7c2      	b.n	8006bc6 <_printf_common+0x46>
 8006c40:	2030      	movs	r0, #48	; 0x30
 8006c42:	18e1      	adds	r1, r4, r3
 8006c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c4e:	4422      	add	r2, r4
 8006c50:	3302      	adds	r3, #2
 8006c52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c56:	e7c4      	b.n	8006be2 <_printf_common+0x62>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4630      	mov	r0, r6
 8006c60:	47c0      	blx	r8
 8006c62:	3001      	adds	r0, #1
 8006c64:	d0e6      	beq.n	8006c34 <_printf_common+0xb4>
 8006c66:	f109 0901 	add.w	r9, r9, #1
 8006c6a:	e7d8      	b.n	8006c1e <_printf_common+0x9e>

08006c6c <_printf_i>:
 8006c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c74:	460c      	mov	r4, r1
 8006c76:	7e09      	ldrb	r1, [r1, #24]
 8006c78:	b085      	sub	sp, #20
 8006c7a:	296e      	cmp	r1, #110	; 0x6e
 8006c7c:	4617      	mov	r7, r2
 8006c7e:	4606      	mov	r6, r0
 8006c80:	4698      	mov	r8, r3
 8006c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c84:	f000 80b3 	beq.w	8006dee <_printf_i+0x182>
 8006c88:	d822      	bhi.n	8006cd0 <_printf_i+0x64>
 8006c8a:	2963      	cmp	r1, #99	; 0x63
 8006c8c:	d036      	beq.n	8006cfc <_printf_i+0x90>
 8006c8e:	d80a      	bhi.n	8006ca6 <_printf_i+0x3a>
 8006c90:	2900      	cmp	r1, #0
 8006c92:	f000 80b9 	beq.w	8006e08 <_printf_i+0x19c>
 8006c96:	2958      	cmp	r1, #88	; 0x58
 8006c98:	f000 8083 	beq.w	8006da2 <_printf_i+0x136>
 8006c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ca0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ca4:	e032      	b.n	8006d0c <_printf_i+0xa0>
 8006ca6:	2964      	cmp	r1, #100	; 0x64
 8006ca8:	d001      	beq.n	8006cae <_printf_i+0x42>
 8006caa:	2969      	cmp	r1, #105	; 0x69
 8006cac:	d1f6      	bne.n	8006c9c <_printf_i+0x30>
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	6813      	ldr	r3, [r2, #0]
 8006cb2:	0605      	lsls	r5, r0, #24
 8006cb4:	f103 0104 	add.w	r1, r3, #4
 8006cb8:	d52a      	bpl.n	8006d10 <_printf_i+0xa4>
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6011      	str	r1, [r2, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da03      	bge.n	8006cca <_printf_i+0x5e>
 8006cc2:	222d      	movs	r2, #45	; 0x2d
 8006cc4:	425b      	negs	r3, r3
 8006cc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cca:	486f      	ldr	r0, [pc, #444]	; (8006e88 <_printf_i+0x21c>)
 8006ccc:	220a      	movs	r2, #10
 8006cce:	e039      	b.n	8006d44 <_printf_i+0xd8>
 8006cd0:	2973      	cmp	r1, #115	; 0x73
 8006cd2:	f000 809d 	beq.w	8006e10 <_printf_i+0x1a4>
 8006cd6:	d808      	bhi.n	8006cea <_printf_i+0x7e>
 8006cd8:	296f      	cmp	r1, #111	; 0x6f
 8006cda:	d020      	beq.n	8006d1e <_printf_i+0xb2>
 8006cdc:	2970      	cmp	r1, #112	; 0x70
 8006cde:	d1dd      	bne.n	8006c9c <_printf_i+0x30>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	f043 0320 	orr.w	r3, r3, #32
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	e003      	b.n	8006cf2 <_printf_i+0x86>
 8006cea:	2975      	cmp	r1, #117	; 0x75
 8006cec:	d017      	beq.n	8006d1e <_printf_i+0xb2>
 8006cee:	2978      	cmp	r1, #120	; 0x78
 8006cf0:	d1d4      	bne.n	8006c9c <_printf_i+0x30>
 8006cf2:	2378      	movs	r3, #120	; 0x78
 8006cf4:	4865      	ldr	r0, [pc, #404]	; (8006e8c <_printf_i+0x220>)
 8006cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cfa:	e055      	b.n	8006da8 <_printf_i+0x13c>
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d02:	1d19      	adds	r1, r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6011      	str	r1, [r2, #0]
 8006d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e08c      	b.n	8006e2a <_printf_i+0x1be>
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d16:	6011      	str	r1, [r2, #0]
 8006d18:	bf18      	it	ne
 8006d1a:	b21b      	sxthne	r3, r3
 8006d1c:	e7cf      	b.n	8006cbe <_printf_i+0x52>
 8006d1e:	6813      	ldr	r3, [r2, #0]
 8006d20:	6825      	ldr	r5, [r4, #0]
 8006d22:	1d18      	adds	r0, r3, #4
 8006d24:	6010      	str	r0, [r2, #0]
 8006d26:	0628      	lsls	r0, r5, #24
 8006d28:	d501      	bpl.n	8006d2e <_printf_i+0xc2>
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	e002      	b.n	8006d34 <_printf_i+0xc8>
 8006d2e:	0668      	lsls	r0, r5, #25
 8006d30:	d5fb      	bpl.n	8006d2a <_printf_i+0xbe>
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	296f      	cmp	r1, #111	; 0x6f
 8006d36:	bf14      	ite	ne
 8006d38:	220a      	movne	r2, #10
 8006d3a:	2208      	moveq	r2, #8
 8006d3c:	4852      	ldr	r0, [pc, #328]	; (8006e88 <_printf_i+0x21c>)
 8006d3e:	2100      	movs	r1, #0
 8006d40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d44:	6865      	ldr	r5, [r4, #4]
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	60a5      	str	r5, [r4, #8]
 8006d4a:	f2c0 8095 	blt.w	8006e78 <_printf_i+0x20c>
 8006d4e:	6821      	ldr	r1, [r4, #0]
 8006d50:	f021 0104 	bic.w	r1, r1, #4
 8006d54:	6021      	str	r1, [r4, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d13d      	bne.n	8006dd6 <_printf_i+0x16a>
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	f040 808e 	bne.w	8006e7c <_printf_i+0x210>
 8006d60:	4665      	mov	r5, ip
 8006d62:	2a08      	cmp	r2, #8
 8006d64:	d10b      	bne.n	8006d7e <_printf_i+0x112>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	07db      	lsls	r3, r3, #31
 8006d6a:	d508      	bpl.n	8006d7e <_printf_i+0x112>
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	6862      	ldr	r2, [r4, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	bfde      	ittt	le
 8006d74:	2330      	movle	r3, #48	; 0x30
 8006d76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d7e:	ebac 0305 	sub.w	r3, ip, r5
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	f8cd 8000 	str.w	r8, [sp]
 8006d88:	463b      	mov	r3, r7
 8006d8a:	aa03      	add	r2, sp, #12
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff fef6 	bl	8006b80 <_printf_common>
 8006d94:	3001      	adds	r0, #1
 8006d96:	d14d      	bne.n	8006e34 <_printf_i+0x1c8>
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	b005      	add	sp, #20
 8006d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006da2:	4839      	ldr	r0, [pc, #228]	; (8006e88 <_printf_i+0x21c>)
 8006da4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006da8:	6813      	ldr	r3, [r2, #0]
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	1d1d      	adds	r5, r3, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6015      	str	r5, [r2, #0]
 8006db2:	060a      	lsls	r2, r1, #24
 8006db4:	d50b      	bpl.n	8006dce <_printf_i+0x162>
 8006db6:	07ca      	lsls	r2, r1, #31
 8006db8:	bf44      	itt	mi
 8006dba:	f041 0120 	orrmi.w	r1, r1, #32
 8006dbe:	6021      	strmi	r1, [r4, #0]
 8006dc0:	b91b      	cbnz	r3, 8006dca <_printf_i+0x15e>
 8006dc2:	6822      	ldr	r2, [r4, #0]
 8006dc4:	f022 0220 	bic.w	r2, r2, #32
 8006dc8:	6022      	str	r2, [r4, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	e7b7      	b.n	8006d3e <_printf_i+0xd2>
 8006dce:	064d      	lsls	r5, r1, #25
 8006dd0:	bf48      	it	mi
 8006dd2:	b29b      	uxthmi	r3, r3
 8006dd4:	e7ef      	b.n	8006db6 <_printf_i+0x14a>
 8006dd6:	4665      	mov	r5, ip
 8006dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ddc:	fb02 3311 	mls	r3, r2, r1, r3
 8006de0:	5cc3      	ldrb	r3, [r0, r3]
 8006de2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006de6:	460b      	mov	r3, r1
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d1f5      	bne.n	8006dd8 <_printf_i+0x16c>
 8006dec:	e7b9      	b.n	8006d62 <_printf_i+0xf6>
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	6825      	ldr	r5, [r4, #0]
 8006df2:	1d18      	adds	r0, r3, #4
 8006df4:	6961      	ldr	r1, [r4, #20]
 8006df6:	6010      	str	r0, [r2, #0]
 8006df8:	0628      	lsls	r0, r5, #24
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	d501      	bpl.n	8006e02 <_printf_i+0x196>
 8006dfe:	6019      	str	r1, [r3, #0]
 8006e00:	e002      	b.n	8006e08 <_printf_i+0x19c>
 8006e02:	066a      	lsls	r2, r5, #25
 8006e04:	d5fb      	bpl.n	8006dfe <_printf_i+0x192>
 8006e06:	8019      	strh	r1, [r3, #0]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4665      	mov	r5, ip
 8006e0c:	6123      	str	r3, [r4, #16]
 8006e0e:	e7b9      	b.n	8006d84 <_printf_i+0x118>
 8006e10:	6813      	ldr	r3, [r2, #0]
 8006e12:	1d19      	adds	r1, r3, #4
 8006e14:	6011      	str	r1, [r2, #0]
 8006e16:	681d      	ldr	r5, [r3, #0]
 8006e18:	6862      	ldr	r2, [r4, #4]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 f968 	bl	80070f2 <memchr>
 8006e22:	b108      	cbz	r0, 8006e28 <_printf_i+0x1bc>
 8006e24:	1b40      	subs	r0, r0, r5
 8006e26:	6060      	str	r0, [r4, #4]
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e32:	e7a7      	b.n	8006d84 <_printf_i+0x118>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	462a      	mov	r2, r5
 8006e38:	4639      	mov	r1, r7
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	47c0      	blx	r8
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d0aa      	beq.n	8006d98 <_printf_i+0x12c>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	079b      	lsls	r3, r3, #30
 8006e46:	d413      	bmi.n	8006e70 <_printf_i+0x204>
 8006e48:	68e0      	ldr	r0, [r4, #12]
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	4298      	cmp	r0, r3
 8006e4e:	bfb8      	it	lt
 8006e50:	4618      	movlt	r0, r3
 8006e52:	e7a3      	b.n	8006d9c <_printf_i+0x130>
 8006e54:	2301      	movs	r3, #1
 8006e56:	464a      	mov	r2, r9
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	47c0      	blx	r8
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d09a      	beq.n	8006d98 <_printf_i+0x12c>
 8006e62:	3501      	adds	r5, #1
 8006e64:	68e3      	ldr	r3, [r4, #12]
 8006e66:	9a03      	ldr	r2, [sp, #12]
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	42ab      	cmp	r3, r5
 8006e6c:	dcf2      	bgt.n	8006e54 <_printf_i+0x1e8>
 8006e6e:	e7eb      	b.n	8006e48 <_printf_i+0x1dc>
 8006e70:	2500      	movs	r5, #0
 8006e72:	f104 0919 	add.w	r9, r4, #25
 8006e76:	e7f5      	b.n	8006e64 <_printf_i+0x1f8>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ac      	bne.n	8006dd6 <_printf_i+0x16a>
 8006e7c:	7803      	ldrb	r3, [r0, #0]
 8006e7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e86:	e76c      	b.n	8006d62 <_printf_i+0xf6>
 8006e88:	08007f66 	.word	0x08007f66
 8006e8c:	08007f77 	.word	0x08007f77

08006e90 <sniprintf>:
 8006e90:	b40c      	push	{r2, r3}
 8006e92:	b530      	push	{r4, r5, lr}
 8006e94:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <sniprintf+0x64>)
 8006e96:	1e0c      	subs	r4, r1, #0
 8006e98:	b09d      	sub	sp, #116	; 0x74
 8006e9a:	681d      	ldr	r5, [r3, #0]
 8006e9c:	da08      	bge.n	8006eb0 <sniprintf+0x20>
 8006e9e:	238b      	movs	r3, #139	; 0x8b
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	b01d      	add	sp, #116	; 0x74
 8006ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eac:	b002      	add	sp, #8
 8006eae:	4770      	bx	lr
 8006eb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006eb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006eb8:	bf0c      	ite	eq
 8006eba:	4623      	moveq	r3, r4
 8006ebc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ec8:	9002      	str	r0, [sp, #8]
 8006eca:	9006      	str	r0, [sp, #24]
 8006ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ed0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ed2:	ab21      	add	r3, sp, #132	; 0x84
 8006ed4:	a902      	add	r1, sp, #8
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	f7ff fd59 	bl	8006990 <_svfiprintf_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	bfbc      	itt	lt
 8006ee2:	238b      	movlt	r3, #139	; 0x8b
 8006ee4:	602b      	strlt	r3, [r5, #0]
 8006ee6:	2c00      	cmp	r4, #0
 8006ee8:	d0dd      	beq.n	8006ea6 <sniprintf+0x16>
 8006eea:	2200      	movs	r2, #0
 8006eec:	9b02      	ldr	r3, [sp, #8]
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e7d9      	b.n	8006ea6 <sniprintf+0x16>
 8006ef2:	bf00      	nop
 8006ef4:	20000010 	.word	0x20000010

08006ef8 <siscanf>:
 8006ef8:	b40e      	push	{r1, r2, r3}
 8006efa:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006efe:	b530      	push	{r4, r5, lr}
 8006f00:	b09c      	sub	sp, #112	; 0x70
 8006f02:	ac1f      	add	r4, sp, #124	; 0x7c
 8006f04:	f854 5b04 	ldr.w	r5, [r4], #4
 8006f08:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006f0c:	9002      	str	r0, [sp, #8]
 8006f0e:	9006      	str	r0, [sp, #24]
 8006f10:	f7f9 f91e 	bl	8000150 <strlen>
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <siscanf+0x4c>)
 8006f16:	9003      	str	r0, [sp, #12]
 8006f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f1e:	9314      	str	r3, [sp, #80]	; 0x50
 8006f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f24:	9007      	str	r0, [sp, #28]
 8006f26:	4808      	ldr	r0, [pc, #32]	; (8006f48 <siscanf+0x50>)
 8006f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	4623      	mov	r3, r4
 8006f30:	a902      	add	r1, sp, #8
 8006f32:	6800      	ldr	r0, [r0, #0]
 8006f34:	9401      	str	r4, [sp, #4]
 8006f36:	f000 f98f 	bl	8007258 <__ssvfiscanf_r>
 8006f3a:	b01c      	add	sp, #112	; 0x70
 8006f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f40:	b003      	add	sp, #12
 8006f42:	4770      	bx	lr
 8006f44:	08006f4d 	.word	0x08006f4d
 8006f48:	20000010 	.word	0x20000010

08006f4c <__seofread>:
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	4770      	bx	lr

08006f50 <strcpy>:
 8006f50:	4603      	mov	r3, r0
 8006f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f56:	f803 2b01 	strb.w	r2, [r3], #1
 8006f5a:	2a00      	cmp	r2, #0
 8006f5c:	d1f9      	bne.n	8006f52 <strcpy+0x2>
 8006f5e:	4770      	bx	lr

08006f60 <strncmp>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	b16a      	cbz	r2, 8006f80 <strncmp+0x20>
 8006f64:	3901      	subs	r1, #1
 8006f66:	1884      	adds	r4, r0, r2
 8006f68:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d103      	bne.n	8006f7c <strncmp+0x1c>
 8006f74:	42a0      	cmp	r0, r4
 8006f76:	d001      	beq.n	8006f7c <strncmp+0x1c>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f5      	bne.n	8006f68 <strncmp+0x8>
 8006f7c:	1a98      	subs	r0, r3, r2
 8006f7e:	bd10      	pop	{r4, pc}
 8006f80:	4610      	mov	r0, r2
 8006f82:	e7fc      	b.n	8006f7e <strncmp+0x1e>

08006f84 <__tzcalc_limits>:
 8006f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f88:	4680      	mov	r8, r0
 8006f8a:	f7ff fc79 	bl	8006880 <__gettzinfo>
 8006f8e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8006f92:	4598      	cmp	r8, r3
 8006f94:	f340 8097 	ble.w	80070c6 <__tzcalc_limits+0x142>
 8006f98:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006f9c:	f240 126d 	movw	r2, #365	; 0x16d
 8006fa0:	4443      	add	r3, r8
 8006fa2:	109b      	asrs	r3, r3, #2
 8006fa4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8006fa8:	fb02 3505 	mla	r5, r2, r5, r3
 8006fac:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8006fb0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8006fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fb8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8006fbc:	441d      	add	r5, r3
 8006fbe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006fc2:	4442      	add	r2, r8
 8006fc4:	fb92 f2f3 	sdiv	r2, r2, r3
 8006fc8:	fb98 f7f3 	sdiv	r7, r8, r3
 8006fcc:	4415      	add	r5, r2
 8006fce:	2264      	movs	r2, #100	; 0x64
 8006fd0:	fb03 8717 	mls	r7, r3, r7, r8
 8006fd4:	fb98 f6f2 	sdiv	r6, r8, r2
 8006fd8:	fab7 fc87 	clz	ip, r7
 8006fdc:	4604      	mov	r4, r0
 8006fde:	f04f 0e07 	mov.w	lr, #7
 8006fe2:	fb02 8616 	mls	r6, r2, r6, r8
 8006fe6:	f008 0303 	and.w	r3, r8, #3
 8006fea:	f8c0 8004 	str.w	r8, [r0, #4]
 8006fee:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8006ff2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	7a22      	ldrb	r2, [r4, #8]
 8006ffa:	6963      	ldr	r3, [r4, #20]
 8006ffc:	2a4a      	cmp	r2, #74	; 0x4a
 8006ffe:	d128      	bne.n	8007052 <__tzcalc_limits+0xce>
 8007000:	9900      	ldr	r1, [sp, #0]
 8007002:	18ea      	adds	r2, r5, r3
 8007004:	b901      	cbnz	r1, 8007008 <__tzcalc_limits+0x84>
 8007006:	b906      	cbnz	r6, 800700a <__tzcalc_limits+0x86>
 8007008:	bb0f      	cbnz	r7, 800704e <__tzcalc_limits+0xca>
 800700a:	2b3b      	cmp	r3, #59	; 0x3b
 800700c:	bfd4      	ite	le
 800700e:	2300      	movle	r3, #0
 8007010:	2301      	movgt	r3, #1
 8007012:	4413      	add	r3, r2
 8007014:	1e5a      	subs	r2, r3, #1
 8007016:	69a3      	ldr	r3, [r4, #24]
 8007018:	492c      	ldr	r1, [pc, #176]	; (80070cc <__tzcalc_limits+0x148>)
 800701a:	3428      	adds	r4, #40	; 0x28
 800701c:	fb01 3202 	mla	r2, r1, r2, r3
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	4413      	add	r3, r2
 8007024:	461a      	mov	r2, r3
 8007026:	17db      	asrs	r3, r3, #31
 8007028:	e944 2302 	strd	r2, r3, [r4, #-8]
 800702c:	45a3      	cmp	fp, r4
 800702e:	d1e3      	bne.n	8006ff8 <__tzcalc_limits+0x74>
 8007030:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8007034:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8007038:	4294      	cmp	r4, r2
 800703a:	eb75 0303 	sbcs.w	r3, r5, r3
 800703e:	bfb4      	ite	lt
 8007040:	2301      	movlt	r3, #1
 8007042:	2300      	movge	r3, #0
 8007044:	6003      	str	r3, [r0, #0]
 8007046:	2001      	movs	r0, #1
 8007048:	b003      	add	sp, #12
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704e:	2300      	movs	r3, #0
 8007050:	e7df      	b.n	8007012 <__tzcalc_limits+0x8e>
 8007052:	2a44      	cmp	r2, #68	; 0x44
 8007054:	d101      	bne.n	800705a <__tzcalc_limits+0xd6>
 8007056:	18ea      	adds	r2, r5, r3
 8007058:	e7dd      	b.n	8007016 <__tzcalc_limits+0x92>
 800705a:	9a00      	ldr	r2, [sp, #0]
 800705c:	bb6a      	cbnz	r2, 80070ba <__tzcalc_limits+0x136>
 800705e:	2e00      	cmp	r6, #0
 8007060:	bf0c      	ite	eq
 8007062:	46e1      	moveq	r9, ip
 8007064:	f04f 0901 	movne.w	r9, #1
 8007068:	2230      	movs	r2, #48	; 0x30
 800706a:	fb02 f909 	mul.w	r9, r2, r9
 800706e:	68e2      	ldr	r2, [r4, #12]
 8007070:	f04f 0800 	mov.w	r8, #0
 8007074:	9201      	str	r2, [sp, #4]
 8007076:	462a      	mov	r2, r5
 8007078:	f108 0801 	add.w	r8, r8, #1
 800707c:	4914      	ldr	r1, [pc, #80]	; (80070d0 <__tzcalc_limits+0x14c>)
 800707e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8007082:	448a      	add	sl, r1
 8007084:	9901      	ldr	r1, [sp, #4]
 8007086:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800708a:	4541      	cmp	r1, r8
 800708c:	dc17      	bgt.n	80070be <__tzcalc_limits+0x13a>
 800708e:	f102 0804 	add.w	r8, r2, #4
 8007092:	fb98 f9fe 	sdiv	r9, r8, lr
 8007096:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800709a:	eba8 0909 	sub.w	r9, r8, r9
 800709e:	ebb3 0909 	subs.w	r9, r3, r9
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	bf48      	it	mi
 80070a6:	f109 0907 	addmi.w	r9, r9, #7
 80070aa:	3b01      	subs	r3, #1
 80070ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80070b0:	444b      	add	r3, r9
 80070b2:	4553      	cmp	r3, sl
 80070b4:	da05      	bge.n	80070c2 <__tzcalc_limits+0x13e>
 80070b6:	441a      	add	r2, r3
 80070b8:	e7ad      	b.n	8007016 <__tzcalc_limits+0x92>
 80070ba:	46e1      	mov	r9, ip
 80070bc:	e7d4      	b.n	8007068 <__tzcalc_limits+0xe4>
 80070be:	4452      	add	r2, sl
 80070c0:	e7da      	b.n	8007078 <__tzcalc_limits+0xf4>
 80070c2:	3b07      	subs	r3, #7
 80070c4:	e7f5      	b.n	80070b2 <__tzcalc_limits+0x12e>
 80070c6:	2000      	movs	r0, #0
 80070c8:	e7be      	b.n	8007048 <__tzcalc_limits+0xc4>
 80070ca:	bf00      	nop
 80070cc:	00015180 	.word	0x00015180
 80070d0:	0800808c 	.word	0x0800808c

080070d4 <__ascii_wctomb>:
 80070d4:	b149      	cbz	r1, 80070ea <__ascii_wctomb+0x16>
 80070d6:	2aff      	cmp	r2, #255	; 0xff
 80070d8:	bf8b      	itete	hi
 80070da:	238a      	movhi	r3, #138	; 0x8a
 80070dc:	700a      	strbls	r2, [r1, #0]
 80070de:	6003      	strhi	r3, [r0, #0]
 80070e0:	2001      	movls	r0, #1
 80070e2:	bf88      	it	hi
 80070e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80070e8:	4770      	bx	lr
 80070ea:	4608      	mov	r0, r1
 80070ec:	4770      	bx	lr

080070ee <__env_lock>:
 80070ee:	4770      	bx	lr

080070f0 <__env_unlock>:
 80070f0:	4770      	bx	lr

080070f2 <memchr>:
 80070f2:	b510      	push	{r4, lr}
 80070f4:	b2c9      	uxtb	r1, r1
 80070f6:	4402      	add	r2, r0
 80070f8:	4290      	cmp	r0, r2
 80070fa:	4603      	mov	r3, r0
 80070fc:	d101      	bne.n	8007102 <memchr+0x10>
 80070fe:	2300      	movs	r3, #0
 8007100:	e003      	b.n	800710a <memchr+0x18>
 8007102:	781c      	ldrb	r4, [r3, #0]
 8007104:	3001      	adds	r0, #1
 8007106:	428c      	cmp	r4, r1
 8007108:	d1f6      	bne.n	80070f8 <memchr+0x6>
 800710a:	4618      	mov	r0, r3
 800710c:	bd10      	pop	{r4, pc}

0800710e <memcpy>:
 800710e:	b510      	push	{r4, lr}
 8007110:	1e43      	subs	r3, r0, #1
 8007112:	440a      	add	r2, r1
 8007114:	4291      	cmp	r1, r2
 8007116:	d100      	bne.n	800711a <memcpy+0xc>
 8007118:	bd10      	pop	{r4, pc}
 800711a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800711e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007122:	e7f7      	b.n	8007114 <memcpy+0x6>

08007124 <memmove>:
 8007124:	4288      	cmp	r0, r1
 8007126:	b510      	push	{r4, lr}
 8007128:	eb01 0302 	add.w	r3, r1, r2
 800712c:	d807      	bhi.n	800713e <memmove+0x1a>
 800712e:	1e42      	subs	r2, r0, #1
 8007130:	4299      	cmp	r1, r3
 8007132:	d00a      	beq.n	800714a <memmove+0x26>
 8007134:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007138:	f802 4f01 	strb.w	r4, [r2, #1]!
 800713c:	e7f8      	b.n	8007130 <memmove+0xc>
 800713e:	4283      	cmp	r3, r0
 8007140:	d9f5      	bls.n	800712e <memmove+0xa>
 8007142:	1881      	adds	r1, r0, r2
 8007144:	1ad2      	subs	r2, r2, r3
 8007146:	42d3      	cmn	r3, r2
 8007148:	d100      	bne.n	800714c <memmove+0x28>
 800714a:	bd10      	pop	{r4, pc}
 800714c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007150:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007154:	e7f7      	b.n	8007146 <memmove+0x22>

08007156 <_realloc_r>:
 8007156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007158:	4607      	mov	r7, r0
 800715a:	4614      	mov	r4, r2
 800715c:	460e      	mov	r6, r1
 800715e:	b921      	cbnz	r1, 800716a <_realloc_r+0x14>
 8007160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007164:	4611      	mov	r1, r2
 8007166:	f7fe bb0d 	b.w	8005784 <_malloc_r>
 800716a:	b922      	cbnz	r2, 8007176 <_realloc_r+0x20>
 800716c:	f7fe fabe 	bl	80056ec <_free_r>
 8007170:	4625      	mov	r5, r4
 8007172:	4628      	mov	r0, r5
 8007174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007176:	f000 fc0d 	bl	8007994 <_malloc_usable_size_r>
 800717a:	42a0      	cmp	r0, r4
 800717c:	d20f      	bcs.n	800719e <_realloc_r+0x48>
 800717e:	4621      	mov	r1, r4
 8007180:	4638      	mov	r0, r7
 8007182:	f7fe faff 	bl	8005784 <_malloc_r>
 8007186:	4605      	mov	r5, r0
 8007188:	2800      	cmp	r0, #0
 800718a:	d0f2      	beq.n	8007172 <_realloc_r+0x1c>
 800718c:	4631      	mov	r1, r6
 800718e:	4622      	mov	r2, r4
 8007190:	f7ff ffbd 	bl	800710e <memcpy>
 8007194:	4631      	mov	r1, r6
 8007196:	4638      	mov	r0, r7
 8007198:	f7fe faa8 	bl	80056ec <_free_r>
 800719c:	e7e9      	b.n	8007172 <_realloc_r+0x1c>
 800719e:	4635      	mov	r5, r6
 80071a0:	e7e7      	b.n	8007172 <_realloc_r+0x1c>

080071a2 <_sungetc_r>:
 80071a2:	b538      	push	{r3, r4, r5, lr}
 80071a4:	1c4b      	adds	r3, r1, #1
 80071a6:	4614      	mov	r4, r2
 80071a8:	d103      	bne.n	80071b2 <_sungetc_r+0x10>
 80071aa:	f04f 35ff 	mov.w	r5, #4294967295
 80071ae:	4628      	mov	r0, r5
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	8993      	ldrh	r3, [r2, #12]
 80071b4:	b2cd      	uxtb	r5, r1
 80071b6:	f023 0320 	bic.w	r3, r3, #32
 80071ba:	8193      	strh	r3, [r2, #12]
 80071bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071be:	6852      	ldr	r2, [r2, #4]
 80071c0:	b18b      	cbz	r3, 80071e6 <_sungetc_r+0x44>
 80071c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071c4:	4293      	cmp	r3, r2
 80071c6:	dd08      	ble.n	80071da <_sungetc_r+0x38>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	1e5a      	subs	r2, r3, #1
 80071cc:	6022      	str	r2, [r4, #0]
 80071ce:	f803 5c01 	strb.w	r5, [r3, #-1]
 80071d2:	6863      	ldr	r3, [r4, #4]
 80071d4:	3301      	adds	r3, #1
 80071d6:	6063      	str	r3, [r4, #4]
 80071d8:	e7e9      	b.n	80071ae <_sungetc_r+0xc>
 80071da:	4621      	mov	r1, r4
 80071dc:	f000 fba2 	bl	8007924 <__submore>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d0f1      	beq.n	80071c8 <_sungetc_r+0x26>
 80071e4:	e7e1      	b.n	80071aa <_sungetc_r+0x8>
 80071e6:	6921      	ldr	r1, [r4, #16]
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	b151      	cbz	r1, 8007202 <_sungetc_r+0x60>
 80071ec:	4299      	cmp	r1, r3
 80071ee:	d208      	bcs.n	8007202 <_sungetc_r+0x60>
 80071f0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80071f4:	42a9      	cmp	r1, r5
 80071f6:	d104      	bne.n	8007202 <_sungetc_r+0x60>
 80071f8:	3b01      	subs	r3, #1
 80071fa:	3201      	adds	r2, #1
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	6062      	str	r2, [r4, #4]
 8007200:	e7d5      	b.n	80071ae <_sungetc_r+0xc>
 8007202:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800720a:	6363      	str	r3, [r4, #52]	; 0x34
 800720c:	2303      	movs	r3, #3
 800720e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007210:	4623      	mov	r3, r4
 8007212:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	2301      	movs	r3, #1
 800721a:	e7dc      	b.n	80071d6 <_sungetc_r+0x34>

0800721c <__ssrefill_r>:
 800721c:	b510      	push	{r4, lr}
 800721e:	460c      	mov	r4, r1
 8007220:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007222:	b169      	cbz	r1, 8007240 <__ssrefill_r+0x24>
 8007224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007228:	4299      	cmp	r1, r3
 800722a:	d001      	beq.n	8007230 <__ssrefill_r+0x14>
 800722c:	f7fe fa5e 	bl	80056ec <_free_r>
 8007230:	2000      	movs	r0, #0
 8007232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007234:	6360      	str	r0, [r4, #52]	; 0x34
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	b113      	cbz	r3, 8007240 <__ssrefill_r+0x24>
 800723a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd10      	pop	{r4, pc}
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f043 0320 	orr.w	r3, r3, #32
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	e7f3      	b.n	800723e <__ssrefill_r+0x22>
	...

08007258 <__ssvfiscanf_r>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	2100      	movs	r1, #0
 8007260:	4606      	mov	r6, r0
 8007262:	4692      	mov	sl, r2
 8007264:	270a      	movs	r7, #10
 8007266:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800726a:	9144      	str	r1, [sp, #272]	; 0x110
 800726c:	9145      	str	r1, [sp, #276]	; 0x114
 800726e:	499e      	ldr	r1, [pc, #632]	; (80074e8 <__ssvfiscanf_r+0x290>)
 8007270:	f10d 0804 	add.w	r8, sp, #4
 8007274:	91a0      	str	r1, [sp, #640]	; 0x280
 8007276:	499d      	ldr	r1, [pc, #628]	; (80074ec <__ssvfiscanf_r+0x294>)
 8007278:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80074f0 <__ssvfiscanf_r+0x298>
 800727c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007280:	91a1      	str	r1, [sp, #644]	; 0x284
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	f89a 3000 	ldrb.w	r3, [sl]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 812a 	beq.w	80074e2 <__ssvfiscanf_r+0x28a>
 800728e:	4655      	mov	r5, sl
 8007290:	f7ff fb02 	bl	8006898 <__locale_ctype_ptr>
 8007294:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007298:	4458      	add	r0, fp
 800729a:	7843      	ldrb	r3, [r0, #1]
 800729c:	f013 0308 	ands.w	r3, r3, #8
 80072a0:	d01c      	beq.n	80072dc <__ssvfiscanf_r+0x84>
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd12      	ble.n	80072ce <__ssvfiscanf_r+0x76>
 80072a8:	f7ff faf6 	bl	8006898 <__locale_ctype_ptr>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	4410      	add	r0, r2
 80072b2:	7842      	ldrb	r2, [r0, #1]
 80072b4:	0712      	lsls	r2, r2, #28
 80072b6:	d401      	bmi.n	80072bc <__ssvfiscanf_r+0x64>
 80072b8:	46aa      	mov	sl, r5
 80072ba:	e7e3      	b.n	8007284 <__ssvfiscanf_r+0x2c>
 80072bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80072be:	3301      	adds	r3, #1
 80072c0:	3201      	adds	r2, #1
 80072c2:	9245      	str	r2, [sp, #276]	; 0x114
 80072c4:	6862      	ldr	r2, [r4, #4]
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	3a01      	subs	r2, #1
 80072ca:	6062      	str	r2, [r4, #4]
 80072cc:	e7e9      	b.n	80072a2 <__ssvfiscanf_r+0x4a>
 80072ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80072d0:	4621      	mov	r1, r4
 80072d2:	4630      	mov	r0, r6
 80072d4:	4798      	blx	r3
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d0e6      	beq.n	80072a8 <__ssvfiscanf_r+0x50>
 80072da:	e7ed      	b.n	80072b8 <__ssvfiscanf_r+0x60>
 80072dc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80072e0:	f040 8082 	bne.w	80073e8 <__ssvfiscanf_r+0x190>
 80072e4:	9343      	str	r3, [sp, #268]	; 0x10c
 80072e6:	9341      	str	r3, [sp, #260]	; 0x104
 80072e8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80072ec:	2b2a      	cmp	r3, #42	; 0x2a
 80072ee:	d103      	bne.n	80072f8 <__ssvfiscanf_r+0xa0>
 80072f0:	2310      	movs	r3, #16
 80072f2:	f10a 0502 	add.w	r5, sl, #2
 80072f6:	9341      	str	r3, [sp, #260]	; 0x104
 80072f8:	46aa      	mov	sl, r5
 80072fa:	f815 1b01 	ldrb.w	r1, [r5], #1
 80072fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007302:	2a09      	cmp	r2, #9
 8007304:	d922      	bls.n	800734c <__ssvfiscanf_r+0xf4>
 8007306:	2203      	movs	r2, #3
 8007308:	4879      	ldr	r0, [pc, #484]	; (80074f0 <__ssvfiscanf_r+0x298>)
 800730a:	f7ff fef2 	bl	80070f2 <memchr>
 800730e:	b138      	cbz	r0, 8007320 <__ssvfiscanf_r+0xc8>
 8007310:	eba0 0309 	sub.w	r3, r0, r9
 8007314:	2001      	movs	r0, #1
 8007316:	46aa      	mov	sl, r5
 8007318:	4098      	lsls	r0, r3
 800731a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800731c:	4318      	orrs	r0, r3
 800731e:	9041      	str	r0, [sp, #260]	; 0x104
 8007320:	f89a 3000 	ldrb.w	r3, [sl]
 8007324:	f10a 0501 	add.w	r5, sl, #1
 8007328:	2b67      	cmp	r3, #103	; 0x67
 800732a:	d82b      	bhi.n	8007384 <__ssvfiscanf_r+0x12c>
 800732c:	2b65      	cmp	r3, #101	; 0x65
 800732e:	f080 809f 	bcs.w	8007470 <__ssvfiscanf_r+0x218>
 8007332:	2b47      	cmp	r3, #71	; 0x47
 8007334:	d810      	bhi.n	8007358 <__ssvfiscanf_r+0x100>
 8007336:	2b45      	cmp	r3, #69	; 0x45
 8007338:	f080 809a 	bcs.w	8007470 <__ssvfiscanf_r+0x218>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d06c      	beq.n	800741a <__ssvfiscanf_r+0x1c2>
 8007340:	2b25      	cmp	r3, #37	; 0x25
 8007342:	d051      	beq.n	80073e8 <__ssvfiscanf_r+0x190>
 8007344:	2303      	movs	r3, #3
 8007346:	9742      	str	r7, [sp, #264]	; 0x108
 8007348:	9347      	str	r3, [sp, #284]	; 0x11c
 800734a:	e027      	b.n	800739c <__ssvfiscanf_r+0x144>
 800734c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800734e:	fb07 1303 	mla	r3, r7, r3, r1
 8007352:	3b30      	subs	r3, #48	; 0x30
 8007354:	9343      	str	r3, [sp, #268]	; 0x10c
 8007356:	e7cf      	b.n	80072f8 <__ssvfiscanf_r+0xa0>
 8007358:	2b5b      	cmp	r3, #91	; 0x5b
 800735a:	d06a      	beq.n	8007432 <__ssvfiscanf_r+0x1da>
 800735c:	d80c      	bhi.n	8007378 <__ssvfiscanf_r+0x120>
 800735e:	2b58      	cmp	r3, #88	; 0x58
 8007360:	d1f0      	bne.n	8007344 <__ssvfiscanf_r+0xec>
 8007362:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007368:	9241      	str	r2, [sp, #260]	; 0x104
 800736a:	2210      	movs	r2, #16
 800736c:	9242      	str	r2, [sp, #264]	; 0x108
 800736e:	2b6e      	cmp	r3, #110	; 0x6e
 8007370:	bf8c      	ite	hi
 8007372:	2304      	movhi	r3, #4
 8007374:	2303      	movls	r3, #3
 8007376:	e010      	b.n	800739a <__ssvfiscanf_r+0x142>
 8007378:	2b63      	cmp	r3, #99	; 0x63
 800737a:	d065      	beq.n	8007448 <__ssvfiscanf_r+0x1f0>
 800737c:	2b64      	cmp	r3, #100	; 0x64
 800737e:	d1e1      	bne.n	8007344 <__ssvfiscanf_r+0xec>
 8007380:	9742      	str	r7, [sp, #264]	; 0x108
 8007382:	e7f4      	b.n	800736e <__ssvfiscanf_r+0x116>
 8007384:	2b70      	cmp	r3, #112	; 0x70
 8007386:	d04b      	beq.n	8007420 <__ssvfiscanf_r+0x1c8>
 8007388:	d826      	bhi.n	80073d8 <__ssvfiscanf_r+0x180>
 800738a:	2b6e      	cmp	r3, #110	; 0x6e
 800738c:	d062      	beq.n	8007454 <__ssvfiscanf_r+0x1fc>
 800738e:	d84c      	bhi.n	800742a <__ssvfiscanf_r+0x1d2>
 8007390:	2b69      	cmp	r3, #105	; 0x69
 8007392:	d1d7      	bne.n	8007344 <__ssvfiscanf_r+0xec>
 8007394:	2300      	movs	r3, #0
 8007396:	9342      	str	r3, [sp, #264]	; 0x108
 8007398:	2303      	movs	r3, #3
 800739a:	9347      	str	r3, [sp, #284]	; 0x11c
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dd68      	ble.n	8007474 <__ssvfiscanf_r+0x21c>
 80073a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073a4:	0659      	lsls	r1, r3, #25
 80073a6:	d407      	bmi.n	80073b8 <__ssvfiscanf_r+0x160>
 80073a8:	f7ff fa76 	bl	8006898 <__locale_ctype_ptr>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	4410      	add	r0, r2
 80073b2:	7842      	ldrb	r2, [r0, #1]
 80073b4:	0712      	lsls	r2, r2, #28
 80073b6:	d464      	bmi.n	8007482 <__ssvfiscanf_r+0x22a>
 80073b8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	dc73      	bgt.n	80074a6 <__ssvfiscanf_r+0x24e>
 80073be:	466b      	mov	r3, sp
 80073c0:	4622      	mov	r2, r4
 80073c2:	a941      	add	r1, sp, #260	; 0x104
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 f897 	bl	80074f8 <_scanf_chars>
 80073ca:	2801      	cmp	r0, #1
 80073cc:	f000 8089 	beq.w	80074e2 <__ssvfiscanf_r+0x28a>
 80073d0:	2802      	cmp	r0, #2
 80073d2:	f47f af71 	bne.w	80072b8 <__ssvfiscanf_r+0x60>
 80073d6:	e01d      	b.n	8007414 <__ssvfiscanf_r+0x1bc>
 80073d8:	2b75      	cmp	r3, #117	; 0x75
 80073da:	d0d1      	beq.n	8007380 <__ssvfiscanf_r+0x128>
 80073dc:	2b78      	cmp	r3, #120	; 0x78
 80073de:	d0c0      	beq.n	8007362 <__ssvfiscanf_r+0x10a>
 80073e0:	2b73      	cmp	r3, #115	; 0x73
 80073e2:	d1af      	bne.n	8007344 <__ssvfiscanf_r+0xec>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e7d8      	b.n	800739a <__ssvfiscanf_r+0x142>
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dd0c      	ble.n	8007408 <__ssvfiscanf_r+0x1b0>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	455a      	cmp	r2, fp
 80073f4:	d175      	bne.n	80074e2 <__ssvfiscanf_r+0x28a>
 80073f6:	3301      	adds	r3, #1
 80073f8:	6862      	ldr	r2, [r4, #4]
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80073fe:	3a01      	subs	r2, #1
 8007400:	3301      	adds	r3, #1
 8007402:	6062      	str	r2, [r4, #4]
 8007404:	9345      	str	r3, [sp, #276]	; 0x114
 8007406:	e757      	b.n	80072b8 <__ssvfiscanf_r+0x60>
 8007408:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800740a:	4621      	mov	r1, r4
 800740c:	4630      	mov	r0, r6
 800740e:	4798      	blx	r3
 8007410:	2800      	cmp	r0, #0
 8007412:	d0ec      	beq.n	80073ee <__ssvfiscanf_r+0x196>
 8007414:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007416:	2800      	cmp	r0, #0
 8007418:	d159      	bne.n	80074ce <__ssvfiscanf_r+0x276>
 800741a:	f04f 30ff 	mov.w	r0, #4294967295
 800741e:	e05c      	b.n	80074da <__ssvfiscanf_r+0x282>
 8007420:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007422:	f042 0220 	orr.w	r2, r2, #32
 8007426:	9241      	str	r2, [sp, #260]	; 0x104
 8007428:	e79b      	b.n	8007362 <__ssvfiscanf_r+0x10a>
 800742a:	2308      	movs	r3, #8
 800742c:	9342      	str	r3, [sp, #264]	; 0x108
 800742e:	2304      	movs	r3, #4
 8007430:	e7b3      	b.n	800739a <__ssvfiscanf_r+0x142>
 8007432:	4629      	mov	r1, r5
 8007434:	4640      	mov	r0, r8
 8007436:	f000 f9b7 	bl	80077a8 <__sccl>
 800743a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800743c:	4605      	mov	r5, r0
 800743e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007442:	9341      	str	r3, [sp, #260]	; 0x104
 8007444:	2301      	movs	r3, #1
 8007446:	e7a8      	b.n	800739a <__ssvfiscanf_r+0x142>
 8007448:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800744a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744e:	9341      	str	r3, [sp, #260]	; 0x104
 8007450:	2300      	movs	r3, #0
 8007452:	e7a2      	b.n	800739a <__ssvfiscanf_r+0x142>
 8007454:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007456:	06c3      	lsls	r3, r0, #27
 8007458:	f53f af2e 	bmi.w	80072b8 <__ssvfiscanf_r+0x60>
 800745c:	9b00      	ldr	r3, [sp, #0]
 800745e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007460:	1d19      	adds	r1, r3, #4
 8007462:	9100      	str	r1, [sp, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	07c0      	lsls	r0, r0, #31
 8007468:	bf4c      	ite	mi
 800746a:	801a      	strhmi	r2, [r3, #0]
 800746c:	601a      	strpl	r2, [r3, #0]
 800746e:	e723      	b.n	80072b8 <__ssvfiscanf_r+0x60>
 8007470:	2305      	movs	r3, #5
 8007472:	e792      	b.n	800739a <__ssvfiscanf_r+0x142>
 8007474:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007476:	4621      	mov	r1, r4
 8007478:	4630      	mov	r0, r6
 800747a:	4798      	blx	r3
 800747c:	2800      	cmp	r0, #0
 800747e:	d090      	beq.n	80073a2 <__ssvfiscanf_r+0x14a>
 8007480:	e7c8      	b.n	8007414 <__ssvfiscanf_r+0x1bc>
 8007482:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007484:	3201      	adds	r2, #1
 8007486:	9245      	str	r2, [sp, #276]	; 0x114
 8007488:	6862      	ldr	r2, [r4, #4]
 800748a:	3a01      	subs	r2, #1
 800748c:	2a00      	cmp	r2, #0
 800748e:	6062      	str	r2, [r4, #4]
 8007490:	dd02      	ble.n	8007498 <__ssvfiscanf_r+0x240>
 8007492:	3301      	adds	r3, #1
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	e787      	b.n	80073a8 <__ssvfiscanf_r+0x150>
 8007498:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800749a:	4621      	mov	r1, r4
 800749c:	4630      	mov	r0, r6
 800749e:	4798      	blx	r3
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d081      	beq.n	80073a8 <__ssvfiscanf_r+0x150>
 80074a4:	e7b6      	b.n	8007414 <__ssvfiscanf_r+0x1bc>
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	dc06      	bgt.n	80074b8 <__ssvfiscanf_r+0x260>
 80074aa:	466b      	mov	r3, sp
 80074ac:	4622      	mov	r2, r4
 80074ae:	a941      	add	r1, sp, #260	; 0x104
 80074b0:	4630      	mov	r0, r6
 80074b2:	f000 f883 	bl	80075bc <_scanf_i>
 80074b6:	e788      	b.n	80073ca <__ssvfiscanf_r+0x172>
 80074b8:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <__ssvfiscanf_r+0x29c>)
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f43f aefc 	beq.w	80072b8 <__ssvfiscanf_r+0x60>
 80074c0:	466b      	mov	r3, sp
 80074c2:	4622      	mov	r2, r4
 80074c4:	a941      	add	r1, sp, #260	; 0x104
 80074c6:	4630      	mov	r0, r6
 80074c8:	f3af 8000 	nop.w
 80074cc:	e77d      	b.n	80073ca <__ssvfiscanf_r+0x172>
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074d4:	bf18      	it	ne
 80074d6:	f04f 30ff 	movne.w	r0, #4294967295
 80074da:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80074de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80074e4:	e7f9      	b.n	80074da <__ssvfiscanf_r+0x282>
 80074e6:	bf00      	nop
 80074e8:	080071a3 	.word	0x080071a3
 80074ec:	0800721d 	.word	0x0800721d
 80074f0:	08007f5b 	.word	0x08007f5b
 80074f4:	00000000 	.word	0x00000000

080074f8 <_scanf_chars>:
 80074f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fc:	4615      	mov	r5, r2
 80074fe:	688a      	ldr	r2, [r1, #8]
 8007500:	4680      	mov	r8, r0
 8007502:	460c      	mov	r4, r1
 8007504:	b932      	cbnz	r2, 8007514 <_scanf_chars+0x1c>
 8007506:	698a      	ldr	r2, [r1, #24]
 8007508:	2a00      	cmp	r2, #0
 800750a:	bf14      	ite	ne
 800750c:	f04f 32ff 	movne.w	r2, #4294967295
 8007510:	2201      	moveq	r2, #1
 8007512:	608a      	str	r2, [r1, #8]
 8007514:	2600      	movs	r6, #0
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	06d1      	lsls	r1, r2, #27
 800751a:	bf5f      	itttt	pl
 800751c:	681a      	ldrpl	r2, [r3, #0]
 800751e:	1d11      	addpl	r1, r2, #4
 8007520:	6019      	strpl	r1, [r3, #0]
 8007522:	6817      	ldrpl	r7, [r2, #0]
 8007524:	69a3      	ldr	r3, [r4, #24]
 8007526:	b1db      	cbz	r3, 8007560 <_scanf_chars+0x68>
 8007528:	2b01      	cmp	r3, #1
 800752a:	d107      	bne.n	800753c <_scanf_chars+0x44>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	6962      	ldr	r2, [r4, #20]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	5cd3      	ldrb	r3, [r2, r3]
 8007534:	b9a3      	cbnz	r3, 8007560 <_scanf_chars+0x68>
 8007536:	2e00      	cmp	r6, #0
 8007538:	d131      	bne.n	800759e <_scanf_chars+0xa6>
 800753a:	e006      	b.n	800754a <_scanf_chars+0x52>
 800753c:	2b02      	cmp	r3, #2
 800753e:	d007      	beq.n	8007550 <_scanf_chars+0x58>
 8007540:	2e00      	cmp	r6, #0
 8007542:	d12c      	bne.n	800759e <_scanf_chars+0xa6>
 8007544:	69a3      	ldr	r3, [r4, #24]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d129      	bne.n	800759e <_scanf_chars+0xa6>
 800754a:	2001      	movs	r0, #1
 800754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007550:	f7ff f9a2 	bl	8006898 <__locale_ctype_ptr>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	4418      	add	r0, r3
 800755a:	7843      	ldrb	r3, [r0, #1]
 800755c:	071b      	lsls	r3, r3, #28
 800755e:	d4ef      	bmi.n	8007540 <_scanf_chars+0x48>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	3601      	adds	r6, #1
 8007564:	06da      	lsls	r2, r3, #27
 8007566:	bf5e      	ittt	pl
 8007568:	682b      	ldrpl	r3, [r5, #0]
 800756a:	781b      	ldrbpl	r3, [r3, #0]
 800756c:	703b      	strbpl	r3, [r7, #0]
 800756e:	682a      	ldr	r2, [r5, #0]
 8007570:	686b      	ldr	r3, [r5, #4]
 8007572:	f102 0201 	add.w	r2, r2, #1
 8007576:	602a      	str	r2, [r5, #0]
 8007578:	68a2      	ldr	r2, [r4, #8]
 800757a:	f103 33ff 	add.w	r3, r3, #4294967295
 800757e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007582:	606b      	str	r3, [r5, #4]
 8007584:	bf58      	it	pl
 8007586:	3701      	addpl	r7, #1
 8007588:	60a2      	str	r2, [r4, #8]
 800758a:	b142      	cbz	r2, 800759e <_scanf_chars+0xa6>
 800758c:	2b00      	cmp	r3, #0
 800758e:	dcc9      	bgt.n	8007524 <_scanf_chars+0x2c>
 8007590:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007594:	4629      	mov	r1, r5
 8007596:	4640      	mov	r0, r8
 8007598:	4798      	blx	r3
 800759a:	2800      	cmp	r0, #0
 800759c:	d0c2      	beq.n	8007524 <_scanf_chars+0x2c>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	f013 0310 	ands.w	r3, r3, #16
 80075a4:	d105      	bne.n	80075b2 <_scanf_chars+0xba>
 80075a6:	68e2      	ldr	r2, [r4, #12]
 80075a8:	3201      	adds	r2, #1
 80075aa:	60e2      	str	r2, [r4, #12]
 80075ac:	69a2      	ldr	r2, [r4, #24]
 80075ae:	b102      	cbz	r2, 80075b2 <_scanf_chars+0xba>
 80075b0:	703b      	strb	r3, [r7, #0]
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	2000      	movs	r0, #0
 80075b6:	441e      	add	r6, r3
 80075b8:	6126      	str	r6, [r4, #16]
 80075ba:	e7c7      	b.n	800754c <_scanf_chars+0x54>

080075bc <_scanf_i>:
 80075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	469a      	mov	sl, r3
 80075c4:	4b74      	ldr	r3, [pc, #464]	; (8007798 <_scanf_i+0x1dc>)
 80075c6:	b087      	sub	sp, #28
 80075c8:	4683      	mov	fp, r0
 80075ca:	4616      	mov	r6, r2
 80075cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075d0:	ab03      	add	r3, sp, #12
 80075d2:	68a7      	ldr	r7, [r4, #8]
 80075d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80075d8:	4b70      	ldr	r3, [pc, #448]	; (800779c <_scanf_i+0x1e0>)
 80075da:	69a1      	ldr	r1, [r4, #24]
 80075dc:	4a70      	ldr	r2, [pc, #448]	; (80077a0 <_scanf_i+0x1e4>)
 80075de:	f104 091c 	add.w	r9, r4, #28
 80075e2:	2903      	cmp	r1, #3
 80075e4:	bf08      	it	eq
 80075e6:	461a      	moveq	r2, r3
 80075e8:	1e7b      	subs	r3, r7, #1
 80075ea:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80075ee:	bf84      	itt	hi
 80075f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075f4:	60a3      	strhi	r3, [r4, #8]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	bf88      	it	hi
 80075fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075fe:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	bf98      	it	ls
 8007606:	2700      	movls	r7, #0
 8007608:	464b      	mov	r3, r9
 800760a:	f04f 0800 	mov.w	r8, #0
 800760e:	9200      	str	r2, [sp, #0]
 8007610:	bf88      	it	hi
 8007612:	197f      	addhi	r7, r7, r5
 8007614:	6831      	ldr	r1, [r6, #0]
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	ab03      	add	r3, sp, #12
 800761a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800761e:	2202      	movs	r2, #2
 8007620:	7809      	ldrb	r1, [r1, #0]
 8007622:	f7ff fd66 	bl	80070f2 <memchr>
 8007626:	9b01      	ldr	r3, [sp, #4]
 8007628:	b330      	cbz	r0, 8007678 <_scanf_i+0xbc>
 800762a:	f1b8 0f01 	cmp.w	r8, #1
 800762e:	d15a      	bne.n	80076e6 <_scanf_i+0x12a>
 8007630:	6862      	ldr	r2, [r4, #4]
 8007632:	b92a      	cbnz	r2, 8007640 <_scanf_i+0x84>
 8007634:	2108      	movs	r1, #8
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	6061      	str	r1, [r4, #4]
 800763a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800763e:	6022      	str	r2, [r4, #0]
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007646:	6022      	str	r2, [r4, #0]
 8007648:	68a2      	ldr	r2, [r4, #8]
 800764a:	1e51      	subs	r1, r2, #1
 800764c:	60a1      	str	r1, [r4, #8]
 800764e:	b19a      	cbz	r2, 8007678 <_scanf_i+0xbc>
 8007650:	6832      	ldr	r2, [r6, #0]
 8007652:	1c5d      	adds	r5, r3, #1
 8007654:	1c51      	adds	r1, r2, #1
 8007656:	6031      	str	r1, [r6, #0]
 8007658:	7812      	ldrb	r2, [r2, #0]
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	6873      	ldr	r3, [r6, #4]
 800765e:	3b01      	subs	r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	6073      	str	r3, [r6, #4]
 8007664:	dc07      	bgt.n	8007676 <_scanf_i+0xba>
 8007666:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800766a:	4631      	mov	r1, r6
 800766c:	4658      	mov	r0, fp
 800766e:	4798      	blx	r3
 8007670:	2800      	cmp	r0, #0
 8007672:	f040 8087 	bne.w	8007784 <_scanf_i+0x1c8>
 8007676:	462b      	mov	r3, r5
 8007678:	f108 0801 	add.w	r8, r8, #1
 800767c:	f1b8 0f03 	cmp.w	r8, #3
 8007680:	d1c8      	bne.n	8007614 <_scanf_i+0x58>
 8007682:	6862      	ldr	r2, [r4, #4]
 8007684:	b90a      	cbnz	r2, 800768a <_scanf_i+0xce>
 8007686:	220a      	movs	r2, #10
 8007688:	6062      	str	r2, [r4, #4]
 800768a:	6862      	ldr	r2, [r4, #4]
 800768c:	4945      	ldr	r1, [pc, #276]	; (80077a4 <_scanf_i+0x1e8>)
 800768e:	6960      	ldr	r0, [r4, #20]
 8007690:	1a89      	subs	r1, r1, r2
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	f000 f888 	bl	80077a8 <__sccl>
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	461d      	mov	r5, r3
 80076a0:	68a3      	ldr	r3, [r4, #8]
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d03b      	beq.n	8007720 <_scanf_i+0x164>
 80076a8:	6831      	ldr	r1, [r6, #0]
 80076aa:	6960      	ldr	r0, [r4, #20]
 80076ac:	f891 c000 	ldrb.w	ip, [r1]
 80076b0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d033      	beq.n	8007720 <_scanf_i+0x164>
 80076b8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80076bc:	d121      	bne.n	8007702 <_scanf_i+0x146>
 80076be:	0510      	lsls	r0, r2, #20
 80076c0:	d51f      	bpl.n	8007702 <_scanf_i+0x146>
 80076c2:	f108 0801 	add.w	r8, r8, #1
 80076c6:	b117      	cbz	r7, 80076ce <_scanf_i+0x112>
 80076c8:	3301      	adds	r3, #1
 80076ca:	3f01      	subs	r7, #1
 80076cc:	60a3      	str	r3, [r4, #8]
 80076ce:	6873      	ldr	r3, [r6, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	6073      	str	r3, [r6, #4]
 80076d6:	dd1c      	ble.n	8007712 <_scanf_i+0x156>
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	6033      	str	r3, [r6, #0]
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	60a3      	str	r3, [r4, #8]
 80076e4:	e7dc      	b.n	80076a0 <_scanf_i+0xe4>
 80076e6:	f1b8 0f02 	cmp.w	r8, #2
 80076ea:	d1ad      	bne.n	8007648 <_scanf_i+0x8c>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80076f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80076f6:	d1bf      	bne.n	8007678 <_scanf_i+0xbc>
 80076f8:	2110      	movs	r1, #16
 80076fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076fe:	6061      	str	r1, [r4, #4]
 8007700:	e7a1      	b.n	8007646 <_scanf_i+0x8a>
 8007702:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007706:	6022      	str	r2, [r4, #0]
 8007708:	780b      	ldrb	r3, [r1, #0]
 800770a:	3501      	adds	r5, #1
 800770c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007710:	e7dd      	b.n	80076ce <_scanf_i+0x112>
 8007712:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007716:	4631      	mov	r1, r6
 8007718:	4658      	mov	r0, fp
 800771a:	4798      	blx	r3
 800771c:	2800      	cmp	r0, #0
 800771e:	d0de      	beq.n	80076de <_scanf_i+0x122>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	05d9      	lsls	r1, r3, #23
 8007724:	d50c      	bpl.n	8007740 <_scanf_i+0x184>
 8007726:	454d      	cmp	r5, r9
 8007728:	d908      	bls.n	800773c <_scanf_i+0x180>
 800772a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800772e:	1e6f      	subs	r7, r5, #1
 8007730:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007734:	4632      	mov	r2, r6
 8007736:	4658      	mov	r0, fp
 8007738:	4798      	blx	r3
 800773a:	463d      	mov	r5, r7
 800773c:	454d      	cmp	r5, r9
 800773e:	d029      	beq.n	8007794 <_scanf_i+0x1d8>
 8007740:	6822      	ldr	r2, [r4, #0]
 8007742:	f012 0210 	ands.w	r2, r2, #16
 8007746:	d113      	bne.n	8007770 <_scanf_i+0x1b4>
 8007748:	702a      	strb	r2, [r5, #0]
 800774a:	6863      	ldr	r3, [r4, #4]
 800774c:	4649      	mov	r1, r9
 800774e:	4658      	mov	r0, fp
 8007750:	9e00      	ldr	r6, [sp, #0]
 8007752:	47b0      	blx	r6
 8007754:	f8da 3000 	ldr.w	r3, [sl]
 8007758:	6821      	ldr	r1, [r4, #0]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	f8ca 2000 	str.w	r2, [sl]
 8007760:	f011 0f20 	tst.w	r1, #32
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	d010      	beq.n	800778a <_scanf_i+0x1ce>
 8007768:	6018      	str	r0, [r3, #0]
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60e3      	str	r3, [r4, #12]
 8007770:	2000      	movs	r0, #0
 8007772:	eba5 0509 	sub.w	r5, r5, r9
 8007776:	44a8      	add	r8, r5
 8007778:	6925      	ldr	r5, [r4, #16]
 800777a:	4445      	add	r5, r8
 800777c:	6125      	str	r5, [r4, #16]
 800777e:	b007      	add	sp, #28
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007784:	f04f 0800 	mov.w	r8, #0
 8007788:	e7ca      	b.n	8007720 <_scanf_i+0x164>
 800778a:	07ca      	lsls	r2, r1, #31
 800778c:	bf4c      	ite	mi
 800778e:	8018      	strhmi	r0, [r3, #0]
 8007790:	6018      	strpl	r0, [r3, #0]
 8007792:	e7ea      	b.n	800776a <_scanf_i+0x1ae>
 8007794:	2001      	movs	r0, #1
 8007796:	e7f2      	b.n	800777e <_scanf_i+0x1c2>
 8007798:	08007c68 	.word	0x08007c68
 800779c:	08007901 	.word	0x08007901
 80077a0:	0800643d 	.word	0x0800643d
 80077a4:	080080fc 	.word	0x080080fc

080077a8 <__sccl>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	780b      	ldrb	r3, [r1, #0]
 80077ac:	1e44      	subs	r4, r0, #1
 80077ae:	2b5e      	cmp	r3, #94	; 0x5e
 80077b0:	bf13      	iteet	ne
 80077b2:	1c4a      	addne	r2, r1, #1
 80077b4:	1c8a      	addeq	r2, r1, #2
 80077b6:	784b      	ldrbeq	r3, [r1, #1]
 80077b8:	2100      	movne	r1, #0
 80077ba:	bf08      	it	eq
 80077bc:	2101      	moveq	r1, #1
 80077be:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80077c2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80077c6:	42ac      	cmp	r4, r5
 80077c8:	d1fb      	bne.n	80077c2 <__sccl+0x1a>
 80077ca:	b913      	cbnz	r3, 80077d2 <__sccl+0x2a>
 80077cc:	3a01      	subs	r2, #1
 80077ce:	4610      	mov	r0, r2
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
 80077d2:	f081 0401 	eor.w	r4, r1, #1
 80077d6:	54c4      	strb	r4, [r0, r3]
 80077d8:	1c51      	adds	r1, r2, #1
 80077da:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80077de:	1e4e      	subs	r6, r1, #1
 80077e0:	2d2d      	cmp	r5, #45	; 0x2d
 80077e2:	460a      	mov	r2, r1
 80077e4:	d006      	beq.n	80077f4 <__sccl+0x4c>
 80077e6:	2d5d      	cmp	r5, #93	; 0x5d
 80077e8:	d0f1      	beq.n	80077ce <__sccl+0x26>
 80077ea:	b90d      	cbnz	r5, 80077f0 <__sccl+0x48>
 80077ec:	4632      	mov	r2, r6
 80077ee:	e7ee      	b.n	80077ce <__sccl+0x26>
 80077f0:	462b      	mov	r3, r5
 80077f2:	e7f0      	b.n	80077d6 <__sccl+0x2e>
 80077f4:	780e      	ldrb	r6, [r1, #0]
 80077f6:	2e5d      	cmp	r6, #93	; 0x5d
 80077f8:	d0fa      	beq.n	80077f0 <__sccl+0x48>
 80077fa:	42b3      	cmp	r3, r6
 80077fc:	dcf8      	bgt.n	80077f0 <__sccl+0x48>
 80077fe:	3301      	adds	r3, #1
 8007800:	429e      	cmp	r6, r3
 8007802:	54c4      	strb	r4, [r0, r3]
 8007804:	dcfb      	bgt.n	80077fe <__sccl+0x56>
 8007806:	3102      	adds	r1, #2
 8007808:	e7e7      	b.n	80077da <__sccl+0x32>

0800780a <_strtol_l.isra.0>:
 800780a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800780e:	4680      	mov	r8, r0
 8007810:	4689      	mov	r9, r1
 8007812:	4692      	mov	sl, r2
 8007814:	461e      	mov	r6, r3
 8007816:	460f      	mov	r7, r1
 8007818:	463d      	mov	r5, r7
 800781a:	9808      	ldr	r0, [sp, #32]
 800781c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007820:	f7ff f836 	bl	8006890 <__locale_ctype_ptr_l>
 8007824:	4420      	add	r0, r4
 8007826:	7843      	ldrb	r3, [r0, #1]
 8007828:	f013 0308 	ands.w	r3, r3, #8
 800782c:	d132      	bne.n	8007894 <_strtol_l.isra.0+0x8a>
 800782e:	2c2d      	cmp	r4, #45	; 0x2d
 8007830:	d132      	bne.n	8007898 <_strtol_l.isra.0+0x8e>
 8007832:	2201      	movs	r2, #1
 8007834:	787c      	ldrb	r4, [r7, #1]
 8007836:	1cbd      	adds	r5, r7, #2
 8007838:	2e00      	cmp	r6, #0
 800783a:	d05d      	beq.n	80078f8 <_strtol_l.isra.0+0xee>
 800783c:	2e10      	cmp	r6, #16
 800783e:	d109      	bne.n	8007854 <_strtol_l.isra.0+0x4a>
 8007840:	2c30      	cmp	r4, #48	; 0x30
 8007842:	d107      	bne.n	8007854 <_strtol_l.isra.0+0x4a>
 8007844:	782b      	ldrb	r3, [r5, #0]
 8007846:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800784a:	2b58      	cmp	r3, #88	; 0x58
 800784c:	d14f      	bne.n	80078ee <_strtol_l.isra.0+0xe4>
 800784e:	2610      	movs	r6, #16
 8007850:	786c      	ldrb	r4, [r5, #1]
 8007852:	3502      	adds	r5, #2
 8007854:	2a00      	cmp	r2, #0
 8007856:	bf14      	ite	ne
 8007858:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800785c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007860:	2700      	movs	r7, #0
 8007862:	fbb1 fcf6 	udiv	ip, r1, r6
 8007866:	4638      	mov	r0, r7
 8007868:	fb06 1e1c 	mls	lr, r6, ip, r1
 800786c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007870:	2b09      	cmp	r3, #9
 8007872:	d817      	bhi.n	80078a4 <_strtol_l.isra.0+0x9a>
 8007874:	461c      	mov	r4, r3
 8007876:	42a6      	cmp	r6, r4
 8007878:	dd23      	ble.n	80078c2 <_strtol_l.isra.0+0xb8>
 800787a:	1c7b      	adds	r3, r7, #1
 800787c:	d007      	beq.n	800788e <_strtol_l.isra.0+0x84>
 800787e:	4584      	cmp	ip, r0
 8007880:	d31c      	bcc.n	80078bc <_strtol_l.isra.0+0xb2>
 8007882:	d101      	bne.n	8007888 <_strtol_l.isra.0+0x7e>
 8007884:	45a6      	cmp	lr, r4
 8007886:	db19      	blt.n	80078bc <_strtol_l.isra.0+0xb2>
 8007888:	2701      	movs	r7, #1
 800788a:	fb00 4006 	mla	r0, r0, r6, r4
 800788e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007892:	e7eb      	b.n	800786c <_strtol_l.isra.0+0x62>
 8007894:	462f      	mov	r7, r5
 8007896:	e7bf      	b.n	8007818 <_strtol_l.isra.0+0xe>
 8007898:	2c2b      	cmp	r4, #43	; 0x2b
 800789a:	bf04      	itt	eq
 800789c:	1cbd      	addeq	r5, r7, #2
 800789e:	787c      	ldrbeq	r4, [r7, #1]
 80078a0:	461a      	mov	r2, r3
 80078a2:	e7c9      	b.n	8007838 <_strtol_l.isra.0+0x2e>
 80078a4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80078a8:	2b19      	cmp	r3, #25
 80078aa:	d801      	bhi.n	80078b0 <_strtol_l.isra.0+0xa6>
 80078ac:	3c37      	subs	r4, #55	; 0x37
 80078ae:	e7e2      	b.n	8007876 <_strtol_l.isra.0+0x6c>
 80078b0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80078b4:	2b19      	cmp	r3, #25
 80078b6:	d804      	bhi.n	80078c2 <_strtol_l.isra.0+0xb8>
 80078b8:	3c57      	subs	r4, #87	; 0x57
 80078ba:	e7dc      	b.n	8007876 <_strtol_l.isra.0+0x6c>
 80078bc:	f04f 37ff 	mov.w	r7, #4294967295
 80078c0:	e7e5      	b.n	800788e <_strtol_l.isra.0+0x84>
 80078c2:	1c7b      	adds	r3, r7, #1
 80078c4:	d108      	bne.n	80078d8 <_strtol_l.isra.0+0xce>
 80078c6:	2322      	movs	r3, #34	; 0x22
 80078c8:	4608      	mov	r0, r1
 80078ca:	f8c8 3000 	str.w	r3, [r8]
 80078ce:	f1ba 0f00 	cmp.w	sl, #0
 80078d2:	d107      	bne.n	80078e4 <_strtol_l.isra.0+0xda>
 80078d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d8:	b102      	cbz	r2, 80078dc <_strtol_l.isra.0+0xd2>
 80078da:	4240      	negs	r0, r0
 80078dc:	f1ba 0f00 	cmp.w	sl, #0
 80078e0:	d0f8      	beq.n	80078d4 <_strtol_l.isra.0+0xca>
 80078e2:	b10f      	cbz	r7, 80078e8 <_strtol_l.isra.0+0xde>
 80078e4:	f105 39ff 	add.w	r9, r5, #4294967295
 80078e8:	f8ca 9000 	str.w	r9, [sl]
 80078ec:	e7f2      	b.n	80078d4 <_strtol_l.isra.0+0xca>
 80078ee:	2430      	movs	r4, #48	; 0x30
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	d1af      	bne.n	8007854 <_strtol_l.isra.0+0x4a>
 80078f4:	2608      	movs	r6, #8
 80078f6:	e7ad      	b.n	8007854 <_strtol_l.isra.0+0x4a>
 80078f8:	2c30      	cmp	r4, #48	; 0x30
 80078fa:	d0a3      	beq.n	8007844 <_strtol_l.isra.0+0x3a>
 80078fc:	260a      	movs	r6, #10
 80078fe:	e7a9      	b.n	8007854 <_strtol_l.isra.0+0x4a>

08007900 <_strtol_r>:
 8007900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007902:	4c06      	ldr	r4, [pc, #24]	; (800791c <_strtol_r+0x1c>)
 8007904:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_strtol_r+0x20>)
 8007906:	6824      	ldr	r4, [r4, #0]
 8007908:	6a24      	ldr	r4, [r4, #32]
 800790a:	2c00      	cmp	r4, #0
 800790c:	bf08      	it	eq
 800790e:	462c      	moveq	r4, r5
 8007910:	9400      	str	r4, [sp, #0]
 8007912:	f7ff ff7a 	bl	800780a <_strtol_l.isra.0>
 8007916:	b003      	add	sp, #12
 8007918:	bd30      	pop	{r4, r5, pc}
 800791a:	bf00      	nop
 800791c:	20000010 	.word	0x20000010
 8007920:	200000d8 	.word	0x200000d8

08007924 <__submore>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	460c      	mov	r4, r1
 800792a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800792c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007930:	4299      	cmp	r1, r3
 8007932:	d11b      	bne.n	800796c <__submore+0x48>
 8007934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007938:	f7fd ff24 	bl	8005784 <_malloc_r>
 800793c:	b918      	cbnz	r0, 8007946 <__submore+0x22>
 800793e:	f04f 30ff 	mov.w	r0, #4294967295
 8007942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800794a:	63a3      	str	r3, [r4, #56]	; 0x38
 800794c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007950:	6360      	str	r0, [r4, #52]	; 0x34
 8007952:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007956:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800795a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800795e:	7043      	strb	r3, [r0, #1]
 8007960:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007964:	7003      	strb	r3, [r0, #0]
 8007966:	6020      	str	r0, [r4, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e7ea      	b.n	8007942 <__submore+0x1e>
 800796c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800796e:	0077      	lsls	r7, r6, #1
 8007970:	463a      	mov	r2, r7
 8007972:	f7ff fbf0 	bl	8007156 <_realloc_r>
 8007976:	4605      	mov	r5, r0
 8007978:	2800      	cmp	r0, #0
 800797a:	d0e0      	beq.n	800793e <__submore+0x1a>
 800797c:	eb00 0806 	add.w	r8, r0, r6
 8007980:	4601      	mov	r1, r0
 8007982:	4632      	mov	r2, r6
 8007984:	4640      	mov	r0, r8
 8007986:	f7ff fbc2 	bl	800710e <memcpy>
 800798a:	f8c4 8000 	str.w	r8, [r4]
 800798e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007992:	e7e9      	b.n	8007968 <__submore+0x44>

08007994 <_malloc_usable_size_r>:
 8007994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007998:	1f18      	subs	r0, r3, #4
 800799a:	2b00      	cmp	r3, #0
 800799c:	bfbc      	itt	lt
 800799e:	580b      	ldrlt	r3, [r1, r0]
 80079a0:	18c0      	addlt	r0, r0, r3
 80079a2:	4770      	bx	lr

080079a4 <_gettimeofday>:
 80079a4:	2258      	movs	r2, #88	; 0x58
 80079a6:	4b02      	ldr	r3, [pc, #8]	; (80079b0 <_gettimeofday+0xc>)
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	4770      	bx	lr
 80079b0:	200003b0 	.word	0x200003b0

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
