
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b5c  08004b5c  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b64  08004b64  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08004b6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000244  08004db0  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004db0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000838e  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b99  00000000  00000000  000285fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000690  00000000  00000000  0002a198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000588  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001888a  00000000  00000000  0002adb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a81  00000000  00000000  0004363a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086150  00000000  00000000  0004b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d120b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  000d1288  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000d36dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d3700  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000244 	.word	0x20000244
 8000128:	00000000 	.word	0x00000000
 800012c:	08004600 	.word	0x08004600

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000248 	.word	0x20000248
 8000148:	08004600 	.word	0x08004600

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_ldivmod>:
 8000170:	b97b      	cbnz	r3, 8000192 <__aeabi_ldivmod+0x22>
 8000172:	b972      	cbnz	r2, 8000192 <__aeabi_ldivmod+0x22>
 8000174:	2900      	cmp	r1, #0
 8000176:	bfbe      	ittt	lt
 8000178:	2000      	movlt	r0, #0
 800017a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800017e:	e006      	blt.n	800018e <__aeabi_ldivmod+0x1e>
 8000180:	bf08      	it	eq
 8000182:	2800      	cmpeq	r0, #0
 8000184:	bf1c      	itt	ne
 8000186:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800018a:	f04f 30ff 	movne.w	r0, #4294967295
 800018e:	f000 b9a7 	b.w	80004e0 <__aeabi_idiv0>
 8000192:	f1ad 0c08 	sub.w	ip, sp, #8
 8000196:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019a:	2900      	cmp	r1, #0
 800019c:	db09      	blt.n	80001b2 <__aeabi_ldivmod+0x42>
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db1a      	blt.n	80001d8 <__aeabi_ldivmod+0x68>
 80001a2:	f000 f835 	bl	8000210 <__udivmoddi4>
 80001a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ae:	b004      	add	sp, #16
 80001b0:	4770      	bx	lr
 80001b2:	4240      	negs	r0, r0
 80001b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db1b      	blt.n	80001f4 <__aeabi_ldivmod+0x84>
 80001bc:	f000 f828 	bl	8000210 <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4240      	negs	r0, r0
 80001cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	4770      	bx	lr
 80001d8:	4252      	negs	r2, r2
 80001da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001de:	f000 f817 	bl	8000210 <__udivmoddi4>
 80001e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ea:	b004      	add	sp, #16
 80001ec:	4240      	negs	r0, r0
 80001ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f2:	4770      	bx	lr
 80001f4:	4252      	negs	r2, r2
 80001f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fa:	f000 f809 	bl	8000210 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4252      	negs	r2, r2
 800020a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	4604      	mov	r4, r0
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0c03 	orr.w	ip, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	fbbc f7fe 	udiv	r7, ip, lr
 8000246:	fa1f f885 	uxth.w	r8, r5
 800024a:	fb0e c317 	mls	r3, lr, r7, ip
 800024e:	fb07 f908 	mul.w	r9, r7, r8
 8000252:	0c21      	lsrs	r1, r4, #16
 8000254:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000258:	4599      	cmp	r9, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000262:	f080 811c 	bcs.w	800049e <__udivmoddi4+0x28e>
 8000266:	4599      	cmp	r9, r3
 8000268:	f240 8119 	bls.w	800049e <__udivmoddi4+0x28e>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	eba3 0309 	sub.w	r3, r3, r9
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	fb00 f108 	mul.w	r1, r0, r8
 8000280:	b2a4      	uxth	r4, r4
 8000282:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000286:	42a1      	cmp	r1, r4
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	192c      	adds	r4, r5, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8107 	bcs.w	80004a2 <__udivmoddi4+0x292>
 8000294:	42a1      	cmp	r1, r4
 8000296:	f240 8104 	bls.w	80004a2 <__udivmoddi4+0x292>
 800029a:	3802      	subs	r0, #2
 800029c:	442c      	add	r4, r5
 800029e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a2:	2700      	movs	r7, #0
 80002a4:	1a64      	subs	r4, r4, r1
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	2300      	movs	r3, #0
 80002aa:	40d4      	lsrs	r4, r2
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ec 	beq.w	8000498 <__udivmoddi4+0x288>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d148      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fb 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	469c      	mov	ip, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4c00 	strd	r4, ip, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	2701      	movs	r7, #1
 8000304:	1b49      	subs	r1, r1, r5
 8000306:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800030a:	fa1f f985 	uxth.w	r9, r5
 800030e:	fbb1 fef8 	udiv	lr, r1, r8
 8000312:	fb08 111e 	mls	r1, r8, lr, r1
 8000316:	fb09 f00e 	mul.w	r0, r9, lr
 800031a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800031e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000322:	4298      	cmp	r0, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x126>
 8000326:	18eb      	adds	r3, r5, r3
 8000328:	f10e 31ff 	add.w	r1, lr, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x124>
 800032e:	4298      	cmp	r0, r3
 8000330:	f200 80cd 	bhi.w	80004ce <__udivmoddi4+0x2be>
 8000334:	468e      	mov	lr, r1
 8000336:	1a1b      	subs	r3, r3, r0
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	fb09 f900 	mul.w	r9, r9, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800034a:	45a1      	cmp	r9, r4
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x14e>
 800034e:	192c      	adds	r4, r5, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f200 80b6 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 800035c:	4618      	mov	r0, r3
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x96>
 8000368:	f1c7 0520 	rsb	r5, r7, #32
 800036c:	40bb      	lsls	r3, r7
 800036e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa21 f405 	lsr.w	r4, r1, r5
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000382:	fa1f f88c 	uxth.w	r8, ip
 8000386:	fb0e 4419 	mls	r4, lr, r9, r4
 800038a:	fa20 f305 	lsr.w	r3, r0, r5
 800038e:	40b9      	lsls	r1, r7
 8000390:	fb09 fa08 	mul.w	sl, r9, r8
 8000394:	4319      	orrs	r1, r3
 8000396:	0c0b      	lsrs	r3, r1, #16
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	45a2      	cmp	sl, r4
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f307 	lsl.w	r3, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	45a2      	cmp	sl, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4464      	add	r4, ip
 80003c0:	eba4 040a 	sub.w	r4, r4, sl
 80003c4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003c8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003cc:	fb00 fa08 	mul.w	sl, r0, r8
 80003d0:	b289      	uxth	r1, r1
 80003d2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x1dc>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e2:	d26b      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e8:	3802      	subs	r0, #2
 80003ea:	4464      	add	r4, ip
 80003ec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f0:	fba0 8902 	umull	r8, r9, r0, r2
 80003f4:	eba4 040a 	sub.w	r4, r4, sl
 80003f8:	454c      	cmp	r4, r9
 80003fa:	4641      	mov	r1, r8
 80003fc:	46ce      	mov	lr, r9
 80003fe:	d354      	bcc.n	80004aa <__udivmoddi4+0x29a>
 8000400:	d051      	beq.n	80004a6 <__udivmoddi4+0x296>
 8000402:	2e00      	cmp	r6, #0
 8000404:	d069      	beq.n	80004da <__udivmoddi4+0x2ca>
 8000406:	1a5a      	subs	r2, r3, r1
 8000408:	eb64 040e 	sbc.w	r4, r4, lr
 800040c:	fa04 f505 	lsl.w	r5, r4, r5
 8000410:	fa22 f307 	lsr.w	r3, r2, r7
 8000414:	40fc      	lsrs	r4, r7
 8000416:	431d      	orrs	r5, r3
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	4095      	lsls	r5, r2
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	fa21 f003 	lsr.w	r0, r1, r3
 800042a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800042e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000432:	fa1f f985 	uxth.w	r9, r5
 8000436:	fb08 0017 	mls	r0, r8, r7, r0
 800043a:	fa24 f303 	lsr.w	r3, r4, r3
 800043e:	4091      	lsls	r1, r2
 8000440:	fb07 fc09 	mul.w	ip, r7, r9
 8000444:	430b      	orrs	r3, r1
 8000446:	0c19      	lsrs	r1, r3, #16
 8000448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800044c:	458c      	cmp	ip, r1
 800044e:	fa04 f402 	lsl.w	r4, r4, r2
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x254>
 8000454:	1869      	adds	r1, r5, r1
 8000456:	f107 30ff 	add.w	r0, r7, #4294967295
 800045a:	d231      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 800045c:	458c      	cmp	ip, r1
 800045e:	d92f      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	3f02      	subs	r7, #2
 8000462:	4429      	add	r1, r5
 8000464:	eba1 010c 	sub.w	r1, r1, ip
 8000468:	fbb1 f0f8 	udiv	r0, r1, r8
 800046c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000470:	fb00 fe09 	mul.w	lr, r0, r9
 8000474:	b299      	uxth	r1, r3
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	458e      	cmp	lr, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 33ff 	add.w	r3, r0, #4294967295
 8000484:	d218      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000486:	458e      	cmp	lr, r1
 8000488:	d916      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000496:	e73a      	b.n	800030e <__udivmoddi4+0xfe>
 8000498:	4637      	mov	r7, r6
 800049a:	4630      	mov	r0, r6
 800049c:	e708      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049e:	460f      	mov	r7, r1
 80004a0:	e6e6      	b.n	8000270 <__udivmoddi4+0x60>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6fb      	b.n	800029e <__udivmoddi4+0x8e>
 80004a6:	4543      	cmp	r3, r8
 80004a8:	d2ab      	bcs.n	8000402 <__udivmoddi4+0x1f2>
 80004aa:	ebb8 0102 	subs.w	r1, r8, r2
 80004ae:	eb69 020c 	sbc.w	r2, r9, ip
 80004b2:	3801      	subs	r0, #1
 80004b4:	4696      	mov	lr, r2
 80004b6:	e7a4      	b.n	8000402 <__udivmoddi4+0x1f2>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e7e8      	b.n	800048e <__udivmoddi4+0x27e>
 80004bc:	4608      	mov	r0, r1
 80004be:	e795      	b.n	80003ec <__udivmoddi4+0x1dc>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e7cf      	b.n	8000464 <__udivmoddi4+0x254>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3802      	subs	r0, #2
 80004ca:	442c      	add	r4, r5
 80004cc:	e747      	b.n	800035e <__udivmoddi4+0x14e>
 80004ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d2:	442b      	add	r3, r5
 80004d4:	e72f      	b.n	8000336 <__udivmoddi4+0x126>
 80004d6:	4638      	mov	r0, r7
 80004d8:	e707      	b.n	80002ea <__udivmoddi4+0xda>
 80004da:	4637      	mov	r7, r6
 80004dc:	e6e8      	b.n	80002b0 <__udivmoddi4+0xa0>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <LCD_Send>:
 *
 * Aciona pino enable, espera 15ms, desaciona pino enable
 *
 * @retval Nenhum
 */
void LCD_Send() {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_PINS, EN, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ee:	4807      	ldr	r0, [pc, #28]	; (800050c <LCD_Send+0x28>)
 80004f0:	f001 f951 	bl	8001796 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80004f4:	200f      	movs	r0, #15
 80004f6:	f000 fccd 	bl	8000e94 <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_PINS, EN, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <LCD_Send+0x28>)
 8000502:	f001 f948 	bl	8001796 <HAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40010c00 	.word	0x40010c00

08000510 <LCD_Write>:
 *
 * @retval Nenhum
 * @param[in] data byte a ser enviado
 * @param[in] is_data 1 se for dado, 0 se for instrução
 */
void LCD_Write(uint8_t data, bool is_data) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	460a      	mov	r2, r1
 800051a:	71fb      	strb	r3, [r7, #7]
 800051c:	4613      	mov	r3, r2
 800051e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CTRL_PINS, RS, is_data);  //instrução / data
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	461a      	mov	r2, r3
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	4825      	ldr	r0, [pc, #148]	; (80005c0 <LCD_Write+0xb0>)
 800052a:	f001 f934 	bl	8001796 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_PINS, RW, 0);		//escrita
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000534:	4822      	ldr	r0, [pc, #136]	; (80005c0 <LCD_Write+0xb0>)
 8000536:	f001 f92e 	bl	8001796 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e017      	b.n	8000570 <LCD_Write+0x60>
			{
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	b299      	uxth	r1, r3
				data & (1 << (i + 4)));
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	3304      	adds	r3, #4
 8000550:	2201      	movs	r2, #1
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	b25a      	sxtb	r2, r3
 8000558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055c:	4013      	ands	r3, r2
 800055e:	b25b      	sxtb	r3, r3
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 8000560:	b2db      	uxtb	r3, r3
 8000562:	461a      	mov	r2, r3
 8000564:	4816      	ldr	r0, [pc, #88]	; (80005c0 <LCD_Write+0xb0>)
 8000566:	f001 f916 	bl	8001796 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	3301      	adds	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2b03      	cmp	r3, #3
 8000574:	d9e4      	bls.n	8000540 <LCD_Write+0x30>
		//00100111
	}

	LCD_Send();
 8000576:	f7ff ffb5 	bl	80004e4 <LCD_Send>

	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 800057a:	2300      	movs	r3, #0
 800057c:	73bb      	strb	r3, [r7, #14]
 800057e:	e016      	b.n	80005ae <LCD_Write+0x9e>
			{
		HAL_GPIO_WritePin(DATA_PINS, (uint16_t) FRST_PIN << i, data & (1 << i));
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	b299      	uxth	r1, r3
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	2201      	movs	r2, #1
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	b25a      	sxtb	r2, r3
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	4013      	ands	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <LCD_Write+0xb0>)
 80005a4:	f001 f8f7 	bl	8001796 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80005a8:	7bbb      	ldrb	r3, [r7, #14]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73bb      	strb	r3, [r7, #14]
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9e5      	bls.n	8000580 <LCD_Write+0x70>
	}

	LCD_Send();
 80005b4:	f7ff ff96 	bl	80004e4 <LCD_Send>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <LCD_Write_Buffer>:
 *
 *
 * @retval Nenhum
 * @param[in] *data string a ser enviado
 */
void LCD_Write_Buffer(uint8_t *data) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e069      	b.n	80006a6 <LCD_Write_Buffer+0xe2>
		if(i == 17)
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	2b11      	cmp	r3, #17
 80005d6:	d103      	bne.n	80005e0 <LCD_Write_Buffer+0x1c>
		{
			LCD_Write(0xC0, 0);
 80005d8:	2100      	movs	r1, #0
 80005da:	20c0      	movs	r0, #192	; 0xc0
 80005dc:	f7ff ff98 	bl	8000510 <LCD_Write>
		}
		//caracter espciais
		switch (*data) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2bc3      	cmp	r3, #195	; 0xc3
 80005e6:	d152      	bne.n	800068e <LCD_Write_Buffer+0xca>
			case 195:
				data++;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
				switch (*data) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3ba1      	subs	r3, #161	; 0xa1
 80005f4:	2b14      	cmp	r3, #20
 80005f6:	d846      	bhi.n	8000686 <LCD_Write_Buffer+0xc2>
 80005f8:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <LCD_Write_Buffer+0x3c>)
 80005fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fe:	bf00      	nop
 8000600:	08000655 	.word	0x08000655
 8000604:	08000687 	.word	0x08000687
 8000608:	08000673 	.word	0x08000673
 800060c:	08000687 	.word	0x08000687
 8000610:	08000687 	.word	0x08000687
 8000614:	08000687 	.word	0x08000687
 8000618:	08000669 	.word	0x08000669
 800061c:	08000687 	.word	0x08000687
 8000620:	0800065f 	.word	0x0800065f
 8000624:	08000687 	.word	0x08000687
 8000628:	08000687 	.word	0x08000687
 800062c:	08000687 	.word	0x08000687
 8000630:	08000687 	.word	0x08000687
 8000634:	08000687 	.word	0x08000687
 8000638:	08000687 	.word	0x08000687
 800063c:	08000687 	.word	0x08000687
 8000640:	08000687 	.word	0x08000687
 8000644:	08000687 	.word	0x08000687
 8000648:	08000687 	.word	0x08000687
 800064c:	08000687 	.word	0x08000687
 8000650:	0800067d 	.word	0x0800067d
					case 161:
						LCD_Write(0, 1);
 8000654:	2101      	movs	r1, #1
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff5a 	bl	8000510 <LCD_Write>
						break;
 800065c:	e013      	b.n	8000686 <LCD_Write_Buffer+0xc2>
					case 169:
						LCD_Write(1, 1);
 800065e:	2101      	movs	r1, #1
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff ff55 	bl	8000510 <LCD_Write>
						break;
 8000666:	e00e      	b.n	8000686 <LCD_Write_Buffer+0xc2>
					case 167:
						LCD_Write(2, 1);
 8000668:	2101      	movs	r1, #1
 800066a:	2002      	movs	r0, #2
 800066c:	f7ff ff50 	bl	8000510 <LCD_Write>
						break;
 8000670:	e009      	b.n	8000686 <LCD_Write_Buffer+0xc2>
					case 163:
						LCD_Write(3, 1);
 8000672:	2101      	movs	r1, #1
 8000674:	2003      	movs	r0, #3
 8000676:	f7ff ff4b 	bl	8000510 <LCD_Write>
						break;
 800067a:	e004      	b.n	8000686 <LCD_Write_Buffer+0xc2>
					case 181:
						LCD_Write(4, 1);
 800067c:	2101      	movs	r1, #1
 800067e:	2004      	movs	r0, #4
 8000680:	f7ff ff46 	bl	8000510 <LCD_Write>
						break;
 8000684:	bf00      	nop
				}
				data++;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
				break;
 800068c:	e008      	b.n	80006a0 <LCD_Write_Buffer+0xdc>
			default:
				LCD_Write(*data++, 1);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff39 	bl	8000510 <LCD_Write>
				break;
 800069e:	bf00      	nop
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3301      	adds	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	7bfa      	ldrb	r2, [r7, #15]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d390      	bcc.n	80005d2 <LCD_Write_Buffer+0xe>
		}
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <LCD_Clear>:
/**
 * @brief limpa display e retorna cursor para primeira linha
 *
 * @retval Nenhum
 */
void LCD_Clear(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	LCD_Write(0x01, 0);
 80006bc:	2100      	movs	r1, #0
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff ff26 	bl	8000510 <LCD_Write>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <LCD_Create_Custom_Char>:
 *
 * @retval Nenhum
 * @param[in] loc localização para escrever o caracter
 * @param[in] *c ponteiro para o vetor de 8 bytes do caracter
 */
void LCD_Create_Custom_Char(uint8_t loc, uint8_t *c) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	if (loc < 8) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	d819      	bhi.n	800070e <LCD_Create_Custom_Char+0x46>
		LCD_Write(0x40 + (loc * 8), 0); /* aponta para 0x40 + loc * 8 */
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	3308      	adds	r3, #8
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff12 	bl	8000510 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e00a      	b.n	8000708 <LCD_Create_Custom_Char+0x40>
			LCD_Write(c[i], 1);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff07 	bl	8000510 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	3301      	adds	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d9f1      	bls.n	80006f2 <LCD_Create_Custom_Char+0x2a>
	}
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <LCD_Init_Custom_Characters>:
 *
 *	Define vetor de caracteres customizados e escreve na CGRAM
 *
 * @retval Nenhum
 */
void LCD_Init_Custom_Characters() {
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
	uint8_t character1[8] = { 0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <LCD_Init_Custom_Characters+0x8c>)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000728:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character2[8] = { 0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,
 800072c:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <LCD_Init_Custom_Characters+0x90>)
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000736:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character3[8] = { 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x04,
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <LCD_Init_Custom_Characters+0x94>)
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000744:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character4[8] = { 0x1F, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 8000748:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <LCD_Init_Custom_Characters+0x98>)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000752:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character5[8] = { 0x1F, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <LCD_Init_Custom_Characters+0x9c>)
 8000758:	463b      	mov	r3, r7
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	LCD_Create_Custom_Char(0, character1);
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4619      	mov	r1, r3
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ffad 	bl	80006c8 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(1, character2);
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	4619      	mov	r1, r3
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff ffa7 	bl	80006c8 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(2, character3);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff ffa1 	bl	80006c8 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(3, character4);
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4619      	mov	r1, r3
 800078c:	2003      	movs	r0, #3
 800078e:	f7ff ff9b 	bl	80006c8 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(4, character5);
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	2004      	movs	r0, #4
 8000798:	f7ff ff96 	bl	80006c8 <LCD_Create_Custom_Char>
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	0800461c 	.word	0x0800461c
 80007a8:	08004624 	.word	0x08004624
 80007ac:	0800462c 	.word	0x0800462c
 80007b0:	08004634 	.word	0x08004634
 80007b4:	0800463c 	.word	0x0800463c

080007b8 <LCD_Init>:
 *	Escreve deslocando a mensagem para a esquerda
 *	Inicializa caracteres especiais
 *
 * @retval Nenhum
 */
void LCD_Init() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 80007bc:	200f      	movs	r0, #15
 80007be:	f000 fb69 	bl	8000e94 <HAL_Delay>
	LCD_Write(0x03, 0); // 1
 80007c2:	2100      	movs	r1, #0
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff fea3 	bl	8000510 <LCD_Write>
	LCD_Write(0x03, 0); // 2
 80007ca:	2100      	movs	r1, #0
 80007cc:	2003      	movs	r0, #3
 80007ce:	f7ff fe9f 	bl	8000510 <LCD_Write>
	LCD_Write(0x03, 0); // 3
 80007d2:	2100      	movs	r1, #0
 80007d4:	2003      	movs	r0, #3
 80007d6:	f7ff fe9b 	bl	8000510 <LCD_Write>
	LCD_Write(0x02, 0); // 4
 80007da:	2100      	movs	r1, #0
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff fe97 	bl	8000510 <LCD_Write>
	LCD_Write(0x02, 0); // 5
 80007e2:	2100      	movs	r1, #0
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff fe93 	bl	8000510 <LCD_Write>
	LCD_Write(0x08, 0); // 6
 80007ea:	2100      	movs	r1, #0
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff fe8f 	bl	8000510 <LCD_Write>
	LCD_Write(0x00, 0); // 7
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fe8b 	bl	8000510 <LCD_Write>
	LCD_Write(0x08, 0); // 8
 80007fa:	2100      	movs	r1, #0
 80007fc:	2008      	movs	r0, #8
 80007fe:	f7ff fe87 	bl	8000510 <LCD_Write>
	LCD_Write(0x00, 0); // 9
 8000802:	2100      	movs	r1, #0
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff fe83 	bl	8000510 <LCD_Write>
	LCD_Write(0x01, 0); // 10
 800080a:	2100      	movs	r1, #0
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fe7f 	bl	8000510 <LCD_Write>
	LCD_Write(0x00, 0); // 11
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fe7b 	bl	8000510 <LCD_Write>
	LCD_Write(0x01, 0); // 12
 800081a:	2100      	movs	r1, #0
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff fe77 	bl	8000510 <LCD_Write>

	LCD_Write(0x28, 0); //2 linhas 5x7 (4 bits)
 8000822:	2100      	movs	r1, #0
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f7ff fe73 	bl	8000510 <LCD_Write>
	LCD_Write(0x0E, 0); //Display aceso c/ cursor fixo
 800082a:	2100      	movs	r1, #0
 800082c:	200e      	movs	r0, #14
 800082e:	f7ff fe6f 	bl	8000510 <LCD_Write>
	LCD_Write(0x06, 0); //Escreve deslocando a mensagem para a esquerda
 8000832:	2100      	movs	r1, #0
 8000834:	2006      	movs	r0, #6
 8000836:	f7ff fe6b 	bl	8000510 <LCD_Write>

	LCD_Init_Custom_Characters();
 800083a:	f7ff ff6d 	bl	8000718 <LCD_Init_Custom_Characters>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <CAPSULE_Verify_Insertion>:
 */

#include "capsule.h"

uint8_t CAPSULE_Verify_Insertion()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	uint8_t bit_0 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_0);
 800084a:	2108      	movs	r1, #8
 800084c:	4811      	ldr	r0, [pc, #68]	; (8000894 <CAPSULE_Verify_Insertion+0x50>)
 800084e:	f000 ff8b 	bl	8001768 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	uint8_t bit_1 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_1);
 8000856:	2110      	movs	r1, #16
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <CAPSULE_Verify_Insertion+0x50>)
 800085a:	f000 ff85 	bl	8001768 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	71bb      	strb	r3, [r7, #6]
	uint8_t bit_2 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_2);
 8000862:	2120      	movs	r1, #32
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <CAPSULE_Verify_Insertion+0x50>)
 8000866:	f000 ff7f 	bl	8001768 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	717b      	strb	r3, [r7, #5]

	uint8_t recipe = bit_0 | (bit_1 << 1) | (bit_2 << 2);
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	b25a      	sxtb	r2, r3
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	4313      	orrs	r3, r2
 800087a:	b25a      	sxtb	r2, r3
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	b25b      	sxtb	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b25b      	sxtb	r3, r3
 8000886:	713b      	strb	r3, [r7, #4]
	return recipe;
 8000888:	793b      	ldrb	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010c00 	.word	0x40010c00

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f000 fa98 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f82a 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f000 f8be 	bl	8000a24 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008a8:	f000 f87e 	bl	80009a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  //inicializa LCD em modo 4 bits
  LCD_Init();
 80008ac:	f7ff ff84 	bl	80007b8 <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch (current_state) {
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <main+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <main+0x26>
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d007      	beq.n	80008cc <main+0x34>
			break;
		case STATE_STARTING_PROCESS:
			current_state = STATE_Start_Process();
			break;
		default:
			break;
 80008bc:	e00d      	b.n	80008da <main+0x42>
			current_state = STATE_Show_Clock();
 80008be:	f000 f935 	bl	8000b2c <STATE_Show_Clock>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <main+0x58>)
 80008c8:	701a      	strb	r2, [r3, #0]
			break;
 80008ca:	e006      	b.n	80008da <main+0x42>
			current_state = STATE_Start_Process();
 80008cc:	f000 f95a 	bl	8000b84 <STATE_Start_Process>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <main+0x58>)
 80008d6:	701a      	strb	r2, [r3, #0]
			break;
 80008d8:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <main+0x5c>)
 80008e0:	f000 ff71 	bl	80017c6 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 80008e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008e8:	f000 fad4 	bl	8000e94 <HAL_Delay>
	switch (current_state) {
 80008ec:	e7e0      	b.n	80008b0 <main+0x18>
 80008ee:	bf00      	nop
 80008f0:	20000260 	.word	0x20000260
 80008f4:	40011000 	.word	0x40011000

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000902:	2228      	movs	r2, #40	; 0x28
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fd0e 	bl	8002328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2310      	movs	r3, #16
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800093c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000940:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000946:	4618      	mov	r0, r3
 8000948:	f000 ff56 	bl	80017f8 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000952:	f000 f8e5 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000966:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f9c0 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800097e:	f000 f8cf 	bl	8000b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000982:	2302      	movs	r3, #2
 8000984:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fb1c 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800099a:	f000 f8c1 	bl	8000b20 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009ba:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <MX_ADC1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009e6:	f000 fa77 	bl	8000ed8 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f896 	bl	8000b20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0x74>)
 8000a06:	f000 fb3f 	bl	8001088 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a10:	f000 f886 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000298 	.word	0x20000298
 8000a20:	40012400 	.word	0x40012400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a34      	ldr	r2, [pc, #208]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_GPIO_Init+0xec>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	4823      	ldr	r0, [pc, #140]	; (8000b14 <MX_GPIO_Init+0xf0>)
 8000a88:	f000 fe85 	bl	8001796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_EN_Pin|Display_D4_Pin|Display_D5_Pin
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8000a92:	4821      	ldr	r0, [pc, #132]	; (8000b18 <MX_GPIO_Init+0xf4>)
 8000a94:	f000 fe7f 	bl	8001796 <HAL_GPIO_WritePin>
                          |Display_D6_Pin|Display_D7_Pin|Display_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_GPIO_Init+0xf0>)
 8000ab2:	f000 fcff 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Cancelar_Pin Button_Decrease_Pin Button_Increase_Pin Button_Confirmar_Pin */
  GPIO_InitStruct.Pin = Button_Cancelar_Pin|Button_Decrease_Pin|Button_Increase_Pin|Button_Confirmar_Pin;
 8000ab6:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000acc:	f000 fcf2 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_RW_Pin Display_EN_Pin Display_D4_Pin Display_D5_Pin
                           Display_D6_Pin Display_D7_Pin Display_RS_Pin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_EN_Pin|Display_D4_Pin|Display_D5_Pin
 8000ad0:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000ad4:	613b      	str	r3, [r7, #16]
                          |Display_D6_Pin|Display_D7_Pin|Display_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0xf4>)
 8000aea:	f000 fce3 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1_Bit_0_Pin BN1_bit_1_Pin BN1_bit_2_Pin Inserir_Capsula_Pin */
  GPIO_InitStruct.Pin = BN1_Bit_0_Pin|BN1_bit_1_Pin|BN1_bit_2_Pin|Inserir_Capsula_Pin;
 8000aee:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_GPIO_Init+0xf4>)
 8000b04:	f000 fcd6 	bl	80014b4 <HAL_GPIO_Init>

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40010800 	.word	0x40010800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <STATE_Show_Clock>:

#include "states.h"


uint8_t STATE_Show_Clock()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
	char hour[10];
	uint8_t recipe = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
	uint8_t insert_button = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73bb      	strb	r3, [r7, #14]

	while(1)
	{
		UTILS_get_Hour(hour);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f903 	bl	8000d48 <UTILS_get_Hour>
		LCD_Clear();
 8000b42:	f7ff fdb9 	bl	80006b8 <LCD_Clear>
		LCD_Write_Buffer(hour);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fd3b 	bl	80005c4 <LCD_Write_Buffer>

		//se botão de inserir capsula for inserido, verificar qual é a receita
		insert_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <STATE_Show_Clock+0x54>)
 8000b54:	f000 fe08 	bl	8001768 <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73bb      	strb	r3, [r7, #14]
		if(insert_button)
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <STATE_Show_Clock+0x3e>
		{
			recipe = CAPSULE_Verify_Insertion();
 8000b62:	f7ff fe6f 	bl	8000844 <CAPSULE_Verify_Insertion>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(200);
 8000b6a:	20c8      	movs	r0, #200	; 0xc8
 8000b6c:	f000 f992 	bl	8000e94 <HAL_Delay>

		//se tiver uma receita, retorna
		if(recipe){
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0e1      	beq.n	8000b3a <STATE_Show_Clock+0xe>
			return STATE_STARTING_PROCESS;
 8000b76:	2301      	movs	r3, #1
		}
	}
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <STATE_Start_Process>:


uint8_t STATE_Start_Process()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <STATE_Start_Process+0x18>)
 8000b8e:	f000 fe1a 	bl	80017c6 <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 8000b92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b96:	f000 f97d 	bl	8000e94 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b9a:	e7f5      	b.n	8000b88 <STATE_Start_Process+0x4>
 8000b9c:	40011000 	.word	0x40011000

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_MspInit+0x5c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_MspInit+0x60>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_MspInit+0x60>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000

08000c04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <HAL_ADC_MspInit+0x6c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d121      	bne.n	8000c68 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_ADC_MspInit+0x70>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <HAL_ADC_MspInit+0x70>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_ADC_MspInit+0x70>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_ADC_MspInit+0x70>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <HAL_ADC_MspInit+0x70>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_ADC_MspInit+0x70>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_IN0____P1_Pin|ADC1_IN1____T1_Pin|ADC1_IN2____T2_Pin|GPIO_PIN_3
 8000c54:	231f      	movs	r3, #31
 8000c56:	613b      	str	r3, [r7, #16]
                          |ADC1_IN4____Buttons_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_ADC_MspInit+0x74>)
 8000c64:	f000 fc26 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40012400 	.word	0x40012400
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <HardFault_Handler+0x4>

08000c8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f8c8 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f001 fa1a 	bl	8002138 <__errno>
 8000d04:	4602      	mov	r2, r0
 8000d06:	230c      	movs	r3, #12
 8000d08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20005000 	.word	0x20005000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000268 	.word	0x20000268
 8000d38:	200002d0 	.word	0x200002d0

08000d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <UTILS_get_Hour>:
 *      Author: sandr
 */
#include "utils.h"

void UTILS_get_Hour(char* hour)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	  struct tm *sTm;

	  time_t now = time (0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f002 f9c1 	bl	80030d8 <time>
 8000d56:	4603      	mov	r3, r0
 8000d58:	460c      	mov	r4, r1
 8000d5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  sTm = gmtime (&now);
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 f9ee 	bl	8002144 <gmtime>
 8000d68:	6178      	str	r0, [r7, #20]

	  strftime (hour, 9, "%H:%M:%S", sTm);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <UTILS_get_Hour+0x38>)
 8000d6e:	2109      	movs	r1, #9
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f002 f8fd 	bl	8002f70 <strftime>
	  return;
 8000d76:	bf00      	nop
}
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	08004644 	.word	0x08004644

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d86:	e003      	b.n	8000d90 <LoopCopyDataInit>

08000d88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d8e:	3104      	adds	r1, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d98:	d3f6      	bcc.n	8000d88 <CopyDataInit>
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d9c:	e002      	b.n	8000da4 <LoopFillZerobss>

08000d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000da0:	f842 3b04 	str.w	r3, [r2], #4

08000da4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000da6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000da8:	d3f9      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000daa:	f7ff ffc7 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f001 fa87 	bl	80022c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fd71 	bl	8000898 <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r3, =_sidata
 8000db8:	08004b6c 	.word	0x08004b6c
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dc0:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 8000dc4:	20000244 	.word	0x20000244
  ldr r3, = _ebss
 8000dc8:	200002d0 	.word	0x200002d0

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x28>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 fb33 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fed8 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fb3d 	bl	800149a <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 fb13 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000004 	.word	0x20000004
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000008 	.word	0x20000008

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x20>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_IncTick+0x20>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	2000000c 	.word	0x2000000c
 8000e7c:	200002c8 	.word	0x200002c8

08000e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_GetTick+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	200002c8 	.word	0x200002c8

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff0 	bl	8000e80 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_Delay+0x40>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffe0 	bl	8000e80 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000000c 	.word	0x2000000c

08000ed8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0be      	b.n	8001078 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fe74 	bl	8000c04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f9ab 	bl	8001278 <ADC_ConversionStop_Disable>
 8000f22:	4603      	mov	r3, r0
 8000f24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f040 8099 	bne.w	8001066 <HAL_ADC_Init+0x18e>
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 8095 	bne.w	8001066 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f44:	f023 0302 	bic.w	r3, r3, #2
 8000f48:	f043 0202 	orr.w	r2, r3, #2
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7b1b      	ldrb	r3, [r3, #12]
 8000f5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f70:	d003      	beq.n	8000f7a <HAL_ADC_Init+0xa2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d102      	bne.n	8000f80 <HAL_ADC_Init+0xa8>
 8000f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7e:	e000      	b.n	8000f82 <HAL_ADC_Init+0xaa>
 8000f80:	2300      	movs	r3, #0
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7d1b      	ldrb	r3, [r3, #20]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d119      	bne.n	8000fc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7b1b      	ldrb	r3, [r3, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	035a      	lsls	r2, r3, #13
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	e00b      	b.n	8000fc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f043 0220 	orr.w	r2, r3, #32
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	f043 0201 	orr.w	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_ADC_Init+0x1a8>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff4:	d003      	beq.n	8000ffe <HAL_ADC_Init+0x126>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d104      	bne.n	8001008 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	3b01      	subs	r3, #1
 8001004:	051b      	lsls	r3, r3, #20
 8001006:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	430a      	orrs	r2, r1
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_ADC_Init+0x1ac>)
 8001024:	4013      	ands	r3, r2
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	429a      	cmp	r2, r3
 800102a:	d10b      	bne.n	8001044 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	f043 0201 	orr.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001042:	e018      	b.n	8001076 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001048:	f023 0312 	bic.w	r3, r3, #18
 800104c:	f043 0210 	orr.w	r2, r3, #16
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001064:	e007      	b.n	8001076 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f043 0210 	orr.w	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001076:	7dfb      	ldrb	r3, [r7, #23]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	ffe1f7fd 	.word	0xffe1f7fd
 8001084:	ff1f0efe 	.word	0xff1f0efe

08001088 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x20>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e0dc      	b.n	8001262 <HAL_ADC_ConfigChannel+0x1da>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b06      	cmp	r3, #6
 80010b6:	d81c      	bhi.n	80010f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	3b05      	subs	r3, #5
 80010ca:	221f      	movs	r2, #31
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4019      	ands	r1, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	3b05      	subs	r3, #5
 80010e4:	fa00 f203 	lsl.w	r2, r0, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
 80010f0:	e03c      	b.n	800116c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b0c      	cmp	r3, #12
 80010f8:	d81c      	bhi.n	8001134 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b23      	subs	r3, #35	; 0x23
 800110c:	221f      	movs	r2, #31
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	4019      	ands	r1, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b23      	subs	r3, #35	; 0x23
 8001126:	fa00 f203 	lsl.w	r2, r0, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
 8001132:	e01b      	b.n	800116c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b41      	subs	r3, #65	; 0x41
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3b41      	subs	r3, #65	; 0x41
 8001160:	fa00 f203 	lsl.w	r2, r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d91c      	bls.n	80011ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68d9      	ldr	r1, [r3, #12]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	3b1e      	subs	r3, #30
 8001186:	2207      	movs	r2, #7
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	4019      	ands	r1, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	3b1e      	subs	r3, #30
 80011a0:	fa00 f203 	lsl.w	r2, r0, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	e019      	b.n	80011e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6919      	ldr	r1, [r3, #16]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	2207      	movs	r2, #7
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4019      	ands	r1, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	6898      	ldr	r0, [r3, #8]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	fa00 f203 	lsl.w	r2, r0, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b10      	cmp	r3, #16
 80011e8:	d003      	beq.n	80011f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ee:	2b11      	cmp	r3, #17
 80011f0:	d132      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_ADC_ConfigChannel+0x1e4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d125      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d126      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001218:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d11a      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_ADC_ConfigChannel+0x1e8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_ADC_ConfigChannel+0x1ec>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	0c9a      	lsrs	r2, r3, #18
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001238:	e002      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3b01      	subs	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f9      	bne.n	800123a <HAL_ADC_ConfigChannel+0x1b2>
 8001246:	e007      	b.n	8001258 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	f043 0220 	orr.w	r2, r3, #32
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40012400 	.word	0x40012400
 8001270:	20000004 	.word	0x20000004
 8001274:	431bde83 	.word	0x431bde83

08001278 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d127      	bne.n	80012e2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012a2:	f7ff fded 	bl	8000e80 <HAL_GetTick>
 80012a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012a8:	e014      	b.n	80012d4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012aa:	f7ff fde9 	bl	8000e80 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d90d      	bls.n	80012d4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f043 0210 	orr.w	r2, r3, #16
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e007      	b.n	80012e4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d0e3      	beq.n	80012aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff90 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff49 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff5e 	bl	8001334 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffb0 	bl	8001408 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e127      	b.n	8001718 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c8:	2201      	movs	r2, #1
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 8116 	bne.w	8001712 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d034      	beq.n	8001558 <HAL_GPIO_Init+0xa4>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d80d      	bhi.n	800150e <HAL_GPIO_Init+0x5a>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d02b      	beq.n	800154e <HAL_GPIO_Init+0x9a>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d804      	bhi.n	8001504 <HAL_GPIO_Init+0x50>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d031      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d01c      	beq.n	800153c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001502:	e048      	b.n	8001596 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001504:	2b03      	cmp	r3, #3
 8001506:	d043      	beq.n	8001590 <HAL_GPIO_Init+0xdc>
 8001508:	2b11      	cmp	r3, #17
 800150a:	d01b      	beq.n	8001544 <HAL_GPIO_Init+0x90>
          break;
 800150c:	e043      	b.n	8001596 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800150e:	4a89      	ldr	r2, [pc, #548]	; (8001734 <HAL_GPIO_Init+0x280>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d026      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 8001514:	4a87      	ldr	r2, [pc, #540]	; (8001734 <HAL_GPIO_Init+0x280>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d806      	bhi.n	8001528 <HAL_GPIO_Init+0x74>
 800151a:	4a87      	ldr	r2, [pc, #540]	; (8001738 <HAL_GPIO_Init+0x284>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d020      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 8001520:	4a86      	ldr	r2, [pc, #536]	; (800173c <HAL_GPIO_Init+0x288>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01d      	beq.n	8001562 <HAL_GPIO_Init+0xae>
          break;
 8001526:	e036      	b.n	8001596 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001528:	4a85      	ldr	r2, [pc, #532]	; (8001740 <HAL_GPIO_Init+0x28c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 800152e:	4a85      	ldr	r2, [pc, #532]	; (8001744 <HAL_GPIO_Init+0x290>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d016      	beq.n	8001562 <HAL_GPIO_Init+0xae>
 8001534:	4a84      	ldr	r2, [pc, #528]	; (8001748 <HAL_GPIO_Init+0x294>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0xae>
          break;
 800153a:	e02c      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e028      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e023      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3308      	adds	r3, #8
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e01e      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e019      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156a:	2304      	movs	r3, #4
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e012      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	611a      	str	r2, [r3, #16]
          break;
 8001582:	e008      	b.n	8001596 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	615a      	str	r2, [r3, #20]
          break;
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2bff      	cmp	r3, #255	; 0xff
 800159a:	d801      	bhi.n	80015a0 <HAL_GPIO_Init+0xec>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	e001      	b.n	80015a4 <HAL_GPIO_Init+0xf0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3304      	adds	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2bff      	cmp	r3, #255	; 0xff
 80015aa:	d802      	bhi.n	80015b2 <HAL_GPIO_Init+0xfe>
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x104>
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	3b08      	subs	r3, #8
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	210f      	movs	r1, #15
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	401a      	ands	r2, r3
 80015ca:	6a39      	ldr	r1, [r7, #32]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 8096 	beq.w	8001712 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e6:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_GPIO_Init+0x298>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a58      	ldr	r2, [pc, #352]	; (800174c <HAL_GPIO_Init+0x298>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b56      	ldr	r3, [pc, #344]	; (800174c <HAL_GPIO_Init+0x298>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015fe:	4a54      	ldr	r2, [pc, #336]	; (8001750 <HAL_GPIO_Init+0x29c>)
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <HAL_GPIO_Init+0x2a0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x19e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4a      	ldr	r2, [pc, #296]	; (8001758 <HAL_GPIO_Init+0x2a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x19a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a49      	ldr	r2, [pc, #292]	; (800175c <HAL_GPIO_Init+0x2a8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x196>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_Init+0x2ac>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x192>
 8001642:	2303      	movs	r3, #3
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 8001646:	2304      	movs	r3, #4
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 800164a:	2302      	movs	r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x1a0>
 8001652:	2300      	movs	r3, #0
 8001654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001656:	f002 0203 	and.w	r2, r2, #3
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4093      	lsls	r3, r2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001664:	493a      	ldr	r1, [pc, #232]	; (8001750 <HAL_GPIO_Init+0x29c>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4938      	ldr	r1, [pc, #224]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168c:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	43db      	mvns	r3, r3
 8001694:	4933      	ldr	r1, [pc, #204]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001696:	4013      	ands	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	492e      	ldr	r1, [pc, #184]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
 80016b2:	e006      	b.n	80016c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4929      	ldr	r1, [pc, #164]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016be:	4013      	ands	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	4924      	ldr	r1, [pc, #144]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
 80016da:	e006      	b.n	80016ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	491f      	ldr	r1, [pc, #124]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	491a      	ldr	r1, [pc, #104]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60cb      	str	r3, [r1, #12]
 8001702:	e006      	b.n	8001712 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	43db      	mvns	r3, r3
 800170c:	4915      	ldr	r1, [pc, #84]	; (8001764 <HAL_GPIO_Init+0x2b0>)
 800170e:	4013      	ands	r3, r2
 8001710:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f aed0 	bne.w	80014c8 <HAL_GPIO_Init+0x14>
  }
}
 8001728:	bf00      	nop
 800172a:	372c      	adds	r7, #44	; 0x2c
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	10210000 	.word	0x10210000
 8001738:	10110000 	.word	0x10110000
 800173c:	10120000 	.word	0x10120000
 8001740:	10310000 	.word	0x10310000
 8001744:	10320000 	.word	0x10320000
 8001748:	10220000 	.word	0x10220000
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000
 8001754:	40010800 	.word	0x40010800
 8001758:	40010c00 	.word	0x40010c00
 800175c:	40011000 	.word	0x40011000
 8001760:	40011400 	.word	0x40011400
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e001      	b.n	800178a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	807b      	strh	r3, [r7, #2]
 80017a2:	4613      	mov	r3, r2
 80017a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a6:	787b      	ldrb	r3, [r7, #1]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017b2:	e003      	b.n	80017bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	041a      	lsls	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	611a      	str	r2, [r3, #16]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	041a      	lsls	r2, r3, #16
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	400b      	ands	r3, r1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	611a      	str	r2, [r3, #16]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e26c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8087 	beq.w	8001926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001824:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d112      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d10b      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06c      	beq.n	8001924 <HAL_RCC_OscConfig+0x12c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d168      	bne.n	8001924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e246      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x76>
 8001860:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a7f      	ldr	r2, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e02e      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x98>
 8001876:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7a      	ldr	r2, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xbc>
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a71      	ldr	r2, [pc, #452]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6a      	ldr	r2, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a67      	ldr	r2, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fad4 	bl	8000e80 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fad0 	bl	8000e80 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1fa      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xe4>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fac0 	bl	8000e80 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fabc 	bl	8000e80 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1e6      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x10c>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1ba      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e03a      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fa75 	bl	8000e80 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fa71 	bl	8000e80 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e19b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4927      	ldr	r1, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fa54 	bl	8000e80 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fa50 	bl	8000e80 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e17a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03a      	beq.n	8001a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa34 	bl	8000e80 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fa30 	bl	8000e80 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e15a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f000 faa8 	bl	8001f90 <RCC_Delay>
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fa1a 	bl	8000e80 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fa16 	bl	8000e80 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d908      	bls.n	8001a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e140      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	42420000 	.word	0x42420000
 8001a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b9e      	ldr	r3, [pc, #632]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e9      	bne.n	8001a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a6 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b97      	ldr	r3, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b94      	ldr	r3, [pc, #592]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a93      	ldr	r2, [pc, #588]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a8a      	ldr	r2, [pc, #552]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff f9d7 	bl	8000e80 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff f9d3 	bl	8000e80 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0fd      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x312>
 8001afc:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x334>
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x356>
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a6c      	ldr	r2, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a69      	ldr	r2, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a66      	ldr	r2, [pc, #408]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f987 	bl	8000e80 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f983 	bl	8000e80 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0ab      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x37e>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f971 	bl	8000e80 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f96d 	bl	8000e80 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e095      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8081 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d061      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d146      	bne.n	8001c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f941 	bl	8000e80 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f93d 	bl	8000e80 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e067      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	492d      	ldr	r1, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a19      	ldr	r1, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	4927      	ldr	r1, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f911 	bl	8000e80 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff f90d 	bl	8000e80 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e037      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46a>
 8001c80:	e02f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f8fa 	bl	8000e80 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f8f6 	bl	8000e80 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e020      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x498>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e013      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42420060 	.word	0x42420060

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7ff f84a 	bl	8000e80 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff f846 	bl	8000e80 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ffa8 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08004670 	.word	0x08004670
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b490      	push	{r4, r7}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed4:	1d3c      	adds	r4, r7, #4
 8001ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x46>
 8001f0a:	e02d      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e02d      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f1e:	4413      	add	r3, r2
 8001f20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c5b      	lsrs	r3, r3, #17
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4a:	fb02 f203 	mul.w	r2, r2, r3
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e004      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	623b      	str	r3, [r7, #32]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6a:	623b      	str	r3, [r7, #32]
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc90      	pop	{r4, r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	08004650 	.word	0x08004650
 8001f80:	08004660 	.word	0x08004660
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <RCC_Delay+0x34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <RCC_Delay+0x38>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fac:	bf00      	nop
  }
  while (Delay --);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <RCC_Delay+0x1c>
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d07d      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fec:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002002:	61d3      	str	r3, [r2, #28]
 8002004:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d118      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202c:	f7fe ff28 	bl	8000e80 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	e008      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe ff24 	bl	8000e80 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e06d      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d02e      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d027      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002070:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002086:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d014      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe fef3 	bl	8000e80 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7fe feef 	bl	8000e80 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e036      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ee      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4917      	ldr	r1, [pc, #92]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	490b      	ldr	r1, [pc, #44]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	42420440 	.word	0x42420440

08002138 <__errno>:
 8002138:	4b01      	ldr	r3, [pc, #4]	; (8002140 <__errno+0x8>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000010 	.word	0x20000010

08002144 <gmtime>:
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <gmtime+0x20>)
 8002148:	4605      	mov	r5, r0
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800214e:	b91b      	cbnz	r3, 8002158 <gmtime+0x14>
 8002150:	2024      	movs	r0, #36	; 0x24
 8002152:	f000 f8d9 	bl	8002308 <malloc>
 8002156:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002158:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800215a:	4628      	mov	r0, r5
 800215c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002160:	f000 b802 	b.w	8002168 <gmtime_r>
 8002164:	20000010 	.word	0x20000010

08002168 <gmtime_r>:
 8002168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800216c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8002170:	460c      	mov	r4, r1
 8002172:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <gmtime_r+0x148>)
 8002174:	2300      	movs	r3, #0
 8002176:	4640      	mov	r0, r8
 8002178:	4649      	mov	r1, r9
 800217a:	f7fd fff9 	bl	8000170 <__aeabi_ldivmod>
 800217e:	4a4c      	ldr	r2, [pc, #304]	; (80022b0 <gmtime_r+0x148>)
 8002180:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8002184:	2300      	movs	r3, #0
 8002186:	4640      	mov	r0, r8
 8002188:	4649      	mov	r1, r9
 800218a:	f7fd fff1 	bl	8000170 <__aeabi_ldivmod>
 800218e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002192:	2a00      	cmp	r2, #0
 8002194:	bfbc      	itt	lt
 8002196:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800219a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800219e:	fb92 f3f1 	sdiv	r3, r2, r1
 80021a2:	fb01 2213 	mls	r2, r1, r3, r2
 80021a6:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80021aa:	60a3      	str	r3, [r4, #8]
 80021ac:	fb92 f3f1 	sdiv	r3, r2, r1
 80021b0:	fb01 2213 	mls	r2, r1, r3, r2
 80021b4:	6022      	str	r2, [r4, #0]
 80021b6:	f04f 0207 	mov.w	r2, #7
 80021ba:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 80021be:	bfb8      	it	lt
 80021c0:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 80021c4:	6063      	str	r3, [r4, #4]
 80021c6:	1ceb      	adds	r3, r5, #3
 80021c8:	fb93 f2f2 	sdiv	r2, r3, r2
 80021cc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	bf48      	it	mi
 80021d4:	3307      	addmi	r3, #7
 80021d6:	2d00      	cmp	r5, #0
 80021d8:	4836      	ldr	r0, [pc, #216]	; (80022b4 <gmtime_r+0x14c>)
 80021da:	61a3      	str	r3, [r4, #24]
 80021dc:	bfbd      	ittte	lt
 80021de:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 80021e2:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80021e6:	fb93 f0f0 	sdivlt	r0, r3, r0
 80021ea:	fb95 f0f0 	sdivge	r0, r5, r0
 80021ee:	f648 61ac 	movw	r1, #36524	; 0x8eac
 80021f2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <gmtime_r+0x150>)
 80021f8:	f240 166d 	movw	r6, #365	; 0x16d
 80021fc:	fb03 5300 	mla	r3, r3, r0, r5
 8002200:	fbb3 f1f1 	udiv	r1, r3, r1
 8002204:	fbb3 f2f7 	udiv	r2, r3, r7
 8002208:	4419      	add	r1, r3
 800220a:	1a89      	subs	r1, r1, r2
 800220c:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <gmtime_r+0x154>)
 800220e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002212:	1a8a      	subs	r2, r1, r2
 8002214:	f648 6194 	movw	r1, #36500	; 0x8e94
 8002218:	fbb2 f1f1 	udiv	r1, r2, r1
 800221c:	fbb2 f5f6 	udiv	r5, r2, r6
 8002220:	fbb2 f2f7 	udiv	r2, r2, r7
 8002224:	440b      	add	r3, r1
 8002226:	2199      	movs	r1, #153	; 0x99
 8002228:	1a9a      	subs	r2, r3, r2
 800222a:	fb06 2315 	mls	r3, r6, r5, r2
 800222e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002232:	3202      	adds	r2, #2
 8002234:	fbb2 f2f1 	udiv	r2, r2, r1
 8002238:	2705      	movs	r7, #5
 800223a:	4351      	muls	r1, r2
 800223c:	3102      	adds	r1, #2
 800223e:	fbb1 f1f7 	udiv	r1, r1, r7
 8002242:	2a0a      	cmp	r2, #10
 8002244:	f103 0601 	add.w	r6, r3, #1
 8002248:	eba6 0101 	sub.w	r1, r6, r1
 800224c:	bf34      	ite	cc
 800224e:	2602      	movcc	r6, #2
 8002250:	f06f 0609 	mvncs.w	r6, #9
 8002254:	4416      	add	r6, r2
 8002256:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800225a:	fb02 5000 	mla	r0, r2, r0, r5
 800225e:	2e01      	cmp	r6, #1
 8002260:	bf98      	it	ls
 8002262:	3001      	addls	r0, #1
 8002264:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002268:	d30c      	bcc.n	8002284 <gmtime_r+0x11c>
 800226a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800226e:	61e3      	str	r3, [r4, #28]
 8002270:	2300      	movs	r3, #0
 8002272:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8002276:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800227a:	60e1      	str	r1, [r4, #12]
 800227c:	6223      	str	r3, [r4, #32]
 800227e:	4620      	mov	r0, r4
 8002280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002284:	07aa      	lsls	r2, r5, #30
 8002286:	d105      	bne.n	8002294 <gmtime_r+0x12c>
 8002288:	2764      	movs	r7, #100	; 0x64
 800228a:	fbb5 f2f7 	udiv	r2, r5, r7
 800228e:	fb07 5212 	mls	r2, r7, r2, r5
 8002292:	b95a      	cbnz	r2, 80022ac <gmtime_r+0x144>
 8002294:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8002298:	fbb5 f2f7 	udiv	r2, r5, r7
 800229c:	fb07 5212 	mls	r2, r7, r2, r5
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	0952      	lsrs	r2, r2, #5
 80022a6:	333b      	adds	r3, #59	; 0x3b
 80022a8:	4413      	add	r3, r2
 80022aa:	e7e0      	b.n	800226e <gmtime_r+0x106>
 80022ac:	2201      	movs	r2, #1
 80022ae:	e7fa      	b.n	80022a6 <gmtime_r+0x13e>
 80022b0:	00015180 	.word	0x00015180
 80022b4:	00023ab1 	.word	0x00023ab1
 80022b8:	fffdc54f 	.word	0xfffdc54f
 80022bc:	00023ab0 	.word	0x00023ab0

080022c0 <__libc_init_array>:
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	2500      	movs	r5, #0
 80022c4:	4e0c      	ldr	r6, [pc, #48]	; (80022f8 <__libc_init_array+0x38>)
 80022c6:	4c0d      	ldr	r4, [pc, #52]	; (80022fc <__libc_init_array+0x3c>)
 80022c8:	1ba4      	subs	r4, r4, r6
 80022ca:	10a4      	asrs	r4, r4, #2
 80022cc:	42a5      	cmp	r5, r4
 80022ce:	d109      	bne.n	80022e4 <__libc_init_array+0x24>
 80022d0:	f002 f996 	bl	8004600 <_init>
 80022d4:	2500      	movs	r5, #0
 80022d6:	4e0a      	ldr	r6, [pc, #40]	; (8002300 <__libc_init_array+0x40>)
 80022d8:	4c0a      	ldr	r4, [pc, #40]	; (8002304 <__libc_init_array+0x44>)
 80022da:	1ba4      	subs	r4, r4, r6
 80022dc:	10a4      	asrs	r4, r4, #2
 80022de:	42a5      	cmp	r5, r4
 80022e0:	d105      	bne.n	80022ee <__libc_init_array+0x2e>
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
 80022e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022e8:	4798      	blx	r3
 80022ea:	3501      	adds	r5, #1
 80022ec:	e7ee      	b.n	80022cc <__libc_init_array+0xc>
 80022ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022f2:	4798      	blx	r3
 80022f4:	3501      	adds	r5, #1
 80022f6:	e7f2      	b.n	80022de <__libc_init_array+0x1e>
 80022f8:	08004b64 	.word	0x08004b64
 80022fc:	08004b64 	.word	0x08004b64
 8002300:	08004b64 	.word	0x08004b64
 8002304:	08004b68 	.word	0x08004b68

08002308 <malloc>:
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <malloc+0xc>)
 800230a:	4601      	mov	r1, r0
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	f000 b85f 	b.w	80023d0 <_malloc_r>
 8002312:	bf00      	nop
 8002314:	20000010 	.word	0x20000010

08002318 <free>:
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <free+0xc>)
 800231a:	4601      	mov	r1, r0
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	f000 b80b 	b.w	8002338 <_free_r>
 8002322:	bf00      	nop
 8002324:	20000010 	.word	0x20000010

08002328 <memset>:
 8002328:	4603      	mov	r3, r0
 800232a:	4402      	add	r2, r0
 800232c:	4293      	cmp	r3, r2
 800232e:	d100      	bne.n	8002332 <memset+0xa>
 8002330:	4770      	bx	lr
 8002332:	f803 1b01 	strb.w	r1, [r3], #1
 8002336:	e7f9      	b.n	800232c <memset+0x4>

08002338 <_free_r>:
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	4605      	mov	r5, r0
 800233c:	2900      	cmp	r1, #0
 800233e:	d043      	beq.n	80023c8 <_free_r+0x90>
 8002340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002344:	1f0c      	subs	r4, r1, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	bfb8      	it	lt
 800234a:	18e4      	addlt	r4, r4, r3
 800234c:	f001 f8ea 	bl	8003524 <__malloc_lock>
 8002350:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <_free_r+0x94>)
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	4610      	mov	r0, r2
 8002356:	b933      	cbnz	r3, 8002366 <_free_r+0x2e>
 8002358:	6063      	str	r3, [r4, #4]
 800235a:	6014      	str	r4, [r2, #0]
 800235c:	4628      	mov	r0, r5
 800235e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002362:	f001 b8e0 	b.w	8003526 <__malloc_unlock>
 8002366:	42a3      	cmp	r3, r4
 8002368:	d90b      	bls.n	8002382 <_free_r+0x4a>
 800236a:	6821      	ldr	r1, [r4, #0]
 800236c:	1862      	adds	r2, r4, r1
 800236e:	4293      	cmp	r3, r2
 8002370:	bf01      	itttt	eq
 8002372:	681a      	ldreq	r2, [r3, #0]
 8002374:	685b      	ldreq	r3, [r3, #4]
 8002376:	1852      	addeq	r2, r2, r1
 8002378:	6022      	streq	r2, [r4, #0]
 800237a:	6063      	str	r3, [r4, #4]
 800237c:	6004      	str	r4, [r0, #0]
 800237e:	e7ed      	b.n	800235c <_free_r+0x24>
 8002380:	4613      	mov	r3, r2
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	b10a      	cbz	r2, 800238a <_free_r+0x52>
 8002386:	42a2      	cmp	r2, r4
 8002388:	d9fa      	bls.n	8002380 <_free_r+0x48>
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	1858      	adds	r0, r3, r1
 800238e:	42a0      	cmp	r0, r4
 8002390:	d10b      	bne.n	80023aa <_free_r+0x72>
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	4401      	add	r1, r0
 8002396:	1858      	adds	r0, r3, r1
 8002398:	4282      	cmp	r2, r0
 800239a:	6019      	str	r1, [r3, #0]
 800239c:	d1de      	bne.n	800235c <_free_r+0x24>
 800239e:	6810      	ldr	r0, [r2, #0]
 80023a0:	6852      	ldr	r2, [r2, #4]
 80023a2:	4401      	add	r1, r0
 80023a4:	6019      	str	r1, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	e7d8      	b.n	800235c <_free_r+0x24>
 80023aa:	d902      	bls.n	80023b2 <_free_r+0x7a>
 80023ac:	230c      	movs	r3, #12
 80023ae:	602b      	str	r3, [r5, #0]
 80023b0:	e7d4      	b.n	800235c <_free_r+0x24>
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	1821      	adds	r1, r4, r0
 80023b6:	428a      	cmp	r2, r1
 80023b8:	bf01      	itttt	eq
 80023ba:	6811      	ldreq	r1, [r2, #0]
 80023bc:	6852      	ldreq	r2, [r2, #4]
 80023be:	1809      	addeq	r1, r1, r0
 80023c0:	6021      	streq	r1, [r4, #0]
 80023c2:	6062      	str	r2, [r4, #4]
 80023c4:	605c      	str	r4, [r3, #4]
 80023c6:	e7c9      	b.n	800235c <_free_r+0x24>
 80023c8:	bd38      	pop	{r3, r4, r5, pc}
 80023ca:	bf00      	nop
 80023cc:	2000026c 	.word	0x2000026c

080023d0 <_malloc_r>:
 80023d0:	b570      	push	{r4, r5, r6, lr}
 80023d2:	1ccd      	adds	r5, r1, #3
 80023d4:	f025 0503 	bic.w	r5, r5, #3
 80023d8:	3508      	adds	r5, #8
 80023da:	2d0c      	cmp	r5, #12
 80023dc:	bf38      	it	cc
 80023de:	250c      	movcc	r5, #12
 80023e0:	2d00      	cmp	r5, #0
 80023e2:	4606      	mov	r6, r0
 80023e4:	db01      	blt.n	80023ea <_malloc_r+0x1a>
 80023e6:	42a9      	cmp	r1, r5
 80023e8:	d903      	bls.n	80023f2 <_malloc_r+0x22>
 80023ea:	230c      	movs	r3, #12
 80023ec:	6033      	str	r3, [r6, #0]
 80023ee:	2000      	movs	r0, #0
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
 80023f2:	f001 f897 	bl	8003524 <__malloc_lock>
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <_malloc_r+0xac>)
 80023f8:	6814      	ldr	r4, [r2, #0]
 80023fa:	4621      	mov	r1, r4
 80023fc:	b991      	cbnz	r1, 8002424 <_malloc_r+0x54>
 80023fe:	4c20      	ldr	r4, [pc, #128]	; (8002480 <_malloc_r+0xb0>)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	b91b      	cbnz	r3, 800240c <_malloc_r+0x3c>
 8002404:	4630      	mov	r0, r6
 8002406:	f000 f83d 	bl	8002484 <_sbrk_r>
 800240a:	6020      	str	r0, [r4, #0]
 800240c:	4629      	mov	r1, r5
 800240e:	4630      	mov	r0, r6
 8002410:	f000 f838 	bl	8002484 <_sbrk_r>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d124      	bne.n	8002462 <_malloc_r+0x92>
 8002418:	230c      	movs	r3, #12
 800241a:	4630      	mov	r0, r6
 800241c:	6033      	str	r3, [r6, #0]
 800241e:	f001 f882 	bl	8003526 <__malloc_unlock>
 8002422:	e7e4      	b.n	80023ee <_malloc_r+0x1e>
 8002424:	680b      	ldr	r3, [r1, #0]
 8002426:	1b5b      	subs	r3, r3, r5
 8002428:	d418      	bmi.n	800245c <_malloc_r+0x8c>
 800242a:	2b0b      	cmp	r3, #11
 800242c:	d90f      	bls.n	800244e <_malloc_r+0x7e>
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	18cc      	adds	r4, r1, r3
 8002432:	50cd      	str	r5, [r1, r3]
 8002434:	4630      	mov	r0, r6
 8002436:	f001 f876 	bl	8003526 <__malloc_unlock>
 800243a:	f104 000b 	add.w	r0, r4, #11
 800243e:	1d23      	adds	r3, r4, #4
 8002440:	f020 0007 	bic.w	r0, r0, #7
 8002444:	1ac3      	subs	r3, r0, r3
 8002446:	d0d3      	beq.n	80023f0 <_malloc_r+0x20>
 8002448:	425a      	negs	r2, r3
 800244a:	50e2      	str	r2, [r4, r3]
 800244c:	e7d0      	b.n	80023f0 <_malloc_r+0x20>
 800244e:	684b      	ldr	r3, [r1, #4]
 8002450:	428c      	cmp	r4, r1
 8002452:	bf16      	itet	ne
 8002454:	6063      	strne	r3, [r4, #4]
 8002456:	6013      	streq	r3, [r2, #0]
 8002458:	460c      	movne	r4, r1
 800245a:	e7eb      	b.n	8002434 <_malloc_r+0x64>
 800245c:	460c      	mov	r4, r1
 800245e:	6849      	ldr	r1, [r1, #4]
 8002460:	e7cc      	b.n	80023fc <_malloc_r+0x2c>
 8002462:	1cc4      	adds	r4, r0, #3
 8002464:	f024 0403 	bic.w	r4, r4, #3
 8002468:	42a0      	cmp	r0, r4
 800246a:	d005      	beq.n	8002478 <_malloc_r+0xa8>
 800246c:	1a21      	subs	r1, r4, r0
 800246e:	4630      	mov	r0, r6
 8002470:	f000 f808 	bl	8002484 <_sbrk_r>
 8002474:	3001      	adds	r0, #1
 8002476:	d0cf      	beq.n	8002418 <_malloc_r+0x48>
 8002478:	6025      	str	r5, [r4, #0]
 800247a:	e7db      	b.n	8002434 <_malloc_r+0x64>
 800247c:	2000026c 	.word	0x2000026c
 8002480:	20000270 	.word	0x20000270

08002484 <_sbrk_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	2300      	movs	r3, #0
 8002488:	4c05      	ldr	r4, [pc, #20]	; (80024a0 <_sbrk_r+0x1c>)
 800248a:	4605      	mov	r5, r0
 800248c:	4608      	mov	r0, r1
 800248e:	6023      	str	r3, [r4, #0]
 8002490:	f7fe fc1e 	bl	8000cd0 <_sbrk>
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d102      	bne.n	800249e <_sbrk_r+0x1a>
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	b103      	cbz	r3, 800249e <_sbrk_r+0x1a>
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	200002cc 	.word	0x200002cc

080024a4 <iso_year_adjust>:
 80024a4:	6942      	ldr	r2, [r0, #20]
 80024a6:	f240 736c 	movw	r3, #1900	; 0x76c
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	bfa8      	it	ge
 80024ae:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80024b2:	441a      	add	r2, r3
 80024b4:	0793      	lsls	r3, r2, #30
 80024b6:	d105      	bne.n	80024c4 <iso_year_adjust+0x20>
 80024b8:	2164      	movs	r1, #100	; 0x64
 80024ba:	fb92 f3f1 	sdiv	r3, r2, r1
 80024be:	fb01 2313 	mls	r3, r1, r3, r2
 80024c2:	b9d3      	cbnz	r3, 80024fa <iso_year_adjust+0x56>
 80024c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80024c8:	fb92 f3f1 	sdiv	r3, r2, r1
 80024cc:	fb01 2313 	mls	r3, r1, r3, r2
 80024d0:	fab3 f283 	clz	r2, r3
 80024d4:	0952      	lsrs	r2, r2, #5
 80024d6:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80024e0:	4413      	add	r3, r2
 80024e2:	2b21      	cmp	r3, #33	; 0x21
 80024e4:	dc11      	bgt.n	800250a <iso_year_adjust+0x66>
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	da30      	bge.n	800254c <iso_year_adjust+0xa8>
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	dc07      	bgt.n	80024fe <iso_year_adjust+0x5a>
 80024ee:	2b0a      	cmp	r3, #10
 80024f0:	da2c      	bge.n	800254c <iso_year_adjust+0xa8>
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d92a      	bls.n	800254c <iso_year_adjust+0xa8>
 80024f6:	2000      	movs	r0, #0
 80024f8:	4770      	bx	lr
 80024fa:	2201      	movs	r2, #1
 80024fc:	e7eb      	b.n	80024d6 <iso_year_adjust+0x32>
 80024fe:	2b10      	cmp	r3, #16
 8002500:	dbf9      	blt.n	80024f6 <iso_year_adjust+0x52>
 8002502:	2b11      	cmp	r3, #17
 8002504:	dd22      	ble.n	800254c <iso_year_adjust+0xa8>
 8002506:	3b1c      	subs	r3, #28
 8002508:	e7f3      	b.n	80024f2 <iso_year_adjust+0x4e>
 800250a:	f241 62c6 	movw	r2, #5830	; 0x16c6
 800250e:	4293      	cmp	r3, r2
 8002510:	dc0f      	bgt.n	8002532 <iso_year_adjust+0x8e>
 8002512:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8002516:	4293      	cmp	r3, r2
 8002518:	da09      	bge.n	800252e <iso_year_adjust+0x8a>
 800251a:	f241 62a2 	movw	r2, #5794	; 0x16a2
 800251e:	4293      	cmp	r3, r2
 8002520:	d005      	beq.n	800252e <iso_year_adjust+0x8a>
 8002522:	dbe8      	blt.n	80024f6 <iso_year_adjust+0x52>
 8002524:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8002528:	3b12      	subs	r3, #18
 800252a:	2b02      	cmp	r3, #2
 800252c:	d8e3      	bhi.n	80024f6 <iso_year_adjust+0x52>
 800252e:	2001      	movs	r0, #1
 8002530:	4770      	bx	lr
 8002532:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8002536:	4293      	cmp	r3, r2
 8002538:	d0f9      	beq.n	800252e <iso_year_adjust+0x8a>
 800253a:	f241 62d7 	movw	r2, #5847	; 0x16d7
 800253e:	4293      	cmp	r3, r2
 8002540:	d0f5      	beq.n	800252e <iso_year_adjust+0x8a>
 8002542:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8002546:	4293      	cmp	r3, r2
 8002548:	d1d5      	bne.n	80024f6 <iso_year_adjust+0x52>
 800254a:	e7f0      	b.n	800252e <iso_year_adjust+0x8a>
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	4770      	bx	lr
	...

08002554 <__strftime>:
 8002554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002558:	461d      	mov	r5, r3
 800255a:	2300      	movs	r3, #0
 800255c:	4607      	mov	r7, r0
 800255e:	460e      	mov	r6, r1
 8002560:	461c      	mov	r4, r3
 8002562:	b091      	sub	sp, #68	; 0x44
 8002564:	9303      	str	r3, [sp, #12]
 8002566:	f101 3bff 	add.w	fp, r1, #4294967295
 800256a:	7813      	ldrb	r3, [r2, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 84e2 	beq.w	8002f36 <__strftime+0x9e2>
 8002572:	2b25      	cmp	r3, #37	; 0x25
 8002574:	d11f      	bne.n	80025b6 <__strftime+0x62>
 8002576:	f892 a001 	ldrb.w	sl, [r2, #1]
 800257a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800257e:	d023      	beq.n	80025c8 <__strftime+0x74>
 8002580:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8002584:	d020      	beq.n	80025c8 <__strftime+0x74>
 8002586:	f04f 0a00 	mov.w	sl, #0
 800258a:	f102 0801 	add.w	r8, r2, #1
 800258e:	f898 3000 	ldrb.w	r3, [r8]
 8002592:	3b31      	subs	r3, #49	; 0x31
 8002594:	2b08      	cmp	r3, #8
 8002596:	d81a      	bhi.n	80025ce <__strftime+0x7a>
 8002598:	4640      	mov	r0, r8
 800259a:	220a      	movs	r2, #10
 800259c:	a908      	add	r1, sp, #32
 800259e:	f000 fd85 	bl	80030ac <strtoul>
 80025a2:	4681      	mov	r9, r0
 80025a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025a8:	f898 3000 	ldrb.w	r3, [r8]
 80025ac:	2b45      	cmp	r3, #69	; 0x45
 80025ae:	d111      	bne.n	80025d4 <__strftime+0x80>
 80025b0:	f108 0801 	add.w	r8, r8, #1
 80025b4:	e010      	b.n	80025d8 <__strftime+0x84>
 80025b6:	45a3      	cmp	fp, r4
 80025b8:	d802      	bhi.n	80025c0 <__strftime+0x6c>
 80025ba:	2400      	movs	r4, #0
 80025bc:	f000 bcbe 	b.w	8002f3c <__strftime+0x9e8>
 80025c0:	553b      	strb	r3, [r7, r4]
 80025c2:	3201      	adds	r2, #1
 80025c4:	3401      	adds	r4, #1
 80025c6:	e7d0      	b.n	800256a <__strftime+0x16>
 80025c8:	f102 0802 	add.w	r8, r2, #2
 80025cc:	e7df      	b.n	800258e <__strftime+0x3a>
 80025ce:	f04f 0900 	mov.w	r9, #0
 80025d2:	e7e9      	b.n	80025a8 <__strftime+0x54>
 80025d4:	2b4f      	cmp	r3, #79	; 0x4f
 80025d6:	d0eb      	beq.n	80025b0 <__strftime+0x5c>
 80025d8:	f898 1000 	ldrb.w	r1, [r8]
 80025dc:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 80025e0:	2b55      	cmp	r3, #85	; 0x55
 80025e2:	d8ea      	bhi.n	80025ba <__strftime+0x66>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <__strftime+0x98>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002f2d 	.word	0x08002f2d
 80025f0:	080025bb 	.word	0x080025bb
 80025f4:	080025bb 	.word	0x080025bb
 80025f8:	080025bb 	.word	0x080025bb
 80025fc:	080025bb 	.word	0x080025bb
 8002600:	080025bb 	.word	0x080025bb
 8002604:	080025bb 	.word	0x080025bb
 8002608:	080025bb 	.word	0x080025bb
 800260c:	080025bb 	.word	0x080025bb
 8002610:	080025bb 	.word	0x080025bb
 8002614:	080025bb 	.word	0x080025bb
 8002618:	080025bb 	.word	0x080025bb
 800261c:	080025bb 	.word	0x080025bb
 8002620:	080025bb 	.word	0x080025bb
 8002624:	080025bb 	.word	0x080025bb
 8002628:	080025bb 	.word	0x080025bb
 800262c:	080025bb 	.word	0x080025bb
 8002630:	080025bb 	.word	0x080025bb
 8002634:	080025bb 	.word	0x080025bb
 8002638:	080025bb 	.word	0x080025bb
 800263c:	080025bb 	.word	0x080025bb
 8002640:	080025bb 	.word	0x080025bb
 8002644:	080025bb 	.word	0x080025bb
 8002648:	080025bb 	.word	0x080025bb
 800264c:	080025bb 	.word	0x080025bb
 8002650:	080025bb 	.word	0x080025bb
 8002654:	080025bb 	.word	0x080025bb
 8002658:	080025bb 	.word	0x080025bb
 800265c:	08002781 	.word	0x08002781
 8002660:	080027d5 	.word	0x080027d5
 8002664:	08002845 	.word	0x08002845
 8002668:	080028df 	.word	0x080028df
 800266c:	080025bb 	.word	0x080025bb
 8002670:	0800292d 	.word	0x0800292d
 8002674:	08002a1d 	.word	0x08002a1d
 8002678:	08002b35 	.word	0x08002b35
 800267c:	08002b43 	.word	0x08002b43
 8002680:	080025bb 	.word	0x080025bb
 8002684:	080025bb 	.word	0x080025bb
 8002688:	080025bb 	.word	0x080025bb
 800268c:	08002b73 	.word	0x08002b73
 8002690:	080025bb 	.word	0x080025bb
 8002694:	080025bb 	.word	0x080025bb
 8002698:	08002b85 	.word	0x08002b85
 800269c:	080025bb 	.word	0x080025bb
 80026a0:	08002be3 	.word	0x08002be3
 80026a4:	08002cfb 	.word	0x08002cfb
 80026a8:	08002d09 	.word	0x08002d09
 80026ac:	08002d59 	.word	0x08002d59
 80026b0:	08002d69 	.word	0x08002d69
 80026b4:	08002dd9 	.word	0x08002dd9
 80026b8:	0800283d 	.word	0x0800283d
 80026bc:	08002e13 	.word	0x08002e13
 80026c0:	08002ed9 	.word	0x08002ed9
 80026c4:	080025bb 	.word	0x080025bb
 80026c8:	080025bb 	.word	0x080025bb
 80026cc:	080025bb 	.word	0x080025bb
 80026d0:	080025bb 	.word	0x080025bb
 80026d4:	080025bb 	.word	0x080025bb
 80026d8:	080025bb 	.word	0x080025bb
 80026dc:	08002745 	.word	0x08002745
 80026e0:	080027ad 	.word	0x080027ad
 80026e4:	080027ff 	.word	0x080027ff
 80026e8:	080028bb 	.word	0x080028bb
 80026ec:	080028bb 	.word	0x080028bb
 80026f0:	080025bb 	.word	0x080025bb
 80026f4:	08002985 	.word	0x08002985
 80026f8:	080027ad 	.word	0x080027ad
 80026fc:	080025bb 	.word	0x080025bb
 8002700:	08002b65 	.word	0x08002b65
 8002704:	08002b35 	.word	0x08002b35
 8002708:	08002b43 	.word	0x08002b43
 800270c:	08002b6d 	.word	0x08002b6d
 8002710:	08002b77 	.word	0x08002b77
 8002714:	080025bb 	.word	0x080025bb
 8002718:	08002b85 	.word	0x08002b85
 800271c:	080025bb 	.word	0x080025bb
 8002720:	0800282d 	.word	0x0800282d
 8002724:	08002bf5 	.word	0x08002bf5
 8002728:	08002cff 	.word	0x08002cff
 800272c:	08002d41 	.word	0x08002d41
 8002730:	080025bb 	.word	0x080025bb
 8002734:	08002dcd 	.word	0x08002dcd
 8002738:	08002835 	.word	0x08002835
 800273c:	08002df1 	.word	0x08002df1
 8002740:	08002e67 	.word	0x08002e67
 8002744:	69ab      	ldr	r3, [r5, #24]
 8002746:	4aa8      	ldr	r2, [pc, #672]	; (80029e8 <__strftime+0x494>)
 8002748:	3318      	adds	r3, #24
 800274a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800274e:	4648      	mov	r0, r9
 8002750:	f7fd fcfc 	bl	800014c <strlen>
 8002754:	eba9 0904 	sub.w	r9, r9, r4
 8002758:	4420      	add	r0, r4
 800275a:	42a0      	cmp	r0, r4
 800275c:	d108      	bne.n	8002770 <__strftime+0x21c>
 800275e:	4604      	mov	r4, r0
 8002760:	f898 3000 	ldrb.w	r3, [r8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 83e6 	beq.w	8002f36 <__strftime+0x9e2>
 800276a:	f108 0201 	add.w	r2, r8, #1
 800276e:	e6fc      	b.n	800256a <__strftime+0x16>
 8002770:	45a3      	cmp	fp, r4
 8002772:	f67f af22 	bls.w	80025ba <__strftime+0x66>
 8002776:	f819 3004 	ldrb.w	r3, [r9, r4]
 800277a:	553b      	strb	r3, [r7, r4]
 800277c:	3401      	adds	r4, #1
 800277e:	e7ec      	b.n	800275a <__strftime+0x206>
 8002780:	69aa      	ldr	r2, [r5, #24]
 8002782:	4b99      	ldr	r3, [pc, #612]	; (80029e8 <__strftime+0x494>)
 8002784:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002788:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800278c:	4648      	mov	r0, r9
 800278e:	f7fd fcdd 	bl	800014c <strlen>
 8002792:	eba9 0904 	sub.w	r9, r9, r4
 8002796:	4420      	add	r0, r4
 8002798:	42a0      	cmp	r0, r4
 800279a:	d0e0      	beq.n	800275e <__strftime+0x20a>
 800279c:	45a3      	cmp	fp, r4
 800279e:	f67f af0c 	bls.w	80025ba <__strftime+0x66>
 80027a2:	f819 3004 	ldrb.w	r3, [r9, r4]
 80027a6:	553b      	strb	r3, [r7, r4]
 80027a8:	3401      	adds	r4, #1
 80027aa:	e7f5      	b.n	8002798 <__strftime+0x244>
 80027ac:	692a      	ldr	r2, [r5, #16]
 80027ae:	4b8e      	ldr	r3, [pc, #568]	; (80029e8 <__strftime+0x494>)
 80027b0:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80027b4:	4648      	mov	r0, r9
 80027b6:	f7fd fcc9 	bl	800014c <strlen>
 80027ba:	eba9 0904 	sub.w	r9, r9, r4
 80027be:	4420      	add	r0, r4
 80027c0:	42a0      	cmp	r0, r4
 80027c2:	d0cc      	beq.n	800275e <__strftime+0x20a>
 80027c4:	45a3      	cmp	fp, r4
 80027c6:	f67f aef8 	bls.w	80025ba <__strftime+0x66>
 80027ca:	f819 3004 	ldrb.w	r3, [r9, r4]
 80027ce:	553b      	strb	r3, [r7, r4]
 80027d0:	3401      	adds	r4, #1
 80027d2:	e7f5      	b.n	80027c0 <__strftime+0x26c>
 80027d4:	692b      	ldr	r3, [r5, #16]
 80027d6:	4a84      	ldr	r2, [pc, #528]	; (80029e8 <__strftime+0x494>)
 80027d8:	330c      	adds	r3, #12
 80027da:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80027de:	4648      	mov	r0, r9
 80027e0:	f7fd fcb4 	bl	800014c <strlen>
 80027e4:	eba9 0904 	sub.w	r9, r9, r4
 80027e8:	4420      	add	r0, r4
 80027ea:	42a0      	cmp	r0, r4
 80027ec:	d0b7      	beq.n	800275e <__strftime+0x20a>
 80027ee:	45a3      	cmp	fp, r4
 80027f0:	f67f aee3 	bls.w	80025ba <__strftime+0x66>
 80027f4:	f819 3004 	ldrb.w	r3, [r9, r4]
 80027f8:	553b      	strb	r3, [r7, r4]
 80027fa:	3401      	adds	r4, #1
 80027fc:	e7f5      	b.n	80027ea <__strftime+0x296>
 80027fe:	4b7a      	ldr	r3, [pc, #488]	; (80029e8 <__strftime+0x494>)
 8002800:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8002804:	4648      	mov	r0, r9
 8002806:	f7fd fca1 	bl	800014c <strlen>
 800280a:	f899 3000 	ldrb.w	r3, [r9]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0a6      	beq.n	8002760 <__strftime+0x20c>
 8002812:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002814:	464a      	mov	r2, r9
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	462b      	mov	r3, r5
 800281a:	1b31      	subs	r1, r6, r4
 800281c:	1938      	adds	r0, r7, r4
 800281e:	f7ff fe99 	bl	8002554 <__strftime>
 8002822:	2800      	cmp	r0, #0
 8002824:	f77f aec9 	ble.w	80025ba <__strftime+0x66>
 8002828:	4404      	add	r4, r0
 800282a:	e799      	b.n	8002760 <__strftime+0x20c>
 800282c:	4b6e      	ldr	r3, [pc, #440]	; (80029e8 <__strftime+0x494>)
 800282e:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8002832:	e7e7      	b.n	8002804 <__strftime+0x2b0>
 8002834:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <__strftime+0x494>)
 8002836:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800283a:	e7e3      	b.n	8002804 <__strftime+0x2b0>
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <__strftime+0x494>)
 800283e:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8002842:	e7df      	b.n	8002804 <__strftime+0x2b0>
 8002844:	4b69      	ldr	r3, [pc, #420]	; (80029ec <__strftime+0x498>)
 8002846:	6969      	ldr	r1, [r5, #20]
 8002848:	4299      	cmp	r1, r3
 800284a:	bfac      	ite	ge
 800284c:	2300      	movge	r3, #0
 800284e:	2301      	movlt	r3, #1
 8002850:	2900      	cmp	r1, #0
 8002852:	9304      	str	r3, [sp, #16]
 8002854:	db10      	blt.n	8002878 <__strftime+0x324>
 8002856:	2064      	movs	r0, #100	; 0x64
 8002858:	fb91 f0f0 	sdiv	r0, r1, r0
 800285c:	3013      	adds	r0, #19
 800285e:	f1ba 0f00 	cmp.w	sl, #0
 8002862:	d013      	beq.n	800288c <__strftime+0x338>
 8002864:	2863      	cmp	r0, #99	; 0x63
 8002866:	dd26      	ble.n	80028b6 <__strftime+0x362>
 8002868:	4a61      	ldr	r2, [pc, #388]	; (80029f0 <__strftime+0x49c>)
 800286a:	4b62      	ldr	r3, [pc, #392]	; (80029f4 <__strftime+0x4a0>)
 800286c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8002870:	bf18      	it	ne
 8002872:	4613      	movne	r3, r2
 8002874:	4a60      	ldr	r2, [pc, #384]	; (80029f8 <__strftime+0x4a4>)
 8002876:	e00b      	b.n	8002890 <__strftime+0x33c>
 8002878:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800287c:	9105      	str	r1, [sp, #20]
 800287e:	f000 fdcb 	bl	8003418 <abs>
 8002882:	2364      	movs	r3, #100	; 0x64
 8002884:	9905      	ldr	r1, [sp, #20]
 8002886:	fb90 f0f3 	sdiv	r0, r0, r3
 800288a:	e7e8      	b.n	800285e <__strftime+0x30a>
 800288c:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <__strftime+0x49c>)
 800288e:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <__strftime+0x4a8>)
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	9804      	ldr	r0, [sp, #16]
 8002894:	f8df c154 	ldr.w	ip, [pc, #340]	; 80029ec <__strftime+0x498>
 8002898:	f1b9 0f02 	cmp.w	r9, #2
 800289c:	bf2c      	ite	cs
 800289e:	ebc0 0009 	rsbcs	r0, r0, r9
 80028a2:	f1c0 0002 	rsbcc	r0, r0, #2
 80028a6:	9000      	str	r0, [sp, #0]
 80028a8:	4855      	ldr	r0, [pc, #340]	; (8002a00 <__strftime+0x4ac>)
 80028aa:	4561      	cmp	r1, ip
 80028ac:	bfb8      	it	lt
 80028ae:	4603      	movlt	r3, r0
 80028b0:	1b31      	subs	r1, r6, r4
 80028b2:	1938      	adds	r0, r7, r4
 80028b4:	e029      	b.n	800290a <__strftime+0x3b6>
 80028b6:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <__strftime+0x49c>)
 80028b8:	e7dc      	b.n	8002874 <__strftime+0x320>
 80028ba:	4852      	ldr	r0, [pc, #328]	; (8002a04 <__strftime+0x4b0>)
 80028bc:	4a52      	ldr	r2, [pc, #328]	; (8002a08 <__strftime+0x4b4>)
 80028be:	68eb      	ldr	r3, [r5, #12]
 80028c0:	2964      	cmp	r1, #100	; 0x64
 80028c2:	bf18      	it	ne
 80028c4:	4602      	movne	r2, r0
 80028c6:	1b31      	subs	r1, r6, r4
 80028c8:	1938      	adds	r0, r7, r4
 80028ca:	f001 f907 	bl	8003adc <sniprintf>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	f6ff ae73 	blt.w	80025ba <__strftime+0x66>
 80028d4:	4404      	add	r4, r0
 80028d6:	42a6      	cmp	r6, r4
 80028d8:	f63f af42 	bhi.w	8002760 <__strftime+0x20c>
 80028dc:	e66d      	b.n	80025ba <__strftime+0x66>
 80028de:	6968      	ldr	r0, [r5, #20]
 80028e0:	692b      	ldr	r3, [r5, #16]
 80028e2:	2800      	cmp	r0, #0
 80028e4:	eb07 0904 	add.w	r9, r7, r4
 80028e8:	eba6 0a04 	sub.w	sl, r6, r4
 80028ec:	f103 0301 	add.w	r3, r3, #1
 80028f0:	68ea      	ldr	r2, [r5, #12]
 80028f2:	db0d      	blt.n	8002910 <__strftime+0x3bc>
 80028f4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80028f8:	fb90 f1fc 	sdiv	r1, r0, ip
 80028fc:	fb0c 0011 	mls	r0, ip, r1, r0
 8002900:	e9cd 2000 	strd	r2, r0, [sp]
 8002904:	4651      	mov	r1, sl
 8002906:	4648      	mov	r0, r9
 8002908:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <__strftime+0x4b8>)
 800290a:	f001 f8e7 	bl	8003adc <sniprintf>
 800290e:	e7de      	b.n	80028ce <__strftime+0x37a>
 8002910:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8002914:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8002918:	f000 fd7e 	bl	8003418 <abs>
 800291c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8002920:	2164      	movs	r1, #100	; 0x64
 8002922:	fb90 fcf1 	sdiv	ip, r0, r1
 8002926:	fb0c 0011 	mls	r0, ip, r1, r0
 800292a:	e7e9      	b.n	8002900 <__strftime+0x3ac>
 800292c:	2325      	movs	r3, #37	; 0x25
 800292e:	f88d 3020 	strb.w	r3, [sp, #32]
 8002932:	f1ba 0f00 	cmp.w	sl, #0
 8002936:	d013      	beq.n	8002960 <__strftime+0x40c>
 8002938:	f1b9 0f06 	cmp.w	r9, #6
 800293c:	bf38      	it	cc
 800293e:	f04f 0906 	movcc.w	r9, #6
 8002942:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 8002946:	f1b9 0306 	subs.w	r3, r9, #6
 800294a:	d10f      	bne.n	800296c <__strftime+0x418>
 800294c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8002950:	492f      	ldr	r1, [pc, #188]	; (8002a10 <__strftime+0x4bc>)
 8002952:	f001 f923 	bl	8003b9c <strcpy>
 8002956:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002958:	aa08      	add	r2, sp, #32
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	462b      	mov	r3, r5
 800295e:	e75c      	b.n	800281a <__strftime+0x2c6>
 8002960:	232b      	movs	r3, #43	; 0x2b
 8002962:	f04f 090a 	mov.w	r9, #10
 8002966:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800296a:	e7ec      	b.n	8002946 <__strftime+0x3f2>
 800296c:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <__strftime+0x4c0>)
 800296e:	211e      	movs	r1, #30
 8002970:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8002974:	f001 f8b2 	bl	8003adc <sniprintf>
 8002978:	2800      	cmp	r0, #0
 800297a:	dde7      	ble.n	800294c <__strftime+0x3f8>
 800297c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8002980:	4418      	add	r0, r3
 8002982:	e7e5      	b.n	8002950 <__strftime+0x3fc>
 8002984:	4628      	mov	r0, r5
 8002986:	f7ff fd8d 	bl	80024a4 <iso_year_adjust>
 800298a:	4681      	mov	r9, r0
 800298c:	6968      	ldr	r0, [r5, #20]
 800298e:	2800      	cmp	r0, #0
 8002990:	db1a      	blt.n	80029c8 <__strftime+0x474>
 8002992:	2264      	movs	r2, #100	; 0x64
 8002994:	fb90 f3f2 	sdiv	r3, r0, r2
 8002998:	f1b9 0f00 	cmp.w	r9, #0
 800299c:	fb02 0013 	mls	r0, r2, r3, r0
 80029a0:	da1a      	bge.n	80029d8 <__strftime+0x484>
 80029a2:	696a      	ldr	r2, [r5, #20]
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <__strftime+0x4c4>)
 80029a6:	429a      	cmp	r2, r3
 80029a8:	bfb8      	it	lt
 80029aa:	f04f 0901 	movlt.w	r9, #1
 80029ae:	2364      	movs	r3, #100	; 0x64
 80029b0:	4481      	add	r9, r0
 80029b2:	fb99 f0f3 	sdiv	r0, r9, r3
 80029b6:	fb03 9910 	mls	r9, r3, r0, r9
 80029ba:	4499      	add	r9, r3
 80029bc:	fb99 f2f3 	sdiv	r2, r9, r3
 80029c0:	fb03 9312 	mls	r3, r3, r2, r9
 80029c4:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <__strftime+0x4b4>)
 80029c6:	e77e      	b.n	80028c6 <__strftime+0x372>
 80029c8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80029cc:	f000 fd24 	bl	8003418 <abs>
 80029d0:	2364      	movs	r3, #100	; 0x64
 80029d2:	fb90 f2f3 	sdiv	r2, r0, r3
 80029d6:	e7df      	b.n	8002998 <__strftime+0x444>
 80029d8:	d0e9      	beq.n	80029ae <__strftime+0x45a>
 80029da:	696a      	ldr	r2, [r5, #20]
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <__strftime+0x498>)
 80029de:	429a      	cmp	r2, r3
 80029e0:	bfb8      	it	lt
 80029e2:	f04f 39ff 	movlt.w	r9, #4294967295
 80029e6:	e7e2      	b.n	80029ae <__strftime+0x45a>
 80029e8:	080046dc 	.word	0x080046dc
 80029ec:	fffff894 	.word	0xfffff894
 80029f0:	0800494e 	.word	0x0800494e
 80029f4:	0800468f 	.word	0x0800468f
 80029f8:	08004687 	.word	0x08004687
 80029fc:	08004680 	.word	0x08004680
 8002a00:	08004af3 	.word	0x08004af3
 8002a04:	08004691 	.word	0x08004691
 8002a08:	0800469f 	.word	0x0800469f
 8002a0c:	08004695 	.word	0x08004695
 8002a10:	080046a8 	.word	0x080046a8
 8002a14:	080046a4 	.word	0x080046a4
 8002a18:	fffff895 	.word	0xfffff895
 8002a1c:	696b      	ldr	r3, [r5, #20]
 8002a1e:	4628      	mov	r0, r5
 8002a20:	9304      	str	r3, [sp, #16]
 8002a22:	9a04      	ldr	r2, [sp, #16]
 8002a24:	4bbc      	ldr	r3, [pc, #752]	; (8002d18 <__strftime+0x7c4>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	bfac      	ite	ge
 8002a2a:	2300      	movge	r3, #0
 8002a2c:	2301      	movlt	r3, #1
 8002a2e:	9305      	str	r3, [sp, #20]
 8002a30:	f7ff fd38 	bl	80024a4 <iso_year_adjust>
 8002a34:	9a04      	ldr	r2, [sp, #16]
 8002a36:	4603      	mov	r3, r0
 8002a38:	2a00      	cmp	r2, #0
 8002a3a:	db3a      	blt.n	8002ab2 <__strftime+0x55e>
 8002a3c:	2264      	movs	r2, #100	; 0x64
 8002a3e:	9904      	ldr	r1, [sp, #16]
 8002a40:	fb91 f2f2 	sdiv	r2, r1, r2
 8002a44:	3213      	adds	r2, #19
 8002a46:	6968      	ldr	r0, [r5, #20]
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	db3d      	blt.n	8002ac8 <__strftime+0x574>
 8002a4c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8002a50:	fb90 fefc 	sdiv	lr, r0, ip
 8002a54:	fb0c 001e 	mls	r0, ip, lr, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da44      	bge.n	8002ae6 <__strftime+0x592>
 8002a5c:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8002d3c <__strftime+0x7e8>
 8002a60:	6969      	ldr	r1, [r5, #20]
 8002a62:	4561      	cmp	r1, ip
 8002a64:	da01      	bge.n	8002a6a <__strftime+0x516>
 8002a66:	2301      	movs	r3, #1
 8002a68:	9305      	str	r3, [sp, #20]
 8002a6a:	4403      	add	r3, r0
 8002a6c:	1c59      	adds	r1, r3, #1
 8002a6e:	d146      	bne.n	8002afe <__strftime+0x5aa>
 8002a70:	2363      	movs	r3, #99	; 0x63
 8002a72:	3a01      	subs	r2, #1
 8002a74:	2064      	movs	r0, #100	; 0x64
 8002a76:	fb00 3202 	mla	r2, r0, r2, r3
 8002a7a:	9b05      	ldr	r3, [sp, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d043      	beq.n	8002b08 <__strftime+0x5b4>
 8002a80:	232d      	movs	r3, #45	; 0x2d
 8002a82:	f88d 3020 	strb.w	r3, [sp, #32]
 8002a86:	f1b9 0f00 	cmp.w	r9, #0
 8002a8a:	d001      	beq.n	8002a90 <__strftime+0x53c>
 8002a8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8002a90:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8002a94:	2125      	movs	r1, #37	; 0x25
 8002a96:	7019      	strb	r1, [r3, #0]
 8002a98:	f1ba 0f00 	cmp.w	sl, #0
 8002a9c:	d144      	bne.n	8002b28 <__strftime+0x5d4>
 8002a9e:	1c58      	adds	r0, r3, #1
 8002aa0:	499e      	ldr	r1, [pc, #632]	; (8002d1c <__strftime+0x7c8>)
 8002aa2:	9204      	str	r2, [sp, #16]
 8002aa4:	f001 f87a 	bl	8003b9c <strcpy>
 8002aa8:	9a04      	ldr	r2, [sp, #16]
 8002aaa:	9200      	str	r2, [sp, #0]
 8002aac:	464b      	mov	r3, r9
 8002aae:	aa08      	add	r2, sp, #32
 8002ab0:	e09b      	b.n	8002bea <__strftime+0x696>
 8002ab2:	9b04      	ldr	r3, [sp, #16]
 8002ab4:	9006      	str	r0, [sp, #24]
 8002ab6:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 8002aba:	f000 fcad 	bl	8003418 <abs>
 8002abe:	2264      	movs	r2, #100	; 0x64
 8002ac0:	9b06      	ldr	r3, [sp, #24]
 8002ac2:	fb90 f2f2 	sdiv	r2, r0, r2
 8002ac6:	e7be      	b.n	8002a46 <__strftime+0x4f2>
 8002ac8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8002acc:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8002ad0:	f000 fca2 	bl	8003418 <abs>
 8002ad4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8002ad8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8002adc:	fb90 fefc 	sdiv	lr, r0, ip
 8002ae0:	fb0e 001c 	mls	r0, lr, ip, r0
 8002ae4:	e7b8      	b.n	8002a58 <__strftime+0x504>
 8002ae6:	d0c0      	beq.n	8002a6a <__strftime+0x516>
 8002ae8:	9904      	ldr	r1, [sp, #16]
 8002aea:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8002d18 <__strftime+0x7c4>
 8002aee:	4561      	cmp	r1, ip
 8002af0:	bfae      	itee	ge
 8002af2:	2100      	movge	r1, #0
 8002af4:	2101      	movlt	r1, #1
 8002af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002afa:	9105      	str	r1, [sp, #20]
 8002afc:	e7b5      	b.n	8002a6a <__strftime+0x516>
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	bf04      	itt	eq
 8002b02:	3201      	addeq	r2, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	e7b5      	b.n	8002a74 <__strftime+0x520>
 8002b08:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8002b0c:	d110      	bne.n	8002b30 <__strftime+0x5dc>
 8002b0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d90c      	bls.n	8002b30 <__strftime+0x5dc>
 8002b16:	f88d a020 	strb.w	sl, [sp, #32]
 8002b1a:	f1b9 0f00 	cmp.w	r9, #0
 8002b1e:	d1b5      	bne.n	8002a8c <__strftime+0x538>
 8002b20:	2125      	movs	r1, #37	; 0x25
 8002b22:	ab10      	add	r3, sp, #64	; 0x40
 8002b24:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 8002b28:	2130      	movs	r1, #48	; 0x30
 8002b2a:	1c98      	adds	r0, r3, #2
 8002b2c:	7059      	strb	r1, [r3, #1]
 8002b2e:	e7b7      	b.n	8002aa0 <__strftime+0x54c>
 8002b30:	ab08      	add	r3, sp, #32
 8002b32:	e7af      	b.n	8002a94 <__strftime+0x540>
 8002b34:	487a      	ldr	r0, [pc, #488]	; (8002d20 <__strftime+0x7cc>)
 8002b36:	4a7b      	ldr	r2, [pc, #492]	; (8002d24 <__strftime+0x7d0>)
 8002b38:	68ab      	ldr	r3, [r5, #8]
 8002b3a:	296b      	cmp	r1, #107	; 0x6b
 8002b3c:	bf18      	it	ne
 8002b3e:	4602      	movne	r2, r0
 8002b40:	e6c1      	b.n	80028c6 <__strftime+0x372>
 8002b42:	68ab      	ldr	r3, [r5, #8]
 8002b44:	220c      	movs	r2, #12
 8002b46:	b15b      	cbz	r3, 8002b60 <__strftime+0x60c>
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d003      	beq.n	8002b54 <__strftime+0x600>
 8002b4c:	fb93 f0f2 	sdiv	r0, r3, r2
 8002b50:	fb02 3310 	mls	r3, r2, r0, r3
 8002b54:	4873      	ldr	r0, [pc, #460]	; (8002d24 <__strftime+0x7d0>)
 8002b56:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <__strftime+0x7cc>)
 8002b58:	2949      	cmp	r1, #73	; 0x49
 8002b5a:	bf18      	it	ne
 8002b5c:	4602      	movne	r2, r0
 8002b5e:	e6b2      	b.n	80028c6 <__strftime+0x372>
 8002b60:	4613      	mov	r3, r2
 8002b62:	e7f7      	b.n	8002b54 <__strftime+0x600>
 8002b64:	69eb      	ldr	r3, [r5, #28]
 8002b66:	4a70      	ldr	r2, [pc, #448]	; (8002d28 <__strftime+0x7d4>)
 8002b68:	3301      	adds	r3, #1
 8002b6a:	e6ac      	b.n	80028c6 <__strftime+0x372>
 8002b6c:	692b      	ldr	r3, [r5, #16]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	e728      	b.n	80029c4 <__strftime+0x470>
 8002b72:	686b      	ldr	r3, [r5, #4]
 8002b74:	e726      	b.n	80029c4 <__strftime+0x470>
 8002b76:	45a3      	cmp	fp, r4
 8002b78:	f67f ad1f 	bls.w	80025ba <__strftime+0x66>
 8002b7c:	230a      	movs	r3, #10
 8002b7e:	553b      	strb	r3, [r7, r4]
 8002b80:	3401      	adds	r4, #1
 8002b82:	e5ed      	b.n	8002760 <__strftime+0x20c>
 8002b84:	68ab      	ldr	r3, [r5, #8]
 8002b86:	2b0b      	cmp	r3, #11
 8002b88:	bfcc      	ite	gt
 8002b8a:	22a4      	movgt	r2, #164	; 0xa4
 8002b8c:	22a0      	movle	r2, #160	; 0xa0
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <__strftime+0x7d8>)
 8002b90:	4413      	add	r3, r2
 8002b92:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8002b96:	4648      	mov	r0, r9
 8002b98:	f7fd fad8 	bl	800014c <strlen>
 8002b9c:	eba9 0304 	sub.w	r3, r9, r4
 8002ba0:	eb04 0a00 	add.w	sl, r4, r0
 8002ba4:	45a2      	cmp	sl, r4
 8002ba6:	d101      	bne.n	8002bac <__strftime+0x658>
 8002ba8:	4654      	mov	r4, sl
 8002baa:	e5d9      	b.n	8002760 <__strftime+0x20c>
 8002bac:	45a3      	cmp	fp, r4
 8002bae:	f67f ad04 	bls.w	80025ba <__strftime+0x66>
 8002bb2:	f898 2000 	ldrb.w	r2, [r8]
 8002bb6:	f813 9004 	ldrb.w	r9, [r3, r4]
 8002bba:	2a50      	cmp	r2, #80	; 0x50
 8002bbc:	d10d      	bne.n	8002bda <__strftime+0x686>
 8002bbe:	9304      	str	r3, [sp, #16]
 8002bc0:	f000 fc90 	bl	80034e4 <__locale_ctype_ptr>
 8002bc4:	4448      	add	r0, r9
 8002bc6:	7842      	ldrb	r2, [r0, #1]
 8002bc8:	9b04      	ldr	r3, [sp, #16]
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	2a01      	cmp	r2, #1
 8002bd0:	bf08      	it	eq
 8002bd2:	f109 0920 	addeq.w	r9, r9, #32
 8002bd6:	fa5f f989 	uxtb.w	r9, r9
 8002bda:	f807 9004 	strb.w	r9, [r7, r4]
 8002bde:	3401      	adds	r4, #1
 8002be0:	e7e0      	b.n	8002ba4 <__strftime+0x650>
 8002be2:	686b      	ldr	r3, [r5, #4]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <__strftime+0x7dc>)
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	68ab      	ldr	r3, [r5, #8]
 8002bea:	1b31      	subs	r1, r6, r4
 8002bec:	1938      	adds	r0, r7, r4
 8002bee:	f000 ff75 	bl	8003adc <sniprintf>
 8002bf2:	e66c      	b.n	80028ce <__strftime+0x37a>
 8002bf4:	6a2b      	ldr	r3, [r5, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db7c      	blt.n	8002cf4 <__strftime+0x7a0>
 8002bfa:	f000 fa87 	bl	800310c <__tz_lock>
 8002bfe:	9b03      	ldr	r3, [sp, #12]
 8002c00:	b90b      	cbnz	r3, 8002c06 <__strftime+0x6b2>
 8002c02:	f000 fa85 	bl	8003110 <_tzset_unlocked>
 8002c06:	f000 fc61 	bl	80034cc <__gettzinfo>
 8002c0a:	6a2b      	ldr	r3, [r5, #32]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bfcc      	ite	gt
 8002c10:	2350      	movgt	r3, #80	; 0x50
 8002c12:	2328      	movle	r3, #40	; 0x28
 8002c14:	58c3      	ldr	r3, [r0, r3]
 8002c16:	425b      	negs	r3, r3
 8002c18:	9304      	str	r3, [sp, #16]
 8002c1a:	f000 fa78 	bl	800310e <__tz_unlock>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	9303      	str	r3, [sp, #12]
 8002c22:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	4662      	mov	r2, ip
 8002c2a:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 8002c2e:	9305      	str	r3, [sp, #20]
 8002c30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c34:	f143 31ff 	adc.w	r1, r3, #4294967295
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	f171 0e00 	sbcs.w	lr, r1, #0
 8002c3e:	da03      	bge.n	8002c48 <__strftime+0x6f4>
 8002c40:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8002c44:	f143 31ff 	adc.w	r1, r3, #4294967295
 8002c48:	0883      	lsrs	r3, r0, #2
 8002c4a:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8002c4e:	4699      	mov	r9, r3
 8002c50:	108b      	asrs	r3, r1, #2
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	f10c 30ff 	add.w	r0, ip, #4294967295
 8002c58:	fb90 f1f1 	sdiv	r1, r0, r1
 8002c5c:	ebb9 0201 	subs.w	r2, r9, r1
 8002c60:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8002c64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c68:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 8002c6c:	fb90 f1f1 	sdiv	r1, r0, r1
 8002c70:	eb12 0901 	adds.w	r9, r2, r1
 8002c74:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8002c78:	f240 116d 	movw	r1, #365	; 0x16d
 8002c7c:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8002c80:	fb01 fc0c 	mul.w	ip, r1, ip
 8002c84:	eb19 020c 	adds.w	r2, r9, ip
 8002c88:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 8002c8c:	f04f 0c18 	mov.w	ip, #24
 8002c90:	69e9      	ldr	r1, [r5, #28]
 8002c92:	eb12 0901 	adds.w	r9, r2, r1
 8002c96:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8002c9a:	fba9 230c 	umull	r2, r3, r9, ip
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	fb0c 130a 	mla	r3, ip, sl, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8002caa:	4619      	mov	r1, r3
 8002cac:	68ab      	ldr	r3, [r5, #8]
 8002cae:	18c0      	adds	r0, r0, r3
 8002cb0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8002cb4:	fba0 230c 	umull	r2, r3, r0, ip
 8002cb8:	4691      	mov	r9, r2
 8002cba:	fb0c 3301 	mla	r3, ip, r1, r3
 8002cbe:	6869      	ldr	r1, [r5, #4]
 8002cc0:	eb19 0201 	adds.w	r2, r9, r1
 8002cc4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8002cc8:	fba2 010c 	umull	r0, r1, r2, ip
 8002ccc:	fb0c 1103 	mla	r1, ip, r3, r1
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <__strftime+0x7e0>)
 8002cd4:	eb10 0903 	adds.w	r9, r0, r3
 8002cd8:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 8002cdc:	9b04      	ldr	r3, [sp, #16]
 8002cde:	ebb9 0003 	subs.w	r0, r9, r3
 8002ce2:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 8002ce6:	e9cd 0100 	strd	r0, r1, [sp]
 8002cea:	1b31      	subs	r1, r6, r4
 8002cec:	1938      	adds	r0, r7, r4
 8002cee:	f000 fef5 	bl	8003adc <sniprintf>
 8002cf2:	e5ec      	b.n	80028ce <__strftime+0x37a>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9304      	str	r3, [sp, #16]
 8002cf8:	e793      	b.n	8002c22 <__strftime+0x6ce>
 8002cfa:	682b      	ldr	r3, [r5, #0]
 8002cfc:	e662      	b.n	80029c4 <__strftime+0x470>
 8002cfe:	45a3      	cmp	fp, r4
 8002d00:	f67f ac5b 	bls.w	80025ba <__strftime+0x66>
 8002d04:	2309      	movs	r3, #9
 8002d06:	e73a      	b.n	8002b7e <__strftime+0x62a>
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <__strftime+0x7e4>)
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	686b      	ldr	r3, [r5, #4]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	68ab      	ldr	r3, [r5, #8]
 8002d14:	e5cc      	b.n	80028b0 <__strftime+0x35c>
 8002d16:	bf00      	nop
 8002d18:	fffff894 	.word	0xfffff894
 8002d1c:	080046b0 	.word	0x080046b0
 8002d20:	0800469f 	.word	0x0800469f
 8002d24:	08004691 	.word	0x08004691
 8002d28:	080046b4 	.word	0x080046b4
 8002d2c:	080046dc 	.word	0x080046dc
 8002d30:	080046c3 	.word	0x080046c3
 8002d34:	080046b9 	.word	0x080046b9
 8002d38:	080046be 	.word	0x080046be
 8002d3c:	fffff895 	.word	0xfffff895
 8002d40:	45a3      	cmp	fp, r4
 8002d42:	f67f ac3a 	bls.w	80025ba <__strftime+0x66>
 8002d46:	69ab      	ldr	r3, [r5, #24]
 8002d48:	193a      	adds	r2, r7, r4
 8002d4a:	3401      	adds	r4, #1
 8002d4c:	b913      	cbnz	r3, 8002d54 <__strftime+0x800>
 8002d4e:	2337      	movs	r3, #55	; 0x37
 8002d50:	7013      	strb	r3, [r2, #0]
 8002d52:	e505      	b.n	8002760 <__strftime+0x20c>
 8002d54:	3330      	adds	r3, #48	; 0x30
 8002d56:	e7fb      	b.n	8002d50 <__strftime+0x7fc>
 8002d58:	69eb      	ldr	r3, [r5, #28]
 8002d5a:	69aa      	ldr	r2, [r5, #24]
 8002d5c:	3307      	adds	r3, #7
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	2207      	movs	r2, #7
 8002d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d66:	e62d      	b.n	80029c4 <__strftime+0x470>
 8002d68:	4628      	mov	r0, r5
 8002d6a:	f7ff fb9b 	bl	80024a4 <iso_year_adjust>
 8002d6e:	69aa      	ldr	r2, [r5, #24]
 8002d70:	b132      	cbz	r2, 8002d80 <__strftime+0x82c>
 8002d72:	3a01      	subs	r2, #1
 8002d74:	2800      	cmp	r0, #0
 8002d76:	dc27      	bgt.n	8002dc8 <__strftime+0x874>
 8002d78:	69eb      	ldr	r3, [r5, #28]
 8002d7a:	d103      	bne.n	8002d84 <__strftime+0x830>
 8002d7c:	330a      	adds	r3, #10
 8002d7e:	e7ee      	b.n	8002d5e <__strftime+0x80a>
 8002d80:	2206      	movs	r2, #6
 8002d82:	e7f7      	b.n	8002d74 <__strftime+0x820>
 8002d84:	6968      	ldr	r0, [r5, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	f240 726b 	movw	r2, #1899	; 0x76b
 8002d8e:	bfa8      	it	ge
 8002d90:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8002d94:	4410      	add	r0, r2
 8002d96:	0782      	lsls	r2, r0, #30
 8002d98:	d105      	bne.n	8002da6 <__strftime+0x852>
 8002d9a:	2264      	movs	r2, #100	; 0x64
 8002d9c:	fb90 f1f2 	sdiv	r1, r0, r2
 8002da0:	fb02 0111 	mls	r1, r2, r1, r0
 8002da4:	b971      	cbnz	r1, 8002dc4 <__strftime+0x870>
 8002da6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002daa:	fb90 f2f1 	sdiv	r2, r0, r1
 8002dae:	fb01 0212 	mls	r2, r1, r2, r0
 8002db2:	fab2 f282 	clz	r2, r2
 8002db6:	0952      	lsrs	r2, r2, #5
 8002db8:	1a9a      	subs	r2, r3, r2
 8002dba:	2a04      	cmp	r2, #4
 8002dbc:	bfcc      	ite	gt
 8002dbe:	2334      	movgt	r3, #52	; 0x34
 8002dc0:	2335      	movle	r3, #53	; 0x35
 8002dc2:	e5ff      	b.n	80029c4 <__strftime+0x470>
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	e7f7      	b.n	8002db8 <__strftime+0x864>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e5fb      	b.n	80029c4 <__strftime+0x470>
 8002dcc:	45a3      	cmp	fp, r4
 8002dce:	f67f abf4 	bls.w	80025ba <__strftime+0x66>
 8002dd2:	69ab      	ldr	r3, [r5, #24]
 8002dd4:	3330      	adds	r3, #48	; 0x30
 8002dd6:	e6d2      	b.n	8002b7e <__strftime+0x62a>
 8002dd8:	69ab      	ldr	r3, [r5, #24]
 8002dda:	b13b      	cbz	r3, 8002dec <__strftime+0x898>
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	69ea      	ldr	r2, [r5, #28]
 8002de0:	3207      	adds	r2, #7
 8002de2:	1ad2      	subs	r2, r2, r3
 8002de4:	2307      	movs	r3, #7
 8002de6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dea:	e5eb      	b.n	80029c4 <__strftime+0x470>
 8002dec:	2306      	movs	r3, #6
 8002dee:	e7f6      	b.n	8002dde <__strftime+0x88a>
 8002df0:	6968      	ldr	r0, [r5, #20]
 8002df2:	2800      	cmp	r0, #0
 8002df4:	db05      	blt.n	8002e02 <__strftime+0x8ae>
 8002df6:	2264      	movs	r2, #100	; 0x64
 8002df8:	fb90 f3f2 	sdiv	r3, r0, r2
 8002dfc:	fb02 0313 	mls	r3, r2, r3, r0
 8002e00:	e5e0      	b.n	80029c4 <__strftime+0x470>
 8002e02:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8002e06:	f000 fb07 	bl	8003418 <abs>
 8002e0a:	2364      	movs	r3, #100	; 0x64
 8002e0c:	fb90 f2f3 	sdiv	r2, r0, r3
 8002e10:	e7f4      	b.n	8002dfc <__strftime+0x8a8>
 8002e12:	696b      	ldr	r3, [r5, #20]
 8002e14:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <__strftime+0xa0c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	da18      	bge.n	8002e4c <__strftime+0x8f8>
 8002e1a:	212d      	movs	r1, #45	; 0x2d
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f88d 1020 	strb.w	r1, [sp, #32]
 8002e22:	f1b9 0f00 	cmp.w	r9, #0
 8002e26:	d001      	beq.n	8002e2c <__strftime+0x8d8>
 8002e28:	f109 39ff 	add.w	r9, r9, #4294967295
 8002e2c:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 8002e30:	2125      	movs	r1, #37	; 0x25
 8002e32:	7011      	strb	r1, [r2, #0]
 8002e34:	f1ba 0f00 	cmp.w	sl, #0
 8002e38:	f040 8088 	bne.w	8002f4c <__strftime+0x9f8>
 8002e3c:	1c50      	adds	r0, r2, #1
 8002e3e:	4949      	ldr	r1, [pc, #292]	; (8002f64 <__strftime+0xa10>)
 8002e40:	9304      	str	r3, [sp, #16]
 8002e42:	f000 feab 	bl	8003b9c <strcpy>
 8002e46:	9b04      	ldr	r3, [sp, #16]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	e62f      	b.n	8002aac <__strftime+0x558>
 8002e4c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8002e50:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8002e54:	f040 8081 	bne.w	8002f5a <__strftime+0xa06>
 8002e58:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d979      	bls.n	8002f54 <__strftime+0xa00>
 8002e60:	f88d a020 	strb.w	sl, [sp, #32]
 8002e64:	e7dd      	b.n	8002e22 <__strftime+0x8ce>
 8002e66:	6a2b      	ldr	r3, [r5, #32]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f6ff ac79 	blt.w	8002760 <__strftime+0x20c>
 8002e6e:	f000 f94d 	bl	800310c <__tz_lock>
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	b90b      	cbnz	r3, 8002e7a <__strftime+0x926>
 8002e76:	f000 f94b 	bl	8003110 <_tzset_unlocked>
 8002e7a:	f000 fb27 	bl	80034cc <__gettzinfo>
 8002e7e:	6a2b      	ldr	r3, [r5, #32]
 8002e80:	eb07 0a04 	add.w	sl, r7, r4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bfcc      	ite	gt
 8002e88:	2350      	movgt	r3, #80	; 0x50
 8002e8a:	2328      	movle	r3, #40	; 0x28
 8002e8c:	58c3      	ldr	r3, [r0, r3]
 8002e8e:	f1c3 0900 	rsb	r9, r3, #0
 8002e92:	f000 f93c 	bl	800310e <__tz_unlock>
 8002e96:	233c      	movs	r3, #60	; 0x3c
 8002e98:	1b31      	subs	r1, r6, r4
 8002e9a:	fb99 f0f3 	sdiv	r0, r9, r3
 8002e9e:	9104      	str	r1, [sp, #16]
 8002ea0:	9303      	str	r3, [sp, #12]
 8002ea2:	f000 fb17 	bl	80034d4 <labs>
 8002ea6:	9b03      	ldr	r3, [sp, #12]
 8002ea8:	9904      	ldr	r1, [sp, #16]
 8002eaa:	fb90 f2f3 	sdiv	r2, r0, r3
 8002eae:	fb02 0013 	mls	r0, r2, r3, r0
 8002eb2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002eb6:	9000      	str	r0, [sp, #0]
 8002eb8:	fb99 f3f3 	sdiv	r3, r9, r3
 8002ebc:	4a2a      	ldr	r2, [pc, #168]	; (8002f68 <__strftime+0xa14>)
 8002ebe:	4650      	mov	r0, sl
 8002ec0:	f000 fe0c 	bl	8003adc <sniprintf>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	f6ff ab78 	blt.w	80025ba <__strftime+0x66>
 8002eca:	4404      	add	r4, r0
 8002ecc:	42a6      	cmp	r6, r4
 8002ece:	f67f ab74 	bls.w	80025ba <__strftime+0x66>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9303      	str	r3, [sp, #12]
 8002ed6:	e443      	b.n	8002760 <__strftime+0x20c>
 8002ed8:	6a2b      	ldr	r3, [r5, #32]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f6ff ac40 	blt.w	8002760 <__strftime+0x20c>
 8002ee0:	f000 f914 	bl	800310c <__tz_lock>
 8002ee4:	9b03      	ldr	r3, [sp, #12]
 8002ee6:	b90b      	cbnz	r3, 8002eec <__strftime+0x998>
 8002ee8:	f000 f912 	bl	8003110 <_tzset_unlocked>
 8002eec:	6a2b      	ldr	r3, [r5, #32]
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <__strftime+0xa18>)
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bfd4      	ite	le
 8002ef4:	2300      	movle	r3, #0
 8002ef6:	2301      	movgt	r3, #1
 8002ef8:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8002efc:	4648      	mov	r0, r9
 8002efe:	f7fd f925 	bl	800014c <strlen>
 8002f02:	eba9 0904 	sub.w	r9, r9, r4
 8002f06:	eb04 0a00 	add.w	sl, r4, r0
 8002f0a:	45a2      	cmp	sl, r4
 8002f0c:	d103      	bne.n	8002f16 <__strftime+0x9c2>
 8002f0e:	f000 f8fe 	bl	800310e <__tz_unlock>
 8002f12:	4654      	mov	r4, sl
 8002f14:	e7dd      	b.n	8002ed2 <__strftime+0x97e>
 8002f16:	45a3      	cmp	fp, r4
 8002f18:	d904      	bls.n	8002f24 <__strftime+0x9d0>
 8002f1a:	f819 3004 	ldrb.w	r3, [r9, r4]
 8002f1e:	553b      	strb	r3, [r7, r4]
 8002f20:	3401      	adds	r4, #1
 8002f22:	e7f2      	b.n	8002f0a <__strftime+0x9b6>
 8002f24:	f000 f8f3 	bl	800310e <__tz_unlock>
 8002f28:	f7ff bb47 	b.w	80025ba <__strftime+0x66>
 8002f2c:	45a3      	cmp	fp, r4
 8002f2e:	f67f ab44 	bls.w	80025ba <__strftime+0x66>
 8002f32:	2325      	movs	r3, #37	; 0x25
 8002f34:	e623      	b.n	8002b7e <__strftime+0x62a>
 8002f36:	b10e      	cbz	r6, 8002f3c <__strftime+0x9e8>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	553b      	strb	r3, [r7, r4]
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	b011      	add	sp, #68	; 0x44
 8002f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f44:	2225      	movs	r2, #37	; 0x25
 8002f46:	f88d 2020 	strb.w	r2, [sp, #32]
 8002f4a:	aa08      	add	r2, sp, #32
 8002f4c:	2130      	movs	r1, #48	; 0x30
 8002f4e:	1c90      	adds	r0, r2, #2
 8002f50:	7051      	strb	r1, [r2, #1]
 8002f52:	e774      	b.n	8002e3e <__strftime+0x8ea>
 8002f54:	f1b9 0f00 	cmp.w	r9, #0
 8002f58:	d1f4      	bne.n	8002f44 <__strftime+0x9f0>
 8002f5a:	aa08      	add	r2, sp, #32
 8002f5c:	e768      	b.n	8002e30 <__strftime+0x8dc>
 8002f5e:	bf00      	nop
 8002f60:	fffff894 	.word	0xfffff894
 8002f64:	080046b0 	.word	0x080046b0
 8002f68:	080046cd 	.word	0x080046cd
 8002f6c:	20000074 	.word	0x20000074

08002f70 <strftime>:
 8002f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f72:	4c06      	ldr	r4, [pc, #24]	; (8002f8c <strftime+0x1c>)
 8002f74:	4d06      	ldr	r5, [pc, #24]	; (8002f90 <strftime+0x20>)
 8002f76:	6824      	ldr	r4, [r4, #0]
 8002f78:	6a24      	ldr	r4, [r4, #32]
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	bf08      	it	eq
 8002f7e:	462c      	moveq	r4, r5
 8002f80:	9400      	str	r4, [sp, #0]
 8002f82:	f7ff fae7 	bl	8002554 <__strftime>
 8002f86:	b003      	add	sp, #12
 8002f88:	bd30      	pop	{r4, r5, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000010 	.word	0x20000010
 8002f90:	200000d8 	.word	0x200000d8

08002f94 <_strtoul_l.isra.0>:
 8002f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	4680      	mov	r8, r0
 8002f9a:	4689      	mov	r9, r1
 8002f9c:	4692      	mov	sl, r2
 8002f9e:	461e      	mov	r6, r3
 8002fa0:	460f      	mov	r7, r1
 8002fa2:	463d      	mov	r5, r7
 8002fa4:	9808      	ldr	r0, [sp, #32]
 8002fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002faa:	f000 fa97 	bl	80034dc <__locale_ctype_ptr_l>
 8002fae:	4420      	add	r0, r4
 8002fb0:	7843      	ldrb	r3, [r0, #1]
 8002fb2:	f013 0308 	ands.w	r3, r3, #8
 8002fb6:	d130      	bne.n	800301a <_strtoul_l.isra.0+0x86>
 8002fb8:	2c2d      	cmp	r4, #45	; 0x2d
 8002fba:	d130      	bne.n	800301e <_strtoul_l.isra.0+0x8a>
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	787c      	ldrb	r4, [r7, #1]
 8002fc0:	1cbd      	adds	r5, r7, #2
 8002fc2:	2e00      	cmp	r6, #0
 8002fc4:	d05c      	beq.n	8003080 <_strtoul_l.isra.0+0xec>
 8002fc6:	2e10      	cmp	r6, #16
 8002fc8:	d109      	bne.n	8002fde <_strtoul_l.isra.0+0x4a>
 8002fca:	2c30      	cmp	r4, #48	; 0x30
 8002fcc:	d107      	bne.n	8002fde <_strtoul_l.isra.0+0x4a>
 8002fce:	782b      	ldrb	r3, [r5, #0]
 8002fd0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002fd4:	2b58      	cmp	r3, #88	; 0x58
 8002fd6:	d14e      	bne.n	8003076 <_strtoul_l.isra.0+0xe2>
 8002fd8:	2610      	movs	r6, #16
 8002fda:	786c      	ldrb	r4, [r5, #1]
 8002fdc:	3502      	adds	r5, #2
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe2:	fbb2 f2f6 	udiv	r2, r2, r6
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	fb06 fc02 	mul.w	ip, r6, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	ea6f 0c0c 	mvn.w	ip, ip
 8002ff2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002ff6:	2f09      	cmp	r7, #9
 8002ff8:	d817      	bhi.n	800302a <_strtoul_l.isra.0+0x96>
 8002ffa:	463c      	mov	r4, r7
 8002ffc:	42a6      	cmp	r6, r4
 8002ffe:	dd23      	ble.n	8003048 <_strtoul_l.isra.0+0xb4>
 8003000:	2b00      	cmp	r3, #0
 8003002:	db1e      	blt.n	8003042 <_strtoul_l.isra.0+0xae>
 8003004:	4282      	cmp	r2, r0
 8003006:	d31c      	bcc.n	8003042 <_strtoul_l.isra.0+0xae>
 8003008:	d101      	bne.n	800300e <_strtoul_l.isra.0+0x7a>
 800300a:	45a4      	cmp	ip, r4
 800300c:	db19      	blt.n	8003042 <_strtoul_l.isra.0+0xae>
 800300e:	2301      	movs	r3, #1
 8003010:	fb00 4006 	mla	r0, r0, r6, r4
 8003014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003018:	e7eb      	b.n	8002ff2 <_strtoul_l.isra.0+0x5e>
 800301a:	462f      	mov	r7, r5
 800301c:	e7c1      	b.n	8002fa2 <_strtoul_l.isra.0+0xe>
 800301e:	2c2b      	cmp	r4, #43	; 0x2b
 8003020:	bf04      	itt	eq
 8003022:	1cbd      	addeq	r5, r7, #2
 8003024:	787c      	ldrbeq	r4, [r7, #1]
 8003026:	4619      	mov	r1, r3
 8003028:	e7cb      	b.n	8002fc2 <_strtoul_l.isra.0+0x2e>
 800302a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800302e:	2f19      	cmp	r7, #25
 8003030:	d801      	bhi.n	8003036 <_strtoul_l.isra.0+0xa2>
 8003032:	3c37      	subs	r4, #55	; 0x37
 8003034:	e7e2      	b.n	8002ffc <_strtoul_l.isra.0+0x68>
 8003036:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800303a:	2f19      	cmp	r7, #25
 800303c:	d804      	bhi.n	8003048 <_strtoul_l.isra.0+0xb4>
 800303e:	3c57      	subs	r4, #87	; 0x57
 8003040:	e7dc      	b.n	8002ffc <_strtoul_l.isra.0+0x68>
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	e7e5      	b.n	8003014 <_strtoul_l.isra.0+0x80>
 8003048:	2b00      	cmp	r3, #0
 800304a:	da09      	bge.n	8003060 <_strtoul_l.isra.0+0xcc>
 800304c:	2322      	movs	r3, #34	; 0x22
 800304e:	f04f 30ff 	mov.w	r0, #4294967295
 8003052:	f8c8 3000 	str.w	r3, [r8]
 8003056:	f1ba 0f00 	cmp.w	sl, #0
 800305a:	d107      	bne.n	800306c <_strtoul_l.isra.0+0xd8>
 800305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003060:	b101      	cbz	r1, 8003064 <_strtoul_l.isra.0+0xd0>
 8003062:	4240      	negs	r0, r0
 8003064:	f1ba 0f00 	cmp.w	sl, #0
 8003068:	d0f8      	beq.n	800305c <_strtoul_l.isra.0+0xc8>
 800306a:	b10b      	cbz	r3, 8003070 <_strtoul_l.isra.0+0xdc>
 800306c:	f105 39ff 	add.w	r9, r5, #4294967295
 8003070:	f8ca 9000 	str.w	r9, [sl]
 8003074:	e7f2      	b.n	800305c <_strtoul_l.isra.0+0xc8>
 8003076:	2430      	movs	r4, #48	; 0x30
 8003078:	2e00      	cmp	r6, #0
 800307a:	d1b0      	bne.n	8002fde <_strtoul_l.isra.0+0x4a>
 800307c:	2608      	movs	r6, #8
 800307e:	e7ae      	b.n	8002fde <_strtoul_l.isra.0+0x4a>
 8003080:	2c30      	cmp	r4, #48	; 0x30
 8003082:	d0a4      	beq.n	8002fce <_strtoul_l.isra.0+0x3a>
 8003084:	260a      	movs	r6, #10
 8003086:	e7aa      	b.n	8002fde <_strtoul_l.isra.0+0x4a>

08003088 <_strtoul_r>:
 8003088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800308a:	4c06      	ldr	r4, [pc, #24]	; (80030a4 <_strtoul_r+0x1c>)
 800308c:	4d06      	ldr	r5, [pc, #24]	; (80030a8 <_strtoul_r+0x20>)
 800308e:	6824      	ldr	r4, [r4, #0]
 8003090:	6a24      	ldr	r4, [r4, #32]
 8003092:	2c00      	cmp	r4, #0
 8003094:	bf08      	it	eq
 8003096:	462c      	moveq	r4, r5
 8003098:	9400      	str	r4, [sp, #0]
 800309a:	f7ff ff7b 	bl	8002f94 <_strtoul_l.isra.0>
 800309e:	b003      	add	sp, #12
 80030a0:	bd30      	pop	{r4, r5, pc}
 80030a2:	bf00      	nop
 80030a4:	20000010 	.word	0x20000010
 80030a8:	200000d8 	.word	0x200000d8

080030ac <strtoul>:
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <strtoul+0x24>)
 80030ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030b0:	681c      	ldr	r4, [r3, #0]
 80030b2:	4d08      	ldr	r5, [pc, #32]	; (80030d4 <strtoul+0x28>)
 80030b4:	6a23      	ldr	r3, [r4, #32]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf08      	it	eq
 80030ba:	462b      	moveq	r3, r5
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	460a      	mov	r2, r1
 80030c2:	4601      	mov	r1, r0
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff ff65 	bl	8002f94 <_strtoul_l.isra.0>
 80030ca:	b003      	add	sp, #12
 80030cc:	bd30      	pop	{r4, r5, pc}
 80030ce:	bf00      	nop
 80030d0:	20000010 	.word	0x20000010
 80030d4:	200000d8 	.word	0x200000d8

080030d8 <time>:
 80030d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <time+0x30>)
 80030dc:	4604      	mov	r4, r0
 80030de:	2200      	movs	r2, #0
 80030e0:	4669      	mov	r1, sp
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	f000 f9e0 	bl	80034a8 <_gettimeofday_r>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	da05      	bge.n	80030f8 <time+0x20>
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
 80030f4:	e9cd 2300 	strd	r2, r3, [sp]
 80030f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030fc:	b10c      	cbz	r4, 8003102 <time+0x2a>
 80030fe:	e9c4 0100 	strd	r0, r1, [r4]
 8003102:	b004      	add	sp, #16
 8003104:	bd10      	pop	{r4, pc}
 8003106:	bf00      	nop
 8003108:	20000010 	.word	0x20000010

0800310c <__tz_lock>:
 800310c:	4770      	bx	lr

0800310e <__tz_unlock>:
 800310e:	4770      	bx	lr

08003110 <_tzset_unlocked>:
 8003110:	4b01      	ldr	r3, [pc, #4]	; (8003118 <_tzset_unlocked+0x8>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	f000 b802 	b.w	800311c <_tzset_unlocked_r>
 8003118:	20000010 	.word	0x20000010

0800311c <_tzset_unlocked_r>:
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	b08d      	sub	sp, #52	; 0x34
 8003122:	4607      	mov	r7, r0
 8003124:	f000 f9d2 	bl	80034cc <__gettzinfo>
 8003128:	49af      	ldr	r1, [pc, #700]	; (80033e8 <_tzset_unlocked_r+0x2cc>)
 800312a:	4605      	mov	r5, r0
 800312c:	4638      	mov	r0, r7
 800312e:	f000 f9b3 	bl	8003498 <_getenv_r>
 8003132:	4eae      	ldr	r6, [pc, #696]	; (80033ec <_tzset_unlocked_r+0x2d0>)
 8003134:	4604      	mov	r4, r0
 8003136:	b970      	cbnz	r0, 8003156 <_tzset_unlocked_r+0x3a>
 8003138:	4bad      	ldr	r3, [pc, #692]	; (80033f0 <_tzset_unlocked_r+0x2d4>)
 800313a:	4aae      	ldr	r2, [pc, #696]	; (80033f4 <_tzset_unlocked_r+0x2d8>)
 800313c:	6018      	str	r0, [r3, #0]
 800313e:	4bae      	ldr	r3, [pc, #696]	; (80033f8 <_tzset_unlocked_r+0x2dc>)
 8003140:	6018      	str	r0, [r3, #0]
 8003142:	4bae      	ldr	r3, [pc, #696]	; (80033fc <_tzset_unlocked_r+0x2e0>)
 8003144:	6830      	ldr	r0, [r6, #0]
 8003146:	e9c3 2200 	strd	r2, r2, [r3]
 800314a:	f7ff f8e5 	bl	8002318 <free>
 800314e:	6034      	str	r4, [r6, #0]
 8003150:	b00d      	add	sp, #52	; 0x34
 8003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003156:	6831      	ldr	r1, [r6, #0]
 8003158:	2900      	cmp	r1, #0
 800315a:	d15f      	bne.n	800321c <_tzset_unlocked_r+0x100>
 800315c:	6830      	ldr	r0, [r6, #0]
 800315e:	f7ff f8db 	bl	8002318 <free>
 8003162:	4620      	mov	r0, r4
 8003164:	f7fc fff2 	bl	800014c <strlen>
 8003168:	1c41      	adds	r1, r0, #1
 800316a:	4638      	mov	r0, r7
 800316c:	f7ff f930 	bl	80023d0 <_malloc_r>
 8003170:	6030      	str	r0, [r6, #0]
 8003172:	2800      	cmp	r0, #0
 8003174:	d157      	bne.n	8003226 <_tzset_unlocked_r+0x10a>
 8003176:	7823      	ldrb	r3, [r4, #0]
 8003178:	ae0a      	add	r6, sp, #40	; 0x28
 800317a:	2b3a      	cmp	r3, #58	; 0x3a
 800317c:	bf08      	it	eq
 800317e:	3401      	addeq	r4, #1
 8003180:	4633      	mov	r3, r6
 8003182:	4a9f      	ldr	r2, [pc, #636]	; (8003400 <_tzset_unlocked_r+0x2e4>)
 8003184:	499f      	ldr	r1, [pc, #636]	; (8003404 <_tzset_unlocked_r+0x2e8>)
 8003186:	4620      	mov	r0, r4
 8003188:	f000 fcdc 	bl	8003b44 <siscanf>
 800318c:	2800      	cmp	r0, #0
 800318e:	dddf      	ble.n	8003150 <_tzset_unlocked_r+0x34>
 8003190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003192:	18e7      	adds	r7, r4, r3
 8003194:	5ce3      	ldrb	r3, [r4, r3]
 8003196:	2b2d      	cmp	r3, #45	; 0x2d
 8003198:	d149      	bne.n	800322e <_tzset_unlocked_r+0x112>
 800319a:	f04f 34ff 	mov.w	r4, #4294967295
 800319e:	3701      	adds	r7, #1
 80031a0:	f04f 0800 	mov.w	r8, #0
 80031a4:	f10d 0a20 	add.w	sl, sp, #32
 80031a8:	f10d 0b1e 	add.w	fp, sp, #30
 80031ac:	9603      	str	r6, [sp, #12]
 80031ae:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80031b2:	f8cd b000 	str.w	fp, [sp]
 80031b6:	4633      	mov	r3, r6
 80031b8:	aa07      	add	r2, sp, #28
 80031ba:	4993      	ldr	r1, [pc, #588]	; (8003408 <_tzset_unlocked_r+0x2ec>)
 80031bc:	4638      	mov	r0, r7
 80031be:	f8ad 801e 	strh.w	r8, [sp, #30]
 80031c2:	f8ad 8020 	strh.w	r8, [sp, #32]
 80031c6:	f000 fcbd 	bl	8003b44 <siscanf>
 80031ca:	4540      	cmp	r0, r8
 80031cc:	ddc0      	ble.n	8003150 <_tzset_unlocked_r+0x34>
 80031ce:	213c      	movs	r1, #60	; 0x3c
 80031d0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80031d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80031d8:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8003414 <_tzset_unlocked_r+0x2f8>
 80031dc:	fb01 2203 	mla	r2, r1, r3, r2
 80031e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80031e4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80031e8:	fb01 2303 	mla	r3, r1, r3, r2
 80031ec:	435c      	muls	r4, r3
 80031ee:	4b84      	ldr	r3, [pc, #528]	; (8003400 <_tzset_unlocked_r+0x2e4>)
 80031f0:	62ac      	str	r4, [r5, #40]	; 0x28
 80031f2:	4c82      	ldr	r4, [pc, #520]	; (80033fc <_tzset_unlocked_r+0x2e0>)
 80031f4:	464a      	mov	r2, r9
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031fa:	4982      	ldr	r1, [pc, #520]	; (8003404 <_tzset_unlocked_r+0x2e8>)
 80031fc:	441f      	add	r7, r3
 80031fe:	4638      	mov	r0, r7
 8003200:	4633      	mov	r3, r6
 8003202:	f000 fc9f 	bl	8003b44 <siscanf>
 8003206:	4540      	cmp	r0, r8
 8003208:	dc16      	bgt.n	8003238 <_tzset_unlocked_r+0x11c>
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	4b77      	ldr	r3, [pc, #476]	; (80033f0 <_tzset_unlocked_r+0x2d4>)
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	4b78      	ldr	r3, [pc, #480]	; (80033f8 <_tzset_unlocked_r+0x2dc>)
 8003216:	f8c3 8000 	str.w	r8, [r3]
 800321a:	e799      	b.n	8003150 <_tzset_unlocked_r+0x34>
 800321c:	f7fc ff9e 	bl	800015c <strcmp>
 8003220:	2800      	cmp	r0, #0
 8003222:	d095      	beq.n	8003150 <_tzset_unlocked_r+0x34>
 8003224:	e79a      	b.n	800315c <_tzset_unlocked_r+0x40>
 8003226:	4621      	mov	r1, r4
 8003228:	f000 fcb8 	bl	8003b9c <strcpy>
 800322c:	e7a3      	b.n	8003176 <_tzset_unlocked_r+0x5a>
 800322e:	2b2b      	cmp	r3, #43	; 0x2b
 8003230:	bf08      	it	eq
 8003232:	3701      	addeq	r7, #1
 8003234:	2401      	movs	r4, #1
 8003236:	e7b3      	b.n	80031a0 <_tzset_unlocked_r+0x84>
 8003238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800323a:	f8c4 9004 	str.w	r9, [r4, #4]
 800323e:	18fc      	adds	r4, r7, r3
 8003240:	5cfb      	ldrb	r3, [r7, r3]
 8003242:	2b2d      	cmp	r3, #45	; 0x2d
 8003244:	f040 808c 	bne.w	8003360 <_tzset_unlocked_r+0x244>
 8003248:	f04f 37ff 	mov.w	r7, #4294967295
 800324c:	3401      	adds	r4, #1
 800324e:	2300      	movs	r3, #0
 8003250:	e9cd a602 	strd	sl, r6, [sp, #8]
 8003254:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003258:	f8ad 301e 	strh.w	r3, [sp, #30]
 800325c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003260:	930a      	str	r3, [sp, #40]	; 0x28
 8003262:	e9cd b600 	strd	fp, r6, [sp]
 8003266:	4633      	mov	r3, r6
 8003268:	aa07      	add	r2, sp, #28
 800326a:	4967      	ldr	r1, [pc, #412]	; (8003408 <_tzset_unlocked_r+0x2ec>)
 800326c:	4620      	mov	r0, r4
 800326e:	f000 fc69 	bl	8003b44 <siscanf>
 8003272:	2800      	cmp	r0, #0
 8003274:	dc79      	bgt.n	800336a <_tzset_unlocked_r+0x24e>
 8003276:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003278:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800327c:	652b      	str	r3, [r5, #80]	; 0x50
 800327e:	462f      	mov	r7, r5
 8003280:	f04f 0900 	mov.w	r9, #0
 8003284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003286:	441c      	add	r4, r3
 8003288:	7823      	ldrb	r3, [r4, #0]
 800328a:	2b2c      	cmp	r3, #44	; 0x2c
 800328c:	bf08      	it	eq
 800328e:	3401      	addeq	r4, #1
 8003290:	f894 8000 	ldrb.w	r8, [r4]
 8003294:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8003298:	d17a      	bne.n	8003390 <_tzset_unlocked_r+0x274>
 800329a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800329e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80032a2:	ab09      	add	r3, sp, #36	; 0x24
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	9603      	str	r6, [sp, #12]
 80032a8:	4633      	mov	r3, r6
 80032aa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80032ae:	4957      	ldr	r1, [pc, #348]	; (800340c <_tzset_unlocked_r+0x2f0>)
 80032b0:	4620      	mov	r0, r4
 80032b2:	f000 fc47 	bl	8003b44 <siscanf>
 80032b6:	2803      	cmp	r0, #3
 80032b8:	f47f af4a 	bne.w	8003150 <_tzset_unlocked_r+0x34>
 80032bc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80032c0:	1e4b      	subs	r3, r1, #1
 80032c2:	2b0b      	cmp	r3, #11
 80032c4:	f63f af44 	bhi.w	8003150 <_tzset_unlocked_r+0x34>
 80032c8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80032cc:	1e53      	subs	r3, r2, #1
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	f63f af3e 	bhi.w	8003150 <_tzset_unlocked_r+0x34>
 80032d4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80032d8:	2b06      	cmp	r3, #6
 80032da:	f63f af39 	bhi.w	8003150 <_tzset_unlocked_r+0x34>
 80032de:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80032e2:	f887 8008 	strb.w	r8, [r7, #8]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ea:	eb04 0803 	add.w	r8, r4, r3
 80032ee:	2302      	movs	r3, #2
 80032f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80032fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80032fe:	930a      	str	r3, [sp, #40]	; 0x28
 8003300:	f898 3000 	ldrb.w	r3, [r8]
 8003304:	2b2f      	cmp	r3, #47	; 0x2f
 8003306:	d109      	bne.n	800331c <_tzset_unlocked_r+0x200>
 8003308:	e9cd a602 	strd	sl, r6, [sp, #8]
 800330c:	e9cd b600 	strd	fp, r6, [sp]
 8003310:	4633      	mov	r3, r6
 8003312:	aa07      	add	r2, sp, #28
 8003314:	493e      	ldr	r1, [pc, #248]	; (8003410 <_tzset_unlocked_r+0x2f4>)
 8003316:	4640      	mov	r0, r8
 8003318:	f000 fc14 	bl	8003b44 <siscanf>
 800331c:	213c      	movs	r1, #60	; 0x3c
 800331e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003322:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	fb01 2203 	mla	r2, r1, r3, r2
 800332c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003330:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003334:	fb01 2303 	mla	r3, r1, r3, r2
 8003338:	f847 3c10 	str.w	r3, [r7, #-16]
 800333c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800333e:	4444      	add	r4, r8
 8003340:	f1b9 0f00 	cmp.w	r9, #0
 8003344:	d021      	beq.n	800338a <_tzset_unlocked_r+0x26e>
 8003346:	6868      	ldr	r0, [r5, #4]
 8003348:	f000 fc42 	bl	8003bd0 <__tzcalc_limits>
 800334c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <_tzset_unlocked_r+0x2d4>)
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	bf18      	it	ne
 8003358:	2301      	movne	r3, #1
 800335a:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <_tzset_unlocked_r+0x2dc>)
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e6f7      	b.n	8003150 <_tzset_unlocked_r+0x34>
 8003360:	2b2b      	cmp	r3, #43	; 0x2b
 8003362:	bf08      	it	eq
 8003364:	3401      	addeq	r4, #1
 8003366:	2701      	movs	r7, #1
 8003368:	e771      	b.n	800324e <_tzset_unlocked_r+0x132>
 800336a:	213c      	movs	r1, #60	; 0x3c
 800336c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003370:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003374:	fb01 2203 	mla	r2, r1, r3, r2
 8003378:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800337c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003380:	fb01 2303 	mla	r3, r1, r3, r2
 8003384:	435f      	muls	r7, r3
 8003386:	652f      	str	r7, [r5, #80]	; 0x50
 8003388:	e779      	b.n	800327e <_tzset_unlocked_r+0x162>
 800338a:	f04f 0901 	mov.w	r9, #1
 800338e:	e77b      	b.n	8003288 <_tzset_unlocked_r+0x16c>
 8003390:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8003394:	bf0a      	itet	eq
 8003396:	4643      	moveq	r3, r8
 8003398:	2344      	movne	r3, #68	; 0x44
 800339a:	3401      	addeq	r4, #1
 800339c:	220a      	movs	r2, #10
 800339e:	a90b      	add	r1, sp, #44	; 0x2c
 80033a0:	4620      	mov	r0, r4
 80033a2:	9305      	str	r3, [sp, #20]
 80033a4:	f7ff fe82 	bl	80030ac <strtoul>
 80033a8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80033ac:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80033b0:	45a0      	cmp	r8, r4
 80033b2:	9b05      	ldr	r3, [sp, #20]
 80033b4:	d114      	bne.n	80033e0 <_tzset_unlocked_r+0x2c4>
 80033b6:	234d      	movs	r3, #77	; 0x4d
 80033b8:	f1b9 0f00 	cmp.w	r9, #0
 80033bc:	d107      	bne.n	80033ce <_tzset_unlocked_r+0x2b2>
 80033be:	722b      	strb	r3, [r5, #8]
 80033c0:	2103      	movs	r1, #3
 80033c2:	2302      	movs	r3, #2
 80033c4:	f8c5 9014 	str.w	r9, [r5, #20]
 80033c8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80033cc:	e78f      	b.n	80032ee <_tzset_unlocked_r+0x1d2>
 80033ce:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80033d2:	220b      	movs	r2, #11
 80033d4:	2301      	movs	r3, #1
 80033d6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80033da:	2300      	movs	r3, #0
 80033dc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80033de:	e786      	b.n	80032ee <_tzset_unlocked_r+0x1d2>
 80033e0:	b280      	uxth	r0, r0
 80033e2:	723b      	strb	r3, [r7, #8]
 80033e4:	6178      	str	r0, [r7, #20]
 80033e6:	e782      	b.n	80032ee <_tzset_unlocked_r+0x1d2>
 80033e8:	08004903 	.word	0x08004903
 80033ec:	2000028c 	.word	0x2000028c
 80033f0:	20000294 	.word	0x20000294
 80033f4:	08004906 	.word	0x08004906
 80033f8:	20000290 	.word	0x20000290
 80033fc:	20000074 	.word	0x20000074
 8003400:	2000027f 	.word	0x2000027f
 8003404:	0800490a 	.word	0x0800490a
 8003408:	0800492d 	.word	0x0800492d
 800340c:	08004919 	.word	0x08004919
 8003410:	0800492c 	.word	0x0800492c
 8003414:	20000274 	.word	0x20000274

08003418 <abs>:
 8003418:	2800      	cmp	r0, #0
 800341a:	bfb8      	it	lt
 800341c:	4240      	neglt	r0, r0
 800341e:	4770      	bx	lr

08003420 <_findenv_r>:
 8003420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	4607      	mov	r7, r0
 8003426:	468b      	mov	fp, r1
 8003428:	4690      	mov	r8, r2
 800342a:	f000 fc86 	bl	8003d3a <__env_lock>
 800342e:	4b19      	ldr	r3, [pc, #100]	; (8003494 <_findenv_r+0x74>)
 8003430:	681d      	ldr	r5, [r3, #0]
 8003432:	469a      	mov	sl, r3
 8003434:	b13d      	cbz	r5, 8003446 <_findenv_r+0x26>
 8003436:	465c      	mov	r4, fp
 8003438:	4623      	mov	r3, r4
 800343a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800343e:	b32a      	cbz	r2, 800348c <_findenv_r+0x6c>
 8003440:	2a3d      	cmp	r2, #61	; 0x3d
 8003442:	461c      	mov	r4, r3
 8003444:	d1f8      	bne.n	8003438 <_findenv_r+0x18>
 8003446:	4638      	mov	r0, r7
 8003448:	f000 fc78 	bl	8003d3c <__env_unlock>
 800344c:	2000      	movs	r0, #0
 800344e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003452:	464d      	mov	r5, r9
 8003454:	46a9      	mov	r9, r5
 8003456:	f859 0b04 	ldr.w	r0, [r9], #4
 800345a:	2800      	cmp	r0, #0
 800345c:	d0f3      	beq.n	8003446 <_findenv_r+0x26>
 800345e:	4622      	mov	r2, r4
 8003460:	4659      	mov	r1, fp
 8003462:	f000 fba3 	bl	8003bac <strncmp>
 8003466:	2800      	cmp	r0, #0
 8003468:	d1f3      	bne.n	8003452 <_findenv_r+0x32>
 800346a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800346e:	191e      	adds	r6, r3, r4
 8003470:	5d1b      	ldrb	r3, [r3, r4]
 8003472:	2b3d      	cmp	r3, #61	; 0x3d
 8003474:	d1ed      	bne.n	8003452 <_findenv_r+0x32>
 8003476:	f8da 3000 	ldr.w	r3, [sl]
 800347a:	4638      	mov	r0, r7
 800347c:	1aed      	subs	r5, r5, r3
 800347e:	10ad      	asrs	r5, r5, #2
 8003480:	f8c8 5000 	str.w	r5, [r8]
 8003484:	f000 fc5a 	bl	8003d3c <__env_unlock>
 8003488:	1c70      	adds	r0, r6, #1
 800348a:	e7e0      	b.n	800344e <_findenv_r+0x2e>
 800348c:	eba4 040b 	sub.w	r4, r4, fp
 8003490:	e7e0      	b.n	8003454 <_findenv_r+0x34>
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <_getenv_r>:
 8003498:	b507      	push	{r0, r1, r2, lr}
 800349a:	aa01      	add	r2, sp, #4
 800349c:	f7ff ffc0 	bl	8003420 <_findenv_r>
 80034a0:	b003      	add	sp, #12
 80034a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080034a8 <_gettimeofday_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	2300      	movs	r3, #0
 80034ac:	4c06      	ldr	r4, [pc, #24]	; (80034c8 <_gettimeofday_r+0x20>)
 80034ae:	4605      	mov	r5, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	f001 f89b 	bl	80045f0 <_gettimeofday>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	d102      	bne.n	80034c4 <_gettimeofday_r+0x1c>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	b103      	cbz	r3, 80034c4 <_gettimeofday_r+0x1c>
 80034c2:	602b      	str	r3, [r5, #0]
 80034c4:	bd38      	pop	{r3, r4, r5, pc}
 80034c6:	bf00      	nop
 80034c8:	200002cc 	.word	0x200002cc

080034cc <__gettzinfo>:
 80034cc:	4800      	ldr	r0, [pc, #0]	; (80034d0 <__gettzinfo+0x4>)
 80034ce:	4770      	bx	lr
 80034d0:	20000080 	.word	0x20000080

080034d4 <labs>:
 80034d4:	2800      	cmp	r0, #0
 80034d6:	bfb8      	it	lt
 80034d8:	4240      	neglt	r0, r0
 80034da:	4770      	bx	lr

080034dc <__locale_ctype_ptr_l>:
 80034dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80034e0:	4770      	bx	lr
	...

080034e4 <__locale_ctype_ptr>:
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__locale_ctype_ptr+0x14>)
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <__locale_ctype_ptr+0x18>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf08      	it	eq
 80034f0:	4613      	moveq	r3, r2
 80034f2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80034f6:	4770      	bx	lr
 80034f8:	20000010 	.word	0x20000010
 80034fc:	200000d8 	.word	0x200000d8

08003500 <__ascii_mbtowc>:
 8003500:	b082      	sub	sp, #8
 8003502:	b901      	cbnz	r1, 8003506 <__ascii_mbtowc+0x6>
 8003504:	a901      	add	r1, sp, #4
 8003506:	b142      	cbz	r2, 800351a <__ascii_mbtowc+0x1a>
 8003508:	b14b      	cbz	r3, 800351e <__ascii_mbtowc+0x1e>
 800350a:	7813      	ldrb	r3, [r2, #0]
 800350c:	600b      	str	r3, [r1, #0]
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	1c10      	adds	r0, r2, #0
 8003512:	bf18      	it	ne
 8003514:	2001      	movne	r0, #1
 8003516:	b002      	add	sp, #8
 8003518:	4770      	bx	lr
 800351a:	4610      	mov	r0, r2
 800351c:	e7fb      	b.n	8003516 <__ascii_mbtowc+0x16>
 800351e:	f06f 0001 	mvn.w	r0, #1
 8003522:	e7f8      	b.n	8003516 <__ascii_mbtowc+0x16>

08003524 <__malloc_lock>:
 8003524:	4770      	bx	lr

08003526 <__malloc_unlock>:
 8003526:	4770      	bx	lr

08003528 <__ssputs_r>:
 8003528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	688e      	ldr	r6, [r1, #8]
 800352e:	4682      	mov	sl, r0
 8003530:	429e      	cmp	r6, r3
 8003532:	460c      	mov	r4, r1
 8003534:	4690      	mov	r8, r2
 8003536:	4699      	mov	r9, r3
 8003538:	d837      	bhi.n	80035aa <__ssputs_r+0x82>
 800353a:	898a      	ldrh	r2, [r1, #12]
 800353c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003540:	d031      	beq.n	80035a6 <__ssputs_r+0x7e>
 8003542:	2302      	movs	r3, #2
 8003544:	6825      	ldr	r5, [r4, #0]
 8003546:	6909      	ldr	r1, [r1, #16]
 8003548:	1a6f      	subs	r7, r5, r1
 800354a:	6965      	ldr	r5, [r4, #20]
 800354c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003550:	fb95 f5f3 	sdiv	r5, r5, r3
 8003554:	f109 0301 	add.w	r3, r9, #1
 8003558:	443b      	add	r3, r7
 800355a:	429d      	cmp	r5, r3
 800355c:	bf38      	it	cc
 800355e:	461d      	movcc	r5, r3
 8003560:	0553      	lsls	r3, r2, #21
 8003562:	d530      	bpl.n	80035c6 <__ssputs_r+0x9e>
 8003564:	4629      	mov	r1, r5
 8003566:	f7fe ff33 	bl	80023d0 <_malloc_r>
 800356a:	4606      	mov	r6, r0
 800356c:	b950      	cbnz	r0, 8003584 <__ssputs_r+0x5c>
 800356e:	230c      	movs	r3, #12
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f8ca 3000 	str.w	r3, [sl]
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357e:	81a3      	strh	r3, [r4, #12]
 8003580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003584:	463a      	mov	r2, r7
 8003586:	6921      	ldr	r1, [r4, #16]
 8003588:	f000 fbe7 	bl	8003d5a <memcpy>
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	6126      	str	r6, [r4, #16]
 800359a:	443e      	add	r6, r7
 800359c:	6026      	str	r6, [r4, #0]
 800359e:	464e      	mov	r6, r9
 80035a0:	6165      	str	r5, [r4, #20]
 80035a2:	1bed      	subs	r5, r5, r7
 80035a4:	60a5      	str	r5, [r4, #8]
 80035a6:	454e      	cmp	r6, r9
 80035a8:	d900      	bls.n	80035ac <__ssputs_r+0x84>
 80035aa:	464e      	mov	r6, r9
 80035ac:	4632      	mov	r2, r6
 80035ae:	4641      	mov	r1, r8
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	f000 fbdd 	bl	8003d70 <memmove>
 80035b6:	68a3      	ldr	r3, [r4, #8]
 80035b8:	2000      	movs	r0, #0
 80035ba:	1b9b      	subs	r3, r3, r6
 80035bc:	60a3      	str	r3, [r4, #8]
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	441e      	add	r6, r3
 80035c2:	6026      	str	r6, [r4, #0]
 80035c4:	e7dc      	b.n	8003580 <__ssputs_r+0x58>
 80035c6:	462a      	mov	r2, r5
 80035c8:	f000 fbeb 	bl	8003da2 <_realloc_r>
 80035cc:	4606      	mov	r6, r0
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d1e2      	bne.n	8003598 <__ssputs_r+0x70>
 80035d2:	6921      	ldr	r1, [r4, #16]
 80035d4:	4650      	mov	r0, sl
 80035d6:	f7fe feaf 	bl	8002338 <_free_r>
 80035da:	e7c8      	b.n	800356e <__ssputs_r+0x46>

080035dc <_svfiprintf_r>:
 80035dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e0:	461d      	mov	r5, r3
 80035e2:	898b      	ldrh	r3, [r1, #12]
 80035e4:	b09d      	sub	sp, #116	; 0x74
 80035e6:	061f      	lsls	r7, r3, #24
 80035e8:	4680      	mov	r8, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	4616      	mov	r6, r2
 80035ee:	d50f      	bpl.n	8003610 <_svfiprintf_r+0x34>
 80035f0:	690b      	ldr	r3, [r1, #16]
 80035f2:	b96b      	cbnz	r3, 8003610 <_svfiprintf_r+0x34>
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	f7fe feeb 	bl	80023d0 <_malloc_r>
 80035fa:	6020      	str	r0, [r4, #0]
 80035fc:	6120      	str	r0, [r4, #16]
 80035fe:	b928      	cbnz	r0, 800360c <_svfiprintf_r+0x30>
 8003600:	230c      	movs	r3, #12
 8003602:	f8c8 3000 	str.w	r3, [r8]
 8003606:	f04f 30ff 	mov.w	r0, #4294967295
 800360a:	e0c8      	b.n	800379e <_svfiprintf_r+0x1c2>
 800360c:	2340      	movs	r3, #64	; 0x40
 800360e:	6163      	str	r3, [r4, #20]
 8003610:	2300      	movs	r3, #0
 8003612:	9309      	str	r3, [sp, #36]	; 0x24
 8003614:	2320      	movs	r3, #32
 8003616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800361a:	2330      	movs	r3, #48	; 0x30
 800361c:	f04f 0b01 	mov.w	fp, #1
 8003620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003624:	9503      	str	r5, [sp, #12]
 8003626:	4637      	mov	r7, r6
 8003628:	463d      	mov	r5, r7
 800362a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800362e:	b10b      	cbz	r3, 8003634 <_svfiprintf_r+0x58>
 8003630:	2b25      	cmp	r3, #37	; 0x25
 8003632:	d13e      	bne.n	80036b2 <_svfiprintf_r+0xd6>
 8003634:	ebb7 0a06 	subs.w	sl, r7, r6
 8003638:	d00b      	beq.n	8003652 <_svfiprintf_r+0x76>
 800363a:	4653      	mov	r3, sl
 800363c:	4632      	mov	r2, r6
 800363e:	4621      	mov	r1, r4
 8003640:	4640      	mov	r0, r8
 8003642:	f7ff ff71 	bl	8003528 <__ssputs_r>
 8003646:	3001      	adds	r0, #1
 8003648:	f000 80a4 	beq.w	8003794 <_svfiprintf_r+0x1b8>
 800364c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800364e:	4453      	add	r3, sl
 8003650:	9309      	str	r3, [sp, #36]	; 0x24
 8003652:	783b      	ldrb	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 809d 	beq.w	8003794 <_svfiprintf_r+0x1b8>
 800365a:	2300      	movs	r3, #0
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003664:	9304      	str	r3, [sp, #16]
 8003666:	9307      	str	r3, [sp, #28]
 8003668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800366c:	931a      	str	r3, [sp, #104]	; 0x68
 800366e:	462f      	mov	r7, r5
 8003670:	2205      	movs	r2, #5
 8003672:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003676:	4850      	ldr	r0, [pc, #320]	; (80037b8 <_svfiprintf_r+0x1dc>)
 8003678:	f000 fb61 	bl	8003d3e <memchr>
 800367c:	9b04      	ldr	r3, [sp, #16]
 800367e:	b9d0      	cbnz	r0, 80036b6 <_svfiprintf_r+0xda>
 8003680:	06d9      	lsls	r1, r3, #27
 8003682:	bf44      	itt	mi
 8003684:	2220      	movmi	r2, #32
 8003686:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800368a:	071a      	lsls	r2, r3, #28
 800368c:	bf44      	itt	mi
 800368e:	222b      	movmi	r2, #43	; 0x2b
 8003690:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003694:	782a      	ldrb	r2, [r5, #0]
 8003696:	2a2a      	cmp	r2, #42	; 0x2a
 8003698:	d015      	beq.n	80036c6 <_svfiprintf_r+0xea>
 800369a:	462f      	mov	r7, r5
 800369c:	2000      	movs	r0, #0
 800369e:	250a      	movs	r5, #10
 80036a0:	9a07      	ldr	r2, [sp, #28]
 80036a2:	4639      	mov	r1, r7
 80036a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036a8:	3b30      	subs	r3, #48	; 0x30
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	d94d      	bls.n	800374a <_svfiprintf_r+0x16e>
 80036ae:	b1b8      	cbz	r0, 80036e0 <_svfiprintf_r+0x104>
 80036b0:	e00f      	b.n	80036d2 <_svfiprintf_r+0xf6>
 80036b2:	462f      	mov	r7, r5
 80036b4:	e7b8      	b.n	8003628 <_svfiprintf_r+0x4c>
 80036b6:	4a40      	ldr	r2, [pc, #256]	; (80037b8 <_svfiprintf_r+0x1dc>)
 80036b8:	463d      	mov	r5, r7
 80036ba:	1a80      	subs	r0, r0, r2
 80036bc:	fa0b f000 	lsl.w	r0, fp, r0
 80036c0:	4318      	orrs	r0, r3
 80036c2:	9004      	str	r0, [sp, #16]
 80036c4:	e7d3      	b.n	800366e <_svfiprintf_r+0x92>
 80036c6:	9a03      	ldr	r2, [sp, #12]
 80036c8:	1d11      	adds	r1, r2, #4
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	9103      	str	r1, [sp, #12]
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	db01      	blt.n	80036d6 <_svfiprintf_r+0xfa>
 80036d2:	9207      	str	r2, [sp, #28]
 80036d4:	e004      	b.n	80036e0 <_svfiprintf_r+0x104>
 80036d6:	4252      	negs	r2, r2
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	9207      	str	r2, [sp, #28]
 80036de:	9304      	str	r3, [sp, #16]
 80036e0:	783b      	ldrb	r3, [r7, #0]
 80036e2:	2b2e      	cmp	r3, #46	; 0x2e
 80036e4:	d10c      	bne.n	8003700 <_svfiprintf_r+0x124>
 80036e6:	787b      	ldrb	r3, [r7, #1]
 80036e8:	2b2a      	cmp	r3, #42	; 0x2a
 80036ea:	d133      	bne.n	8003754 <_svfiprintf_r+0x178>
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	3702      	adds	r7, #2
 80036f0:	1d1a      	adds	r2, r3, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	9203      	str	r2, [sp, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bfb8      	it	lt
 80036fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	4d2e      	ldr	r5, [pc, #184]	; (80037bc <_svfiprintf_r+0x1e0>)
 8003702:	2203      	movs	r2, #3
 8003704:	7839      	ldrb	r1, [r7, #0]
 8003706:	4628      	mov	r0, r5
 8003708:	f000 fb19 	bl	8003d3e <memchr>
 800370c:	b138      	cbz	r0, 800371e <_svfiprintf_r+0x142>
 800370e:	2340      	movs	r3, #64	; 0x40
 8003710:	1b40      	subs	r0, r0, r5
 8003712:	fa03 f000 	lsl.w	r0, r3, r0
 8003716:	9b04      	ldr	r3, [sp, #16]
 8003718:	3701      	adds	r7, #1
 800371a:	4303      	orrs	r3, r0
 800371c:	9304      	str	r3, [sp, #16]
 800371e:	7839      	ldrb	r1, [r7, #0]
 8003720:	2206      	movs	r2, #6
 8003722:	4827      	ldr	r0, [pc, #156]	; (80037c0 <_svfiprintf_r+0x1e4>)
 8003724:	1c7e      	adds	r6, r7, #1
 8003726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800372a:	f000 fb08 	bl	8003d3e <memchr>
 800372e:	2800      	cmp	r0, #0
 8003730:	d038      	beq.n	80037a4 <_svfiprintf_r+0x1c8>
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <_svfiprintf_r+0x1e8>)
 8003734:	bb13      	cbnz	r3, 800377c <_svfiprintf_r+0x1a0>
 8003736:	9b03      	ldr	r3, [sp, #12]
 8003738:	3307      	adds	r3, #7
 800373a:	f023 0307 	bic.w	r3, r3, #7
 800373e:	3308      	adds	r3, #8
 8003740:	9303      	str	r3, [sp, #12]
 8003742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003744:	444b      	add	r3, r9
 8003746:	9309      	str	r3, [sp, #36]	; 0x24
 8003748:	e76d      	b.n	8003626 <_svfiprintf_r+0x4a>
 800374a:	fb05 3202 	mla	r2, r5, r2, r3
 800374e:	2001      	movs	r0, #1
 8003750:	460f      	mov	r7, r1
 8003752:	e7a6      	b.n	80036a2 <_svfiprintf_r+0xc6>
 8003754:	2300      	movs	r3, #0
 8003756:	250a      	movs	r5, #10
 8003758:	4619      	mov	r1, r3
 800375a:	3701      	adds	r7, #1
 800375c:	9305      	str	r3, [sp, #20]
 800375e:	4638      	mov	r0, r7
 8003760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003764:	3a30      	subs	r2, #48	; 0x30
 8003766:	2a09      	cmp	r2, #9
 8003768:	d903      	bls.n	8003772 <_svfiprintf_r+0x196>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0c8      	beq.n	8003700 <_svfiprintf_r+0x124>
 800376e:	9105      	str	r1, [sp, #20]
 8003770:	e7c6      	b.n	8003700 <_svfiprintf_r+0x124>
 8003772:	fb05 2101 	mla	r1, r5, r1, r2
 8003776:	2301      	movs	r3, #1
 8003778:	4607      	mov	r7, r0
 800377a:	e7f0      	b.n	800375e <_svfiprintf_r+0x182>
 800377c:	ab03      	add	r3, sp, #12
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4622      	mov	r2, r4
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <_svfiprintf_r+0x1ec>)
 8003784:	a904      	add	r1, sp, #16
 8003786:	4640      	mov	r0, r8
 8003788:	f3af 8000 	nop.w
 800378c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003790:	4681      	mov	r9, r0
 8003792:	d1d6      	bne.n	8003742 <_svfiprintf_r+0x166>
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	065b      	lsls	r3, r3, #25
 8003798:	f53f af35 	bmi.w	8003606 <_svfiprintf_r+0x2a>
 800379c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800379e:	b01d      	add	sp, #116	; 0x74
 80037a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a4:	ab03      	add	r3, sp, #12
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	4622      	mov	r2, r4
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <_svfiprintf_r+0x1ec>)
 80037ac:	a904      	add	r1, sp, #16
 80037ae:	4640      	mov	r0, r8
 80037b0:	f000 f882 	bl	80038b8 <_printf_i>
 80037b4:	e7ea      	b.n	800378c <_svfiprintf_r+0x1b0>
 80037b6:	bf00      	nop
 80037b8:	08004949 	.word	0x08004949
 80037bc:	0800494f 	.word	0x0800494f
 80037c0:	08004953 	.word	0x08004953
 80037c4:	00000000 	.word	0x00000000
 80037c8:	08003529 	.word	0x08003529

080037cc <_printf_common>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	4691      	mov	r9, r2
 80037d2:	461f      	mov	r7, r3
 80037d4:	688a      	ldr	r2, [r1, #8]
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	4606      	mov	r6, r0
 80037da:	4293      	cmp	r3, r2
 80037dc:	bfb8      	it	lt
 80037de:	4613      	movlt	r3, r2
 80037e0:	f8c9 3000 	str.w	r3, [r9]
 80037e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037e8:	460c      	mov	r4, r1
 80037ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037ee:	b112      	cbz	r2, 80037f6 <_printf_common+0x2a>
 80037f0:	3301      	adds	r3, #1
 80037f2:	f8c9 3000 	str.w	r3, [r9]
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	0699      	lsls	r1, r3, #26
 80037fa:	bf42      	ittt	mi
 80037fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003800:	3302      	addmi	r3, #2
 8003802:	f8c9 3000 	strmi.w	r3, [r9]
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	f015 0506 	ands.w	r5, r5, #6
 800380c:	d107      	bne.n	800381e <_printf_common+0x52>
 800380e:	f104 0a19 	add.w	sl, r4, #25
 8003812:	68e3      	ldr	r3, [r4, #12]
 8003814:	f8d9 2000 	ldr.w	r2, [r9]
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	42ab      	cmp	r3, r5
 800381c:	dc29      	bgt.n	8003872 <_printf_common+0xa6>
 800381e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	3300      	adds	r3, #0
 8003826:	bf18      	it	ne
 8003828:	2301      	movne	r3, #1
 800382a:	0692      	lsls	r2, r2, #26
 800382c:	d42e      	bmi.n	800388c <_printf_common+0xc0>
 800382e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003832:	4639      	mov	r1, r7
 8003834:	4630      	mov	r0, r6
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d021      	beq.n	8003880 <_printf_common+0xb4>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	68e5      	ldr	r5, [r4, #12]
 8003840:	f003 0306 	and.w	r3, r3, #6
 8003844:	2b04      	cmp	r3, #4
 8003846:	bf18      	it	ne
 8003848:	2500      	movne	r5, #0
 800384a:	f8d9 2000 	ldr.w	r2, [r9]
 800384e:	f04f 0900 	mov.w	r9, #0
 8003852:	bf08      	it	eq
 8003854:	1aad      	subeq	r5, r5, r2
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	6922      	ldr	r2, [r4, #16]
 800385a:	bf08      	it	eq
 800385c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003860:	4293      	cmp	r3, r2
 8003862:	bfc4      	itt	gt
 8003864:	1a9b      	subgt	r3, r3, r2
 8003866:	18ed      	addgt	r5, r5, r3
 8003868:	341a      	adds	r4, #26
 800386a:	454d      	cmp	r5, r9
 800386c:	d11a      	bne.n	80038a4 <_printf_common+0xd8>
 800386e:	2000      	movs	r0, #0
 8003870:	e008      	b.n	8003884 <_printf_common+0xb8>
 8003872:	2301      	movs	r3, #1
 8003874:	4652      	mov	r2, sl
 8003876:	4639      	mov	r1, r7
 8003878:	4630      	mov	r0, r6
 800387a:	47c0      	blx	r8
 800387c:	3001      	adds	r0, #1
 800387e:	d103      	bne.n	8003888 <_printf_common+0xbc>
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003888:	3501      	adds	r5, #1
 800388a:	e7c2      	b.n	8003812 <_printf_common+0x46>
 800388c:	2030      	movs	r0, #48	; 0x30
 800388e:	18e1      	adds	r1, r4, r3
 8003890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800389a:	4422      	add	r2, r4
 800389c:	3302      	adds	r3, #2
 800389e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038a2:	e7c4      	b.n	800382e <_printf_common+0x62>
 80038a4:	2301      	movs	r3, #1
 80038a6:	4622      	mov	r2, r4
 80038a8:	4639      	mov	r1, r7
 80038aa:	4630      	mov	r0, r6
 80038ac:	47c0      	blx	r8
 80038ae:	3001      	adds	r0, #1
 80038b0:	d0e6      	beq.n	8003880 <_printf_common+0xb4>
 80038b2:	f109 0901 	add.w	r9, r9, #1
 80038b6:	e7d8      	b.n	800386a <_printf_common+0x9e>

080038b8 <_printf_i>:
 80038b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038c0:	460c      	mov	r4, r1
 80038c2:	7e09      	ldrb	r1, [r1, #24]
 80038c4:	b085      	sub	sp, #20
 80038c6:	296e      	cmp	r1, #110	; 0x6e
 80038c8:	4617      	mov	r7, r2
 80038ca:	4606      	mov	r6, r0
 80038cc:	4698      	mov	r8, r3
 80038ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038d0:	f000 80b3 	beq.w	8003a3a <_printf_i+0x182>
 80038d4:	d822      	bhi.n	800391c <_printf_i+0x64>
 80038d6:	2963      	cmp	r1, #99	; 0x63
 80038d8:	d036      	beq.n	8003948 <_printf_i+0x90>
 80038da:	d80a      	bhi.n	80038f2 <_printf_i+0x3a>
 80038dc:	2900      	cmp	r1, #0
 80038de:	f000 80b9 	beq.w	8003a54 <_printf_i+0x19c>
 80038e2:	2958      	cmp	r1, #88	; 0x58
 80038e4:	f000 8083 	beq.w	80039ee <_printf_i+0x136>
 80038e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038f0:	e032      	b.n	8003958 <_printf_i+0xa0>
 80038f2:	2964      	cmp	r1, #100	; 0x64
 80038f4:	d001      	beq.n	80038fa <_printf_i+0x42>
 80038f6:	2969      	cmp	r1, #105	; 0x69
 80038f8:	d1f6      	bne.n	80038e8 <_printf_i+0x30>
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	0605      	lsls	r5, r0, #24
 8003900:	f103 0104 	add.w	r1, r3, #4
 8003904:	d52a      	bpl.n	800395c <_printf_i+0xa4>
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	da03      	bge.n	8003916 <_printf_i+0x5e>
 800390e:	222d      	movs	r2, #45	; 0x2d
 8003910:	425b      	negs	r3, r3
 8003912:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003916:	486f      	ldr	r0, [pc, #444]	; (8003ad4 <_printf_i+0x21c>)
 8003918:	220a      	movs	r2, #10
 800391a:	e039      	b.n	8003990 <_printf_i+0xd8>
 800391c:	2973      	cmp	r1, #115	; 0x73
 800391e:	f000 809d 	beq.w	8003a5c <_printf_i+0x1a4>
 8003922:	d808      	bhi.n	8003936 <_printf_i+0x7e>
 8003924:	296f      	cmp	r1, #111	; 0x6f
 8003926:	d020      	beq.n	800396a <_printf_i+0xb2>
 8003928:	2970      	cmp	r1, #112	; 0x70
 800392a:	d1dd      	bne.n	80038e8 <_printf_i+0x30>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	f043 0320 	orr.w	r3, r3, #32
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	e003      	b.n	800393e <_printf_i+0x86>
 8003936:	2975      	cmp	r1, #117	; 0x75
 8003938:	d017      	beq.n	800396a <_printf_i+0xb2>
 800393a:	2978      	cmp	r1, #120	; 0x78
 800393c:	d1d4      	bne.n	80038e8 <_printf_i+0x30>
 800393e:	2378      	movs	r3, #120	; 0x78
 8003940:	4865      	ldr	r0, [pc, #404]	; (8003ad8 <_printf_i+0x220>)
 8003942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003946:	e055      	b.n	80039f4 <_printf_i+0x13c>
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394e:	1d19      	adds	r1, r3, #4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6011      	str	r1, [r2, #0]
 8003954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003958:	2301      	movs	r3, #1
 800395a:	e08c      	b.n	8003a76 <_printf_i+0x1be>
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003962:	6011      	str	r1, [r2, #0]
 8003964:	bf18      	it	ne
 8003966:	b21b      	sxthne	r3, r3
 8003968:	e7cf      	b.n	800390a <_printf_i+0x52>
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	6825      	ldr	r5, [r4, #0]
 800396e:	1d18      	adds	r0, r3, #4
 8003970:	6010      	str	r0, [r2, #0]
 8003972:	0628      	lsls	r0, r5, #24
 8003974:	d501      	bpl.n	800397a <_printf_i+0xc2>
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e002      	b.n	8003980 <_printf_i+0xc8>
 800397a:	0668      	lsls	r0, r5, #25
 800397c:	d5fb      	bpl.n	8003976 <_printf_i+0xbe>
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	296f      	cmp	r1, #111	; 0x6f
 8003982:	bf14      	ite	ne
 8003984:	220a      	movne	r2, #10
 8003986:	2208      	moveq	r2, #8
 8003988:	4852      	ldr	r0, [pc, #328]	; (8003ad4 <_printf_i+0x21c>)
 800398a:	2100      	movs	r1, #0
 800398c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003990:	6865      	ldr	r5, [r4, #4]
 8003992:	2d00      	cmp	r5, #0
 8003994:	60a5      	str	r5, [r4, #8]
 8003996:	f2c0 8095 	blt.w	8003ac4 <_printf_i+0x20c>
 800399a:	6821      	ldr	r1, [r4, #0]
 800399c:	f021 0104 	bic.w	r1, r1, #4
 80039a0:	6021      	str	r1, [r4, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d13d      	bne.n	8003a22 <_printf_i+0x16a>
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	f040 808e 	bne.w	8003ac8 <_printf_i+0x210>
 80039ac:	4665      	mov	r5, ip
 80039ae:	2a08      	cmp	r2, #8
 80039b0:	d10b      	bne.n	80039ca <_printf_i+0x112>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	07db      	lsls	r3, r3, #31
 80039b6:	d508      	bpl.n	80039ca <_printf_i+0x112>
 80039b8:	6923      	ldr	r3, [r4, #16]
 80039ba:	6862      	ldr	r2, [r4, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	bfde      	ittt	le
 80039c0:	2330      	movle	r3, #48	; 0x30
 80039c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039ca:	ebac 0305 	sub.w	r3, ip, r5
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	f8cd 8000 	str.w	r8, [sp]
 80039d4:	463b      	mov	r3, r7
 80039d6:	aa03      	add	r2, sp, #12
 80039d8:	4621      	mov	r1, r4
 80039da:	4630      	mov	r0, r6
 80039dc:	f7ff fef6 	bl	80037cc <_printf_common>
 80039e0:	3001      	adds	r0, #1
 80039e2:	d14d      	bne.n	8003a80 <_printf_i+0x1c8>
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	b005      	add	sp, #20
 80039ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039ee:	4839      	ldr	r0, [pc, #228]	; (8003ad4 <_printf_i+0x21c>)
 80039f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	6821      	ldr	r1, [r4, #0]
 80039f8:	1d1d      	adds	r5, r3, #4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6015      	str	r5, [r2, #0]
 80039fe:	060a      	lsls	r2, r1, #24
 8003a00:	d50b      	bpl.n	8003a1a <_printf_i+0x162>
 8003a02:	07ca      	lsls	r2, r1, #31
 8003a04:	bf44      	itt	mi
 8003a06:	f041 0120 	orrmi.w	r1, r1, #32
 8003a0a:	6021      	strmi	r1, [r4, #0]
 8003a0c:	b91b      	cbnz	r3, 8003a16 <_printf_i+0x15e>
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	f022 0220 	bic.w	r2, r2, #32
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	2210      	movs	r2, #16
 8003a18:	e7b7      	b.n	800398a <_printf_i+0xd2>
 8003a1a:	064d      	lsls	r5, r1, #25
 8003a1c:	bf48      	it	mi
 8003a1e:	b29b      	uxthmi	r3, r3
 8003a20:	e7ef      	b.n	8003a02 <_printf_i+0x14a>
 8003a22:	4665      	mov	r5, ip
 8003a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a28:	fb02 3311 	mls	r3, r2, r1, r3
 8003a2c:	5cc3      	ldrb	r3, [r0, r3]
 8003a2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a32:	460b      	mov	r3, r1
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d1f5      	bne.n	8003a24 <_printf_i+0x16c>
 8003a38:	e7b9      	b.n	80039ae <_printf_i+0xf6>
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	6825      	ldr	r5, [r4, #0]
 8003a3e:	1d18      	adds	r0, r3, #4
 8003a40:	6961      	ldr	r1, [r4, #20]
 8003a42:	6010      	str	r0, [r2, #0]
 8003a44:	0628      	lsls	r0, r5, #24
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	d501      	bpl.n	8003a4e <_printf_i+0x196>
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	e002      	b.n	8003a54 <_printf_i+0x19c>
 8003a4e:	066a      	lsls	r2, r5, #25
 8003a50:	d5fb      	bpl.n	8003a4a <_printf_i+0x192>
 8003a52:	8019      	strh	r1, [r3, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	4665      	mov	r5, ip
 8003a58:	6123      	str	r3, [r4, #16]
 8003a5a:	e7b9      	b.n	80039d0 <_printf_i+0x118>
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	1d19      	adds	r1, r3, #4
 8003a60:	6011      	str	r1, [r2, #0]
 8003a62:	681d      	ldr	r5, [r3, #0]
 8003a64:	6862      	ldr	r2, [r4, #4]
 8003a66:	2100      	movs	r1, #0
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 f968 	bl	8003d3e <memchr>
 8003a6e:	b108      	cbz	r0, 8003a74 <_printf_i+0x1bc>
 8003a70:	1b40      	subs	r0, r0, r5
 8003a72:	6060      	str	r0, [r4, #4]
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7e:	e7a7      	b.n	80039d0 <_printf_i+0x118>
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	462a      	mov	r2, r5
 8003a84:	4639      	mov	r1, r7
 8003a86:	4630      	mov	r0, r6
 8003a88:	47c0      	blx	r8
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d0aa      	beq.n	80039e4 <_printf_i+0x12c>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	079b      	lsls	r3, r3, #30
 8003a92:	d413      	bmi.n	8003abc <_printf_i+0x204>
 8003a94:	68e0      	ldr	r0, [r4, #12]
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	bfb8      	it	lt
 8003a9c:	4618      	movlt	r0, r3
 8003a9e:	e7a3      	b.n	80039e8 <_printf_i+0x130>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	464a      	mov	r2, r9
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d09a      	beq.n	80039e4 <_printf_i+0x12c>
 8003aae:	3501      	adds	r5, #1
 8003ab0:	68e3      	ldr	r3, [r4, #12]
 8003ab2:	9a03      	ldr	r2, [sp, #12]
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	42ab      	cmp	r3, r5
 8003ab8:	dcf2      	bgt.n	8003aa0 <_printf_i+0x1e8>
 8003aba:	e7eb      	b.n	8003a94 <_printf_i+0x1dc>
 8003abc:	2500      	movs	r5, #0
 8003abe:	f104 0919 	add.w	r9, r4, #25
 8003ac2:	e7f5      	b.n	8003ab0 <_printf_i+0x1f8>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ac      	bne.n	8003a22 <_printf_i+0x16a>
 8003ac8:	7803      	ldrb	r3, [r0, #0]
 8003aca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ace:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad2:	e76c      	b.n	80039ae <_printf_i+0xf6>
 8003ad4:	0800495a 	.word	0x0800495a
 8003ad8:	0800496b 	.word	0x0800496b

08003adc <sniprintf>:
 8003adc:	b40c      	push	{r2, r3}
 8003ade:	b530      	push	{r4, r5, lr}
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <sniprintf+0x64>)
 8003ae2:	1e0c      	subs	r4, r1, #0
 8003ae4:	b09d      	sub	sp, #116	; 0x74
 8003ae6:	681d      	ldr	r5, [r3, #0]
 8003ae8:	da08      	bge.n	8003afc <sniprintf+0x20>
 8003aea:	238b      	movs	r3, #139	; 0x8b
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	b01d      	add	sp, #116	; 0x74
 8003af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003af8:	b002      	add	sp, #8
 8003afa:	4770      	bx	lr
 8003afc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b04:	bf0c      	ite	eq
 8003b06:	4623      	moveq	r3, r4
 8003b08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b0c:	9304      	str	r3, [sp, #16]
 8003b0e:	9307      	str	r3, [sp, #28]
 8003b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b14:	9002      	str	r0, [sp, #8]
 8003b16:	9006      	str	r0, [sp, #24]
 8003b18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b1e:	ab21      	add	r3, sp, #132	; 0x84
 8003b20:	a902      	add	r1, sp, #8
 8003b22:	4628      	mov	r0, r5
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	f7ff fd59 	bl	80035dc <_svfiprintf_r>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	bfbc      	itt	lt
 8003b2e:	238b      	movlt	r3, #139	; 0x8b
 8003b30:	602b      	strlt	r3, [r5, #0]
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d0dd      	beq.n	8003af2 <sniprintf+0x16>
 8003b36:	2200      	movs	r2, #0
 8003b38:	9b02      	ldr	r3, [sp, #8]
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e7d9      	b.n	8003af2 <sniprintf+0x16>
 8003b3e:	bf00      	nop
 8003b40:	20000010 	.word	0x20000010

08003b44 <siscanf>:
 8003b44:	b40e      	push	{r1, r2, r3}
 8003b46:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003b4a:	b530      	push	{r4, r5, lr}
 8003b4c:	b09c      	sub	sp, #112	; 0x70
 8003b4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8003b50:	f854 5b04 	ldr.w	r5, [r4], #4
 8003b54:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003b58:	9002      	str	r0, [sp, #8]
 8003b5a:	9006      	str	r0, [sp, #24]
 8003b5c:	f7fc faf6 	bl	800014c <strlen>
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <siscanf+0x4c>)
 8003b62:	9003      	str	r0, [sp, #12]
 8003b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b66:	2300      	movs	r3, #0
 8003b68:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b6a:	9314      	str	r3, [sp, #80]	; 0x50
 8003b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b70:	9007      	str	r0, [sp, #28]
 8003b72:	4808      	ldr	r0, [pc, #32]	; (8003b94 <siscanf+0x50>)
 8003b74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b78:	462a      	mov	r2, r5
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	a902      	add	r1, sp, #8
 8003b7e:	6800      	ldr	r0, [r0, #0]
 8003b80:	9401      	str	r4, [sp, #4]
 8003b82:	f000 f98f 	bl	8003ea4 <__ssvfiscanf_r>
 8003b86:	b01c      	add	sp, #112	; 0x70
 8003b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b8c:	b003      	add	sp, #12
 8003b8e:	4770      	bx	lr
 8003b90:	08003b99 	.word	0x08003b99
 8003b94:	20000010 	.word	0x20000010

08003b98 <__seofread>:
 8003b98:	2000      	movs	r0, #0
 8003b9a:	4770      	bx	lr

08003b9c <strcpy>:
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ba2:	f803 2b01 	strb.w	r2, [r3], #1
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	d1f9      	bne.n	8003b9e <strcpy+0x2>
 8003baa:	4770      	bx	lr

08003bac <strncmp>:
 8003bac:	b510      	push	{r4, lr}
 8003bae:	b16a      	cbz	r2, 8003bcc <strncmp+0x20>
 8003bb0:	3901      	subs	r1, #1
 8003bb2:	1884      	adds	r4, r0, r2
 8003bb4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003bb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d103      	bne.n	8003bc8 <strncmp+0x1c>
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d001      	beq.n	8003bc8 <strncmp+0x1c>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f5      	bne.n	8003bb4 <strncmp+0x8>
 8003bc8:	1a98      	subs	r0, r3, r2
 8003bca:	bd10      	pop	{r4, pc}
 8003bcc:	4610      	mov	r0, r2
 8003bce:	e7fc      	b.n	8003bca <strncmp+0x1e>

08003bd0 <__tzcalc_limits>:
 8003bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	4680      	mov	r8, r0
 8003bd6:	f7ff fc79 	bl	80034cc <__gettzinfo>
 8003bda:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8003bde:	4598      	cmp	r8, r3
 8003be0:	f340 8097 	ble.w	8003d12 <__tzcalc_limits+0x142>
 8003be4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8003be8:	f240 126d 	movw	r2, #365	; 0x16d
 8003bec:	4443      	add	r3, r8
 8003bee:	109b      	asrs	r3, r3, #2
 8003bf0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8003bf4:	fb02 3505 	mla	r5, r2, r5, r3
 8003bf8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8003bfc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8003c00:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c04:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8003c08:	441d      	add	r5, r3
 8003c0a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003c0e:	4442      	add	r2, r8
 8003c10:	fb92 f2f3 	sdiv	r2, r2, r3
 8003c14:	fb98 f7f3 	sdiv	r7, r8, r3
 8003c18:	4415      	add	r5, r2
 8003c1a:	2264      	movs	r2, #100	; 0x64
 8003c1c:	fb03 8717 	mls	r7, r3, r7, r8
 8003c20:	fb98 f6f2 	sdiv	r6, r8, r2
 8003c24:	fab7 fc87 	clz	ip, r7
 8003c28:	4604      	mov	r4, r0
 8003c2a:	f04f 0e07 	mov.w	lr, #7
 8003c2e:	fb02 8616 	mls	r6, r2, r6, r8
 8003c32:	f008 0303 	and.w	r3, r8, #3
 8003c36:	f8c0 8004 	str.w	r8, [r0, #4]
 8003c3a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003c3e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	7a22      	ldrb	r2, [r4, #8]
 8003c46:	6963      	ldr	r3, [r4, #20]
 8003c48:	2a4a      	cmp	r2, #74	; 0x4a
 8003c4a:	d128      	bne.n	8003c9e <__tzcalc_limits+0xce>
 8003c4c:	9900      	ldr	r1, [sp, #0]
 8003c4e:	18ea      	adds	r2, r5, r3
 8003c50:	b901      	cbnz	r1, 8003c54 <__tzcalc_limits+0x84>
 8003c52:	b906      	cbnz	r6, 8003c56 <__tzcalc_limits+0x86>
 8003c54:	bb0f      	cbnz	r7, 8003c9a <__tzcalc_limits+0xca>
 8003c56:	2b3b      	cmp	r3, #59	; 0x3b
 8003c58:	bfd4      	ite	le
 8003c5a:	2300      	movle	r3, #0
 8003c5c:	2301      	movgt	r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	1e5a      	subs	r2, r3, #1
 8003c62:	69a3      	ldr	r3, [r4, #24]
 8003c64:	492c      	ldr	r1, [pc, #176]	; (8003d18 <__tzcalc_limits+0x148>)
 8003c66:	3428      	adds	r4, #40	; 0x28
 8003c68:	fb01 3202 	mla	r2, r1, r2, r3
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	461a      	mov	r2, r3
 8003c72:	17db      	asrs	r3, r3, #31
 8003c74:	e944 2302 	strd	r2, r3, [r4, #-8]
 8003c78:	45a3      	cmp	fp, r4
 8003c7a:	d1e3      	bne.n	8003c44 <__tzcalc_limits+0x74>
 8003c7c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8003c80:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8003c84:	4294      	cmp	r4, r2
 8003c86:	eb75 0303 	sbcs.w	r3, r5, r3
 8003c8a:	bfb4      	ite	lt
 8003c8c:	2301      	movlt	r3, #1
 8003c8e:	2300      	movge	r3, #0
 8003c90:	6003      	str	r3, [r0, #0]
 8003c92:	2001      	movs	r0, #1
 8003c94:	b003      	add	sp, #12
 8003c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e7df      	b.n	8003c5e <__tzcalc_limits+0x8e>
 8003c9e:	2a44      	cmp	r2, #68	; 0x44
 8003ca0:	d101      	bne.n	8003ca6 <__tzcalc_limits+0xd6>
 8003ca2:	18ea      	adds	r2, r5, r3
 8003ca4:	e7dd      	b.n	8003c62 <__tzcalc_limits+0x92>
 8003ca6:	9a00      	ldr	r2, [sp, #0]
 8003ca8:	bb6a      	cbnz	r2, 8003d06 <__tzcalc_limits+0x136>
 8003caa:	2e00      	cmp	r6, #0
 8003cac:	bf0c      	ite	eq
 8003cae:	46e1      	moveq	r9, ip
 8003cb0:	f04f 0901 	movne.w	r9, #1
 8003cb4:	2230      	movs	r2, #48	; 0x30
 8003cb6:	fb02 f909 	mul.w	r9, r2, r9
 8003cba:	68e2      	ldr	r2, [r4, #12]
 8003cbc:	f04f 0800 	mov.w	r8, #0
 8003cc0:	9201      	str	r2, [sp, #4]
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	f108 0801 	add.w	r8, r8, #1
 8003cc8:	4914      	ldr	r1, [pc, #80]	; (8003d1c <__tzcalc_limits+0x14c>)
 8003cca:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8003cce:	448a      	add	sl, r1
 8003cd0:	9901      	ldr	r1, [sp, #4]
 8003cd2:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8003cd6:	4541      	cmp	r1, r8
 8003cd8:	dc17      	bgt.n	8003d0a <__tzcalc_limits+0x13a>
 8003cda:	f102 0804 	add.w	r8, r2, #4
 8003cde:	fb98 f9fe 	sdiv	r9, r8, lr
 8003ce2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8003ce6:	eba8 0909 	sub.w	r9, r8, r9
 8003cea:	ebb3 0909 	subs.w	r9, r3, r9
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	bf48      	it	mi
 8003cf2:	f109 0907 	addmi.w	r9, r9, #7
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003cfc:	444b      	add	r3, r9
 8003cfe:	4553      	cmp	r3, sl
 8003d00:	da05      	bge.n	8003d0e <__tzcalc_limits+0x13e>
 8003d02:	441a      	add	r2, r3
 8003d04:	e7ad      	b.n	8003c62 <__tzcalc_limits+0x92>
 8003d06:	46e1      	mov	r9, ip
 8003d08:	e7d4      	b.n	8003cb4 <__tzcalc_limits+0xe4>
 8003d0a:	4452      	add	r2, sl
 8003d0c:	e7da      	b.n	8003cc4 <__tzcalc_limits+0xf4>
 8003d0e:	3b07      	subs	r3, #7
 8003d10:	e7f5      	b.n	8003cfe <__tzcalc_limits+0x12e>
 8003d12:	2000      	movs	r0, #0
 8003d14:	e7be      	b.n	8003c94 <__tzcalc_limits+0xc4>
 8003d16:	bf00      	nop
 8003d18:	00015180 	.word	0x00015180
 8003d1c:	08004a80 	.word	0x08004a80

08003d20 <__ascii_wctomb>:
 8003d20:	b149      	cbz	r1, 8003d36 <__ascii_wctomb+0x16>
 8003d22:	2aff      	cmp	r2, #255	; 0xff
 8003d24:	bf8b      	itete	hi
 8003d26:	238a      	movhi	r3, #138	; 0x8a
 8003d28:	700a      	strbls	r2, [r1, #0]
 8003d2a:	6003      	strhi	r3, [r0, #0]
 8003d2c:	2001      	movls	r0, #1
 8003d2e:	bf88      	it	hi
 8003d30:	f04f 30ff 	movhi.w	r0, #4294967295
 8003d34:	4770      	bx	lr
 8003d36:	4608      	mov	r0, r1
 8003d38:	4770      	bx	lr

08003d3a <__env_lock>:
 8003d3a:	4770      	bx	lr

08003d3c <__env_unlock>:
 8003d3c:	4770      	bx	lr

08003d3e <memchr>:
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	b2c9      	uxtb	r1, r1
 8003d42:	4402      	add	r2, r0
 8003d44:	4290      	cmp	r0, r2
 8003d46:	4603      	mov	r3, r0
 8003d48:	d101      	bne.n	8003d4e <memchr+0x10>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e003      	b.n	8003d56 <memchr+0x18>
 8003d4e:	781c      	ldrb	r4, [r3, #0]
 8003d50:	3001      	adds	r0, #1
 8003d52:	428c      	cmp	r4, r1
 8003d54:	d1f6      	bne.n	8003d44 <memchr+0x6>
 8003d56:	4618      	mov	r0, r3
 8003d58:	bd10      	pop	{r4, pc}

08003d5a <memcpy>:
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	1e43      	subs	r3, r0, #1
 8003d5e:	440a      	add	r2, r1
 8003d60:	4291      	cmp	r1, r2
 8003d62:	d100      	bne.n	8003d66 <memcpy+0xc>
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d6e:	e7f7      	b.n	8003d60 <memcpy+0x6>

08003d70 <memmove>:
 8003d70:	4288      	cmp	r0, r1
 8003d72:	b510      	push	{r4, lr}
 8003d74:	eb01 0302 	add.w	r3, r1, r2
 8003d78:	d807      	bhi.n	8003d8a <memmove+0x1a>
 8003d7a:	1e42      	subs	r2, r0, #1
 8003d7c:	4299      	cmp	r1, r3
 8003d7e:	d00a      	beq.n	8003d96 <memmove+0x26>
 8003d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003d88:	e7f8      	b.n	8003d7c <memmove+0xc>
 8003d8a:	4283      	cmp	r3, r0
 8003d8c:	d9f5      	bls.n	8003d7a <memmove+0xa>
 8003d8e:	1881      	adds	r1, r0, r2
 8003d90:	1ad2      	subs	r2, r2, r3
 8003d92:	42d3      	cmn	r3, r2
 8003d94:	d100      	bne.n	8003d98 <memmove+0x28>
 8003d96:	bd10      	pop	{r4, pc}
 8003d98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003da0:	e7f7      	b.n	8003d92 <memmove+0x22>

08003da2 <_realloc_r>:
 8003da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da4:	4607      	mov	r7, r0
 8003da6:	4614      	mov	r4, r2
 8003da8:	460e      	mov	r6, r1
 8003daa:	b921      	cbnz	r1, 8003db6 <_realloc_r+0x14>
 8003dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003db0:	4611      	mov	r1, r2
 8003db2:	f7fe bb0d 	b.w	80023d0 <_malloc_r>
 8003db6:	b922      	cbnz	r2, 8003dc2 <_realloc_r+0x20>
 8003db8:	f7fe fabe 	bl	8002338 <_free_r>
 8003dbc:	4625      	mov	r5, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc2:	f000 fc0d 	bl	80045e0 <_malloc_usable_size_r>
 8003dc6:	42a0      	cmp	r0, r4
 8003dc8:	d20f      	bcs.n	8003dea <_realloc_r+0x48>
 8003dca:	4621      	mov	r1, r4
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f7fe faff 	bl	80023d0 <_malloc_r>
 8003dd2:	4605      	mov	r5, r0
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d0f2      	beq.n	8003dbe <_realloc_r+0x1c>
 8003dd8:	4631      	mov	r1, r6
 8003dda:	4622      	mov	r2, r4
 8003ddc:	f7ff ffbd 	bl	8003d5a <memcpy>
 8003de0:	4631      	mov	r1, r6
 8003de2:	4638      	mov	r0, r7
 8003de4:	f7fe faa8 	bl	8002338 <_free_r>
 8003de8:	e7e9      	b.n	8003dbe <_realloc_r+0x1c>
 8003dea:	4635      	mov	r5, r6
 8003dec:	e7e7      	b.n	8003dbe <_realloc_r+0x1c>

08003dee <_sungetc_r>:
 8003dee:	b538      	push	{r3, r4, r5, lr}
 8003df0:	1c4b      	adds	r3, r1, #1
 8003df2:	4614      	mov	r4, r2
 8003df4:	d103      	bne.n	8003dfe <_sungetc_r+0x10>
 8003df6:	f04f 35ff 	mov.w	r5, #4294967295
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	8993      	ldrh	r3, [r2, #12]
 8003e00:	b2cd      	uxtb	r5, r1
 8003e02:	f023 0320 	bic.w	r3, r3, #32
 8003e06:	8193      	strh	r3, [r2, #12]
 8003e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e0a:	6852      	ldr	r2, [r2, #4]
 8003e0c:	b18b      	cbz	r3, 8003e32 <_sungetc_r+0x44>
 8003e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e10:	4293      	cmp	r3, r2
 8003e12:	dd08      	ble.n	8003e26 <_sungetc_r+0x38>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	1e5a      	subs	r2, r3, #1
 8003e18:	6022      	str	r2, [r4, #0]
 8003e1a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003e1e:	6863      	ldr	r3, [r4, #4]
 8003e20:	3301      	adds	r3, #1
 8003e22:	6063      	str	r3, [r4, #4]
 8003e24:	e7e9      	b.n	8003dfa <_sungetc_r+0xc>
 8003e26:	4621      	mov	r1, r4
 8003e28:	f000 fba2 	bl	8004570 <__submore>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d0f1      	beq.n	8003e14 <_sungetc_r+0x26>
 8003e30:	e7e1      	b.n	8003df6 <_sungetc_r+0x8>
 8003e32:	6921      	ldr	r1, [r4, #16]
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	b151      	cbz	r1, 8003e4e <_sungetc_r+0x60>
 8003e38:	4299      	cmp	r1, r3
 8003e3a:	d208      	bcs.n	8003e4e <_sungetc_r+0x60>
 8003e3c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003e40:	42a9      	cmp	r1, r5
 8003e42:	d104      	bne.n	8003e4e <_sungetc_r+0x60>
 8003e44:	3b01      	subs	r3, #1
 8003e46:	3201      	adds	r2, #1
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	6062      	str	r2, [r4, #4]
 8003e4c:	e7d5      	b.n	8003dfa <_sungetc_r+0xc>
 8003e4e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e56:	6363      	str	r3, [r4, #52]	; 0x34
 8003e58:	2303      	movs	r3, #3
 8003e5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8003e5c:	4623      	mov	r3, r4
 8003e5e:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	2301      	movs	r3, #1
 8003e66:	e7dc      	b.n	8003e22 <_sungetc_r+0x34>

08003e68 <__ssrefill_r>:
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003e6e:	b169      	cbz	r1, 8003e8c <__ssrefill_r+0x24>
 8003e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d001      	beq.n	8003e7c <__ssrefill_r+0x14>
 8003e78:	f7fe fa5e 	bl	8002338 <_free_r>
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e80:	6360      	str	r0, [r4, #52]	; 0x34
 8003e82:	6063      	str	r3, [r4, #4]
 8003e84:	b113      	cbz	r3, 8003e8c <__ssrefill_r+0x24>
 8003e86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd10      	pop	{r4, pc}
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	6063      	str	r3, [r4, #4]
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f043 0320 	orr.w	r3, r3, #32
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	e7f3      	b.n	8003e8a <__ssrefill_r+0x22>
	...

08003ea4 <__ssvfiscanf_r>:
 8003ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4606      	mov	r6, r0
 8003eae:	4692      	mov	sl, r2
 8003eb0:	270a      	movs	r7, #10
 8003eb2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003eb6:	9144      	str	r1, [sp, #272]	; 0x110
 8003eb8:	9145      	str	r1, [sp, #276]	; 0x114
 8003eba:	499e      	ldr	r1, [pc, #632]	; (8004134 <__ssvfiscanf_r+0x290>)
 8003ebc:	f10d 0804 	add.w	r8, sp, #4
 8003ec0:	91a0      	str	r1, [sp, #640]	; 0x280
 8003ec2:	499d      	ldr	r1, [pc, #628]	; (8004138 <__ssvfiscanf_r+0x294>)
 8003ec4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800413c <__ssvfiscanf_r+0x298>
 8003ec8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ecc:	91a1      	str	r1, [sp, #644]	; 0x284
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 812a 	beq.w	800412e <__ssvfiscanf_r+0x28a>
 8003eda:	4655      	mov	r5, sl
 8003edc:	f7ff fb02 	bl	80034e4 <__locale_ctype_ptr>
 8003ee0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8003ee4:	4458      	add	r0, fp
 8003ee6:	7843      	ldrb	r3, [r0, #1]
 8003ee8:	f013 0308 	ands.w	r3, r3, #8
 8003eec:	d01c      	beq.n	8003f28 <__ssvfiscanf_r+0x84>
 8003eee:	6863      	ldr	r3, [r4, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dd12      	ble.n	8003f1a <__ssvfiscanf_r+0x76>
 8003ef4:	f7ff faf6 	bl	80034e4 <__locale_ctype_ptr>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	4410      	add	r0, r2
 8003efe:	7842      	ldrb	r2, [r0, #1]
 8003f00:	0712      	lsls	r2, r2, #28
 8003f02:	d401      	bmi.n	8003f08 <__ssvfiscanf_r+0x64>
 8003f04:	46aa      	mov	sl, r5
 8003f06:	e7e3      	b.n	8003ed0 <__ssvfiscanf_r+0x2c>
 8003f08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	3201      	adds	r2, #1
 8003f0e:	9245      	str	r2, [sp, #276]	; 0x114
 8003f10:	6862      	ldr	r2, [r4, #4]
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	3a01      	subs	r2, #1
 8003f16:	6062      	str	r2, [r4, #4]
 8003f18:	e7e9      	b.n	8003eee <__ssvfiscanf_r+0x4a>
 8003f1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4630      	mov	r0, r6
 8003f20:	4798      	blx	r3
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d0e6      	beq.n	8003ef4 <__ssvfiscanf_r+0x50>
 8003f26:	e7ed      	b.n	8003f04 <__ssvfiscanf_r+0x60>
 8003f28:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003f2c:	f040 8082 	bne.w	8004034 <__ssvfiscanf_r+0x190>
 8003f30:	9343      	str	r3, [sp, #268]	; 0x10c
 8003f32:	9341      	str	r3, [sp, #260]	; 0x104
 8003f34:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003f38:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3a:	d103      	bne.n	8003f44 <__ssvfiscanf_r+0xa0>
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	f10a 0502 	add.w	r5, sl, #2
 8003f42:	9341      	str	r3, [sp, #260]	; 0x104
 8003f44:	46aa      	mov	sl, r5
 8003f46:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003f4a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003f4e:	2a09      	cmp	r2, #9
 8003f50:	d922      	bls.n	8003f98 <__ssvfiscanf_r+0xf4>
 8003f52:	2203      	movs	r2, #3
 8003f54:	4879      	ldr	r0, [pc, #484]	; (800413c <__ssvfiscanf_r+0x298>)
 8003f56:	f7ff fef2 	bl	8003d3e <memchr>
 8003f5a:	b138      	cbz	r0, 8003f6c <__ssvfiscanf_r+0xc8>
 8003f5c:	eba0 0309 	sub.w	r3, r0, r9
 8003f60:	2001      	movs	r0, #1
 8003f62:	46aa      	mov	sl, r5
 8003f64:	4098      	lsls	r0, r3
 8003f66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f68:	4318      	orrs	r0, r3
 8003f6a:	9041      	str	r0, [sp, #260]	; 0x104
 8003f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f70:	f10a 0501 	add.w	r5, sl, #1
 8003f74:	2b67      	cmp	r3, #103	; 0x67
 8003f76:	d82b      	bhi.n	8003fd0 <__ssvfiscanf_r+0x12c>
 8003f78:	2b65      	cmp	r3, #101	; 0x65
 8003f7a:	f080 809f 	bcs.w	80040bc <__ssvfiscanf_r+0x218>
 8003f7e:	2b47      	cmp	r3, #71	; 0x47
 8003f80:	d810      	bhi.n	8003fa4 <__ssvfiscanf_r+0x100>
 8003f82:	2b45      	cmp	r3, #69	; 0x45
 8003f84:	f080 809a 	bcs.w	80040bc <__ssvfiscanf_r+0x218>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d06c      	beq.n	8004066 <__ssvfiscanf_r+0x1c2>
 8003f8c:	2b25      	cmp	r3, #37	; 0x25
 8003f8e:	d051      	beq.n	8004034 <__ssvfiscanf_r+0x190>
 8003f90:	2303      	movs	r3, #3
 8003f92:	9742      	str	r7, [sp, #264]	; 0x108
 8003f94:	9347      	str	r3, [sp, #284]	; 0x11c
 8003f96:	e027      	b.n	8003fe8 <__ssvfiscanf_r+0x144>
 8003f98:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003f9a:	fb07 1303 	mla	r3, r7, r3, r1
 8003f9e:	3b30      	subs	r3, #48	; 0x30
 8003fa0:	9343      	str	r3, [sp, #268]	; 0x10c
 8003fa2:	e7cf      	b.n	8003f44 <__ssvfiscanf_r+0xa0>
 8003fa4:	2b5b      	cmp	r3, #91	; 0x5b
 8003fa6:	d06a      	beq.n	800407e <__ssvfiscanf_r+0x1da>
 8003fa8:	d80c      	bhi.n	8003fc4 <__ssvfiscanf_r+0x120>
 8003faa:	2b58      	cmp	r3, #88	; 0x58
 8003fac:	d1f0      	bne.n	8003f90 <__ssvfiscanf_r+0xec>
 8003fae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	9241      	str	r2, [sp, #260]	; 0x104
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	9242      	str	r2, [sp, #264]	; 0x108
 8003fba:	2b6e      	cmp	r3, #110	; 0x6e
 8003fbc:	bf8c      	ite	hi
 8003fbe:	2304      	movhi	r3, #4
 8003fc0:	2303      	movls	r3, #3
 8003fc2:	e010      	b.n	8003fe6 <__ssvfiscanf_r+0x142>
 8003fc4:	2b63      	cmp	r3, #99	; 0x63
 8003fc6:	d065      	beq.n	8004094 <__ssvfiscanf_r+0x1f0>
 8003fc8:	2b64      	cmp	r3, #100	; 0x64
 8003fca:	d1e1      	bne.n	8003f90 <__ssvfiscanf_r+0xec>
 8003fcc:	9742      	str	r7, [sp, #264]	; 0x108
 8003fce:	e7f4      	b.n	8003fba <__ssvfiscanf_r+0x116>
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d04b      	beq.n	800406c <__ssvfiscanf_r+0x1c8>
 8003fd4:	d826      	bhi.n	8004024 <__ssvfiscanf_r+0x180>
 8003fd6:	2b6e      	cmp	r3, #110	; 0x6e
 8003fd8:	d062      	beq.n	80040a0 <__ssvfiscanf_r+0x1fc>
 8003fda:	d84c      	bhi.n	8004076 <__ssvfiscanf_r+0x1d2>
 8003fdc:	2b69      	cmp	r3, #105	; 0x69
 8003fde:	d1d7      	bne.n	8003f90 <__ssvfiscanf_r+0xec>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	9342      	str	r3, [sp, #264]	; 0x108
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	9347      	str	r3, [sp, #284]	; 0x11c
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	dd68      	ble.n	80040c0 <__ssvfiscanf_r+0x21c>
 8003fee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ff0:	0659      	lsls	r1, r3, #25
 8003ff2:	d407      	bmi.n	8004004 <__ssvfiscanf_r+0x160>
 8003ff4:	f7ff fa76 	bl	80034e4 <__locale_ctype_ptr>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	4410      	add	r0, r2
 8003ffe:	7842      	ldrb	r2, [r0, #1]
 8004000:	0712      	lsls	r2, r2, #28
 8004002:	d464      	bmi.n	80040ce <__ssvfiscanf_r+0x22a>
 8004004:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004006:	2b02      	cmp	r3, #2
 8004008:	dc73      	bgt.n	80040f2 <__ssvfiscanf_r+0x24e>
 800400a:	466b      	mov	r3, sp
 800400c:	4622      	mov	r2, r4
 800400e:	a941      	add	r1, sp, #260	; 0x104
 8004010:	4630      	mov	r0, r6
 8004012:	f000 f897 	bl	8004144 <_scanf_chars>
 8004016:	2801      	cmp	r0, #1
 8004018:	f000 8089 	beq.w	800412e <__ssvfiscanf_r+0x28a>
 800401c:	2802      	cmp	r0, #2
 800401e:	f47f af71 	bne.w	8003f04 <__ssvfiscanf_r+0x60>
 8004022:	e01d      	b.n	8004060 <__ssvfiscanf_r+0x1bc>
 8004024:	2b75      	cmp	r3, #117	; 0x75
 8004026:	d0d1      	beq.n	8003fcc <__ssvfiscanf_r+0x128>
 8004028:	2b78      	cmp	r3, #120	; 0x78
 800402a:	d0c0      	beq.n	8003fae <__ssvfiscanf_r+0x10a>
 800402c:	2b73      	cmp	r3, #115	; 0x73
 800402e:	d1af      	bne.n	8003f90 <__ssvfiscanf_r+0xec>
 8004030:	2302      	movs	r3, #2
 8004032:	e7d8      	b.n	8003fe6 <__ssvfiscanf_r+0x142>
 8004034:	6863      	ldr	r3, [r4, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	dd0c      	ble.n	8004054 <__ssvfiscanf_r+0x1b0>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	455a      	cmp	r2, fp
 8004040:	d175      	bne.n	800412e <__ssvfiscanf_r+0x28a>
 8004042:	3301      	adds	r3, #1
 8004044:	6862      	ldr	r2, [r4, #4]
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800404a:	3a01      	subs	r2, #1
 800404c:	3301      	adds	r3, #1
 800404e:	6062      	str	r2, [r4, #4]
 8004050:	9345      	str	r3, [sp, #276]	; 0x114
 8004052:	e757      	b.n	8003f04 <__ssvfiscanf_r+0x60>
 8004054:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004056:	4621      	mov	r1, r4
 8004058:	4630      	mov	r0, r6
 800405a:	4798      	blx	r3
 800405c:	2800      	cmp	r0, #0
 800405e:	d0ec      	beq.n	800403a <__ssvfiscanf_r+0x196>
 8004060:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004062:	2800      	cmp	r0, #0
 8004064:	d159      	bne.n	800411a <__ssvfiscanf_r+0x276>
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	e05c      	b.n	8004126 <__ssvfiscanf_r+0x282>
 800406c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800406e:	f042 0220 	orr.w	r2, r2, #32
 8004072:	9241      	str	r2, [sp, #260]	; 0x104
 8004074:	e79b      	b.n	8003fae <__ssvfiscanf_r+0x10a>
 8004076:	2308      	movs	r3, #8
 8004078:	9342      	str	r3, [sp, #264]	; 0x108
 800407a:	2304      	movs	r3, #4
 800407c:	e7b3      	b.n	8003fe6 <__ssvfiscanf_r+0x142>
 800407e:	4629      	mov	r1, r5
 8004080:	4640      	mov	r0, r8
 8004082:	f000 f9b7 	bl	80043f4 <__sccl>
 8004086:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004088:	4605      	mov	r5, r0
 800408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408e:	9341      	str	r3, [sp, #260]	; 0x104
 8004090:	2301      	movs	r3, #1
 8004092:	e7a8      	b.n	8003fe6 <__ssvfiscanf_r+0x142>
 8004094:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409a:	9341      	str	r3, [sp, #260]	; 0x104
 800409c:	2300      	movs	r3, #0
 800409e:	e7a2      	b.n	8003fe6 <__ssvfiscanf_r+0x142>
 80040a0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80040a2:	06c3      	lsls	r3, r0, #27
 80040a4:	f53f af2e 	bmi.w	8003f04 <__ssvfiscanf_r+0x60>
 80040a8:	9b00      	ldr	r3, [sp, #0]
 80040aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	9100      	str	r1, [sp, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	07c0      	lsls	r0, r0, #31
 80040b4:	bf4c      	ite	mi
 80040b6:	801a      	strhmi	r2, [r3, #0]
 80040b8:	601a      	strpl	r2, [r3, #0]
 80040ba:	e723      	b.n	8003f04 <__ssvfiscanf_r+0x60>
 80040bc:	2305      	movs	r3, #5
 80040be:	e792      	b.n	8003fe6 <__ssvfiscanf_r+0x142>
 80040c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80040c2:	4621      	mov	r1, r4
 80040c4:	4630      	mov	r0, r6
 80040c6:	4798      	blx	r3
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d090      	beq.n	8003fee <__ssvfiscanf_r+0x14a>
 80040cc:	e7c8      	b.n	8004060 <__ssvfiscanf_r+0x1bc>
 80040ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80040d0:	3201      	adds	r2, #1
 80040d2:	9245      	str	r2, [sp, #276]	; 0x114
 80040d4:	6862      	ldr	r2, [r4, #4]
 80040d6:	3a01      	subs	r2, #1
 80040d8:	2a00      	cmp	r2, #0
 80040da:	6062      	str	r2, [r4, #4]
 80040dc:	dd02      	ble.n	80040e4 <__ssvfiscanf_r+0x240>
 80040de:	3301      	adds	r3, #1
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	e787      	b.n	8003ff4 <__ssvfiscanf_r+0x150>
 80040e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80040e6:	4621      	mov	r1, r4
 80040e8:	4630      	mov	r0, r6
 80040ea:	4798      	blx	r3
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d081      	beq.n	8003ff4 <__ssvfiscanf_r+0x150>
 80040f0:	e7b6      	b.n	8004060 <__ssvfiscanf_r+0x1bc>
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	dc06      	bgt.n	8004104 <__ssvfiscanf_r+0x260>
 80040f6:	466b      	mov	r3, sp
 80040f8:	4622      	mov	r2, r4
 80040fa:	a941      	add	r1, sp, #260	; 0x104
 80040fc:	4630      	mov	r0, r6
 80040fe:	f000 f883 	bl	8004208 <_scanf_i>
 8004102:	e788      	b.n	8004016 <__ssvfiscanf_r+0x172>
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <__ssvfiscanf_r+0x29c>)
 8004106:	2b00      	cmp	r3, #0
 8004108:	f43f aefc 	beq.w	8003f04 <__ssvfiscanf_r+0x60>
 800410c:	466b      	mov	r3, sp
 800410e:	4622      	mov	r2, r4
 8004110:	a941      	add	r1, sp, #260	; 0x104
 8004112:	4630      	mov	r0, r6
 8004114:	f3af 8000 	nop.w
 8004118:	e77d      	b.n	8004016 <__ssvfiscanf_r+0x172>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004120:	bf18      	it	ne
 8004122:	f04f 30ff 	movne.w	r0, #4294967295
 8004126:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004130:	e7f9      	b.n	8004126 <__ssvfiscanf_r+0x282>
 8004132:	bf00      	nop
 8004134:	08003def 	.word	0x08003def
 8004138:	08003e69 	.word	0x08003e69
 800413c:	0800494f 	.word	0x0800494f
 8004140:	00000000 	.word	0x00000000

08004144 <_scanf_chars>:
 8004144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	4615      	mov	r5, r2
 800414a:	688a      	ldr	r2, [r1, #8]
 800414c:	4680      	mov	r8, r0
 800414e:	460c      	mov	r4, r1
 8004150:	b932      	cbnz	r2, 8004160 <_scanf_chars+0x1c>
 8004152:	698a      	ldr	r2, [r1, #24]
 8004154:	2a00      	cmp	r2, #0
 8004156:	bf14      	ite	ne
 8004158:	f04f 32ff 	movne.w	r2, #4294967295
 800415c:	2201      	moveq	r2, #1
 800415e:	608a      	str	r2, [r1, #8]
 8004160:	2600      	movs	r6, #0
 8004162:	6822      	ldr	r2, [r4, #0]
 8004164:	06d1      	lsls	r1, r2, #27
 8004166:	bf5f      	itttt	pl
 8004168:	681a      	ldrpl	r2, [r3, #0]
 800416a:	1d11      	addpl	r1, r2, #4
 800416c:	6019      	strpl	r1, [r3, #0]
 800416e:	6817      	ldrpl	r7, [r2, #0]
 8004170:	69a3      	ldr	r3, [r4, #24]
 8004172:	b1db      	cbz	r3, 80041ac <_scanf_chars+0x68>
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <_scanf_chars+0x44>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	6962      	ldr	r2, [r4, #20]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	b9a3      	cbnz	r3, 80041ac <_scanf_chars+0x68>
 8004182:	2e00      	cmp	r6, #0
 8004184:	d131      	bne.n	80041ea <_scanf_chars+0xa6>
 8004186:	e006      	b.n	8004196 <_scanf_chars+0x52>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d007      	beq.n	800419c <_scanf_chars+0x58>
 800418c:	2e00      	cmp	r6, #0
 800418e:	d12c      	bne.n	80041ea <_scanf_chars+0xa6>
 8004190:	69a3      	ldr	r3, [r4, #24]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d129      	bne.n	80041ea <_scanf_chars+0xa6>
 8004196:	2001      	movs	r0, #1
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800419c:	f7ff f9a2 	bl	80034e4 <__locale_ctype_ptr>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	4418      	add	r0, r3
 80041a6:	7843      	ldrb	r3, [r0, #1]
 80041a8:	071b      	lsls	r3, r3, #28
 80041aa:	d4ef      	bmi.n	800418c <_scanf_chars+0x48>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	3601      	adds	r6, #1
 80041b0:	06da      	lsls	r2, r3, #27
 80041b2:	bf5e      	ittt	pl
 80041b4:	682b      	ldrpl	r3, [r5, #0]
 80041b6:	781b      	ldrbpl	r3, [r3, #0]
 80041b8:	703b      	strbpl	r3, [r7, #0]
 80041ba:	682a      	ldr	r2, [r5, #0]
 80041bc:	686b      	ldr	r3, [r5, #4]
 80041be:	f102 0201 	add.w	r2, r2, #1
 80041c2:	602a      	str	r2, [r5, #0]
 80041c4:	68a2      	ldr	r2, [r4, #8]
 80041c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80041ca:	f102 32ff 	add.w	r2, r2, #4294967295
 80041ce:	606b      	str	r3, [r5, #4]
 80041d0:	bf58      	it	pl
 80041d2:	3701      	addpl	r7, #1
 80041d4:	60a2      	str	r2, [r4, #8]
 80041d6:	b142      	cbz	r2, 80041ea <_scanf_chars+0xa6>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	dcc9      	bgt.n	8004170 <_scanf_chars+0x2c>
 80041dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041e0:	4629      	mov	r1, r5
 80041e2:	4640      	mov	r0, r8
 80041e4:	4798      	blx	r3
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d0c2      	beq.n	8004170 <_scanf_chars+0x2c>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f013 0310 	ands.w	r3, r3, #16
 80041f0:	d105      	bne.n	80041fe <_scanf_chars+0xba>
 80041f2:	68e2      	ldr	r2, [r4, #12]
 80041f4:	3201      	adds	r2, #1
 80041f6:	60e2      	str	r2, [r4, #12]
 80041f8:	69a2      	ldr	r2, [r4, #24]
 80041fa:	b102      	cbz	r2, 80041fe <_scanf_chars+0xba>
 80041fc:	703b      	strb	r3, [r7, #0]
 80041fe:	6923      	ldr	r3, [r4, #16]
 8004200:	2000      	movs	r0, #0
 8004202:	441e      	add	r6, r3
 8004204:	6126      	str	r6, [r4, #16]
 8004206:	e7c7      	b.n	8004198 <_scanf_chars+0x54>

08004208 <_scanf_i>:
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	460c      	mov	r4, r1
 800420e:	469a      	mov	sl, r3
 8004210:	4b74      	ldr	r3, [pc, #464]	; (80043e4 <_scanf_i+0x1dc>)
 8004212:	b087      	sub	sp, #28
 8004214:	4683      	mov	fp, r0
 8004216:	4616      	mov	r6, r2
 8004218:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800421c:	ab03      	add	r3, sp, #12
 800421e:	68a7      	ldr	r7, [r4, #8]
 8004220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004224:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <_scanf_i+0x1e0>)
 8004226:	69a1      	ldr	r1, [r4, #24]
 8004228:	4a70      	ldr	r2, [pc, #448]	; (80043ec <_scanf_i+0x1e4>)
 800422a:	f104 091c 	add.w	r9, r4, #28
 800422e:	2903      	cmp	r1, #3
 8004230:	bf08      	it	eq
 8004232:	461a      	moveq	r2, r3
 8004234:	1e7b      	subs	r3, r7, #1
 8004236:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800423a:	bf84      	itt	hi
 800423c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004240:	60a3      	strhi	r3, [r4, #8]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	bf88      	it	hi
 8004246:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800424a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	bf98      	it	ls
 8004252:	2700      	movls	r7, #0
 8004254:	464b      	mov	r3, r9
 8004256:	f04f 0800 	mov.w	r8, #0
 800425a:	9200      	str	r2, [sp, #0]
 800425c:	bf88      	it	hi
 800425e:	197f      	addhi	r7, r7, r5
 8004260:	6831      	ldr	r1, [r6, #0]
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	ab03      	add	r3, sp, #12
 8004266:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800426a:	2202      	movs	r2, #2
 800426c:	7809      	ldrb	r1, [r1, #0]
 800426e:	f7ff fd66 	bl	8003d3e <memchr>
 8004272:	9b01      	ldr	r3, [sp, #4]
 8004274:	b330      	cbz	r0, 80042c4 <_scanf_i+0xbc>
 8004276:	f1b8 0f01 	cmp.w	r8, #1
 800427a:	d15a      	bne.n	8004332 <_scanf_i+0x12a>
 800427c:	6862      	ldr	r2, [r4, #4]
 800427e:	b92a      	cbnz	r2, 800428c <_scanf_i+0x84>
 8004280:	2108      	movs	r1, #8
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	6061      	str	r1, [r4, #4]
 8004286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428a:	6022      	str	r2, [r4, #0]
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004292:	6022      	str	r2, [r4, #0]
 8004294:	68a2      	ldr	r2, [r4, #8]
 8004296:	1e51      	subs	r1, r2, #1
 8004298:	60a1      	str	r1, [r4, #8]
 800429a:	b19a      	cbz	r2, 80042c4 <_scanf_i+0xbc>
 800429c:	6832      	ldr	r2, [r6, #0]
 800429e:	1c5d      	adds	r5, r3, #1
 80042a0:	1c51      	adds	r1, r2, #1
 80042a2:	6031      	str	r1, [r6, #0]
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	6873      	ldr	r3, [r6, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	6073      	str	r3, [r6, #4]
 80042b0:	dc07      	bgt.n	80042c2 <_scanf_i+0xba>
 80042b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80042b6:	4631      	mov	r1, r6
 80042b8:	4658      	mov	r0, fp
 80042ba:	4798      	blx	r3
 80042bc:	2800      	cmp	r0, #0
 80042be:	f040 8087 	bne.w	80043d0 <_scanf_i+0x1c8>
 80042c2:	462b      	mov	r3, r5
 80042c4:	f108 0801 	add.w	r8, r8, #1
 80042c8:	f1b8 0f03 	cmp.w	r8, #3
 80042cc:	d1c8      	bne.n	8004260 <_scanf_i+0x58>
 80042ce:	6862      	ldr	r2, [r4, #4]
 80042d0:	b90a      	cbnz	r2, 80042d6 <_scanf_i+0xce>
 80042d2:	220a      	movs	r2, #10
 80042d4:	6062      	str	r2, [r4, #4]
 80042d6:	6862      	ldr	r2, [r4, #4]
 80042d8:	4945      	ldr	r1, [pc, #276]	; (80043f0 <_scanf_i+0x1e8>)
 80042da:	6960      	ldr	r0, [r4, #20]
 80042dc:	1a89      	subs	r1, r1, r2
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	f000 f888 	bl	80043f4 <__sccl>
 80042e4:	9b01      	ldr	r3, [sp, #4]
 80042e6:	f04f 0800 	mov.w	r8, #0
 80042ea:	461d      	mov	r5, r3
 80042ec:	68a3      	ldr	r3, [r4, #8]
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d03b      	beq.n	800436c <_scanf_i+0x164>
 80042f4:	6831      	ldr	r1, [r6, #0]
 80042f6:	6960      	ldr	r0, [r4, #20]
 80042f8:	f891 c000 	ldrb.w	ip, [r1]
 80042fc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004300:	2800      	cmp	r0, #0
 8004302:	d033      	beq.n	800436c <_scanf_i+0x164>
 8004304:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004308:	d121      	bne.n	800434e <_scanf_i+0x146>
 800430a:	0510      	lsls	r0, r2, #20
 800430c:	d51f      	bpl.n	800434e <_scanf_i+0x146>
 800430e:	f108 0801 	add.w	r8, r8, #1
 8004312:	b117      	cbz	r7, 800431a <_scanf_i+0x112>
 8004314:	3301      	adds	r3, #1
 8004316:	3f01      	subs	r7, #1
 8004318:	60a3      	str	r3, [r4, #8]
 800431a:	6873      	ldr	r3, [r6, #4]
 800431c:	3b01      	subs	r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	6073      	str	r3, [r6, #4]
 8004322:	dd1c      	ble.n	800435e <_scanf_i+0x156>
 8004324:	6833      	ldr	r3, [r6, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	6033      	str	r3, [r6, #0]
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	3b01      	subs	r3, #1
 800432e:	60a3      	str	r3, [r4, #8]
 8004330:	e7dc      	b.n	80042ec <_scanf_i+0xe4>
 8004332:	f1b8 0f02 	cmp.w	r8, #2
 8004336:	d1ad      	bne.n	8004294 <_scanf_i+0x8c>
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800433e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004342:	d1bf      	bne.n	80042c4 <_scanf_i+0xbc>
 8004344:	2110      	movs	r1, #16
 8004346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800434a:	6061      	str	r1, [r4, #4]
 800434c:	e7a1      	b.n	8004292 <_scanf_i+0x8a>
 800434e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004352:	6022      	str	r2, [r4, #0]
 8004354:	780b      	ldrb	r3, [r1, #0]
 8004356:	3501      	adds	r5, #1
 8004358:	f805 3c01 	strb.w	r3, [r5, #-1]
 800435c:	e7dd      	b.n	800431a <_scanf_i+0x112>
 800435e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004362:	4631      	mov	r1, r6
 8004364:	4658      	mov	r0, fp
 8004366:	4798      	blx	r3
 8004368:	2800      	cmp	r0, #0
 800436a:	d0de      	beq.n	800432a <_scanf_i+0x122>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	05d9      	lsls	r1, r3, #23
 8004370:	d50c      	bpl.n	800438c <_scanf_i+0x184>
 8004372:	454d      	cmp	r5, r9
 8004374:	d908      	bls.n	8004388 <_scanf_i+0x180>
 8004376:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800437a:	1e6f      	subs	r7, r5, #1
 800437c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004380:	4632      	mov	r2, r6
 8004382:	4658      	mov	r0, fp
 8004384:	4798      	blx	r3
 8004386:	463d      	mov	r5, r7
 8004388:	454d      	cmp	r5, r9
 800438a:	d029      	beq.n	80043e0 <_scanf_i+0x1d8>
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	f012 0210 	ands.w	r2, r2, #16
 8004392:	d113      	bne.n	80043bc <_scanf_i+0x1b4>
 8004394:	702a      	strb	r2, [r5, #0]
 8004396:	6863      	ldr	r3, [r4, #4]
 8004398:	4649      	mov	r1, r9
 800439a:	4658      	mov	r0, fp
 800439c:	9e00      	ldr	r6, [sp, #0]
 800439e:	47b0      	blx	r6
 80043a0:	f8da 3000 	ldr.w	r3, [sl]
 80043a4:	6821      	ldr	r1, [r4, #0]
 80043a6:	1d1a      	adds	r2, r3, #4
 80043a8:	f8ca 2000 	str.w	r2, [sl]
 80043ac:	f011 0f20 	tst.w	r1, #32
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	d010      	beq.n	80043d6 <_scanf_i+0x1ce>
 80043b4:	6018      	str	r0, [r3, #0]
 80043b6:	68e3      	ldr	r3, [r4, #12]
 80043b8:	3301      	adds	r3, #1
 80043ba:	60e3      	str	r3, [r4, #12]
 80043bc:	2000      	movs	r0, #0
 80043be:	eba5 0509 	sub.w	r5, r5, r9
 80043c2:	44a8      	add	r8, r5
 80043c4:	6925      	ldr	r5, [r4, #16]
 80043c6:	4445      	add	r5, r8
 80043c8:	6125      	str	r5, [r4, #16]
 80043ca:	b007      	add	sp, #28
 80043cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d0:	f04f 0800 	mov.w	r8, #0
 80043d4:	e7ca      	b.n	800436c <_scanf_i+0x164>
 80043d6:	07ca      	lsls	r2, r1, #31
 80043d8:	bf4c      	ite	mi
 80043da:	8018      	strhmi	r0, [r3, #0]
 80043dc:	6018      	strpl	r0, [r3, #0]
 80043de:	e7ea      	b.n	80043b6 <_scanf_i+0x1ae>
 80043e0:	2001      	movs	r0, #1
 80043e2:	e7f2      	b.n	80043ca <_scanf_i+0x1c2>
 80043e4:	08004664 	.word	0x08004664
 80043e8:	0800454d 	.word	0x0800454d
 80043ec:	08003089 	.word	0x08003089
 80043f0:	08004af0 	.word	0x08004af0

080043f4 <__sccl>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	780b      	ldrb	r3, [r1, #0]
 80043f8:	1e44      	subs	r4, r0, #1
 80043fa:	2b5e      	cmp	r3, #94	; 0x5e
 80043fc:	bf13      	iteet	ne
 80043fe:	1c4a      	addne	r2, r1, #1
 8004400:	1c8a      	addeq	r2, r1, #2
 8004402:	784b      	ldrbeq	r3, [r1, #1]
 8004404:	2100      	movne	r1, #0
 8004406:	bf08      	it	eq
 8004408:	2101      	moveq	r1, #1
 800440a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800440e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004412:	42ac      	cmp	r4, r5
 8004414:	d1fb      	bne.n	800440e <__sccl+0x1a>
 8004416:	b913      	cbnz	r3, 800441e <__sccl+0x2a>
 8004418:	3a01      	subs	r2, #1
 800441a:	4610      	mov	r0, r2
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	f081 0401 	eor.w	r4, r1, #1
 8004422:	54c4      	strb	r4, [r0, r3]
 8004424:	1c51      	adds	r1, r2, #1
 8004426:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800442a:	1e4e      	subs	r6, r1, #1
 800442c:	2d2d      	cmp	r5, #45	; 0x2d
 800442e:	460a      	mov	r2, r1
 8004430:	d006      	beq.n	8004440 <__sccl+0x4c>
 8004432:	2d5d      	cmp	r5, #93	; 0x5d
 8004434:	d0f1      	beq.n	800441a <__sccl+0x26>
 8004436:	b90d      	cbnz	r5, 800443c <__sccl+0x48>
 8004438:	4632      	mov	r2, r6
 800443a:	e7ee      	b.n	800441a <__sccl+0x26>
 800443c:	462b      	mov	r3, r5
 800443e:	e7f0      	b.n	8004422 <__sccl+0x2e>
 8004440:	780e      	ldrb	r6, [r1, #0]
 8004442:	2e5d      	cmp	r6, #93	; 0x5d
 8004444:	d0fa      	beq.n	800443c <__sccl+0x48>
 8004446:	42b3      	cmp	r3, r6
 8004448:	dcf8      	bgt.n	800443c <__sccl+0x48>
 800444a:	3301      	adds	r3, #1
 800444c:	429e      	cmp	r6, r3
 800444e:	54c4      	strb	r4, [r0, r3]
 8004450:	dcfb      	bgt.n	800444a <__sccl+0x56>
 8004452:	3102      	adds	r1, #2
 8004454:	e7e7      	b.n	8004426 <__sccl+0x32>

08004456 <_strtol_l.isra.0>:
 8004456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445a:	4680      	mov	r8, r0
 800445c:	4689      	mov	r9, r1
 800445e:	4692      	mov	sl, r2
 8004460:	461e      	mov	r6, r3
 8004462:	460f      	mov	r7, r1
 8004464:	463d      	mov	r5, r7
 8004466:	9808      	ldr	r0, [sp, #32]
 8004468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800446c:	f7ff f836 	bl	80034dc <__locale_ctype_ptr_l>
 8004470:	4420      	add	r0, r4
 8004472:	7843      	ldrb	r3, [r0, #1]
 8004474:	f013 0308 	ands.w	r3, r3, #8
 8004478:	d132      	bne.n	80044e0 <_strtol_l.isra.0+0x8a>
 800447a:	2c2d      	cmp	r4, #45	; 0x2d
 800447c:	d132      	bne.n	80044e4 <_strtol_l.isra.0+0x8e>
 800447e:	2201      	movs	r2, #1
 8004480:	787c      	ldrb	r4, [r7, #1]
 8004482:	1cbd      	adds	r5, r7, #2
 8004484:	2e00      	cmp	r6, #0
 8004486:	d05d      	beq.n	8004544 <_strtol_l.isra.0+0xee>
 8004488:	2e10      	cmp	r6, #16
 800448a:	d109      	bne.n	80044a0 <_strtol_l.isra.0+0x4a>
 800448c:	2c30      	cmp	r4, #48	; 0x30
 800448e:	d107      	bne.n	80044a0 <_strtol_l.isra.0+0x4a>
 8004490:	782b      	ldrb	r3, [r5, #0]
 8004492:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004496:	2b58      	cmp	r3, #88	; 0x58
 8004498:	d14f      	bne.n	800453a <_strtol_l.isra.0+0xe4>
 800449a:	2610      	movs	r6, #16
 800449c:	786c      	ldrb	r4, [r5, #1]
 800449e:	3502      	adds	r5, #2
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	bf14      	ite	ne
 80044a4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80044a8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80044ac:	2700      	movs	r7, #0
 80044ae:	fbb1 fcf6 	udiv	ip, r1, r6
 80044b2:	4638      	mov	r0, r7
 80044b4:	fb06 1e1c 	mls	lr, r6, ip, r1
 80044b8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d817      	bhi.n	80044f0 <_strtol_l.isra.0+0x9a>
 80044c0:	461c      	mov	r4, r3
 80044c2:	42a6      	cmp	r6, r4
 80044c4:	dd23      	ble.n	800450e <_strtol_l.isra.0+0xb8>
 80044c6:	1c7b      	adds	r3, r7, #1
 80044c8:	d007      	beq.n	80044da <_strtol_l.isra.0+0x84>
 80044ca:	4584      	cmp	ip, r0
 80044cc:	d31c      	bcc.n	8004508 <_strtol_l.isra.0+0xb2>
 80044ce:	d101      	bne.n	80044d4 <_strtol_l.isra.0+0x7e>
 80044d0:	45a6      	cmp	lr, r4
 80044d2:	db19      	blt.n	8004508 <_strtol_l.isra.0+0xb2>
 80044d4:	2701      	movs	r7, #1
 80044d6:	fb00 4006 	mla	r0, r0, r6, r4
 80044da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044de:	e7eb      	b.n	80044b8 <_strtol_l.isra.0+0x62>
 80044e0:	462f      	mov	r7, r5
 80044e2:	e7bf      	b.n	8004464 <_strtol_l.isra.0+0xe>
 80044e4:	2c2b      	cmp	r4, #43	; 0x2b
 80044e6:	bf04      	itt	eq
 80044e8:	1cbd      	addeq	r5, r7, #2
 80044ea:	787c      	ldrbeq	r4, [r7, #1]
 80044ec:	461a      	mov	r2, r3
 80044ee:	e7c9      	b.n	8004484 <_strtol_l.isra.0+0x2e>
 80044f0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80044f4:	2b19      	cmp	r3, #25
 80044f6:	d801      	bhi.n	80044fc <_strtol_l.isra.0+0xa6>
 80044f8:	3c37      	subs	r4, #55	; 0x37
 80044fa:	e7e2      	b.n	80044c2 <_strtol_l.isra.0+0x6c>
 80044fc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004500:	2b19      	cmp	r3, #25
 8004502:	d804      	bhi.n	800450e <_strtol_l.isra.0+0xb8>
 8004504:	3c57      	subs	r4, #87	; 0x57
 8004506:	e7dc      	b.n	80044c2 <_strtol_l.isra.0+0x6c>
 8004508:	f04f 37ff 	mov.w	r7, #4294967295
 800450c:	e7e5      	b.n	80044da <_strtol_l.isra.0+0x84>
 800450e:	1c7b      	adds	r3, r7, #1
 8004510:	d108      	bne.n	8004524 <_strtol_l.isra.0+0xce>
 8004512:	2322      	movs	r3, #34	; 0x22
 8004514:	4608      	mov	r0, r1
 8004516:	f8c8 3000 	str.w	r3, [r8]
 800451a:	f1ba 0f00 	cmp.w	sl, #0
 800451e:	d107      	bne.n	8004530 <_strtol_l.isra.0+0xda>
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	b102      	cbz	r2, 8004528 <_strtol_l.isra.0+0xd2>
 8004526:	4240      	negs	r0, r0
 8004528:	f1ba 0f00 	cmp.w	sl, #0
 800452c:	d0f8      	beq.n	8004520 <_strtol_l.isra.0+0xca>
 800452e:	b10f      	cbz	r7, 8004534 <_strtol_l.isra.0+0xde>
 8004530:	f105 39ff 	add.w	r9, r5, #4294967295
 8004534:	f8ca 9000 	str.w	r9, [sl]
 8004538:	e7f2      	b.n	8004520 <_strtol_l.isra.0+0xca>
 800453a:	2430      	movs	r4, #48	; 0x30
 800453c:	2e00      	cmp	r6, #0
 800453e:	d1af      	bne.n	80044a0 <_strtol_l.isra.0+0x4a>
 8004540:	2608      	movs	r6, #8
 8004542:	e7ad      	b.n	80044a0 <_strtol_l.isra.0+0x4a>
 8004544:	2c30      	cmp	r4, #48	; 0x30
 8004546:	d0a3      	beq.n	8004490 <_strtol_l.isra.0+0x3a>
 8004548:	260a      	movs	r6, #10
 800454a:	e7a9      	b.n	80044a0 <_strtol_l.isra.0+0x4a>

0800454c <_strtol_r>:
 800454c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800454e:	4c06      	ldr	r4, [pc, #24]	; (8004568 <_strtol_r+0x1c>)
 8004550:	4d06      	ldr	r5, [pc, #24]	; (800456c <_strtol_r+0x20>)
 8004552:	6824      	ldr	r4, [r4, #0]
 8004554:	6a24      	ldr	r4, [r4, #32]
 8004556:	2c00      	cmp	r4, #0
 8004558:	bf08      	it	eq
 800455a:	462c      	moveq	r4, r5
 800455c:	9400      	str	r4, [sp, #0]
 800455e:	f7ff ff7a 	bl	8004456 <_strtol_l.isra.0>
 8004562:	b003      	add	sp, #12
 8004564:	bd30      	pop	{r4, r5, pc}
 8004566:	bf00      	nop
 8004568:	20000010 	.word	0x20000010
 800456c:	200000d8 	.word	0x200000d8

08004570 <__submore>:
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004574:	460c      	mov	r4, r1
 8004576:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800457c:	4299      	cmp	r1, r3
 800457e:	d11b      	bne.n	80045b8 <__submore+0x48>
 8004580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004584:	f7fd ff24 	bl	80023d0 <_malloc_r>
 8004588:	b918      	cbnz	r0, 8004592 <__submore+0x22>
 800458a:	f04f 30ff 	mov.w	r0, #4294967295
 800458e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	63a3      	str	r3, [r4, #56]	; 0x38
 8004598:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800459c:	6360      	str	r0, [r4, #52]	; 0x34
 800459e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80045a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80045aa:	7043      	strb	r3, [r0, #1]
 80045ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045b0:	7003      	strb	r3, [r0, #0]
 80045b2:	6020      	str	r0, [r4, #0]
 80045b4:	2000      	movs	r0, #0
 80045b6:	e7ea      	b.n	800458e <__submore+0x1e>
 80045b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80045ba:	0077      	lsls	r7, r6, #1
 80045bc:	463a      	mov	r2, r7
 80045be:	f7ff fbf0 	bl	8003da2 <_realloc_r>
 80045c2:	4605      	mov	r5, r0
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d0e0      	beq.n	800458a <__submore+0x1a>
 80045c8:	eb00 0806 	add.w	r8, r0, r6
 80045cc:	4601      	mov	r1, r0
 80045ce:	4632      	mov	r2, r6
 80045d0:	4640      	mov	r0, r8
 80045d2:	f7ff fbc2 	bl	8003d5a <memcpy>
 80045d6:	f8c4 8000 	str.w	r8, [r4]
 80045da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80045de:	e7e9      	b.n	80045b4 <__submore+0x44>

080045e0 <_malloc_usable_size_r>:
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f18      	subs	r0, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbc      	itt	lt
 80045ea:	580b      	ldrlt	r3, [r1, r0]
 80045ec:	18c0      	addlt	r0, r0, r3
 80045ee:	4770      	bx	lr

080045f0 <_gettimeofday>:
 80045f0:	2258      	movs	r2, #88	; 0x58
 80045f2:	4b02      	ldr	r3, [pc, #8]	; (80045fc <_gettimeofday+0xc>)
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	4770      	bx	lr
 80045fc:	200002cc 	.word	0x200002cc

08004600 <_init>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr

0800460c <_fini>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr
