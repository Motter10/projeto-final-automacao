
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007378  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b70  08007b70  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b78  08007b78  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b7c  08007b7c  00017b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08007b80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000244  08007dc4  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08007dc4  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e3c  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b35  00000000  00000000  000310a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  00033be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00034988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a510  00000000  00000000  000355b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e15f  00000000  00000000  0004fac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f4d2  00000000  00000000  0005dc27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed0f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  000ed174  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f177c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f17a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	08007470 	.word	0x08007470

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	08007470 	.word	0x08007470

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <__aeabi_frsub>:
 8000950:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000954:	e002      	b.n	800095c <__addsf3>
 8000956:	bf00      	nop

08000958 <__aeabi_fsub>:
 8000958:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800095c <__addsf3>:
 800095c:	0042      	lsls	r2, r0, #1
 800095e:	bf1f      	itttt	ne
 8000960:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000964:	ea92 0f03 	teqne	r2, r3
 8000968:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800096c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000970:	d06a      	beq.n	8000a48 <__addsf3+0xec>
 8000972:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000976:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800097a:	bfc1      	itttt	gt
 800097c:	18d2      	addgt	r2, r2, r3
 800097e:	4041      	eorgt	r1, r0
 8000980:	4048      	eorgt	r0, r1
 8000982:	4041      	eorgt	r1, r0
 8000984:	bfb8      	it	lt
 8000986:	425b      	neglt	r3, r3
 8000988:	2b19      	cmp	r3, #25
 800098a:	bf88      	it	hi
 800098c:	4770      	bxhi	lr
 800098e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000992:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4240      	negne	r0, r0
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009aa:	bf18      	it	ne
 80009ac:	4249      	negne	r1, r1
 80009ae:	ea92 0f03 	teq	r2, r3
 80009b2:	d03f      	beq.n	8000a34 <__addsf3+0xd8>
 80009b4:	f1a2 0201 	sub.w	r2, r2, #1
 80009b8:	fa41 fc03 	asr.w	ip, r1, r3
 80009bc:	eb10 000c 	adds.w	r0, r0, ip
 80009c0:	f1c3 0320 	rsb	r3, r3, #32
 80009c4:	fa01 f103 	lsl.w	r1, r1, r3
 80009c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009cc:	d502      	bpl.n	80009d4 <__addsf3+0x78>
 80009ce:	4249      	negs	r1, r1
 80009d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d8:	d313      	bcc.n	8000a02 <__addsf3+0xa6>
 80009da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009de:	d306      	bcc.n	80009ee <__addsf3+0x92>
 80009e0:	0840      	lsrs	r0, r0, #1
 80009e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e6:	f102 0201 	add.w	r2, r2, #1
 80009ea:	2afe      	cmp	r2, #254	; 0xfe
 80009ec:	d251      	bcs.n	8000a92 <__addsf3+0x136>
 80009ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f6:	bf08      	it	eq
 80009f8:	f020 0001 	biceq.w	r0, r0, #1
 80009fc:	ea40 0003 	orr.w	r0, r0, r3
 8000a00:	4770      	bx	lr
 8000a02:	0049      	lsls	r1, r1, #1
 8000a04:	eb40 0000 	adc.w	r0, r0, r0
 8000a08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a10:	d1ed      	bne.n	80009ee <__addsf3+0x92>
 8000a12:	fab0 fc80 	clz	ip, r0
 8000a16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a22:	bfaa      	itet	ge
 8000a24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a28:	4252      	neglt	r2, r2
 8000a2a:	4318      	orrge	r0, r3
 8000a2c:	bfbc      	itt	lt
 8000a2e:	40d0      	lsrlt	r0, r2
 8000a30:	4318      	orrlt	r0, r3
 8000a32:	4770      	bx	lr
 8000a34:	f092 0f00 	teq	r2, #0
 8000a38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a3c:	bf06      	itte	eq
 8000a3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a42:	3201      	addeq	r2, #1
 8000a44:	3b01      	subne	r3, #1
 8000a46:	e7b5      	b.n	80009b4 <__addsf3+0x58>
 8000a48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a56:	d021      	beq.n	8000a9c <__addsf3+0x140>
 8000a58:	ea92 0f03 	teq	r2, r3
 8000a5c:	d004      	beq.n	8000a68 <__addsf3+0x10c>
 8000a5e:	f092 0f00 	teq	r2, #0
 8000a62:	bf08      	it	eq
 8000a64:	4608      	moveq	r0, r1
 8000a66:	4770      	bx	lr
 8000a68:	ea90 0f01 	teq	r0, r1
 8000a6c:	bf1c      	itt	ne
 8000a6e:	2000      	movne	r0, #0
 8000a70:	4770      	bxne	lr
 8000a72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a76:	d104      	bne.n	8000a82 <__addsf3+0x126>
 8000a78:	0040      	lsls	r0, r0, #1
 8000a7a:	bf28      	it	cs
 8000a7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a80:	4770      	bx	lr
 8000a82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a86:	bf3c      	itt	cc
 8000a88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a8c:	4770      	bxcc	lr
 8000a8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	4770      	bx	lr
 8000a9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aa0:	bf16      	itet	ne
 8000aa2:	4608      	movne	r0, r1
 8000aa4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa8:	4601      	movne	r1, r0
 8000aaa:	0242      	lsls	r2, r0, #9
 8000aac:	bf06      	itte	eq
 8000aae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ab2:	ea90 0f01 	teqeq	r0, r1
 8000ab6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aba:	4770      	bx	lr

08000abc <__aeabi_ui2f>:
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e004      	b.n	8000acc <__aeabi_i2f+0x8>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_i2f>:
 8000ac4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	bf48      	it	mi
 8000aca:	4240      	negmi	r0, r0
 8000acc:	ea5f 0c00 	movs.w	ip, r0
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad8:	4601      	mov	r1, r0
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	e01c      	b.n	8000b1a <__aeabi_l2f+0x2a>

08000ae0 <__aeabi_ul2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e00a      	b.n	8000b04 <__aeabi_l2f+0x14>
 8000aee:	bf00      	nop

08000af0 <__aeabi_l2f>:
 8000af0:	ea50 0201 	orrs.w	r2, r0, r1
 8000af4:	bf08      	it	eq
 8000af6:	4770      	bxeq	lr
 8000af8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__aeabi_l2f+0x14>
 8000afe:	4240      	negs	r0, r0
 8000b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b04:	ea5f 0c01 	movs.w	ip, r1
 8000b08:	bf02      	ittt	eq
 8000b0a:	4684      	moveq	ip, r0
 8000b0c:	4601      	moveq	r1, r0
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b14:	bf08      	it	eq
 8000b16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1e:	fabc f28c 	clz	r2, ip
 8000b22:	3a08      	subs	r2, #8
 8000b24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b28:	db10      	blt.n	8000b4c <__aeabi_l2f+0x5c>
 8000b2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2e:	4463      	add	r3, ip
 8000b30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b34:	f1c2 0220 	rsb	r2, r2, #32
 8000b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b40:	eb43 0002 	adc.w	r0, r3, r2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f102 0220 	add.w	r2, r2, #32
 8000b50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b54:	f1c2 0220 	rsb	r2, r2, #32
 8000b58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b60:	eb43 0002 	adc.w	r0, r3, r2
 8000b64:	bf08      	it	eq
 8000b66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_fmul>:
 8000b6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b74:	bf1e      	ittt	ne
 8000b76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b7a:	ea92 0f0c 	teqne	r2, ip
 8000b7e:	ea93 0f0c 	teqne	r3, ip
 8000b82:	d06f      	beq.n	8000c64 <__aeabi_fmul+0xf8>
 8000b84:	441a      	add	r2, r3
 8000b86:	ea80 0c01 	eor.w	ip, r0, r1
 8000b8a:	0240      	lsls	r0, r0, #9
 8000b8c:	bf18      	it	ne
 8000b8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b92:	d01e      	beq.n	8000bd2 <__aeabi_fmul+0x66>
 8000b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ba0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bac:	bf3e      	ittt	cc
 8000bae:	0049      	lslcc	r1, r1, #1
 8000bb0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb4:	005b      	lslcc	r3, r3, #1
 8000bb6:	ea40 0001 	orr.w	r0, r0, r1
 8000bba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bbe:	2afd      	cmp	r2, #253	; 0xfd
 8000bc0:	d81d      	bhi.n	8000bfe <__aeabi_fmul+0x92>
 8000bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	4770      	bx	lr
 8000bd2:	f090 0f00 	teq	r0, #0
 8000bd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bda:	bf08      	it	eq
 8000bdc:	0249      	lsleq	r1, r1, #9
 8000bde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be6:	3a7f      	subs	r2, #127	; 0x7f
 8000be8:	bfc2      	ittt	gt
 8000bea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bf2:	4770      	bxgt	lr
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	dc5d      	bgt.n	8000cbc <__aeabi_fmul+0x150>
 8000c00:	f112 0f19 	cmn.w	r2, #25
 8000c04:	bfdc      	itt	le
 8000c06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c0a:	4770      	bxle	lr
 8000c0c:	f1c2 0200 	rsb	r2, r2, #0
 8000c10:	0041      	lsls	r1, r0, #1
 8000c12:	fa21 f102 	lsr.w	r1, r1, r2
 8000c16:	f1c2 0220 	rsb	r2, r2, #32
 8000c1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c22:	f140 0000 	adc.w	r0, r0, #0
 8000c26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c2a:	bf08      	it	eq
 8000c2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c30:	4770      	bx	lr
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0040      	lsleq	r0, r0, #1
 8000c3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c42:	3a01      	subeq	r2, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xce>
 8000c46:	ea40 000c 	orr.w	r0, r0, ip
 8000c4a:	f093 0f00 	teq	r3, #0
 8000c4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c52:	bf02      	ittt	eq
 8000c54:	0049      	lsleq	r1, r1, #1
 8000c56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c5a:	3b01      	subeq	r3, #1
 8000c5c:	d0f9      	beq.n	8000c52 <__aeabi_fmul+0xe6>
 8000c5e:	ea41 010c 	orr.w	r1, r1, ip
 8000c62:	e78f      	b.n	8000b84 <__aeabi_fmul+0x18>
 8000c64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c68:	ea92 0f0c 	teq	r2, ip
 8000c6c:	bf18      	it	ne
 8000c6e:	ea93 0f0c 	teqne	r3, ip
 8000c72:	d00a      	beq.n	8000c8a <__aeabi_fmul+0x11e>
 8000c74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c78:	bf18      	it	ne
 8000c7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7e:	d1d8      	bne.n	8000c32 <__aeabi_fmul+0xc6>
 8000c80:	ea80 0001 	eor.w	r0, r0, r1
 8000c84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f090 0f00 	teq	r0, #0
 8000c8e:	bf17      	itett	ne
 8000c90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c94:	4608      	moveq	r0, r1
 8000c96:	f091 0f00 	teqne	r1, #0
 8000c9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9e:	d014      	beq.n	8000cca <__aeabi_fmul+0x15e>
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	d101      	bne.n	8000caa <__aeabi_fmul+0x13e>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	d10f      	bne.n	8000cca <__aeabi_fmul+0x15e>
 8000caa:	ea93 0f0c 	teq	r3, ip
 8000cae:	d103      	bne.n	8000cb8 <__aeabi_fmul+0x14c>
 8000cb0:	024b      	lsls	r3, r1, #9
 8000cb2:	bf18      	it	ne
 8000cb4:	4608      	movne	r0, r1
 8000cb6:	d108      	bne.n	8000cca <__aeabi_fmul+0x15e>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc8:	4770      	bx	lr
 8000cca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fdiv>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d069      	beq.n	8000dc0 <__aeabi_fdiv+0xec>
 8000cec:	eba2 0203 	sub.w	r2, r2, r3
 8000cf0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf4:	0249      	lsls	r1, r1, #9
 8000cf6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cfa:	d037      	beq.n	8000d6c <__aeabi_fdiv+0x98>
 8000cfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	bf38      	it	cc
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	bf24      	itt	cs
 8000d1e:	1a5b      	subcs	r3, r3, r1
 8000d20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d28:	bf24      	itt	cs
 8000d2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d36:	bf24      	itt	cs
 8000d38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d44:	bf24      	itt	cs
 8000d46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d56:	d1e0      	bne.n	8000d1a <__aeabi_fdiv+0x46>
 8000d58:	2afd      	cmp	r2, #253	; 0xfd
 8000d5a:	f63f af50 	bhi.w	8000bfe <__aeabi_fmul+0x92>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d64:	bf08      	it	eq
 8000d66:	f020 0001 	biceq.w	r0, r0, #1
 8000d6a:	4770      	bx	lr
 8000d6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d74:	327f      	adds	r2, #127	; 0x7f
 8000d76:	bfc2      	ittt	gt
 8000d78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d80:	4770      	bxgt	lr
 8000d82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	3a01      	subs	r2, #1
 8000d8c:	e737      	b.n	8000bfe <__aeabi_fmul+0x92>
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xc2>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fdiv+0xda>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e795      	b.n	8000cec <__aeabi_fdiv+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	d108      	bne.n	8000ddc <__aeabi_fdiv+0x108>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	f47f af7d 	bne.w	8000cca <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	f47f af70 	bne.w	8000cb8 <__aeabi_fmul+0x14c>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	e776      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000ddc:	ea93 0f0c 	teq	r3, ip
 8000de0:	d104      	bne.n	8000dec <__aeabi_fdiv+0x118>
 8000de2:	024b      	lsls	r3, r1, #9
 8000de4:	f43f af4c 	beq.w	8000c80 <__aeabi_fmul+0x114>
 8000de8:	4608      	mov	r0, r1
 8000dea:	e76e      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1ca      	bne.n	8000d8e <__aeabi_fdiv+0xba>
 8000df8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dfc:	f47f af5c 	bne.w	8000cb8 <__aeabi_fmul+0x14c>
 8000e00:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	f47f af3c 	bne.w	8000c80 <__aeabi_fmul+0x114>
 8000e08:	e75f      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000e0a:	bf00      	nop

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2uiz>:
 8000ef8:	0042      	lsls	r2, r0, #1
 8000efa:	d20e      	bcs.n	8000f1a <__aeabi_f2uiz+0x22>
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f00:	d30b      	bcc.n	8000f1a <__aeabi_f2uiz+0x22>
 8000f02:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d409      	bmi.n	8000f20 <__aeabi_f2uiz+0x28>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2uiz+0x32>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d102      	bne.n	8000f30 <__aeabi_f2uiz+0x38>
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__aeabi_ldivmod>:
 8000f38:	b97b      	cbnz	r3, 8000f5a <__aeabi_ldivmod+0x22>
 8000f3a:	b972      	cbnz	r2, 8000f5a <__aeabi_ldivmod+0x22>
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	bfbe      	ittt	lt
 8000f40:	2000      	movlt	r0, #0
 8000f42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f46:	e006      	blt.n	8000f56 <__aeabi_ldivmod+0x1e>
 8000f48:	bf08      	it	eq
 8000f4a:	2800      	cmpeq	r0, #0
 8000f4c:	bf1c      	itt	ne
 8000f4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f52:	f04f 30ff 	movne.w	r0, #4294967295
 8000f56:	f000 b9a7 	b.w	80012a8 <__aeabi_idiv0>
 8000f5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f62:	2900      	cmp	r1, #0
 8000f64:	db09      	blt.n	8000f7a <__aeabi_ldivmod+0x42>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db1a      	blt.n	8000fa0 <__aeabi_ldivmod+0x68>
 8000f6a:	f000 f835 	bl	8000fd8 <__udivmoddi4>
 8000f6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f76:	b004      	add	sp, #16
 8000f78:	4770      	bx	lr
 8000f7a:	4240      	negs	r0, r0
 8000f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db1b      	blt.n	8000fbc <__aeabi_ldivmod+0x84>
 8000f84:	f000 f828 	bl	8000fd8 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4240      	negs	r0, r0
 8000f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f98:	4252      	negs	r2, r2
 8000f9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f9e:	4770      	bx	lr
 8000fa0:	4252      	negs	r2, r2
 8000fa2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fa6:	f000 f817 	bl	8000fd8 <__udivmoddi4>
 8000faa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fba:	4770      	bx	lr
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	f000 f809 	bl	8000fd8 <__udivmoddi4>
 8000fc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fce:	b004      	add	sp, #16
 8000fd0:	4252      	negs	r2, r2
 8000fd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fd6:	4770      	bx	lr

08000fd8 <__udivmoddi4>:
 8000fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fdc:	468c      	mov	ip, r1
 8000fde:	4604      	mov	r4, r0
 8000fe0:	9e08      	ldr	r6, [sp, #32]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d14b      	bne.n	800107e <__udivmoddi4+0xa6>
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	4615      	mov	r5, r2
 8000fea:	d967      	bls.n	80010bc <__udivmoddi4+0xe4>
 8000fec:	fab2 f282 	clz	r2, r2
 8000ff0:	b14a      	cbz	r2, 8001006 <__udivmoddi4+0x2e>
 8000ff2:	f1c2 0720 	rsb	r7, r2, #32
 8000ff6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffa:	fa20 f707 	lsr.w	r7, r0, r7
 8000ffe:	4095      	lsls	r5, r2
 8001000:	ea47 0c03 	orr.w	ip, r7, r3
 8001004:	4094      	lsls	r4, r2
 8001006:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800100a:	fbbc f7fe 	udiv	r7, ip, lr
 800100e:	fa1f f885 	uxth.w	r8, r5
 8001012:	fb0e c317 	mls	r3, lr, r7, ip
 8001016:	fb07 f908 	mul.w	r9, r7, r8
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001020:	4599      	cmp	r9, r3
 8001022:	d909      	bls.n	8001038 <__udivmoddi4+0x60>
 8001024:	18eb      	adds	r3, r5, r3
 8001026:	f107 31ff 	add.w	r1, r7, #4294967295
 800102a:	f080 811c 	bcs.w	8001266 <__udivmoddi4+0x28e>
 800102e:	4599      	cmp	r9, r3
 8001030:	f240 8119 	bls.w	8001266 <__udivmoddi4+0x28e>
 8001034:	3f02      	subs	r7, #2
 8001036:	442b      	add	r3, r5
 8001038:	eba3 0309 	sub.w	r3, r3, r9
 800103c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001040:	fb0e 3310 	mls	r3, lr, r0, r3
 8001044:	fb00 f108 	mul.w	r1, r0, r8
 8001048:	b2a4      	uxth	r4, r4
 800104a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800104e:	42a1      	cmp	r1, r4
 8001050:	d909      	bls.n	8001066 <__udivmoddi4+0x8e>
 8001052:	192c      	adds	r4, r5, r4
 8001054:	f100 33ff 	add.w	r3, r0, #4294967295
 8001058:	f080 8107 	bcs.w	800126a <__udivmoddi4+0x292>
 800105c:	42a1      	cmp	r1, r4
 800105e:	f240 8104 	bls.w	800126a <__udivmoddi4+0x292>
 8001062:	3802      	subs	r0, #2
 8001064:	442c      	add	r4, r5
 8001066:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800106a:	2700      	movs	r7, #0
 800106c:	1a64      	subs	r4, r4, r1
 800106e:	b11e      	cbz	r6, 8001078 <__udivmoddi4+0xa0>
 8001070:	2300      	movs	r3, #0
 8001072:	40d4      	lsrs	r4, r2
 8001074:	e9c6 4300 	strd	r4, r3, [r6]
 8001078:	4639      	mov	r1, r7
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	428b      	cmp	r3, r1
 8001080:	d909      	bls.n	8001096 <__udivmoddi4+0xbe>
 8001082:	2e00      	cmp	r6, #0
 8001084:	f000 80ec 	beq.w	8001260 <__udivmoddi4+0x288>
 8001088:	2700      	movs	r7, #0
 800108a:	e9c6 0100 	strd	r0, r1, [r6]
 800108e:	4638      	mov	r0, r7
 8001090:	4639      	mov	r1, r7
 8001092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001096:	fab3 f783 	clz	r7, r3
 800109a:	2f00      	cmp	r7, #0
 800109c:	d148      	bne.n	8001130 <__udivmoddi4+0x158>
 800109e:	428b      	cmp	r3, r1
 80010a0:	d302      	bcc.n	80010a8 <__udivmoddi4+0xd0>
 80010a2:	4282      	cmp	r2, r0
 80010a4:	f200 80fb 	bhi.w	800129e <__udivmoddi4+0x2c6>
 80010a8:	1a84      	subs	r4, r0, r2
 80010aa:	eb61 0303 	sbc.w	r3, r1, r3
 80010ae:	2001      	movs	r0, #1
 80010b0:	469c      	mov	ip, r3
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	d0e0      	beq.n	8001078 <__udivmoddi4+0xa0>
 80010b6:	e9c6 4c00 	strd	r4, ip, [r6]
 80010ba:	e7dd      	b.n	8001078 <__udivmoddi4+0xa0>
 80010bc:	b902      	cbnz	r2, 80010c0 <__udivmoddi4+0xe8>
 80010be:	deff      	udf	#255	; 0xff
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	f040 808f 	bne.w	80011e8 <__udivmoddi4+0x210>
 80010ca:	2701      	movs	r7, #1
 80010cc:	1b49      	subs	r1, r1, r5
 80010ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80010d2:	fa1f f985 	uxth.w	r9, r5
 80010d6:	fbb1 fef8 	udiv	lr, r1, r8
 80010da:	fb08 111e 	mls	r1, r8, lr, r1
 80010de:	fb09 f00e 	mul.w	r0, r9, lr
 80010e2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80010e6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d907      	bls.n	80010fe <__udivmoddi4+0x126>
 80010ee:	18eb      	adds	r3, r5, r3
 80010f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80010f4:	d202      	bcs.n	80010fc <__udivmoddi4+0x124>
 80010f6:	4298      	cmp	r0, r3
 80010f8:	f200 80cd 	bhi.w	8001296 <__udivmoddi4+0x2be>
 80010fc:	468e      	mov	lr, r1
 80010fe:	1a1b      	subs	r3, r3, r0
 8001100:	fbb3 f0f8 	udiv	r0, r3, r8
 8001104:	fb08 3310 	mls	r3, r8, r0, r3
 8001108:	fb09 f900 	mul.w	r9, r9, r0
 800110c:	b2a4      	uxth	r4, r4
 800110e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001112:	45a1      	cmp	r9, r4
 8001114:	d907      	bls.n	8001126 <__udivmoddi4+0x14e>
 8001116:	192c      	adds	r4, r5, r4
 8001118:	f100 33ff 	add.w	r3, r0, #4294967295
 800111c:	d202      	bcs.n	8001124 <__udivmoddi4+0x14c>
 800111e:	45a1      	cmp	r9, r4
 8001120:	f200 80b6 	bhi.w	8001290 <__udivmoddi4+0x2b8>
 8001124:	4618      	mov	r0, r3
 8001126:	eba4 0409 	sub.w	r4, r4, r9
 800112a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800112e:	e79e      	b.n	800106e <__udivmoddi4+0x96>
 8001130:	f1c7 0520 	rsb	r5, r7, #32
 8001134:	40bb      	lsls	r3, r7
 8001136:	fa22 fc05 	lsr.w	ip, r2, r5
 800113a:	ea4c 0c03 	orr.w	ip, ip, r3
 800113e:	fa21 f405 	lsr.w	r4, r1, r5
 8001142:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001146:	fbb4 f9fe 	udiv	r9, r4, lr
 800114a:	fa1f f88c 	uxth.w	r8, ip
 800114e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001152:	fa20 f305 	lsr.w	r3, r0, r5
 8001156:	40b9      	lsls	r1, r7
 8001158:	fb09 fa08 	mul.w	sl, r9, r8
 800115c:	4319      	orrs	r1, r3
 800115e:	0c0b      	lsrs	r3, r1, #16
 8001160:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001164:	45a2      	cmp	sl, r4
 8001166:	fa02 f207 	lsl.w	r2, r2, r7
 800116a:	fa00 f307 	lsl.w	r3, r0, r7
 800116e:	d90b      	bls.n	8001188 <__udivmoddi4+0x1b0>
 8001170:	eb1c 0404 	adds.w	r4, ip, r4
 8001174:	f109 30ff 	add.w	r0, r9, #4294967295
 8001178:	f080 8088 	bcs.w	800128c <__udivmoddi4+0x2b4>
 800117c:	45a2      	cmp	sl, r4
 800117e:	f240 8085 	bls.w	800128c <__udivmoddi4+0x2b4>
 8001182:	f1a9 0902 	sub.w	r9, r9, #2
 8001186:	4464      	add	r4, ip
 8001188:	eba4 040a 	sub.w	r4, r4, sl
 800118c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001190:	fb0e 4410 	mls	r4, lr, r0, r4
 8001194:	fb00 fa08 	mul.w	sl, r0, r8
 8001198:	b289      	uxth	r1, r1
 800119a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800119e:	45a2      	cmp	sl, r4
 80011a0:	d908      	bls.n	80011b4 <__udivmoddi4+0x1dc>
 80011a2:	eb1c 0404 	adds.w	r4, ip, r4
 80011a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80011aa:	d26b      	bcs.n	8001284 <__udivmoddi4+0x2ac>
 80011ac:	45a2      	cmp	sl, r4
 80011ae:	d969      	bls.n	8001284 <__udivmoddi4+0x2ac>
 80011b0:	3802      	subs	r0, #2
 80011b2:	4464      	add	r4, ip
 80011b4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011b8:	fba0 8902 	umull	r8, r9, r0, r2
 80011bc:	eba4 040a 	sub.w	r4, r4, sl
 80011c0:	454c      	cmp	r4, r9
 80011c2:	4641      	mov	r1, r8
 80011c4:	46ce      	mov	lr, r9
 80011c6:	d354      	bcc.n	8001272 <__udivmoddi4+0x29a>
 80011c8:	d051      	beq.n	800126e <__udivmoddi4+0x296>
 80011ca:	2e00      	cmp	r6, #0
 80011cc:	d069      	beq.n	80012a2 <__udivmoddi4+0x2ca>
 80011ce:	1a5a      	subs	r2, r3, r1
 80011d0:	eb64 040e 	sbc.w	r4, r4, lr
 80011d4:	fa04 f505 	lsl.w	r5, r4, r5
 80011d8:	fa22 f307 	lsr.w	r3, r2, r7
 80011dc:	40fc      	lsrs	r4, r7
 80011de:	431d      	orrs	r5, r3
 80011e0:	e9c6 5400 	strd	r5, r4, [r6]
 80011e4:	2700      	movs	r7, #0
 80011e6:	e747      	b.n	8001078 <__udivmoddi4+0xa0>
 80011e8:	4095      	lsls	r5, r2
 80011ea:	f1c2 0320 	rsb	r3, r2, #32
 80011ee:	fa21 f003 	lsr.w	r0, r1, r3
 80011f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011f6:	fbb0 f7f8 	udiv	r7, r0, r8
 80011fa:	fa1f f985 	uxth.w	r9, r5
 80011fe:	fb08 0017 	mls	r0, r8, r7, r0
 8001202:	fa24 f303 	lsr.w	r3, r4, r3
 8001206:	4091      	lsls	r1, r2
 8001208:	fb07 fc09 	mul.w	ip, r7, r9
 800120c:	430b      	orrs	r3, r1
 800120e:	0c19      	lsrs	r1, r3, #16
 8001210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001214:	458c      	cmp	ip, r1
 8001216:	fa04 f402 	lsl.w	r4, r4, r2
 800121a:	d907      	bls.n	800122c <__udivmoddi4+0x254>
 800121c:	1869      	adds	r1, r5, r1
 800121e:	f107 30ff 	add.w	r0, r7, #4294967295
 8001222:	d231      	bcs.n	8001288 <__udivmoddi4+0x2b0>
 8001224:	458c      	cmp	ip, r1
 8001226:	d92f      	bls.n	8001288 <__udivmoddi4+0x2b0>
 8001228:	3f02      	subs	r7, #2
 800122a:	4429      	add	r1, r5
 800122c:	eba1 010c 	sub.w	r1, r1, ip
 8001230:	fbb1 f0f8 	udiv	r0, r1, r8
 8001234:	fb08 1c10 	mls	ip, r8, r0, r1
 8001238:	fb00 fe09 	mul.w	lr, r0, r9
 800123c:	b299      	uxth	r1, r3
 800123e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001242:	458e      	cmp	lr, r1
 8001244:	d907      	bls.n	8001256 <__udivmoddi4+0x27e>
 8001246:	1869      	adds	r1, r5, r1
 8001248:	f100 33ff 	add.w	r3, r0, #4294967295
 800124c:	d218      	bcs.n	8001280 <__udivmoddi4+0x2a8>
 800124e:	458e      	cmp	lr, r1
 8001250:	d916      	bls.n	8001280 <__udivmoddi4+0x2a8>
 8001252:	3802      	subs	r0, #2
 8001254:	4429      	add	r1, r5
 8001256:	eba1 010e 	sub.w	r1, r1, lr
 800125a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800125e:	e73a      	b.n	80010d6 <__udivmoddi4+0xfe>
 8001260:	4637      	mov	r7, r6
 8001262:	4630      	mov	r0, r6
 8001264:	e708      	b.n	8001078 <__udivmoddi4+0xa0>
 8001266:	460f      	mov	r7, r1
 8001268:	e6e6      	b.n	8001038 <__udivmoddi4+0x60>
 800126a:	4618      	mov	r0, r3
 800126c:	e6fb      	b.n	8001066 <__udivmoddi4+0x8e>
 800126e:	4543      	cmp	r3, r8
 8001270:	d2ab      	bcs.n	80011ca <__udivmoddi4+0x1f2>
 8001272:	ebb8 0102 	subs.w	r1, r8, r2
 8001276:	eb69 020c 	sbc.w	r2, r9, ip
 800127a:	3801      	subs	r0, #1
 800127c:	4696      	mov	lr, r2
 800127e:	e7a4      	b.n	80011ca <__udivmoddi4+0x1f2>
 8001280:	4618      	mov	r0, r3
 8001282:	e7e8      	b.n	8001256 <__udivmoddi4+0x27e>
 8001284:	4608      	mov	r0, r1
 8001286:	e795      	b.n	80011b4 <__udivmoddi4+0x1dc>
 8001288:	4607      	mov	r7, r0
 800128a:	e7cf      	b.n	800122c <__udivmoddi4+0x254>
 800128c:	4681      	mov	r9, r0
 800128e:	e77b      	b.n	8001188 <__udivmoddi4+0x1b0>
 8001290:	3802      	subs	r0, #2
 8001292:	442c      	add	r4, r5
 8001294:	e747      	b.n	8001126 <__udivmoddi4+0x14e>
 8001296:	f1ae 0e02 	sub.w	lr, lr, #2
 800129a:	442b      	add	r3, r5
 800129c:	e72f      	b.n	80010fe <__udivmoddi4+0x126>
 800129e:	4638      	mov	r0, r7
 80012a0:	e707      	b.n	80010b2 <__udivmoddi4+0xda>
 80012a2:	4637      	mov	r7, r6
 80012a4:	e6e8      	b.n	8001078 <__udivmoddi4+0xa0>
 80012a6:	bf00      	nop

080012a8 <__aeabi_idiv0>:
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <ADC_Init>:

uint32_t adc_data[NUMBER_OF_CONVERSTION];
uint8_t  adc_data_ready = 0;

void ADC_Init(ADC_HandleTypeDef hadc1)
{
 80012ac:	b084      	sub	sp, #16
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	f107 0c08 	add.w	ip, r7, #8
 80012b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//calibração do ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80012ba:	f107 0008 	add.w	r0, r7, #8
 80012be:	f001 fdfd 	bl	8002ebc <HAL_ADCEx_Calibration_Start>
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ca:	b004      	add	sp, #16
 80012cc:	4770      	bx	lr
	...

080012d0 <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef hadc1, ADC_CHANNEL_Id channel_id)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	f107 0c08 	add.w	ip, r7, #8
 80012da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	adc_data_ready = 0;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <ADC_GetValue+0x40>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc_data, NUMBER_OF_CONVERSTION);
 80012e4:	2204      	movs	r2, #4
 80012e6:	490b      	ldr	r1, [pc, #44]	; (8001314 <ADC_GetValue+0x44>)
 80012e8:	f107 0008 	add.w	r0, r7, #8
 80012ec:	f001 fb0c 	bl	8002908 <HAL_ADC_Start_DMA>

	HAL_ADC_Stop(&hadc1);
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	f001 fadc 	bl	80028b0 <HAL_ADC_Stop>

//	while(!adc_data_ready);

	return adc_data[channel_id];
 80012f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <ADC_GetValue+0x44>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800130a:	b004      	add	sp, #16
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000260 	.word	0x20000260
 8001314:	20000298 	.word	0x20000298

08001318 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	adc_data_ready = 1;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_ADC_ConvCpltCallback+0x18>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000260 	.word	0x20000260

08001334 <LCD_Send>:
 *
 * Aciona pino enable, espera 15ms, desaciona pino enable
 *
 * @retval Nenhum
 */
void LCD_Send() {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_PINS, EN, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <LCD_Send+0x28>)
 8001340:	f002 fac5 	bl	80038ce <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001344:	200f      	movs	r0, #15
 8001346:	f001 f9b9 	bl	80026bc <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_PINS, EN, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <LCD_Send+0x28>)
 8001352:	f002 fabc 	bl	80038ce <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40010c00 	.word	0x40010c00

08001360 <LCD_Write>:
 *
 * @retval Nenhum
 * @param[in] data byte a ser enviado
 * @param[in] is_data 1 se for dado, 0 se for instrução
 */
void LCD_Write(uint8_t data, bool is_data) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CTRL_PINS, RS, is_data);  //instrução / data
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	461a      	mov	r2, r3
 8001374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001378:	4825      	ldr	r0, [pc, #148]	; (8001410 <LCD_Write+0xb0>)
 800137a:	f002 faa8 	bl	80038ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_PINS, RW, 0);		//escrita
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001384:	4822      	ldr	r0, [pc, #136]	; (8001410 <LCD_Write+0xb0>)
 8001386:	f002 faa2 	bl	80038ce <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e017      	b.n	80013c0 <LCD_Write+0x60>
			{
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	b299      	uxth	r1, r3
				data & (1 << (i + 4)));
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3304      	adds	r3, #4
 80013a0:	2201      	movs	r2, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4013      	ands	r3, r2
 80013ae:	b25b      	sxtb	r3, r3
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	4816      	ldr	r0, [pc, #88]	; (8001410 <LCD_Write+0xb0>)
 80013b6:	f002 fa8a 	bl	80038ce <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d9e4      	bls.n	8001390 <LCD_Write+0x30>
		//00100111
	}

	LCD_Send();
 80013c6:	f7ff ffb5 	bl	8001334 <LCD_Send>

	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]
 80013ce:	e016      	b.n	80013fe <LCD_Write+0x9e>
			{
		HAL_GPIO_WritePin(DATA_PINS, (uint16_t) FRST_PIN << i, data & (1 << i));
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	b299      	uxth	r1, r3
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	2201      	movs	r2, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4013      	ands	r3, r2
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <LCD_Write+0xb0>)
 80013f4:	f002 fa6b 	bl	80038ce <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73bb      	strb	r3, [r7, #14]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d9e5      	bls.n	80013d0 <LCD_Write+0x70>
	}

	LCD_Send();
 8001404:	f7ff ff96 	bl	8001334 <LCD_Send>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010c00 	.word	0x40010c00

08001414 <LCD_Write_Buffer>:
 *
 *
 * @retval Nenhum
 * @param[in] *data string a ser enviado
 */
void LCD_Write_Buffer(uint8_t *data) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e069      	b.n	80014f6 <LCD_Write_Buffer+0xe2>
		if(i == 17)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b11      	cmp	r3, #17
 8001426:	d103      	bne.n	8001430 <LCD_Write_Buffer+0x1c>
		{
			LCD_Write(0xC0, 0);
 8001428:	2100      	movs	r1, #0
 800142a:	20c0      	movs	r0, #192	; 0xc0
 800142c:	f7ff ff98 	bl	8001360 <LCD_Write>
		}
		//caracter espciais
		switch (*data) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2bc3      	cmp	r3, #195	; 0xc3
 8001436:	d152      	bne.n	80014de <LCD_Write_Buffer+0xca>
			case 195:
				data++;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
				switch (*data) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3ba1      	subs	r3, #161	; 0xa1
 8001444:	2b14      	cmp	r3, #20
 8001446:	d846      	bhi.n	80014d6 <LCD_Write_Buffer+0xc2>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <LCD_Write_Buffer+0x3c>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	080014a5 	.word	0x080014a5
 8001454:	080014d7 	.word	0x080014d7
 8001458:	080014c3 	.word	0x080014c3
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014d7 	.word	0x080014d7
 8001464:	080014d7 	.word	0x080014d7
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014d7 	.word	0x080014d7
 8001470:	080014af 	.word	0x080014af
 8001474:	080014d7 	.word	0x080014d7
 8001478:	080014d7 	.word	0x080014d7
 800147c:	080014d7 	.word	0x080014d7
 8001480:	080014d7 	.word	0x080014d7
 8001484:	080014d7 	.word	0x080014d7
 8001488:	080014d7 	.word	0x080014d7
 800148c:	080014d7 	.word	0x080014d7
 8001490:	080014d7 	.word	0x080014d7
 8001494:	080014d7 	.word	0x080014d7
 8001498:	080014d7 	.word	0x080014d7
 800149c:	080014d7 	.word	0x080014d7
 80014a0:	080014cd 	.word	0x080014cd
					case 161:
						LCD_Write(0, 1);
 80014a4:	2101      	movs	r1, #1
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ff5a 	bl	8001360 <LCD_Write>
						break;
 80014ac:	e013      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 169:
						LCD_Write(1, 1);
 80014ae:	2101      	movs	r1, #1
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff ff55 	bl	8001360 <LCD_Write>
						break;
 80014b6:	e00e      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 167:
						LCD_Write(2, 1);
 80014b8:	2101      	movs	r1, #1
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff ff50 	bl	8001360 <LCD_Write>
						break;
 80014c0:	e009      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 163:
						LCD_Write(3, 1);
 80014c2:	2101      	movs	r1, #1
 80014c4:	2003      	movs	r0, #3
 80014c6:	f7ff ff4b 	bl	8001360 <LCD_Write>
						break;
 80014ca:	e004      	b.n	80014d6 <LCD_Write_Buffer+0xc2>
					case 181:
						LCD_Write(4, 1);
 80014cc:	2101      	movs	r1, #1
 80014ce:	2004      	movs	r0, #4
 80014d0:	f7ff ff46 	bl	8001360 <LCD_Write>
						break;
 80014d4:	bf00      	nop
				}
				data++;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3301      	adds	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
				break;
 80014dc:	e008      	b.n	80014f0 <LCD_Write_Buffer+0xdc>
			default:
				LCD_Write(*data++, 1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff39 	bl	8001360 <LCD_Write>
				break;
 80014ee:	bf00      	nop
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3301      	adds	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d390      	bcc.n	8001422 <LCD_Write_Buffer+0xe>
		}
	}
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <LCD_Clear>:
/**
 * @brief limpa display e retorna cursor para primeira linha
 *
 * @retval Nenhum
 */
void LCD_Clear(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	LCD_Write(0x01, 0);
 800150c:	2100      	movs	r1, #0
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ff26 	bl	8001360 <LCD_Write>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <LCD_Seccond_Line>:
 * @brief Desloca o cursor para a posição inicial da segunda linha
 *
 * @retval Nenhum
 */
void LCD_Seccond_Line()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	LCD_Write(0xC0, 0);
 800151c:	2100      	movs	r1, #0
 800151e:	20c0      	movs	r0, #192	; 0xc0
 8001520:	f7ff ff1e 	bl	8001360 <LCD_Write>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <LCD_Create_Custom_Char>:
 *
 * @retval Nenhum
 * @param[in] loc localização para escrever o caracter
 * @param[in] *c ponteiro para o vetor de 8 bytes do caracter
 */
void LCD_Create_Custom_Char(uint8_t loc, uint8_t *c) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	if (loc < 8) {
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d819      	bhi.n	800156e <LCD_Create_Custom_Char+0x46>
		LCD_Write(0x40 + (loc * 8), 0); /* aponta para 0x40 + loc * 8 */
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	3308      	adds	r3, #8
 800153e:	b2db      	uxtb	r3, r3
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff0a 	bl	8001360 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e00a      	b.n	8001568 <LCD_Create_Custom_Char+0x40>
			LCD_Write(c[i], 1);
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2101      	movs	r1, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feff 	bl	8001360 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b07      	cmp	r3, #7
 800156c:	d9f1      	bls.n	8001552 <LCD_Create_Custom_Char+0x2a>
	}
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <LCD_Init_Custom_Characters>:
 *
 *	Define vetor de caracteres customizados e escreve na CGRAM
 *
 * @retval Nenhum
 */
void LCD_Init_Custom_Characters() {
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
	uint8_t character1[8] = { 0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <LCD_Init_Custom_Characters+0x8c>)
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001588:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character2[8] = { 0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,
 800158c:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <LCD_Init_Custom_Characters+0x90>)
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character3[8] = { 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x04,
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <LCD_Init_Custom_Characters+0x94>)
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a4:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character4[8] = { 0x1F, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 80015a8:	4a19      	ldr	r2, [pc, #100]	; (8001610 <LCD_Init_Custom_Characters+0x98>)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b2:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character5[8] = { 0x1F, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <LCD_Init_Custom_Characters+0x9c>)
 80015b8:	463b      	mov	r3, r7
 80015ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015be:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	LCD_Create_Custom_Char(0, character1);
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	4619      	mov	r1, r3
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ffad 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(1, character2);
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	4619      	mov	r1, r3
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff ffa7 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(2, character3);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7ff ffa1 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(3, character4);
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4619      	mov	r1, r3
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff ff9b 	bl	8001528 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(4, character5);
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	2004      	movs	r0, #4
 80015f8:	f7ff ff96 	bl	8001528 <LCD_Create_Custom_Char>
}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	0800748c 	.word	0x0800748c
 8001608:	08007494 	.word	0x08007494
 800160c:	0800749c 	.word	0x0800749c
 8001610:	080074a4 	.word	0x080074a4
 8001614:	080074ac 	.word	0x080074ac

08001618 <LCD_Init>:
 *	Escreve deslocando a mensagem para a esquerda
 *	Inicializa caracteres especiais
 *
 * @retval Nenhum
 */
void LCD_Init() {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 800161c:	200f      	movs	r0, #15
 800161e:	f001 f84d 	bl	80026bc <HAL_Delay>
	LCD_Write(0x03, 0); // 1
 8001622:	2100      	movs	r1, #0
 8001624:	2003      	movs	r0, #3
 8001626:	f7ff fe9b 	bl	8001360 <LCD_Write>
	LCD_Write(0x03, 0); // 2
 800162a:	2100      	movs	r1, #0
 800162c:	2003      	movs	r0, #3
 800162e:	f7ff fe97 	bl	8001360 <LCD_Write>
	LCD_Write(0x03, 0); // 3
 8001632:	2100      	movs	r1, #0
 8001634:	2003      	movs	r0, #3
 8001636:	f7ff fe93 	bl	8001360 <LCD_Write>
	LCD_Write(0x02, 0); // 4
 800163a:	2100      	movs	r1, #0
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff fe8f 	bl	8001360 <LCD_Write>
	LCD_Write(0x02, 0); // 5
 8001642:	2100      	movs	r1, #0
 8001644:	2002      	movs	r0, #2
 8001646:	f7ff fe8b 	bl	8001360 <LCD_Write>
	LCD_Write(0x08, 0); // 6
 800164a:	2100      	movs	r1, #0
 800164c:	2008      	movs	r0, #8
 800164e:	f7ff fe87 	bl	8001360 <LCD_Write>
	LCD_Write(0x00, 0); // 7
 8001652:	2100      	movs	r1, #0
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fe83 	bl	8001360 <LCD_Write>
	LCD_Write(0x08, 0); // 8
 800165a:	2100      	movs	r1, #0
 800165c:	2008      	movs	r0, #8
 800165e:	f7ff fe7f 	bl	8001360 <LCD_Write>
	LCD_Write(0x00, 0); // 9
 8001662:	2100      	movs	r1, #0
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fe7b 	bl	8001360 <LCD_Write>
	LCD_Write(0x01, 0); // 10
 800166a:	2100      	movs	r1, #0
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff fe77 	bl	8001360 <LCD_Write>
	LCD_Write(0x00, 0); // 11
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fe73 	bl	8001360 <LCD_Write>
	LCD_Write(0x01, 0); // 12
 800167a:	2100      	movs	r1, #0
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fe6f 	bl	8001360 <LCD_Write>

	LCD_Write(0x28, 0); //2 linhas 5x7 (4 bits)
 8001682:	2100      	movs	r1, #0
 8001684:	2028      	movs	r0, #40	; 0x28
 8001686:	f7ff fe6b 	bl	8001360 <LCD_Write>
	LCD_Write(0x0E, 0); //Display aceso c/ cursor fixo
 800168a:	2100      	movs	r1, #0
 800168c:	200e      	movs	r0, #14
 800168e:	f7ff fe67 	bl	8001360 <LCD_Write>
	LCD_Write(0x06, 0); //Escreve deslocando a mensagem para a esquerda
 8001692:	2100      	movs	r1, #0
 8001694:	2006      	movs	r0, #6
 8001696:	f7ff fe63 	bl	8001360 <LCD_Write>

	LCD_Init_Custom_Characters();
 800169a:	f7ff ff6d 	bl	8001578 <LCD_Init_Custom_Characters>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <PWM_Init>:
 */

#include "PWM.h"

void PWM_Init(TIM_HandleTypeDef* htim2)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 80016aa:	2100      	movs	r1, #0
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f002 ff61 	bl	8004574 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 80016b2:	2104      	movs	r1, #4
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f002 ff5d 	bl	8004574 <HAL_TIM_PWM_Start>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <PWM_Increase>:

void PWM_Increase(PWM_TypeDef pwm_data)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	463b      	mov	r3, r7
 80016cc:	e883 0003 	stmia.w	r3, {r0, r1}
	//converte de porcentagem para valor
	uint32_t duty_value = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4914      	ldr	r1, [pc, #80]	; (8001724 <PWM_Increase+0x60>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fa49 	bl	8000b6c <__aeabi_fmul>
 80016da:	4603      	mov	r3, r0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fc0b 	bl	8000ef8 <__aeabi_f2uiz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	60fb      	str	r3, [r7, #12]

	while(duty_value < MAX_DUTY_CYCLE_VALUE)
 80016e6:	e014      	b.n	8001712 <PWM_Increase+0x4e>
	{
		//Como identificar canal?
		if(pwm_data.pwm_channel == 1)
 80016e8:	783b      	ldrb	r3, [r7, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d104      	bne.n	80016f8 <PWM_Increase+0x34>
		{
			TIM2->CCR1 = duty_value;
 80016ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6353      	str	r3, [r2, #52]	; 0x34
 80016f6:	e006      	b.n	8001706 <PWM_Increase+0x42>
		}
		else if(pwm_data.pwm_channel == 2)
 80016f8:	783b      	ldrb	r3, [r7, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d103      	bne.n	8001706 <PWM_Increase+0x42>
		{
			TIM2->CCR2 = duty_value;
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6393      	str	r3, [r2, #56]	; 0x38
		}
		duty_value += 1;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f000 ffd5 	bl	80026bc <HAL_Delay>
	while(duty_value < MAX_DUTY_CYCLE_VALUE)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f640 2269 	movw	r2, #2665	; 0xa69
 8001718:	4293      	cmp	r3, r2
 800171a:	d9e5      	bls.n	80016e8 <PWM_Increase+0x24>
	}
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	4526a000 	.word	0x4526a000

08001728 <PWM_Decrease>:


void PWM_Decrease(PWM_TypeDef pwm_data)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	463b      	mov	r3, r7
 8001730:	e883 0003 	stmia.w	r3, {r0, r1}
	//converte de porcentagem para valor
	uint32_t duty_value = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4913      	ldr	r1, [pc, #76]	; (8001784 <PWM_Decrease+0x5c>)
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fa17 	bl	8000b6c <__aeabi_fmul>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fbd9 	bl	8000ef8 <__aeabi_f2uiz>
 8001746:	4603      	mov	r3, r0
 8001748:	60fb      	str	r3, [r7, #12]
	while(duty_value > 0)
 800174a:	e014      	b.n	8001776 <PWM_Decrease+0x4e>
	{
		if(pwm_data.pwm_channel == 1)
 800174c:	783b      	ldrb	r3, [r7, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d104      	bne.n	800175c <PWM_Decrease+0x34>
		{
			TIM2->CCR1 = duty_value;
 8001752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6353      	str	r3, [r2, #52]	; 0x34
 800175a:	e006      	b.n	800176a <PWM_Decrease+0x42>
		}
		else if(pwm_data.pwm_channel == 2)
 800175c:	783b      	ldrb	r3, [r7, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d103      	bne.n	800176a <PWM_Decrease+0x42>
		{
			TIM2->CCR2 = duty_value;
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6393      	str	r3, [r2, #56]	; 0x38
		}
		duty_value -= 1;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3b01      	subs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f000 ffa3 	bl	80026bc <HAL_Delay>
	while(duty_value > 0)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e7      	bne.n	800174c <PWM_Decrease+0x24>
	}
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	4526a000 	.word	0x4526a000

08001788 <CAPSULE_Verify_Insertion>:
 */

#include "capsule.h"

CAPSULE_Recipe_TypeDef CAPSULE_Verify_Insertion()
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b0bc      	sub	sp, #240	; 0xf0
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	uint8_t bit_0 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_0);
 8001790:	2108      	movs	r1, #8
 8001792:	4861      	ldr	r0, [pc, #388]	; (8001918 <CAPSULE_Verify_Insertion+0x190>)
 8001794:	f002 f884 	bl	80038a0 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t bit_1 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_1);
 800179e:	2110      	movs	r1, #16
 80017a0:	485d      	ldr	r0, [pc, #372]	; (8001918 <CAPSULE_Verify_Insertion+0x190>)
 80017a2:	f002 f87d 	bl	80038a0 <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	uint8_t bit_2 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_2);
 80017ac:	2120      	movs	r1, #32
 80017ae:	485a      	ldr	r0, [pc, #360]	; (8001918 <CAPSULE_Verify_Insertion+0x190>)
 80017b0:	f002 f876 	bl	80038a0 <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	//monta número que identifica capsula
	CAPSULE_Type capsule_type = bit_0 | (bit_1 << 1) | (bit_2 << 2);
 80017ba:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

	CAPSULE_Recipe_TypeDef recipe;

	//inicializa receitas
	RECIPE_NONE_CAPSULE_TYPE_DATA(recipe_none);
 80017da:	4b50      	ldr	r3, [pc, #320]	; (800191c <CAPSULE_Verify_Insertion+0x194>)
 80017dc:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80017e0:	461d      	mov	r5, r3
 80017e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_WATER_DATA(recipe_water);
 80017ee:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <CAPSULE_Verify_Insertion+0x198>)
 80017f0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80017f4:	461d      	mov	r5, r3
 80017f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SPARKLINK_WATER_DATA(recipe_sparklink_water);
 8001802:	4b48      	ldr	r3, [pc, #288]	; (8001924 <CAPSULE_Verify_Insertion+0x19c>)
 8001804:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001808:	461d      	mov	r5, r3
 800180a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_ICE_TEA_DATA(recipe_ice_tea);
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <CAPSULE_Verify_Insertion+0x1a0>)
 8001818:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800181c:	461d      	mov	r5, r3
 800181e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001822:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_HOT_TEA_DATA(recipe_hot_tea);
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <CAPSULE_Verify_Insertion+0x1a4>)
 800182c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001830:	461d      	mov	r5, r3
 8001832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800183a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SODA_DATA(recipe_soda);
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <CAPSULE_Verify_Insertion+0x1a8>)
 8001840:	f107 040c 	add.w	r4, r7, #12
 8001844:	461d      	mov	r5, r3
 8001846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800184e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (capsule_type) {
 8001852:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8001856:	2b05      	cmp	r3, #5
 8001858:	d850      	bhi.n	80018fc <CAPSULE_Verify_Insertion+0x174>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <CAPSULE_Verify_Insertion+0xd8>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001879 	.word	0x08001879
 8001864:	0800188f 	.word	0x0800188f
 8001868:	080018a5 	.word	0x080018a5
 800186c:	080018bb 	.word	0x080018bb
 8001870:	080018d1 	.word	0x080018d1
 8001874:	080018e7 	.word	0x080018e7
		case NONE_CAPSULE_TYPE:
			return recipe_none;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	461d      	mov	r5, r3
 800187c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001884:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001888:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800188c:	e040      	b.n	8001910 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_WATER:
				return recipe_water;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	461d      	mov	r5, r3
 8001892:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800189e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018a2:	e035      	b.n	8001910 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SPARKLINK_WATER:
			return recipe_sparklink_water;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	461d      	mov	r5, r3
 80018a8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80018ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018b8:	e02a      	b.n	8001910 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_ICE_TEA:
				return recipe_ice_tea;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	461d      	mov	r5, r3
 80018be:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018ce:	e01f      	b.n	8001910 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_HOT_TEA:
				return recipe_hot_tea;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	461d      	mov	r5, r3
 80018d4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80018d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018e4:	e014      	b.n	8001910 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SODA:
				return recipe_soda;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	461d      	mov	r5, r3
 80018ea:	f107 040c 	add.w	r4, r7, #12
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018fa:	e009      	b.n	8001910 <CAPSULE_Verify_Insertion+0x188>
				break;
		default:
			return recipe_none;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	461d      	mov	r5, r3
 8001900:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001908:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800190c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			break;
	}

}
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	37f0      	adds	r7, #240	; 0xf0
 8001914:	46bd      	mov	sp, r7
 8001916:	bdb0      	pop	{r4, r5, r7, pc}
 8001918:	40010c00 	.word	0x40010c00
 800191c:	080074b4 	.word	0x080074b4
 8001920:	080074d4 	.word	0x080074d4
 8001924:	080074f4 	.word	0x080074f4
 8001928:	08007514 	.word	0x08007514
 800192c:	08007534 	.word	0x08007534
 8001930:	08007554 	.word	0x08007554

08001934 <CONTROLLER_Get_IsReady>:
 */

#include "controller.h"

void CONTROLLER_Get_IsReady(ADC_HandleTypeDef hadc, CAPSULE_Recipe_TypeDef capsule)
{
 8001934:	b084      	sub	sp, #16
 8001936:	b5b0      	push	{r4, r5, r7, lr}
 8001938:	b0a0      	sub	sp, #128	; 0x80
 800193a:	af0a      	add	r7, sp, #40	; 0x28
 800193c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int32_t sensor_signal = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t sensor_temp = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t error_signal = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t ref_sinal = capsule.water_temp;
 8001950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001954:	643b      	str	r3, [r7, #64]	; 0x40
	ADC_CHANNEL_Id sensor_channel_id;

	Controler_TypeDef block;
	LCD_Clear();
 8001956:	f7ff fdd7 	bl	8001508 <LCD_Clear>

	switch (capsule.water_type) {
 800195a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800195e:	2b01      	cmp	r3, #1
 8001960:	d01f      	beq.n	80019a2 <CONTROLLER_Get_IsReady+0x6e>
 8001962:	2b02      	cmp	r3, #2
 8001964:	d000      	beq.n	8001968 <CONTROLLER_Get_IsReady+0x34>
			//aciona CP1, compressor de refrigeração
			PWM_Increase(block.pwm);
			sensor_channel_id = cooler_block.adc_channel_id;
			break;
		default:
			break;
 8001966:	e037      	b.n	80019d8 <CONTROLLER_Get_IsReady+0xa4>
			LCD_Write_Buffer("Aquecendo a água.");
 8001968:	4845      	ldr	r0, [pc, #276]	; (8001a80 <CONTROLLER_Get_IsReady+0x14c>)
 800196a:	f7ff fd53 	bl	8001414 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_HEATER_DATA(heater_block);
 800196e:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <CONTROLLER_Get_IsReady+0x150>)
 8001970:	f107 0414 	add.w	r4, r7, #20
 8001974:	461d      	mov	r5, r3
 8001976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197a:	682b      	ldr	r3, [r5, #0]
 800197c:	6023      	str	r3, [r4, #0]
			block = heater_block;
 800197e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001982:	f107 0514 	add.w	r5, r7, #20
 8001986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	6023      	str	r3, [r4, #0]
			PWM_Increase(block.pwm);
 800198e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001992:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001996:	f7ff fe95 	bl	80016c4 <PWM_Increase>
			sensor_channel_id = heater_block.adc_channel_id;
 800199a:	7f3b      	ldrb	r3, [r7, #28]
 800199c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			break;
 80019a0:	e01a      	b.n	80019d8 <CONTROLLER_Get_IsReady+0xa4>
			LCD_Write_Buffer("Refrigerando a água.");
 80019a2:	4839      	ldr	r0, [pc, #228]	; (8001a88 <CONTROLLER_Get_IsReady+0x154>)
 80019a4:	f7ff fd36 	bl	8001414 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_COOLER_DATA(cooler_block);
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <CONTROLLER_Get_IsReady+0x158>)
 80019aa:	463c      	mov	r4, r7
 80019ac:	461d      	mov	r5, r3
 80019ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	6023      	str	r3, [r4, #0]
			block = cooler_block;
 80019b6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80019ba:	463d      	mov	r5, r7
 80019bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	6023      	str	r3, [r4, #0]
			PWM_Increase(block.pwm);
 80019c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019cc:	f7ff fe7a 	bl	80016c4 <PWM_Increase>
			sensor_channel_id = cooler_block.adc_channel_id;
 80019d0:	7a3b      	ldrb	r3, [r7, #8]
 80019d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			break;
 80019d6:	bf00      	nop
	}

	//fica no while até chegar na temperatura desejada
	while(error_signal != 0)
 80019d8:	e01d      	b.n	8001a16 <CONTROLLER_Get_IsReady+0xe2>
	{
		sensor_signal = ADC_GetValue(hadc, sensor_channel_id);
 80019da:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80019de:	9308      	str	r3, [sp, #32]
 80019e0:	466d      	mov	r5, sp
 80019e2:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	f7ff fc6a 	bl	80012d0 <ADC_GetValue>
 80019fc:	64b8      	str	r0, [r7, #72]	; 0x48

		sensor_temp = UTILS_To_Temp(sensor_signal);
 80019fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fda9 	bl	8002558 <UTILS_To_Temp>
 8001a06:	6478      	str	r0, [r7, #68]	; 0x44

		error_signal = ref_sinal - sensor_temp;
 8001a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	657b      	str	r3, [r7, #84]	; 0x54

		HAL_Delay(50);
 8001a10:	2032      	movs	r0, #50	; 0x32
 8001a12:	f000 fe53 	bl	80026bc <HAL_Delay>
	while(error_signal != 0)
 8001a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1de      	bne.n	80019da <CONTROLLER_Get_IsReady+0xa6>
	}

	PWM_Decrease(block.pwm);
 8001a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a24:	f7ff fe80 	bl	8001728 <PWM_Decrease>
	LCD_Clear();
 8001a28:	f7ff fd6e 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer("Despejando água.");
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <CONTROLLER_Get_IsReady+0x15c>)
 8001a2e:	f7ff fcf1 	bl	8001414 <LCD_Write_Buffer>

	uint32_t init_time = HAL_GetTick();
 8001a32:	f000 fe39 	bl	80026a8 <HAL_GetTick>
 8001a36:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint32_t current_time = init_time;
 8001a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c

	HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_SET);
 8001a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3e:	4618      	mov	r0, r3
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2201      	movs	r2, #1
 8001a46:	4619      	mov	r1, r3
 8001a48:	f001 ff41 	bl	80038ce <HAL_GPIO_WritePin>
	while(current_time < (init_time + capsule.water_time)){
 8001a4c:	e002      	b.n	8001a54 <CONTROLLER_Get_IsReady+0x120>
		current_time = HAL_GetTick();
 8001a4e:	f000 fe2b 	bl	80026a8 <HAL_GetTick>
 8001a52:	64f8      	str	r0, [r7, #76]	; 0x4c
	while(current_time < (init_time + capsule.water_time)){
 8001a54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5a:	4413      	add	r3, r2
 8001a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3f5      	bcc.n	8001a4e <CONTROLLER_Get_IsReady+0x11a>
	}
	HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_RESET);
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a64:	4618      	mov	r0, r3
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f001 ff2e 	bl	80038ce <HAL_GPIO_WritePin>
	return;
 8001a72:	bf00      	nop
}
 8001a74:	3758      	adds	r7, #88	; 0x58
 8001a76:	46bd      	mov	sp, r7
 8001a78:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a7c:	b004      	add	sp, #16
 8001a7e:	4770      	bx	lr
 8001a80:	08007574 	.word	0x08007574
 8001a84:	080075b4 	.word	0x080075b4
 8001a88:	08007588 	.word	0x08007588
 8001a8c:	080075c8 	.word	0x080075c8
 8001a90:	080075a0 	.word	0x080075a0

08001a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	b0a5      	sub	sp, #148	; 0x94
 8001a98:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9a:	f000 fdad 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9e:	f000 f881 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa2:	f000 f9eb 	bl	8001e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa6:	f000 f9cb 	bl	8001e40 <MX_DMA_Init>
  MX_TIM2_Init();
 8001aaa:	f000 f93d 	bl	8001d28 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001aae:	f000 f8d1 	bl	8001c54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  //inicializa LCD em modo 4 bits
  LCD_Init();
 8001ab2:	f7ff fdb1 	bl	8001618 <LCD_Init>
  ADC_Init(hadc1);
 8001ab6:	4e38      	ldr	r6, [pc, #224]	; (8001b98 <main+0x104>)
 8001ab8:	466d      	mov	r5, sp
 8001aba:	f106 0410 	add.w	r4, r6, #16
 8001abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001aca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ace:	f7ff fbed 	bl	80012ac <ADC_Init>

  PWM_Init(&htim2);
 8001ad2:	4832      	ldr	r0, [pc, #200]	; (8001b9c <main+0x108>)
 8001ad4:	f7ff fde5 	bl	80016a2 <PWM_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  STATE current_state = STATE_SHOWING_CLOCK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (current_state) {
 8001ade:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <main+0x58>
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d009      	beq.n	8001afe <main+0x6a>
				current_state = STATE_SHOWING_CLOCK;
			}
			current_state = STATE_SHOWING_CLOCK;
			break;
		default:
			break;
 8001aea:	e04b      	b.n	8001b84 <main+0xf0>
			capsule = STATE_Show_Clock();
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fa47 	bl	8001f84 <STATE_Show_Clock>
			current_state = STATE_STARTING_PROCESS;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001afc:	e042      	b.n	8001b84 <main+0xf0>
			capsule = STATE_Starting_Process(capsule, hadc1);
 8001afe:	463e      	mov	r6, r7
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <main+0x104>)
 8001b02:	ac05      	add	r4, sp, #20
 8001b04:	461d      	mov	r5, r3
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b16:	466d      	mov	r5, sp
 8001b18:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	602b      	str	r3, [r5, #0]
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f000 fa76 	bl	800201c <STATE_Starting_Process>
 8001b30:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001b34:	463d      	mov	r5, r7
 8001b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(capsule.capsule_type != NONE_CAPSULE_TYPE)
 8001b42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d018      	beq.n	8001b7c <main+0xe8>
				STATE_Started_Process(capsule, hadc1);
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <main+0x104>)
 8001b4c:	ac04      	add	r4, sp, #16
 8001b4e:	461d      	mov	r5, r3
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b60:	466c      	mov	r4, sp
 8001b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b72:	f000 fb47 	bl	8002204 <STATE_Started_Process>
				current_state = STATE_SHOWING_CLOCK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			current_state = STATE_SHOWING_CLOCK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001b82:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <main+0x10c>)
 8001b8a:	f001 feb8 	bl	80038fe <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8001b8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b92:	f000 fd93 	bl	80026bc <HAL_Delay>
		switch (current_state) {
 8001b96:	e7a2      	b.n	8001ade <main+0x4a>
 8001b98:	200002a8 	.word	0x200002a8
 8001b9c:	2000031c 	.word	0x2000031c
 8001ba0:	40011000 	.word	0x40011000

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bae:	2228      	movs	r2, #40	; 0x28
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 faf0 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bdc:	2310      	movs	r3, #16
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2302      	movs	r3, #2
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001be4:	2300      	movs	r3, #0
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001be8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fe9c 	bl	8003930 <HAL_RCC_OscConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001bfe:	f000 f9bb 	bl	8001f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c02:	230f      	movs	r3, #15
 8001c04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 f906 	bl	8003e30 <HAL_RCC_ClockConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c2a:	f000 f9a5 	bl	8001f78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fa80 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c46:	f000 f997 	bl	8001f78 <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3750      	adds	r7, #80	; 0x50
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c66:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <MX_ADC1_Init+0xd0>)
 8001c68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c80:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c8e:	2204      	movs	r2, #4
 8001c90:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c92:	4823      	ldr	r0, [pc, #140]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001c94:	f000 fd34 	bl	8002700 <HAL_ADC_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001c9e:	f000 f96b 	bl	8001f78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481b      	ldr	r0, [pc, #108]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001cb4:	f000 ff18 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 f95b 	bl	8001f78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4814      	ldr	r0, [pc, #80]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001cd0:	f000 ff0a 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001cda:	f000 f94d 	bl	8001f78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cde:	2305      	movs	r3, #5
 8001ce0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001cec:	f000 fefc 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001cf6:	f000 f93f 	bl	8001f78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <MX_ADC1_Init+0xcc>)
 8001d08:	f000 feee 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001d12:	f000 f931 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200002a8 	.word	0x200002a8
 8001d24:	40012400 	.word	0x40012400

08001d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	; 0x38
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d58:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2667 - 1;
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d6e:	f640 226a 	movw	r2, #2666	; 0xa6a
 8001d72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d80:	482e      	ldr	r0, [pc, #184]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d82:	f002 fb4f 	bl	8004424 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d8c:	f000 f8f4 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4827      	ldr	r0, [pc, #156]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001d9e:	f002 fd49 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001da8:	f000 f8e6 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dac:	4823      	ldr	r0, [pc, #140]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001dae:	f002 fb88 	bl	80044c2 <HAL_TIM_PWM_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001db8:	f000 f8de 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481c      	ldr	r0, [pc, #112]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001dcc:	f003 f88e 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001dd6:	f000 f8cf 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dda:	2360      	movs	r3, #96	; 0x60
 8001ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4812      	ldr	r0, [pc, #72]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001df2:	f002 fc61 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dfc:	f000 f8bc 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2204      	movs	r2, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001e08:	f002 fc56 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001e12:	f000 f8b1 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001e1e:	f002 fc4b 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001e28:	f000 f8a6 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM2_Init+0x114>)
 8001e2e:	f000 fad3 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 8001e32:	bf00      	nop
 8001e34:	3738      	adds	r7, #56	; 0x38
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000031c 	.word	0x2000031c

08001e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_DMA_Init+0x38>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <MX_DMA_Init+0x38>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_DMA_Init+0x38>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	200b      	movs	r0, #11
 8001e64:	f001 f99d 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e68:	200b      	movs	r0, #11
 8001e6a:	f001 f9b6 	bl	80031da <HAL_NVIC_EnableIRQ>

}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e90:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001e96:	f043 0310 	orr.w	r3, r3, #16
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <MX_GPIO_Init+0xec>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ede:	4823      	ldr	r0, [pc, #140]	; (8001f6c <MX_GPIO_Init+0xf0>)
 8001ee0:	f001 fcf5 	bl	80038ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f64f 6103 	movw	r1, #65027	; 0xfe03
 8001eea:	4821      	ldr	r0, [pc, #132]	; (8001f70 <MX_GPIO_Init+0xf4>)
 8001eec:	f001 fcef 	bl	80038ce <HAL_GPIO_WritePin>
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Display_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	4619      	mov	r1, r3
 8001f08:	4818      	ldr	r0, [pc, #96]	; (8001f6c <MX_GPIO_Init+0xf0>)
 8001f0a:	f001 fb6f 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Y1_Pin Y2_Pin Display_RW_Pin Display_EN_Pin
                           Display_D4_Pin Display_D5_Pin Display_D6_Pin Display_D7_Pin
                           Display_RS_Pin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8001f0e:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8001f12:	613b      	str	r3, [r7, #16]
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Display_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	4619      	mov	r1, r3
 8001f26:	4812      	ldr	r0, [pc, #72]	; (8001f70 <MX_GPIO_Init+0xf4>)
 8001f28:	f001 fb60 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Increase_Pin Button_Confirmar_Pin */
  GPIO_InitStruct.Pin = Button_Increase_Pin|Button_Confirmar_Pin;
 8001f2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_GPIO_Init+0xf8>)
 8001f42:	f001 fb53 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1_Bit_0_Pin BN1_bit_1_Pin BN1_bit_2_Pin Inserir_Capsula_Pin */
  GPIO_InitStruct.Pin = BN1_Bit_0_Pin|BN1_bit_1_Pin|BN1_bit_2_Pin|Inserir_Capsula_Pin;
 8001f46:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_GPIO_Init+0xf4>)
 8001f5c:	f001 fb46 	bl	80035ec <HAL_GPIO_Init>

}
 8001f60:	bf00      	nop
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40010800 	.word	0x40010800

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <STATE_Show_Clock>:

#include "controller.h"
#include "states.h"

CAPSULE_Recipe_TypeDef STATE_Show_Clock()
{
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	char hour[10];
	CAPSULE_Recipe_TypeDef capsule = {
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2220      	movs	r2, #32
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 f8ff 	bl	8005198 <memset>
			.capsule_type = NONE_CAPSULE_TYPE,
	};
	uint8_t insert_button = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while(1)
	{
		UTILS_get_Hour(hour);
 8001fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fab7 	bl	8002518 <UTILS_get_Hour>
		LCD_Clear();
 8001faa:	f7ff faad 	bl	8001508 <LCD_Clear>
		LCD_Write_Buffer(hour);
 8001fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fa2e 	bl	8001414 <LCD_Write_Buffer>

		insert_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	4815      	ldr	r0, [pc, #84]	; (8002014 <STATE_Show_Clock+0x90>)
 8001fbe:	f001 fc6f 	bl	80038a0 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//se botão de inserir capsula for pressionado, verifica  qual é a receita
		if(insert_button)
 8001fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <STATE_Show_Clock+0x56>
		{
			capsule = CAPSULE_Verify_Insertion();
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fbd7 	bl	8001788 <CAPSULE_Verify_Insertion>
		}

		//se tiver uma cápsula, retorna
		if(capsule.capsule_type != NONE_CAPSULE_TYPE ){
 8001fda:	7b3b      	ldrb	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <STATE_Show_Clock+0x72>

			return capsule;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	461d      	mov	r5, r3
 8001fe4:	f107 040c 	add.w	r4, r7, #12
 8001fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ff0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ff4:	e009      	b.n	800200a <STATE_Show_Clock+0x86>
		}
		HAL_Delay(300);
 8001ff6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ffa:	f000 fb5f 	bl	80026bc <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <STATE_Show_Clock+0x94>)
 8002004:	f001 fc7b 	bl	80038fe <HAL_GPIO_TogglePin>
		UTILS_get_Hour(hour);
 8002008:	e7ca      	b.n	8001fa0 <STATE_Show_Clock+0x1c>
	}
}
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	3738      	adds	r7, #56	; 0x38
 800200e:	46bd      	mov	sp, r7
 8002010:	bdb0      	pop	{r4, r5, r7, pc}
 8002012:	bf00      	nop
 8002014:	40010c00 	.word	0x40010c00
 8002018:	40011000 	.word	0x40011000

0800201c <STATE_Starting_Process>:


CAPSULE_Recipe_TypeDef STATE_Starting_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 800201c:	b084      	sub	sp, #16
 800201e:	b5b0      	push	{r4, r5, r7, lr}
 8002020:	b09a      	sub	sp, #104	; 0x68
 8002022:	af0a      	add	r7, sp, #40	; 0x28
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800202a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t confirm_button = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	LCD_Clear();
 8002034:	f7ff fa68 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer(capsule.capsule_name);
 8002038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203c:	3302      	adds	r3, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f9e8 	bl	8001414 <LCD_Write_Buffer>
	LCD_Seccond_Line();
 8002044:	f7ff fa68 	bl	8001518 <LCD_Seccond_Line>
	LCD_Write_Buffer("S --> Iniciar.");
 8002048:	4867      	ldr	r0, [pc, #412]	; (80021e8 <STATE_Starting_Process+0x1cc>)
 800204a:	f7ff f9e3 	bl	8001414 <LCD_Write_Buffer>

	int32_t sensor_signal = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	63fb      	str	r3, [r7, #60]	; 0x3c
	float avg_value_P1 = 0;
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
	float avg_value_P2 = 0;
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t var = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
	for (var = 0; var < 32; ++var) {
 8002062:	2300      	movs	r3, #0
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
 8002066:	e016      	b.n	8002096 <STATE_Starting_Process+0x7a>
		sensor_signal += ADC_GetValue(hadc, P1);
 8002068:	2300      	movs	r3, #0
 800206a:	9308      	str	r3, [sp, #32]
 800206c:	466d      	mov	r5, sp
 800206e:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002076:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800207a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800207e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	f7ff f924 	bl	80012d0 <ADC_GetValue>
 8002088:	4602      	mov	r2, r0
 800208a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208c:	4413      	add	r3, r2
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (var = 0; var < 32; ++var) {
 8002090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002092:	3301      	adds	r3, #1
 8002094:	63bb      	str	r3, [r7, #56]	; 0x38
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	2b1f      	cmp	r3, #31
 800209a:	dde5      	ble.n	8002068 <STATE_Starting_Process+0x4c>
	}

	avg_value_P1 = sensor_signal / var;
 800209c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fd0d 	bl	8000ac4 <__aeabi_i2f>
 80020aa:	4603      	mov	r3, r0
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30

	//se P1 passar do nivel considerado saturado....
	if(avg_value_P1 > 3000){
 80020ae:	494f      	ldr	r1, [pc, #316]	; (80021ec <STATE_Starting_Process+0x1d0>)
 80020b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b2:	f7fe ff17 	bl	8000ee4 <__aeabi_fcmpgt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01d      	beq.n	80020f8 <STATE_Starting_Process+0xdc>
		LCD_Clear();
 80020bc:	f7ff fa24 	bl	8001508 <LCD_Clear>
		LCD_Write_Buffer("P1 SATURADO!");
 80020c0:	484b      	ldr	r0, [pc, #300]	; (80021f0 <STATE_Starting_Process+0x1d4>)
 80020c2:	f7ff f9a7 	bl	8001414 <LCD_Write_Buffer>
		HAL_Delay(2000);
 80020c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020ca:	f000 faf7 	bl	80026bc <HAL_Delay>
		RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <STATE_Starting_Process+0x1d8>)
 80020d0:	f107 040c 	add.w	r4, r7, #12
 80020d4:	461d      	mov	r5, r3
 80020d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return none_capsule;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	461d      	mov	r5, r3
 80020e6:	f107 040c 	add.w	r4, r7, #12
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80020f6:	e070      	b.n	80021da <STATE_Starting_Process+0x1be>
	}

	//se receita precisar de CO2, verifica se está P2 saturado
	if(capsule.co2_time > 0)
 80020f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d04c      	beq.n	8002198 <STATE_Starting_Process+0x17c>
	{
		sensor_signal = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (var = 0; var < 32; ++var) {
 8002102:	2300      	movs	r3, #0
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
 8002106:	e016      	b.n	8002136 <STATE_Starting_Process+0x11a>
			sensor_signal += ADC_GetValue(hadc, P2);
 8002108:	2303      	movs	r3, #3
 800210a:	9308      	str	r3, [sp, #32]
 800210c:	466d      	mov	r5, sp
 800210e:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002116:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800211a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800211e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002124:	f7ff f8d4 	bl	80012d0 <ADC_GetValue>
 8002128:	4602      	mov	r2, r0
 800212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212c:	4413      	add	r3, r2
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (var = 0; var < 32; ++var) {
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	3301      	adds	r3, #1
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	2b1f      	cmp	r3, #31
 800213a:	dde5      	ble.n	8002108 <STATE_Starting_Process+0xec>
		}

		avg_value_P2 = sensor_signal / var;
 800213c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002140:	fb92 f3f3 	sdiv	r3, r2, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fcbd 	bl	8000ac4 <__aeabi_i2f>
 800214a:	4603      	mov	r3, r0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c

		//se P2 passar do nivel considerado saturado....
		if(avg_value_P2 > 3000){
 800214e:	4927      	ldr	r1, [pc, #156]	; (80021ec <STATE_Starting_Process+0x1d0>)
 8002150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002152:	f7fe fec7 	bl	8000ee4 <__aeabi_fcmpgt>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01d      	beq.n	8002198 <STATE_Starting_Process+0x17c>
			LCD_Clear();
 800215c:	f7ff f9d4 	bl	8001508 <LCD_Clear>
			LCD_Write_Buffer("P2 SATURADO!");
 8002160:	4825      	ldr	r0, [pc, #148]	; (80021f8 <STATE_Starting_Process+0x1dc>)
 8002162:	f7ff f957 	bl	8001414 <LCD_Write_Buffer>
			HAL_Delay(2000);
 8002166:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800216a:	f000 faa7 	bl	80026bc <HAL_Delay>
			RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <STATE_Starting_Process+0x1d8>)
 8002170:	f107 040c 	add.w	r4, r7, #12
 8002174:	461d      	mov	r5, r3
 8002176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800217e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return none_capsule;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	461d      	mov	r5, r3
 8002186:	f107 040c 	add.w	r4, r7, #12
 800218a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002192:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002196:	e020      	b.n	80021da <STATE_Starting_Process+0x1be>


	while(1)
	{

		confirm_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8002198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219c:	4817      	ldr	r0, [pc, #92]	; (80021fc <STATE_Starting_Process+0x1e0>)
 800219e:	f001 fb7f 	bl	80038a0 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if(confirm_button)
 80021a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <STATE_Starting_Process+0x1aa>
		{
			return capsule;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	461d      	mov	r5, r3
 80021b4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80021b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80021c4:	e009      	b.n	80021da <STATE_Starting_Process+0x1be>
		}

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ca:	480d      	ldr	r0, [pc, #52]	; (8002200 <STATE_Starting_Process+0x1e4>)
 80021cc:	f001 fb97 	bl	80038fe <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80021d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021d4:	f000 fa72 	bl	80026bc <HAL_Delay>
		confirm_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 80021d8:	e7de      	b.n	8002198 <STATE_Starting_Process+0x17c>
	}
}
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	3740      	adds	r7, #64	; 0x40
 80021de:	46bd      	mov	sp, r7
 80021e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80021e4:	b004      	add	sp, #16
 80021e6:	4770      	bx	lr
 80021e8:	080075dc 	.word	0x080075dc
 80021ec:	453b8000 	.word	0x453b8000
 80021f0:	080075ec 	.word	0x080075ec
 80021f4:	0800760c 	.word	0x0800760c
 80021f8:	080075fc 	.word	0x080075fc
 80021fc:	40010c00 	.word	0x40010c00
 8002200:	40011000 	.word	0x40011000

08002204 <STATE_Started_Process>:

void STATE_Started_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 8002204:	b084      	sub	sp, #16
 8002206:	b5b0      	push	{r4, r5, r7, lr}
 8002208:	b092      	sub	sp, #72	; 0x48
 800220a:	af10      	add	r7, sp, #64	; 0x40
 800220c:	f107 0418 	add.w	r4, r7, #24
 8002210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD_Clear();
 8002214:	f7ff f978 	bl	8001508 <LCD_Clear>
	LCD_Write_Buffer("Iniciando...");
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <STATE_Started_Process+0x64>)
 800221a:	f7ff f8fb 	bl	8001414 <LCD_Write_Buffer>
	HAL_Delay(1500);
 800221e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002222:	f000 fa4b 	bl	80026bc <HAL_Delay>

	uint8_t confirm_button = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		CONTROLLER_Get_IsReady(hadc, capsule);
 800222a:	ac08      	add	r4, sp, #32
 800222c:	f107 0518 	add.w	r5, r7, #24
 8002230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002234:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800223c:	466d      	mov	r5, sp
 800223e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002246:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800224a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800224e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002254:	f7ff fb6e 	bl	8001934 <CONTROLLER_Get_IsReady>

		return;
 8002258:	bf00      	nop

	}
}
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002262:	b004      	add	sp, #16
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0800762c 	.word	0x0800762c

0800226c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_MspInit+0x5c>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_MspInit+0x5c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6193      	str	r3, [r2, #24]
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_MspInit+0x5c>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_MspInit+0x5c>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_MspInit+0x5c>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_MspInit+0x5c>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_MspInit+0x60>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_MspInit+0x60>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000

080022d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a28      	ldr	r2, [pc, #160]	; (800238c <HAL_ADC_MspInit+0xbc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d149      	bne.n	8002384 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_ADC_MspInit+0xc0>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <HAL_ADC_MspInit+0xc0>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_ADC_MspInit+0xc0>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_ADC_MspInit+0xc0>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_ADC_MspInit+0xc0>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_ADC_MspInit+0xc0>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC1_IN4_____T1_Pin|ADC1_IN5_____T2_Pin|ADC1_IN6_____P1_Pin|ADC1_IN7_____P2_Pin;
 8002320:	23f0      	movs	r3, #240	; 0xf0
 8002322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002324:	2303      	movs	r3, #3
 8002326:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4619      	mov	r1, r3
 800232e:	4819      	ldr	r0, [pc, #100]	; (8002394 <HAL_ADC_MspInit+0xc4>)
 8002330:	f001 f95c 	bl	80035ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 8002336:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_ADC_MspInit+0xcc>)
 8002338:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 800234e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002352:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 8002356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800235a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002368:	480b      	ldr	r0, [pc, #44]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 800236a:	f000 ff51 	bl	8003210 <HAL_DMA_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002374:	f7ff fe00 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 800237c:	621a      	str	r2, [r3, #32]
 800237e:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_ADC_MspInit+0xc8>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40012400 	.word	0x40012400
 8002390:	40021000 	.word	0x40021000
 8002394:	40010800 	.word	0x40010800
 8002398:	200002d8 	.word	0x200002d8
 800239c:	40020008 	.word	0x40020008

080023a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b0:	d10b      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_TIM_Base_MspInit+0x34>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_TIM_Base_MspInit+0x34>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	61d3      	str	r3, [r2, #28]
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_TIM_Base_MspInit+0x34>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d117      	bne.n	8002428 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_TIM_MspPostInit+0x58>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_TIM_MspPostInit+0x58>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_TIM_MspPostInit+0x58>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM2_CH1_____R1_Pin|TIM2_CH2_____CP1_Pin|TIM2_CH3_____B1_Pin;
 8002410:	2307      	movs	r3, #7
 8002412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2302      	movs	r3, #2
 800241a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4619      	mov	r1, r3
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <HAL_TIM_MspPostInit+0x5c>)
 8002424:	f001 f8e2 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	40010800 	.word	0x40010800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <HardFault_Handler+0x4>

0800244a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <MemManage_Handler+0x4>

08002450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <BusFault_Handler+0x4>

08002456 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <UsageFault_Handler+0x4>

0800245c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002484:	f000 f8fe 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Channel1_IRQHandler+0x10>)
 8002492:	f000 ff77 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200002d8 	.word	0x200002d8

080024a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <_sbrk+0x5c>)
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <_sbrk+0x60>)
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <_sbrk+0x64>)
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <_sbrk+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d0:	f002 fd6a 	bl	8004fa8 <__errno>
 80024d4:	4602      	mov	r2, r0
 80024d6:	230c      	movs	r3, #12
 80024d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e009      	b.n	80024f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20005000 	.word	0x20005000
 8002500:	00000400 	.word	0x00000400
 8002504:	20000268 	.word	0x20000268
 8002508:	20000370 	.word	0x20000370

0800250c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <UTILS_get_Hour>:
 */
#include "utils.h"
#include "ADC.h"

void UTILS_get_Hour(char* hour)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	  struct tm *sTm;

	  time_t now = time (0);
 8002520:	2000      	movs	r0, #0
 8002522:	f003 fd11 	bl	8005f48 <time>
 8002526:	4603      	mov	r3, r0
 8002528:	460c      	mov	r4, r1
 800252a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  sTm = gmtime (&now);
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fd3e 	bl	8004fb4 <gmtime>
 8002538:	6178      	str	r0, [r7, #20]

	  strftime (hour, 9, "%H:%M:%S", sTm);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <UTILS_get_Hour+0x38>)
 800253e:	2109      	movs	r1, #9
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f003 fc4d 	bl	8005de0 <strftime>
	  return;
 8002546:	bf00      	nop
}
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	0800763c 	.word	0x0800763c
 8002554:	00000000 	.word	0x00000000

08002558 <UTILS_To_Temp>:

uint32_t UTILS_To_Temp(uint32_t value_adc)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	//
//	float v25 = 4000;// When V25=1.41V at ref 3V3
//	float avgSlope = 5.0;// When avgSlope=5mV/C at ref 3V3
//	float temperature = ((value_adc - v25)/avgSlope)+25;
//	return (uint32_t)temperature;
	uint32_t temperature = (value_adc * ADC_SCALE) * 25;
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7fd ff49 	bl	80003f8 <__aeabi_ui2d>
 8002566:	a30e      	add	r3, pc, #56	; (adr r3, 80025a0 <UTILS_To_Temp+0x48>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fd ffbe 	bl	80004ec <__aeabi_dmul>
 8002570:	4603      	mov	r3, r0
 8002572:	460c      	mov	r4, r1
 8002574:	4618      	mov	r0, r3
 8002576:	4621      	mov	r1, r4
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <UTILS_To_Temp+0x50>)
 800257e:	f7fd ffb5 	bl	80004ec <__aeabi_dmul>
 8002582:	4603      	mov	r3, r0
 8002584:	460c      	mov	r4, r1
 8002586:	4618      	mov	r0, r3
 8002588:	4621      	mov	r1, r4
 800258a:	f7fe f9c1 	bl	8000910 <__aeabi_d2uiz>
 800258e:	4603      	mov	r3, r0
 8002590:	60fb      	str	r3, [r7, #12]
	return temperature;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	f3af 8000 	nop.w
 80025a0:	e734d9b4 	.word	0xe734d9b4
 80025a4:	3f4a680c 	.word	0x3f4a680c
 80025a8:	40390000 	.word	0x40390000

080025ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025ae:	e003      	b.n	80025b8 <LoopCopyDataInit>

080025b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025b6:	3104      	adds	r1, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025b8:	480a      	ldr	r0, [pc, #40]	; (80025e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025c0:	d3f6      	bcc.n	80025b0 <CopyDataInit>
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025c4:	e002      	b.n	80025cc <LoopFillZerobss>

080025c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025c8:	f842 3b04 	str.w	r3, [r2], #4

080025cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025d0:	d3f9      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025d2:	f7ff ff9b 	bl	800250c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d6:	f002 fdab 	bl	8005130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025da:	f7ff fa5b 	bl	8001a94 <main>
  bx lr
 80025de:	4770      	bx	lr
  ldr r3, =_sidata
 80025e0:	08007b80 	.word	0x08007b80
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025e8:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 80025ec:	20000244 	.word	0x20000244
  ldr r3, = _ebss
 80025f0:	2000036c 	.word	0x2000036c

080025f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC1_2_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_Init+0x28>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_Init+0x28>)
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 fdbf 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f808 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002614:	f7ff fe2a 	bl	800226c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40022000 	.word	0x40022000

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x54>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x58>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fdd7 	bl	80031f6 <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 fd9f 	bl	80031a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_InitTick+0x5c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000004 	.word	0x20000004
 800267c:	2000000c 	.word	0x2000000c
 8002680:	20000008 	.word	0x20000008

08002684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_IncTick+0x1c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_IncTick+0x20>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_IncTick+0x20>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	20000364 	.word	0x20000364

080026a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <HAL_GetTick+0x10>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	20000364 	.word	0x20000364

080026bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d005      	beq.n	80026e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_Delay+0x40>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e2:	bf00      	nop
 80026e4:	f7ff ffe0 	bl	80026a8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8f7      	bhi.n	80026e4 <HAL_Delay+0x28>
  {
  }
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	2000000c 	.word	0x2000000c

08002700 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0be      	b.n	80028a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fdc6 	bl	80022d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fb19 	bl	8002d7c <ADC_ConversionStop_Disable>
 800274a:	4603      	mov	r3, r0
 800274c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 8099 	bne.w	800288e <HAL_ADC_Init+0x18e>
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 8095 	bne.w	800288e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276c:	f023 0302 	bic.w	r3, r3, #2
 8002770:	f043 0202 	orr.w	r2, r3, #2
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002780:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7b1b      	ldrb	r3, [r3, #12]
 8002786:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002788:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4313      	orrs	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002798:	d003      	beq.n	80027a2 <HAL_ADC_Init+0xa2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d102      	bne.n	80027a8 <HAL_ADC_Init+0xa8>
 80027a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a6:	e000      	b.n	80027aa <HAL_ADC_Init+0xaa>
 80027a8:	2300      	movs	r3, #0
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7d1b      	ldrb	r3, [r3, #20]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d119      	bne.n	80027ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7b1b      	ldrb	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	035a      	lsls	r2, r3, #13
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e00b      	b.n	80027ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <HAL_ADC_Init+0x1a8>)
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	430b      	orrs	r3, r1
 8002812:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281c:	d003      	beq.n	8002826 <HAL_ADC_Init+0x126>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d104      	bne.n	8002830 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	3b01      	subs	r3, #1
 800282c:	051b      	lsls	r3, r3, #20
 800282e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	430a      	orrs	r2, r1
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_ADC_Init+0x1ac>)
 800284c:	4013      	ands	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d10b      	bne.n	800286c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800286a:	e018      	b.n	800289e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f023 0312 	bic.w	r3, r3, #18
 8002874:	f043 0210 	orr.w	r2, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800288c:	e007      	b.n	800289e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800289e:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	ffe1f7fd 	.word	0xffe1f7fd
 80028ac:	ff1f0efe 	.word	0xff1f0efe

080028b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Stop+0x1a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e01a      	b.n	8002900 <HAL_ADC_Stop+0x50>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa52 	bl	8002d7c <ADC_ConversionStop_Disable>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <HAL_ADC_Start_DMA+0x1a8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_ADC_Start_DMA+0x24>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a63      	ldr	r2, [pc, #396]	; (8002ab4 <HAL_ADC_Start_DMA+0x1ac>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d106      	bne.n	800293a <HAL_ADC_Start_DMA+0x32>
 800292c:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <HAL_ADC_Start_DMA+0x1a8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 80b3 	bne.w	8002aa0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_ADC_Start_DMA+0x40>
 8002944:	2302      	movs	r3, #2
 8002946:	e0ae      	b.n	8002aa6 <HAL_ADC_Start_DMA+0x19e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9c1 	bl	8002cd8 <ADC_Enable>
 8002956:	4603      	mov	r3, r0
 8002958:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 809a 	bne.w	8002a96 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_ADC_Start_DMA+0x1ac>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d105      	bne.n	800298c <HAL_ADC_Start_DMA+0x84>
 8002980:	4b4b      	ldr	r3, [pc, #300]	; (8002ab0 <HAL_ADC_Start_DMA+0x1a8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d115      	bne.n	80029b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d026      	beq.n	80029f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029b6:	e01d      	b.n	80029f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a39      	ldr	r2, [pc, #228]	; (8002ab0 <HAL_ADC_Start_DMA+0x1a8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_ADC_Start_DMA+0xd0>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a38      	ldr	r2, [pc, #224]	; (8002ab4 <HAL_ADC_Start_DMA+0x1ac>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10d      	bne.n	80029f4 <HAL_ADC_Start_DMA+0xec>
 80029d8:	4b35      	ldr	r3, [pc, #212]	; (8002ab0 <HAL_ADC_Start_DMA+0x1a8>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	f023 0206 	bic.w	r2, r3, #6
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a0c:	e002      	b.n	8002a14 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_ADC_Start_DMA+0x1b0>)
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_ADC_Start_DMA+0x1b4>)
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <HAL_ADC_Start_DMA+0x1b8>)
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0202 	mvn.w	r2, #2
 8002a3c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a18      	ldr	r0, [r3, #32]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	334c      	adds	r3, #76	; 0x4c
 8002a58:	4619      	mov	r1, r3
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f000 fc31 	bl	80032c4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a6c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a70:	d108      	bne.n	8002a84 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a80:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a82:	e00f      	b.n	8002aa4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a92:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a94:	e006      	b.n	8002aa4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002a9e:	e001      	b.n	8002aa4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40012400 	.word	0x40012400
 8002ab4:	40012800 	.word	0x40012800
 8002ab8:	08002df1 	.word	0x08002df1
 8002abc:	08002e6d 	.word	0x08002e6d
 8002ac0:	08002e89 	.word	0x08002e89

08002ac4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x20>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0dc      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x1da>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d81c      	bhi.n	8002b52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	3b05      	subs	r3, #5
 8002b2a:	221f      	movs	r2, #31
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4019      	ands	r1, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b05      	subs	r3, #5
 8002b44:	fa00 f203 	lsl.w	r2, r0, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b50:	e03c      	b.n	8002bcc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d81c      	bhi.n	8002b94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b23      	subs	r3, #35	; 0x23
 8002b6c:	221f      	movs	r2, #31
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	4019      	ands	r1, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b23      	subs	r3, #35	; 0x23
 8002b86:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
 8002b92:	e01b      	b.n	8002bcc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b41      	subs	r3, #65	; 0x41
 8002ba6:	221f      	movs	r2, #31
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	4019      	ands	r1, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b41      	subs	r3, #65	; 0x41
 8002bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d91c      	bls.n	8002c0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68d9      	ldr	r1, [r3, #12]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	3b1e      	subs	r3, #30
 8002be6:	2207      	movs	r2, #7
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	4019      	ands	r1, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6898      	ldr	r0, [r3, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b1e      	subs	r3, #30
 8002c00:	fa00 f203 	lsl.w	r2, r0, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	e019      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6919      	ldr	r1, [r3, #16]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	2207      	movs	r2, #7
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	4019      	ands	r1, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6898      	ldr	r0, [r3, #8]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d003      	beq.n	8002c52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c4e:	2b11      	cmp	r3, #17
 8002c50:	d132      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_ADC_ConfigChannel+0x1e4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d125      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d126      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c78:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d11a      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0c9a      	lsrs	r2, r3, #18
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x1b2>
 8002ca6:	e007      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40012400 	.word	0x40012400
 8002cd0:	20000004 	.word	0x20000004
 8002cd4:	431bde83 	.word	0x431bde83

08002cd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d039      	beq.n	8002d6a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <ADC_Enable+0x9c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <ADC_Enable+0xa0>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d14:	e002      	b.n	8002d1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f9      	bne.n	8002d16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d22:	f7ff fcc1 	bl	80026a8 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d28:	e018      	b.n	8002d5c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d2a:	f7ff fcbd 	bl	80026a8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d911      	bls.n	8002d5c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f043 0210 	orr.w	r2, r3, #16
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d1df      	bne.n	8002d2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000004 	.word	0x20000004
 8002d78:	431bde83 	.word	0x431bde83

08002d7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d127      	bne.n	8002de6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002da6:	f7ff fc7f 	bl	80026a8 <HAL_GetTick>
 8002daa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dac:	e014      	b.n	8002dd8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dae:	f7ff fc7b 	bl	80026a8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d90d      	bls.n	8002dd8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	f043 0210 	orr.w	r2, r3, #16
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e007      	b.n	8002de8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d0e3      	beq.n	8002dae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d127      	bne.n	8002e5a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e20:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e24:	d115      	bne.n	8002e52 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d111      	bne.n	8002e52 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7fe fa60 	bl	8001318 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002e58:	e004      	b.n	8002e64 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff fe22 	bl	8002ac4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f043 0204 	orr.w	r2, r3, #4
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7ff fe11 	bl	8002ad6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADCEx_Calibration_Start+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e086      	b.n	8002fe8 <HAL_ADCEx_Calibration_Start+0x12c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff4a 	bl	8002d7c <ADC_ConversionStop_Disable>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d175      	bne.n	8002fde <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002efa:	f023 0302 	bic.w	r3, r3, #2
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <HAL_ADCEx_Calibration_Start+0x134>)
 8002f08:	681c      	ldr	r4, [r3, #0]
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	f001 f9ce 	bl	80042ac <HAL_RCCEx_GetPeriphCLKFreq>
 8002f10:	4603      	mov	r3, r0
 8002f12:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002f16:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002f18:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002f1a:	e002      	b.n	8002f22 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff fed5 	bl	8002cd8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0208 	orr.w	r2, r2, #8
 8002f3c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f3e:	f7ff fbb3 	bl	80026a8 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f44:	e014      	b.n	8002f70 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f46:	f7ff fbaf 	bl	80026a8 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b0a      	cmp	r3, #10
 8002f52:	d90d      	bls.n	8002f70 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	f023 0312 	bic.w	r3, r3, #18
 8002f5c:	f043 0210 	orr.w	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e03b      	b.n	8002fe8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e3      	bne.n	8002f46 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0204 	orr.w	r2, r2, #4
 8002f8c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f8e:	f7ff fb8b 	bl	80026a8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f94:	e014      	b.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f96:	f7ff fb87 	bl	80026a8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b0a      	cmp	r3, #10
 8002fa2:	d90d      	bls.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f023 0312 	bic.w	r3, r3, #18
 8002fac:	f043 0210 	orr.w	r2, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e013      	b.n	8002fe8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e3      	bne.n	8002f96 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4906      	ldr	r1, [pc, #24]	; (800308c <__NVIC_EnableIRQ+0x34>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003158:	d301      	bcc.n	800315e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315a:	2301      	movs	r3, #1
 800315c:	e00f      	b.n	800317e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <SysTick_Config+0x40>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003166:	210f      	movs	r1, #15
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f7ff ff90 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SysTick_Config+0x40>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <SysTick_Config+0x40>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000e010 	.word	0xe000e010

0800318c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff2d 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b4:	f7ff ff42 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff90 	bl	80030e4 <NVIC_EncodePriority>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff5f 	bl	8003090 <__NVIC_SetPriority>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff35 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ffa2 	bl	8003148 <SysTick_Config>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e043      	b.n	80032ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_DMA_Init+0xa8>)
 800322e:	4413      	add	r3, r2
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <HAL_DMA_Init+0xac>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	009a      	lsls	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_DMA_Init+0xb0>)
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800325a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800325e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	bffdfff8 	.word	0xbffdfff8
 80032bc:	cccccccd 	.word	0xcccccccd
 80032c0:	40020000 	.word	0x40020000

080032c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_DMA_Start_IT+0x20>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e04a      	b.n	800337a <HAL_DMA_Start_IT+0xb6>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d13a      	bne.n	800336c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f938 	bl	8003590 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 020e 	orr.w	r2, r2, #14
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e00f      	b.n	800335a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0204 	bic.w	r2, r2, #4
 8003348:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 020a 	orr.w	r2, r2, #10
 8003358:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e005      	b.n	8003378 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003374:	2302      	movs	r3, #2
 8003376:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003378:	7dfb      	ldrb	r3, [r7, #23]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2204      	movs	r2, #4
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d04f      	beq.n	800344c <HAL_DMA_IRQHandler+0xc8>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04a      	beq.n	800344c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0204 	bic.w	r2, r2, #4
 80033d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a66      	ldr	r2, [pc, #408]	; (8003574 <HAL_DMA_IRQHandler+0x1f0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d029      	beq.n	8003432 <HAL_DMA_IRQHandler+0xae>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a65      	ldr	r2, [pc, #404]	; (8003578 <HAL_DMA_IRQHandler+0x1f4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_DMA_IRQHandler+0xaa>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_DMA_IRQHandler+0x1f8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01a      	beq.n	8003428 <HAL_DMA_IRQHandler+0xa4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a62      	ldr	r2, [pc, #392]	; (8003580 <HAL_DMA_IRQHandler+0x1fc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d012      	beq.n	8003422 <HAL_DMA_IRQHandler+0x9e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a60      	ldr	r2, [pc, #384]	; (8003584 <HAL_DMA_IRQHandler+0x200>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00a      	beq.n	800341c <HAL_DMA_IRQHandler+0x98>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a5f      	ldr	r2, [pc, #380]	; (8003588 <HAL_DMA_IRQHandler+0x204>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d102      	bne.n	8003416 <HAL_DMA_IRQHandler+0x92>
 8003410:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003414:	e00e      	b.n	8003434 <HAL_DMA_IRQHandler+0xb0>
 8003416:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800341a:	e00b      	b.n	8003434 <HAL_DMA_IRQHandler+0xb0>
 800341c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003420:	e008      	b.n	8003434 <HAL_DMA_IRQHandler+0xb0>
 8003422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003426:	e005      	b.n	8003434 <HAL_DMA_IRQHandler+0xb0>
 8003428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342c:	e002      	b.n	8003434 <HAL_DMA_IRQHandler+0xb0>
 800342e:	2340      	movs	r3, #64	; 0x40
 8003430:	e000      	b.n	8003434 <HAL_DMA_IRQHandler+0xb0>
 8003432:	2304      	movs	r3, #4
 8003434:	4a55      	ldr	r2, [pc, #340]	; (800358c <HAL_DMA_IRQHandler+0x208>)
 8003436:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8094 	beq.w	800356a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800344a:	e08e      	b.n	800356a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2202      	movs	r2, #2
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d056      	beq.n	800350a <HAL_DMA_IRQHandler+0x186>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d051      	beq.n	800350a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020a 	bic.w	r2, r2, #10
 8003482:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a38      	ldr	r2, [pc, #224]	; (8003574 <HAL_DMA_IRQHandler+0x1f0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d029      	beq.n	80034ea <HAL_DMA_IRQHandler+0x166>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a37      	ldr	r2, [pc, #220]	; (8003578 <HAL_DMA_IRQHandler+0x1f4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d022      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x162>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a35      	ldr	r2, [pc, #212]	; (800357c <HAL_DMA_IRQHandler+0x1f8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01a      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x15c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a34      	ldr	r2, [pc, #208]	; (8003580 <HAL_DMA_IRQHandler+0x1fc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d012      	beq.n	80034da <HAL_DMA_IRQHandler+0x156>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a32      	ldr	r2, [pc, #200]	; (8003584 <HAL_DMA_IRQHandler+0x200>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x150>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <HAL_DMA_IRQHandler+0x204>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d102      	bne.n	80034ce <HAL_DMA_IRQHandler+0x14a>
 80034c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034cc:	e00e      	b.n	80034ec <HAL_DMA_IRQHandler+0x168>
 80034ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d2:	e00b      	b.n	80034ec <HAL_DMA_IRQHandler+0x168>
 80034d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d8:	e008      	b.n	80034ec <HAL_DMA_IRQHandler+0x168>
 80034da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034de:	e005      	b.n	80034ec <HAL_DMA_IRQHandler+0x168>
 80034e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e4:	e002      	b.n	80034ec <HAL_DMA_IRQHandler+0x168>
 80034e6:	2320      	movs	r3, #32
 80034e8:	e000      	b.n	80034ec <HAL_DMA_IRQHandler+0x168>
 80034ea:	2302      	movs	r3, #2
 80034ec:	4a27      	ldr	r2, [pc, #156]	; (800358c <HAL_DMA_IRQHandler+0x208>)
 80034ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d034      	beq.n	800356a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003508:	e02f      	b.n	800356a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2208      	movs	r2, #8
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d028      	beq.n	800356c <HAL_DMA_IRQHandler+0x1e8>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 020e 	bic.w	r2, r2, #14
 8003532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f202 	lsl.w	r2, r1, r2
 8003542:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
    }
  }
  return;
 800356a:	bf00      	nop
 800356c:	bf00      	nop
}
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40020008 	.word	0x40020008
 8003578:	4002001c 	.word	0x4002001c
 800357c:	40020030 	.word	0x40020030
 8003580:	40020044 	.word	0x40020044
 8003584:	40020058 	.word	0x40020058
 8003588:	4002006c 	.word	0x4002006c
 800358c:	40020000 	.word	0x40020000

08003590 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d108      	bne.n	80035d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035ce:	e007      	b.n	80035e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b08b      	sub	sp, #44	; 0x2c
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	e127      	b.n	8003850 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003600:	2201      	movs	r2, #1
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	429a      	cmp	r2, r3
 800361a:	f040 8116 	bne.w	800384a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b12      	cmp	r3, #18
 8003624:	d034      	beq.n	8003690 <HAL_GPIO_Init+0xa4>
 8003626:	2b12      	cmp	r3, #18
 8003628:	d80d      	bhi.n	8003646 <HAL_GPIO_Init+0x5a>
 800362a:	2b02      	cmp	r3, #2
 800362c:	d02b      	beq.n	8003686 <HAL_GPIO_Init+0x9a>
 800362e:	2b02      	cmp	r3, #2
 8003630:	d804      	bhi.n	800363c <HAL_GPIO_Init+0x50>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d031      	beq.n	800369a <HAL_GPIO_Init+0xae>
 8003636:	2b01      	cmp	r3, #1
 8003638:	d01c      	beq.n	8003674 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800363a:	e048      	b.n	80036ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800363c:	2b03      	cmp	r3, #3
 800363e:	d043      	beq.n	80036c8 <HAL_GPIO_Init+0xdc>
 8003640:	2b11      	cmp	r3, #17
 8003642:	d01b      	beq.n	800367c <HAL_GPIO_Init+0x90>
          break;
 8003644:	e043      	b.n	80036ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003646:	4a89      	ldr	r2, [pc, #548]	; (800386c <HAL_GPIO_Init+0x280>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d026      	beq.n	800369a <HAL_GPIO_Init+0xae>
 800364c:	4a87      	ldr	r2, [pc, #540]	; (800386c <HAL_GPIO_Init+0x280>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d806      	bhi.n	8003660 <HAL_GPIO_Init+0x74>
 8003652:	4a87      	ldr	r2, [pc, #540]	; (8003870 <HAL_GPIO_Init+0x284>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d020      	beq.n	800369a <HAL_GPIO_Init+0xae>
 8003658:	4a86      	ldr	r2, [pc, #536]	; (8003874 <HAL_GPIO_Init+0x288>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_GPIO_Init+0xae>
          break;
 800365e:	e036      	b.n	80036ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003660:	4a85      	ldr	r2, [pc, #532]	; (8003878 <HAL_GPIO_Init+0x28c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_GPIO_Init+0xae>
 8003666:	4a85      	ldr	r2, [pc, #532]	; (800387c <HAL_GPIO_Init+0x290>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d016      	beq.n	800369a <HAL_GPIO_Init+0xae>
 800366c:	4a84      	ldr	r2, [pc, #528]	; (8003880 <HAL_GPIO_Init+0x294>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0xae>
          break;
 8003672:	e02c      	b.n	80036ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	623b      	str	r3, [r7, #32]
          break;
 800367a:	e028      	b.n	80036ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	3304      	adds	r3, #4
 8003682:	623b      	str	r3, [r7, #32]
          break;
 8003684:	e023      	b.n	80036ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	3308      	adds	r3, #8
 800368c:	623b      	str	r3, [r7, #32]
          break;
 800368e:	e01e      	b.n	80036ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	330c      	adds	r3, #12
 8003696:	623b      	str	r3, [r7, #32]
          break;
 8003698:	e019      	b.n	80036ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036a2:	2304      	movs	r3, #4
 80036a4:	623b      	str	r3, [r7, #32]
          break;
 80036a6:	e012      	b.n	80036ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036b0:	2308      	movs	r3, #8
 80036b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	611a      	str	r2, [r3, #16]
          break;
 80036ba:	e008      	b.n	80036ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036bc:	2308      	movs	r3, #8
 80036be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	615a      	str	r2, [r3, #20]
          break;
 80036c6:	e002      	b.n	80036ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
          break;
 80036cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2bff      	cmp	r3, #255	; 0xff
 80036d2:	d801      	bhi.n	80036d8 <HAL_GPIO_Init+0xec>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	e001      	b.n	80036dc <HAL_GPIO_Init+0xf0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2bff      	cmp	r3, #255	; 0xff
 80036e2:	d802      	bhi.n	80036ea <HAL_GPIO_Init+0xfe>
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x104>
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	3b08      	subs	r3, #8
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	210f      	movs	r1, #15
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	6a39      	ldr	r1, [r7, #32]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	431a      	orrs	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8096 	beq.w	800384a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_GPIO_Init+0x298>)
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	4a58      	ldr	r2, [pc, #352]	; (8003884 <HAL_GPIO_Init+0x298>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6193      	str	r3, [r2, #24]
 800372a:	4b56      	ldr	r3, [pc, #344]	; (8003884 <HAL_GPIO_Init+0x298>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003736:	4a54      	ldr	r2, [pc, #336]	; (8003888 <HAL_GPIO_Init+0x29c>)
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4b      	ldr	r2, [pc, #300]	; (800388c <HAL_GPIO_Init+0x2a0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_GPIO_Init+0x19e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4a      	ldr	r2, [pc, #296]	; (8003890 <HAL_GPIO_Init+0x2a4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_GPIO_Init+0x19a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a49      	ldr	r2, [pc, #292]	; (8003894 <HAL_GPIO_Init+0x2a8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <HAL_GPIO_Init+0x196>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a48      	ldr	r2, [pc, #288]	; (8003898 <HAL_GPIO_Init+0x2ac>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_GPIO_Init+0x192>
 800377a:	2303      	movs	r3, #3
 800377c:	e006      	b.n	800378c <HAL_GPIO_Init+0x1a0>
 800377e:	2304      	movs	r3, #4
 8003780:	e004      	b.n	800378c <HAL_GPIO_Init+0x1a0>
 8003782:	2302      	movs	r3, #2
 8003784:	e002      	b.n	800378c <HAL_GPIO_Init+0x1a0>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_GPIO_Init+0x1a0>
 800378a:	2300      	movs	r3, #0
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	f002 0203 	and.w	r2, r2, #3
 8003792:	0092      	lsls	r2, r2, #2
 8003794:	4093      	lsls	r3, r2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800379c:	493a      	ldr	r1, [pc, #232]	; (8003888 <HAL_GPIO_Init+0x29c>)
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	3302      	adds	r3, #2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4938      	ldr	r1, [pc, #224]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
 80037c2:	e006      	b.n	80037d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037c4:	4b35      	ldr	r3, [pc, #212]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	4933      	ldr	r1, [pc, #204]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	492e      	ldr	r1, [pc, #184]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
 80037ea:	e006      	b.n	80037fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	4929      	ldr	r1, [pc, #164]	; (800389c <HAL_GPIO_Init+0x2b0>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d006      	beq.n	8003814 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_GPIO_Init+0x2b0>)
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	4924      	ldr	r1, [pc, #144]	; (800389c <HAL_GPIO_Init+0x2b0>)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
 8003812:	e006      	b.n	8003822 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_GPIO_Init+0x2b0>)
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	43db      	mvns	r3, r3
 800381c:	491f      	ldr	r1, [pc, #124]	; (800389c <HAL_GPIO_Init+0x2b0>)
 800381e:	4013      	ands	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_GPIO_Init+0x2b0>)
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	491a      	ldr	r1, [pc, #104]	; (800389c <HAL_GPIO_Init+0x2b0>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]
 800383a:	e006      	b.n	800384a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_GPIO_Init+0x2b0>)
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	43db      	mvns	r3, r3
 8003844:	4915      	ldr	r1, [pc, #84]	; (800389c <HAL_GPIO_Init+0x2b0>)
 8003846:	4013      	ands	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	3301      	adds	r3, #1
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	f47f aed0 	bne.w	8003600 <HAL_GPIO_Init+0x14>
  }
}
 8003860:	bf00      	nop
 8003862:	372c      	adds	r7, #44	; 0x2c
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	10210000 	.word	0x10210000
 8003870:	10110000 	.word	0x10110000
 8003874:	10120000 	.word	0x10120000
 8003878:	10310000 	.word	0x10310000
 800387c:	10320000 	.word	0x10320000
 8003880:	10220000 	.word	0x10220000
 8003884:	40021000 	.word	0x40021000
 8003888:	40010000 	.word	0x40010000
 800388c:	40010800 	.word	0x40010800
 8003890:	40010c00 	.word	0x40010c00
 8003894:	40011000 	.word	0x40011000
 8003898:	40011400 	.word	0x40011400
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
 80038bc:	e001      	b.n	80038c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	807b      	strh	r3, [r7, #2]
 80038da:	4613      	mov	r3, r2
 80038dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038de:	787b      	ldrb	r3, [r7, #1]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038e4:	887a      	ldrh	r2, [r7, #2]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ea:	e003      	b.n	80038f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	041a      	lsls	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003910:	887a      	ldrh	r2, [r7, #2]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4013      	ands	r3, r2
 8003916:	041a      	lsls	r2, r3, #16
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43d9      	mvns	r1, r3
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	400b      	ands	r3, r1
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	611a      	str	r2, [r3, #16]
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e26c      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8087 	beq.w	8003a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003950:	4b92      	ldr	r3, [pc, #584]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b04      	cmp	r3, #4
 800395a:	d00c      	beq.n	8003976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800395c:	4b8f      	ldr	r3, [pc, #572]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b08      	cmp	r3, #8
 8003966:	d112      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
 8003968:	4b8c      	ldr	r3, [pc, #560]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d10b      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003976:	4b89      	ldr	r3, [pc, #548]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d06c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x12c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d168      	bne.n	8003a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e246      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x76>
 8003998:	4b80      	ldr	r3, [pc, #512]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7f      	ldr	r2, [pc, #508]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e02e      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7a      	ldr	r2, [pc, #488]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b78      	ldr	r3, [pc, #480]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a77      	ldr	r2, [pc, #476]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0xbc>
 80039d2:	4b72      	ldr	r3, [pc, #456]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a71      	ldr	r2, [pc, #452]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039ec:	4b6b      	ldr	r3, [pc, #428]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6a      	ldr	r2, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fe4c 	bl	80026a8 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe fe48 	bl	80026a8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1fa      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5d      	ldr	r3, [pc, #372]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xe4>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fe38 	bl	80026a8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fe34 	bl	80026a8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1e6      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x10c>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a6a:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a76:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x18c>
 8003a82:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x176>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1ba      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4939      	ldr	r1, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fe fded 	bl	80026a8 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fde9 	bl	80026a8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e19b      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4927      	ldr	r1, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fdcc 	bl	80026a8 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fdc8 	bl	80026a8 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e17a      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d03a      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d019      	beq.n	8003b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fdac 	bl	80026a8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe fda8 	bl	80026a8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e15a      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f000 fac6 	bl	8004104 <RCC_Delay>
 8003b78:	e01c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe fd92 	bl	80026a8 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b86:	e00f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fd8e 	bl	80026a8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d908      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e140      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	42420000 	.word	0x42420000
 8003ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	4b9e      	ldr	r3, [pc, #632]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e9      	bne.n	8003b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a6 	beq.w	8003d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b97      	ldr	r3, [pc, #604]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4b94      	ldr	r3, [pc, #592]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	4a93      	ldr	r2, [pc, #588]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	61d3      	str	r3, [r2, #28]
 8003bde:	4b91      	ldr	r3, [pc, #580]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b8e      	ldr	r3, [pc, #568]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d118      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a8a      	ldr	r2, [pc, #552]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c06:	f7fe fd4f 	bl	80026a8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fe fd4b 	bl	80026a8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b64      	cmp	r3, #100	; 0x64
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0fd      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x312>
 8003c34:	4b7b      	ldr	r3, [pc, #492]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a7a      	ldr	r2, [pc, #488]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6213      	str	r3, [r2, #32]
 8003c40:	e02d      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x334>
 8003c4a:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a75      	ldr	r2, [pc, #468]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6213      	str	r3, [r2, #32]
 8003c56:	4b73      	ldr	r3, [pc, #460]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a72      	ldr	r2, [pc, #456]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	e01c      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_OscConfig+0x356>
 8003c6c:	4b6d      	ldr	r3, [pc, #436]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4a6c      	ldr	r2, [pc, #432]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	6213      	str	r3, [r2, #32]
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a69      	ldr	r2, [pc, #420]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e00b      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c86:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4a66      	ldr	r2, [pc, #408]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6213      	str	r3, [r2, #32]
 8003c92:	4b64      	ldr	r3, [pc, #400]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4a63      	ldr	r2, [pc, #396]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fe fcff 	bl	80026a8 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fe fcfb 	bl	80026a8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0ab      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	4b57      	ldr	r3, [pc, #348]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ee      	beq.n	8003cae <HAL_RCC_OscConfig+0x37e>
 8003cd0:	e014      	b.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fce9 	bl	80026a8 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fe fce5 	bl	80026a8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e095      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ee      	bne.n	8003cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4a47      	ldr	r2, [pc, #284]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8081 	beq.w	8003e1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d18:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d061      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d146      	bne.n	8003dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2c:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_OscConfig+0x4fc>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fe fcb9 	bl	80026a8 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3a:	f7fe fcb5 	bl	80026a8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e067      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4c:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d108      	bne.n	8003d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	492d      	ldr	r1, [pc, #180]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a19      	ldr	r1, [r3, #32]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	430b      	orrs	r3, r1
 8003d86:	4927      	ldr	r1, [pc, #156]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x4fc>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fe fc89 	bl	80026a8 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fe fc85 	bl	80026a8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e037      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x46a>
 8003db8:	e02f      	b.n	8003e1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_RCC_OscConfig+0x4fc>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fc72 	bl	80026a8 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fc6e 	bl	80026a8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e020      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x498>
 8003de6:	e018      	b.n	8003e1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e013      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42420060 	.word	0x42420060

08003e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0d0      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d910      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b67      	ldr	r3, [pc, #412]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4965      	ldr	r1, [pc, #404]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b8      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e8c:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a58      	ldr	r2, [pc, #352]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	494d      	ldr	r1, [pc, #308]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d040      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d115      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e073      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06b      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f023 0203 	bic.w	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4936      	ldr	r1, [pc, #216]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f20:	f7fe fbc2 	bl	80026a8 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f28:	f7fe fbbe 	bl	80026a8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e053      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 020c 	and.w	r2, r3, #12
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d1eb      	bne.n	8003f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d210      	bcs.n	8003f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	4922      	ldr	r1, [pc, #136]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e032      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4916      	ldr	r1, [pc, #88]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fbe:	f000 f821 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1cc>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1d0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fb20 	bl	8002624 <HAL_InitTick>

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	0800767c 	.word	0x0800767c
 8003ffc:	20000004 	.word	0x20000004
 8004000:	20000008 	.word	0x20000008

08004004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b490      	push	{r4, r7}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800400c:	1d3c      	adds	r4, r7, #4
 800400e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004014:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x40>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x46>
 8004042:	e02d      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004046:	623b      	str	r3, [r7, #32]
      break;
 8004048:	e02d      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	0c9b      	lsrs	r3, r3, #18
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004056:	4413      	add	r3, r2
 8004058:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800405c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	0c5b      	lsrs	r3, r3, #17
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004076:	4413      	add	r3, r2
 8004078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800407c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004082:	fb02 f203 	mul.w	r2, r2, r3
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	e004      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	623b      	str	r3, [r7, #32]
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040a2:	623b      	str	r3, [r7, #32]
      break;
 80040a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a6:	6a3b      	ldr	r3, [r7, #32]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc90      	pop	{r4, r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	08007648 	.word	0x08007648
 80040b8:	08007658 	.word	0x08007658
 80040bc:	40021000 	.word	0x40021000
 80040c0:	007a1200 	.word	0x007a1200
 80040c4:	003d0900 	.word	0x003d0900

080040c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b02      	ldr	r3, [pc, #8]	; (80040d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	20000004 	.word	0x20000004

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040e0:	f7ff fff2 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	0adb      	lsrs	r3, r3, #11
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4a03      	ldr	r2, [pc, #12]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021000 	.word	0x40021000
 8004100:	0800768c 	.word	0x0800768c

08004104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <RCC_Delay+0x34>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <RCC_Delay+0x38>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0a5b      	lsrs	r3, r3, #9
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004120:	bf00      	nop
  }
  while (Delay --);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	60fa      	str	r2, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f9      	bne.n	8004120 <RCC_Delay+0x1c>
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000004 	.word	0x20000004
 800413c:	10624dd3 	.word	0x10624dd3

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d07d      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800415c:	2300      	movs	r3, #0
 800415e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	4b4c      	ldr	r3, [pc, #304]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4a4b      	ldr	r2, [pc, #300]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	61d3      	str	r3, [r2, #28]
 8004178:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d118      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004194:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a42      	ldr	r2, [pc, #264]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a0:	f7fe fa82 	bl	80026a8 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7fe fa7e 	bl	80026a8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e06d      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041c6:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d027      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041e4:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041fa:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d014      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fe fa4d 	bl	80026a8 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	e00a      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe fa49 	bl	80026a8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e036      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ee      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4917      	ldr	r1, [pc, #92]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	4313      	orrs	r3, r2
 8004244:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004256:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	490b      	ldr	r1, [pc, #44]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4904      	ldr	r1, [pc, #16]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	42420440 	.word	0x42420440

080042ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b08d      	sub	sp, #52	; 0x34
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042b4:	4b55      	ldr	r3, [pc, #340]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80042b6:	f107 040c 	add.w	r4, r7, #12
 80042ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	2300      	movs	r3, #0
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d07f      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d002      	beq.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d048      	beq.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042e8:	e08b      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80042ea:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042f0:	4b48      	ldr	r3, [pc, #288]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d07f      	beq.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004308:	4413      	add	r3, r2
 800430a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800430e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d018      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800431a:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	0c5b      	lsrs	r3, r3, #17
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004328:	4413      	add	r3, r2
 800432a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800433a:	4a37      	ldr	r2, [pc, #220]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	4a33      	ldr	r2, [pc, #204]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004362:	d102      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004368:	e048      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004378:	e040      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d108      	bne.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
 800439c:	e01f      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d109      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80043b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c8:	d11a      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d014      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80043d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043dc:	e010      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80043de:	e00f      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043e0:	f7ff fe7c 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0b9b      	lsrs	r3, r3, #14
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	3301      	adds	r3, #1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004400:	bf00      	nop
    }
  }
  return (frequency);
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004404:	4618      	mov	r0, r3
 8004406:	3734      	adds	r7, #52	; 0x34
 8004408:	46bd      	mov	sp, r7
 800440a:	bd90      	pop	{r4, r7, pc}
 800440c:	0800765c 	.word	0x0800765c
 8004410:	0800766c 	.word	0x0800766c
 8004414:	40021000 	.word	0x40021000
 8004418:	007a1200 	.word	0x007a1200
 800441c:	003d0900 	.word	0x003d0900
 8004420:	aaaaaaab 	.word	0xaaaaaaab

08004424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e041      	b.n	80044ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd ffa8 	bl	80023a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f000 fa9e 	bl	80049a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e041      	b.n	8004558 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d106      	bne.n	80044ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f839 	bl	8004560 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f000 fa4f 	bl	80049a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
	...

08004574 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <HAL_TIM_PWM_Start+0x24>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e022      	b.n	80045de <HAL_TIM_PWM_Start+0x6a>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b04      	cmp	r3, #4
 800459c:	d109      	bne.n	80045b2 <HAL_TIM_PWM_Start+0x3e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e015      	b.n	80045de <HAL_TIM_PWM_Start+0x6a>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d109      	bne.n	80045cc <HAL_TIM_PWM_Start+0x58>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	bf14      	ite	ne
 80045c4:	2301      	movne	r3, #1
 80045c6:	2300      	moveq	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e008      	b.n	80045de <HAL_TIM_PWM_Start+0x6a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e05e      	b.n	80046a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x82>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f4:	e013      	b.n	800461e <HAL_TIM_PWM_Start+0xaa>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_PWM_Start+0x92>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004604:	e00b      	b.n	800461e <HAL_TIM_PWM_Start+0xaa>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d104      	bne.n	8004616 <HAL_TIM_PWM_Start+0xa2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004614:	e003      	b.n	800461e <HAL_TIM_PWM_Start+0xaa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fc3c 	bl	8004ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <HAL_TIM_PWM_Start+0x138>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d107      	bne.n	8004646 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_TIM_PWM_Start+0x138>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_TIM_PWM_Start+0xfa>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d009      	beq.n	800466e <HAL_TIM_PWM_Start+0xfa>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <HAL_TIM_PWM_Start+0x13c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_TIM_PWM_Start+0xfa>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <HAL_TIM_PWM_Start+0x140>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d111      	bne.n	8004692 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b06      	cmp	r3, #6
 800467e:	d010      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004690:	e007      	b.n	80046a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800

080046b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e0ac      	b.n	800482c <HAL_TIM_PWM_ConfigChannel+0x174>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	f200 809f 	bhi.w	8004820 <HAL_TIM_PWM_ConfigChannel+0x168>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	08004821 	.word	0x08004821
 80046f0:	08004821 	.word	0x08004821
 80046f4:	08004821 	.word	0x08004821
 80046f8:	0800475d 	.word	0x0800475d
 80046fc:	08004821 	.word	0x08004821
 8004700:	08004821 	.word	0x08004821
 8004704:	08004821 	.word	0x08004821
 8004708:	0800479f 	.word	0x0800479f
 800470c:	08004821 	.word	0x08004821
 8004710:	08004821 	.word	0x08004821
 8004714:	08004821 	.word	0x08004821
 8004718:	080047df 	.word	0x080047df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f9a0 	bl	8004a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0208 	orr.w	r2, r2, #8
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0204 	bic.w	r2, r2, #4
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	619a      	str	r2, [r3, #24]
      break;
 800475a:	e062      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f9e6 	bl	8004b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	619a      	str	r2, [r3, #24]
      break;
 800479c:	e041      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fa2f 	bl	8004c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0208 	orr.w	r2, r2, #8
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0204 	bic.w	r2, r2, #4
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	61da      	str	r2, [r3, #28]
      break;
 80047dc:	e021      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fa79 	bl	8004cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69d9      	ldr	r1, [r3, #28]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	021a      	lsls	r2, r3, #8
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	61da      	str	r2, [r3, #28]
      break;
 800481e:	e000      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIM_ConfigClockSource+0x18>
 8004848:	2302      	movs	r3, #2
 800484a:	e0a6      	b.n	800499a <HAL_TIM_ConfigClockSource+0x166>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800486a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004872:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d067      	beq.n	8004954 <HAL_TIM_ConfigClockSource+0x120>
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d80b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x6c>
 8004888:	2b10      	cmp	r3, #16
 800488a:	d073      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x140>
 800488c:	2b10      	cmp	r3, #16
 800488e:	d802      	bhi.n	8004896 <HAL_TIM_ConfigClockSource+0x62>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d06f      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004894:	e078      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004896:	2b20      	cmp	r3, #32
 8004898:	d06c      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x140>
 800489a:	2b30      	cmp	r3, #48	; 0x30
 800489c:	d06a      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800489e:	e073      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048a0:	2b70      	cmp	r3, #112	; 0x70
 80048a2:	d00d      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0x8c>
 80048a4:	2b70      	cmp	r3, #112	; 0x70
 80048a6:	d804      	bhi.n	80048b2 <HAL_TIM_ConfigClockSource+0x7e>
 80048a8:	2b50      	cmp	r3, #80	; 0x50
 80048aa:	d033      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0xe0>
 80048ac:	2b60      	cmp	r3, #96	; 0x60
 80048ae:	d041      	beq.n	8004934 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048b0:	e06a      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	d066      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x152>
 80048b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048bc:	d017      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048be:	e063      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6899      	ldr	r1, [r3, #8]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f000 fac9 	bl	8004e66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	609a      	str	r2, [r3, #8]
      break;
 80048ec:	e04c      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6899      	ldr	r1, [r3, #8]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f000 fab2 	bl	8004e66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004910:	609a      	str	r2, [r3, #8]
      break;
 8004912:	e039      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	461a      	mov	r2, r3
 8004922:	f000 fa29 	bl	8004d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2150      	movs	r1, #80	; 0x50
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fa80 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004932:	e029      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	461a      	mov	r2, r3
 8004942:	f000 fa47 	bl	8004dd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2160      	movs	r1, #96	; 0x60
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fa70 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004952:	e019      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	461a      	mov	r2, r3
 8004962:	f000 fa09 	bl	8004d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2140      	movs	r1, #64	; 0x40
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fa60 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004972:	e009      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 fa57 	bl	8004e32 <TIM_ITRx_SetConfig>
        break;
 8004984:	e000      	b.n	8004988 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a29      	ldr	r2, [pc, #164]	; (8004a5c <TIM_Base_SetConfig+0xb8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_Base_SetConfig+0x30>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c2:	d007      	beq.n	80049d4 <TIM_Base_SetConfig+0x30>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <TIM_Base_SetConfig+0xbc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0x30>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <TIM_Base_SetConfig+0xc0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d108      	bne.n	80049e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <TIM_Base_SetConfig+0xb8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0x62>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0x62>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <TIM_Base_SetConfig+0xbc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0x62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <TIM_Base_SetConfig+0xc0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <TIM_Base_SetConfig+0xb8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d103      	bne.n	8004a4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	615a      	str	r2, [r3, #20]
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800

08004a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0201 	bic.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 0302 	bic.w	r3, r3, #2
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <TIM_OC1_SetConfig+0xc8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10c      	bne.n	8004ade <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0308 	bic.w	r3, r3, #8
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 0304 	bic.w	r3, r3, #4
 8004adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <TIM_OC1_SetConfig+0xc8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d111      	bne.n	8004b0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	621a      	str	r2, [r3, #32]
}
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40012c00 	.word	0x40012c00

08004b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f023 0210 	bic.w	r2, r3, #16
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0320 	bic.w	r3, r3, #32
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <TIM_OC2_SetConfig+0xd0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10d      	bne.n	8004bb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a14      	ldr	r2, [pc, #80]	; (8004c04 <TIM_OC2_SetConfig+0xd0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d113      	bne.n	8004be0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00

08004c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <TIM_OC3_SetConfig+0xd0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10d      	bne.n	8004c82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <TIM_OC3_SetConfig+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d113      	bne.n	8004cb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	621a      	str	r2, [r3, #32]
}
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40012c00 	.word	0x40012c00

08004cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	031b      	lsls	r3, r3, #12
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <TIM_OC4_SetConfig+0x98>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d109      	bne.n	8004d50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	019b      	lsls	r3, r3, #6
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00

08004d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f023 0201 	bic.w	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f023 030a 	bic.w	r3, r3, #10
 8004db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f023 0210 	bic.w	r2, r3, #16
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	031b      	lsls	r3, r3, #12
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f043 0307 	orr.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	021a      	lsls	r2, r3, #8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	609a      	str	r2, [r3, #8]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e046      	b.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d009      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10c      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800

08004fa8 <__errno>:
 8004fa8:	4b01      	ldr	r3, [pc, #4]	; (8004fb0 <__errno+0x8>)
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000010 	.word	0x20000010

08004fb4 <gmtime>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <gmtime+0x20>)
 8004fb8:	4605      	mov	r5, r0
 8004fba:	681c      	ldr	r4, [r3, #0]
 8004fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fbe:	b91b      	cbnz	r3, 8004fc8 <gmtime+0x14>
 8004fc0:	2024      	movs	r0, #36	; 0x24
 8004fc2:	f000 f8d9 	bl	8005178 <malloc>
 8004fc6:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004fc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004fca:	4628      	mov	r0, r5
 8004fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fd0:	f000 b802 	b.w	8004fd8 <gmtime_r>
 8004fd4:	20000010 	.word	0x20000010

08004fd8 <gmtime_r>:
 8004fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fdc:	e9d0 8900 	ldrd	r8, r9, [r0]
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	4a4f      	ldr	r2, [pc, #316]	; (8005120 <gmtime_r+0x148>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	4649      	mov	r1, r9
 8004fea:	f7fb ffa5 	bl	8000f38 <__aeabi_ldivmod>
 8004fee:	4a4c      	ldr	r2, [pc, #304]	; (8005120 <gmtime_r+0x148>)
 8004ff0:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	f7fb ff9d 	bl	8000f38 <__aeabi_ldivmod>
 8004ffe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005002:	2a00      	cmp	r2, #0
 8005004:	bfbc      	itt	lt
 8005006:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800500a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800500e:	fb92 f3f1 	sdiv	r3, r2, r1
 8005012:	fb01 2213 	mls	r2, r1, r3, r2
 8005016:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800501a:	60a3      	str	r3, [r4, #8]
 800501c:	fb92 f3f1 	sdiv	r3, r2, r1
 8005020:	fb01 2213 	mls	r2, r1, r3, r2
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	f04f 0207 	mov.w	r2, #7
 800502a:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 800502e:	bfb8      	it	lt
 8005030:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8005034:	6063      	str	r3, [r4, #4]
 8005036:	1ceb      	adds	r3, r5, #3
 8005038:	fb93 f2f2 	sdiv	r2, r3, r2
 800503c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	bf48      	it	mi
 8005044:	3307      	addmi	r3, #7
 8005046:	2d00      	cmp	r5, #0
 8005048:	4836      	ldr	r0, [pc, #216]	; (8005124 <gmtime_r+0x14c>)
 800504a:	61a3      	str	r3, [r4, #24]
 800504c:	bfbd      	ittte	lt
 800504e:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 8005052:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8005056:	fb93 f0f0 	sdivlt	r0, r3, r0
 800505a:	fb95 f0f0 	sdivge	r0, r5, r0
 800505e:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8005062:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8005066:	4b30      	ldr	r3, [pc, #192]	; (8005128 <gmtime_r+0x150>)
 8005068:	f240 166d 	movw	r6, #365	; 0x16d
 800506c:	fb03 5300 	mla	r3, r3, r0, r5
 8005070:	fbb3 f1f1 	udiv	r1, r3, r1
 8005074:	fbb3 f2f7 	udiv	r2, r3, r7
 8005078:	4419      	add	r1, r3
 800507a:	1a89      	subs	r1, r1, r2
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <gmtime_r+0x154>)
 800507e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005082:	1a8a      	subs	r2, r1, r2
 8005084:	f648 6194 	movw	r1, #36500	; 0x8e94
 8005088:	fbb2 f1f1 	udiv	r1, r2, r1
 800508c:	fbb2 f5f6 	udiv	r5, r2, r6
 8005090:	fbb2 f2f7 	udiv	r2, r2, r7
 8005094:	440b      	add	r3, r1
 8005096:	2199      	movs	r1, #153	; 0x99
 8005098:	1a9a      	subs	r2, r3, r2
 800509a:	fb06 2315 	mls	r3, r6, r5, r2
 800509e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80050a2:	3202      	adds	r2, #2
 80050a4:	fbb2 f2f1 	udiv	r2, r2, r1
 80050a8:	2705      	movs	r7, #5
 80050aa:	4351      	muls	r1, r2
 80050ac:	3102      	adds	r1, #2
 80050ae:	fbb1 f1f7 	udiv	r1, r1, r7
 80050b2:	2a0a      	cmp	r2, #10
 80050b4:	f103 0601 	add.w	r6, r3, #1
 80050b8:	eba6 0101 	sub.w	r1, r6, r1
 80050bc:	bf34      	ite	cc
 80050be:	2602      	movcc	r6, #2
 80050c0:	f06f 0609 	mvncs.w	r6, #9
 80050c4:	4416      	add	r6, r2
 80050c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80050ca:	fb02 5000 	mla	r0, r2, r0, r5
 80050ce:	2e01      	cmp	r6, #1
 80050d0:	bf98      	it	ls
 80050d2:	3001      	addls	r0, #1
 80050d4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80050d8:	d30c      	bcc.n	80050f4 <gmtime_r+0x11c>
 80050da:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80050de:	61e3      	str	r3, [r4, #28]
 80050e0:	2300      	movs	r3, #0
 80050e2:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 80050e6:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80050ea:	60e1      	str	r1, [r4, #12]
 80050ec:	6223      	str	r3, [r4, #32]
 80050ee:	4620      	mov	r0, r4
 80050f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f4:	07aa      	lsls	r2, r5, #30
 80050f6:	d105      	bne.n	8005104 <gmtime_r+0x12c>
 80050f8:	2764      	movs	r7, #100	; 0x64
 80050fa:	fbb5 f2f7 	udiv	r2, r5, r7
 80050fe:	fb07 5212 	mls	r2, r7, r2, r5
 8005102:	b95a      	cbnz	r2, 800511c <gmtime_r+0x144>
 8005104:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8005108:	fbb5 f2f7 	udiv	r2, r5, r7
 800510c:	fb07 5212 	mls	r2, r7, r2, r5
 8005110:	fab2 f282 	clz	r2, r2
 8005114:	0952      	lsrs	r2, r2, #5
 8005116:	333b      	adds	r3, #59	; 0x3b
 8005118:	4413      	add	r3, r2
 800511a:	e7e0      	b.n	80050de <gmtime_r+0x106>
 800511c:	2201      	movs	r2, #1
 800511e:	e7fa      	b.n	8005116 <gmtime_r+0x13e>
 8005120:	00015180 	.word	0x00015180
 8005124:	00023ab1 	.word	0x00023ab1
 8005128:	fffdc54f 	.word	0xfffdc54f
 800512c:	00023ab0 	.word	0x00023ab0

08005130 <__libc_init_array>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	2500      	movs	r5, #0
 8005134:	4e0c      	ldr	r6, [pc, #48]	; (8005168 <__libc_init_array+0x38>)
 8005136:	4c0d      	ldr	r4, [pc, #52]	; (800516c <__libc_init_array+0x3c>)
 8005138:	1ba4      	subs	r4, r4, r6
 800513a:	10a4      	asrs	r4, r4, #2
 800513c:	42a5      	cmp	r5, r4
 800513e:	d109      	bne.n	8005154 <__libc_init_array+0x24>
 8005140:	f002 f996 	bl	8007470 <_init>
 8005144:	2500      	movs	r5, #0
 8005146:	4e0a      	ldr	r6, [pc, #40]	; (8005170 <__libc_init_array+0x40>)
 8005148:	4c0a      	ldr	r4, [pc, #40]	; (8005174 <__libc_init_array+0x44>)
 800514a:	1ba4      	subs	r4, r4, r6
 800514c:	10a4      	asrs	r4, r4, #2
 800514e:	42a5      	cmp	r5, r4
 8005150:	d105      	bne.n	800515e <__libc_init_array+0x2e>
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005158:	4798      	blx	r3
 800515a:	3501      	adds	r5, #1
 800515c:	e7ee      	b.n	800513c <__libc_init_array+0xc>
 800515e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005162:	4798      	blx	r3
 8005164:	3501      	adds	r5, #1
 8005166:	e7f2      	b.n	800514e <__libc_init_array+0x1e>
 8005168:	08007b78 	.word	0x08007b78
 800516c:	08007b78 	.word	0x08007b78
 8005170:	08007b78 	.word	0x08007b78
 8005174:	08007b7c 	.word	0x08007b7c

08005178 <malloc>:
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <malloc+0xc>)
 800517a:	4601      	mov	r1, r0
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	f000 b85f 	b.w	8005240 <_malloc_r>
 8005182:	bf00      	nop
 8005184:	20000010 	.word	0x20000010

08005188 <free>:
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <free+0xc>)
 800518a:	4601      	mov	r1, r0
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f000 b80b 	b.w	80051a8 <_free_r>
 8005192:	bf00      	nop
 8005194:	20000010 	.word	0x20000010

08005198 <memset>:
 8005198:	4603      	mov	r3, r0
 800519a:	4402      	add	r2, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <_free_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4605      	mov	r5, r0
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d043      	beq.n	8005238 <_free_r+0x90>
 80051b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b4:	1f0c      	subs	r4, r1, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfb8      	it	lt
 80051ba:	18e4      	addlt	r4, r4, r3
 80051bc:	f001 f8ea 	bl	8006394 <__malloc_lock>
 80051c0:	4a1e      	ldr	r2, [pc, #120]	; (800523c <_free_r+0x94>)
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	4610      	mov	r0, r2
 80051c6:	b933      	cbnz	r3, 80051d6 <_free_r+0x2e>
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	6014      	str	r4, [r2, #0]
 80051cc:	4628      	mov	r0, r5
 80051ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d2:	f001 b8e0 	b.w	8006396 <__malloc_unlock>
 80051d6:	42a3      	cmp	r3, r4
 80051d8:	d90b      	bls.n	80051f2 <_free_r+0x4a>
 80051da:	6821      	ldr	r1, [r4, #0]
 80051dc:	1862      	adds	r2, r4, r1
 80051de:	4293      	cmp	r3, r2
 80051e0:	bf01      	itttt	eq
 80051e2:	681a      	ldreq	r2, [r3, #0]
 80051e4:	685b      	ldreq	r3, [r3, #4]
 80051e6:	1852      	addeq	r2, r2, r1
 80051e8:	6022      	streq	r2, [r4, #0]
 80051ea:	6063      	str	r3, [r4, #4]
 80051ec:	6004      	str	r4, [r0, #0]
 80051ee:	e7ed      	b.n	80051cc <_free_r+0x24>
 80051f0:	4613      	mov	r3, r2
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	b10a      	cbz	r2, 80051fa <_free_r+0x52>
 80051f6:	42a2      	cmp	r2, r4
 80051f8:	d9fa      	bls.n	80051f0 <_free_r+0x48>
 80051fa:	6819      	ldr	r1, [r3, #0]
 80051fc:	1858      	adds	r0, r3, r1
 80051fe:	42a0      	cmp	r0, r4
 8005200:	d10b      	bne.n	800521a <_free_r+0x72>
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	4401      	add	r1, r0
 8005206:	1858      	adds	r0, r3, r1
 8005208:	4282      	cmp	r2, r0
 800520a:	6019      	str	r1, [r3, #0]
 800520c:	d1de      	bne.n	80051cc <_free_r+0x24>
 800520e:	6810      	ldr	r0, [r2, #0]
 8005210:	6852      	ldr	r2, [r2, #4]
 8005212:	4401      	add	r1, r0
 8005214:	6019      	str	r1, [r3, #0]
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	e7d8      	b.n	80051cc <_free_r+0x24>
 800521a:	d902      	bls.n	8005222 <_free_r+0x7a>
 800521c:	230c      	movs	r3, #12
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	e7d4      	b.n	80051cc <_free_r+0x24>
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1821      	adds	r1, r4, r0
 8005226:	428a      	cmp	r2, r1
 8005228:	bf01      	itttt	eq
 800522a:	6811      	ldreq	r1, [r2, #0]
 800522c:	6852      	ldreq	r2, [r2, #4]
 800522e:	1809      	addeq	r1, r1, r0
 8005230:	6021      	streq	r1, [r4, #0]
 8005232:	6062      	str	r2, [r4, #4]
 8005234:	605c      	str	r4, [r3, #4]
 8005236:	e7c9      	b.n	80051cc <_free_r+0x24>
 8005238:	bd38      	pop	{r3, r4, r5, pc}
 800523a:	bf00      	nop
 800523c:	2000026c 	.word	0x2000026c

08005240 <_malloc_r>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	1ccd      	adds	r5, r1, #3
 8005244:	f025 0503 	bic.w	r5, r5, #3
 8005248:	3508      	adds	r5, #8
 800524a:	2d0c      	cmp	r5, #12
 800524c:	bf38      	it	cc
 800524e:	250c      	movcc	r5, #12
 8005250:	2d00      	cmp	r5, #0
 8005252:	4606      	mov	r6, r0
 8005254:	db01      	blt.n	800525a <_malloc_r+0x1a>
 8005256:	42a9      	cmp	r1, r5
 8005258:	d903      	bls.n	8005262 <_malloc_r+0x22>
 800525a:	230c      	movs	r3, #12
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	2000      	movs	r0, #0
 8005260:	bd70      	pop	{r4, r5, r6, pc}
 8005262:	f001 f897 	bl	8006394 <__malloc_lock>
 8005266:	4a21      	ldr	r2, [pc, #132]	; (80052ec <_malloc_r+0xac>)
 8005268:	6814      	ldr	r4, [r2, #0]
 800526a:	4621      	mov	r1, r4
 800526c:	b991      	cbnz	r1, 8005294 <_malloc_r+0x54>
 800526e:	4c20      	ldr	r4, [pc, #128]	; (80052f0 <_malloc_r+0xb0>)
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	b91b      	cbnz	r3, 800527c <_malloc_r+0x3c>
 8005274:	4630      	mov	r0, r6
 8005276:	f000 f83d 	bl	80052f4 <_sbrk_r>
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	4629      	mov	r1, r5
 800527e:	4630      	mov	r0, r6
 8005280:	f000 f838 	bl	80052f4 <_sbrk_r>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d124      	bne.n	80052d2 <_malloc_r+0x92>
 8005288:	230c      	movs	r3, #12
 800528a:	4630      	mov	r0, r6
 800528c:	6033      	str	r3, [r6, #0]
 800528e:	f001 f882 	bl	8006396 <__malloc_unlock>
 8005292:	e7e4      	b.n	800525e <_malloc_r+0x1e>
 8005294:	680b      	ldr	r3, [r1, #0]
 8005296:	1b5b      	subs	r3, r3, r5
 8005298:	d418      	bmi.n	80052cc <_malloc_r+0x8c>
 800529a:	2b0b      	cmp	r3, #11
 800529c:	d90f      	bls.n	80052be <_malloc_r+0x7e>
 800529e:	600b      	str	r3, [r1, #0]
 80052a0:	18cc      	adds	r4, r1, r3
 80052a2:	50cd      	str	r5, [r1, r3]
 80052a4:	4630      	mov	r0, r6
 80052a6:	f001 f876 	bl	8006396 <__malloc_unlock>
 80052aa:	f104 000b 	add.w	r0, r4, #11
 80052ae:	1d23      	adds	r3, r4, #4
 80052b0:	f020 0007 	bic.w	r0, r0, #7
 80052b4:	1ac3      	subs	r3, r0, r3
 80052b6:	d0d3      	beq.n	8005260 <_malloc_r+0x20>
 80052b8:	425a      	negs	r2, r3
 80052ba:	50e2      	str	r2, [r4, r3]
 80052bc:	e7d0      	b.n	8005260 <_malloc_r+0x20>
 80052be:	684b      	ldr	r3, [r1, #4]
 80052c0:	428c      	cmp	r4, r1
 80052c2:	bf16      	itet	ne
 80052c4:	6063      	strne	r3, [r4, #4]
 80052c6:	6013      	streq	r3, [r2, #0]
 80052c8:	460c      	movne	r4, r1
 80052ca:	e7eb      	b.n	80052a4 <_malloc_r+0x64>
 80052cc:	460c      	mov	r4, r1
 80052ce:	6849      	ldr	r1, [r1, #4]
 80052d0:	e7cc      	b.n	800526c <_malloc_r+0x2c>
 80052d2:	1cc4      	adds	r4, r0, #3
 80052d4:	f024 0403 	bic.w	r4, r4, #3
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d005      	beq.n	80052e8 <_malloc_r+0xa8>
 80052dc:	1a21      	subs	r1, r4, r0
 80052de:	4630      	mov	r0, r6
 80052e0:	f000 f808 	bl	80052f4 <_sbrk_r>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d0cf      	beq.n	8005288 <_malloc_r+0x48>
 80052e8:	6025      	str	r5, [r4, #0]
 80052ea:	e7db      	b.n	80052a4 <_malloc_r+0x64>
 80052ec:	2000026c 	.word	0x2000026c
 80052f0:	20000270 	.word	0x20000270

080052f4 <_sbrk_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	2300      	movs	r3, #0
 80052f8:	4c05      	ldr	r4, [pc, #20]	; (8005310 <_sbrk_r+0x1c>)
 80052fa:	4605      	mov	r5, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	6023      	str	r3, [r4, #0]
 8005300:	f7fd f8ce 	bl	80024a0 <_sbrk>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_sbrk_r+0x1a>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	b103      	cbz	r3, 800530e <_sbrk_r+0x1a>
 800530c:	602b      	str	r3, [r5, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	20000368 	.word	0x20000368

08005314 <iso_year_adjust>:
 8005314:	6942      	ldr	r2, [r0, #20]
 8005316:	f240 736c 	movw	r3, #1900	; 0x76c
 800531a:	2a00      	cmp	r2, #0
 800531c:	bfa8      	it	ge
 800531e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8005322:	441a      	add	r2, r3
 8005324:	0793      	lsls	r3, r2, #30
 8005326:	d105      	bne.n	8005334 <iso_year_adjust+0x20>
 8005328:	2164      	movs	r1, #100	; 0x64
 800532a:	fb92 f3f1 	sdiv	r3, r2, r1
 800532e:	fb01 2313 	mls	r3, r1, r3, r2
 8005332:	b9d3      	cbnz	r3, 800536a <iso_year_adjust+0x56>
 8005334:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005338:	fb92 f3f1 	sdiv	r3, r2, r1
 800533c:	fb01 2313 	mls	r3, r1, r3, r2
 8005340:	fab3 f283 	clz	r2, r3
 8005344:	0952      	lsrs	r2, r2, #5
 8005346:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005350:	4413      	add	r3, r2
 8005352:	2b21      	cmp	r3, #33	; 0x21
 8005354:	dc11      	bgt.n	800537a <iso_year_adjust+0x66>
 8005356:	2b20      	cmp	r3, #32
 8005358:	da30      	bge.n	80053bc <iso_year_adjust+0xa8>
 800535a:	2b0d      	cmp	r3, #13
 800535c:	dc07      	bgt.n	800536e <iso_year_adjust+0x5a>
 800535e:	2b0a      	cmp	r3, #10
 8005360:	da2c      	bge.n	80053bc <iso_year_adjust+0xa8>
 8005362:	2b01      	cmp	r3, #1
 8005364:	d92a      	bls.n	80053bc <iso_year_adjust+0xa8>
 8005366:	2000      	movs	r0, #0
 8005368:	4770      	bx	lr
 800536a:	2201      	movs	r2, #1
 800536c:	e7eb      	b.n	8005346 <iso_year_adjust+0x32>
 800536e:	2b10      	cmp	r3, #16
 8005370:	dbf9      	blt.n	8005366 <iso_year_adjust+0x52>
 8005372:	2b11      	cmp	r3, #17
 8005374:	dd22      	ble.n	80053bc <iso_year_adjust+0xa8>
 8005376:	3b1c      	subs	r3, #28
 8005378:	e7f3      	b.n	8005362 <iso_year_adjust+0x4e>
 800537a:	f241 62c6 	movw	r2, #5830	; 0x16c6
 800537e:	4293      	cmp	r3, r2
 8005380:	dc0f      	bgt.n	80053a2 <iso_year_adjust+0x8e>
 8005382:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8005386:	4293      	cmp	r3, r2
 8005388:	da09      	bge.n	800539e <iso_year_adjust+0x8a>
 800538a:	f241 62a2 	movw	r2, #5794	; 0x16a2
 800538e:	4293      	cmp	r3, r2
 8005390:	d005      	beq.n	800539e <iso_year_adjust+0x8a>
 8005392:	dbe8      	blt.n	8005366 <iso_year_adjust+0x52>
 8005394:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8005398:	3b12      	subs	r3, #18
 800539a:	2b02      	cmp	r3, #2
 800539c:	d8e3      	bhi.n	8005366 <iso_year_adjust+0x52>
 800539e:	2001      	movs	r0, #1
 80053a0:	4770      	bx	lr
 80053a2:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d0f9      	beq.n	800539e <iso_year_adjust+0x8a>
 80053aa:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d0f5      	beq.n	800539e <iso_year_adjust+0x8a>
 80053b2:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d1d5      	bne.n	8005366 <iso_year_adjust+0x52>
 80053ba:	e7f0      	b.n	800539e <iso_year_adjust+0x8a>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	4770      	bx	lr
	...

080053c4 <__strftime>:
 80053c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	461d      	mov	r5, r3
 80053ca:	2300      	movs	r3, #0
 80053cc:	4607      	mov	r7, r0
 80053ce:	460e      	mov	r6, r1
 80053d0:	461c      	mov	r4, r3
 80053d2:	b091      	sub	sp, #68	; 0x44
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	f101 3bff 	add.w	fp, r1, #4294967295
 80053da:	7813      	ldrb	r3, [r2, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 84e2 	beq.w	8005da6 <__strftime+0x9e2>
 80053e2:	2b25      	cmp	r3, #37	; 0x25
 80053e4:	d11f      	bne.n	8005426 <__strftime+0x62>
 80053e6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80053ea:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80053ee:	d023      	beq.n	8005438 <__strftime+0x74>
 80053f0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80053f4:	d020      	beq.n	8005438 <__strftime+0x74>
 80053f6:	f04f 0a00 	mov.w	sl, #0
 80053fa:	f102 0801 	add.w	r8, r2, #1
 80053fe:	f898 3000 	ldrb.w	r3, [r8]
 8005402:	3b31      	subs	r3, #49	; 0x31
 8005404:	2b08      	cmp	r3, #8
 8005406:	d81a      	bhi.n	800543e <__strftime+0x7a>
 8005408:	4640      	mov	r0, r8
 800540a:	220a      	movs	r2, #10
 800540c:	a908      	add	r1, sp, #32
 800540e:	f000 fd85 	bl	8005f1c <strtoul>
 8005412:	4681      	mov	r9, r0
 8005414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005418:	f898 3000 	ldrb.w	r3, [r8]
 800541c:	2b45      	cmp	r3, #69	; 0x45
 800541e:	d111      	bne.n	8005444 <__strftime+0x80>
 8005420:	f108 0801 	add.w	r8, r8, #1
 8005424:	e010      	b.n	8005448 <__strftime+0x84>
 8005426:	45a3      	cmp	fp, r4
 8005428:	d802      	bhi.n	8005430 <__strftime+0x6c>
 800542a:	2400      	movs	r4, #0
 800542c:	f000 bcbe 	b.w	8005dac <__strftime+0x9e8>
 8005430:	553b      	strb	r3, [r7, r4]
 8005432:	3201      	adds	r2, #1
 8005434:	3401      	adds	r4, #1
 8005436:	e7d0      	b.n	80053da <__strftime+0x16>
 8005438:	f102 0802 	add.w	r8, r2, #2
 800543c:	e7df      	b.n	80053fe <__strftime+0x3a>
 800543e:	f04f 0900 	mov.w	r9, #0
 8005442:	e7e9      	b.n	8005418 <__strftime+0x54>
 8005444:	2b4f      	cmp	r3, #79	; 0x4f
 8005446:	d0eb      	beq.n	8005420 <__strftime+0x5c>
 8005448:	f898 1000 	ldrb.w	r1, [r8]
 800544c:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8005450:	2b55      	cmp	r3, #85	; 0x55
 8005452:	d8ea      	bhi.n	800542a <__strftime+0x66>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <__strftime+0x98>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005d9d 	.word	0x08005d9d
 8005460:	0800542b 	.word	0x0800542b
 8005464:	0800542b 	.word	0x0800542b
 8005468:	0800542b 	.word	0x0800542b
 800546c:	0800542b 	.word	0x0800542b
 8005470:	0800542b 	.word	0x0800542b
 8005474:	0800542b 	.word	0x0800542b
 8005478:	0800542b 	.word	0x0800542b
 800547c:	0800542b 	.word	0x0800542b
 8005480:	0800542b 	.word	0x0800542b
 8005484:	0800542b 	.word	0x0800542b
 8005488:	0800542b 	.word	0x0800542b
 800548c:	0800542b 	.word	0x0800542b
 8005490:	0800542b 	.word	0x0800542b
 8005494:	0800542b 	.word	0x0800542b
 8005498:	0800542b 	.word	0x0800542b
 800549c:	0800542b 	.word	0x0800542b
 80054a0:	0800542b 	.word	0x0800542b
 80054a4:	0800542b 	.word	0x0800542b
 80054a8:	0800542b 	.word	0x0800542b
 80054ac:	0800542b 	.word	0x0800542b
 80054b0:	0800542b 	.word	0x0800542b
 80054b4:	0800542b 	.word	0x0800542b
 80054b8:	0800542b 	.word	0x0800542b
 80054bc:	0800542b 	.word	0x0800542b
 80054c0:	0800542b 	.word	0x0800542b
 80054c4:	0800542b 	.word	0x0800542b
 80054c8:	0800542b 	.word	0x0800542b
 80054cc:	080055f1 	.word	0x080055f1
 80054d0:	08005645 	.word	0x08005645
 80054d4:	080056b5 	.word	0x080056b5
 80054d8:	0800574f 	.word	0x0800574f
 80054dc:	0800542b 	.word	0x0800542b
 80054e0:	0800579d 	.word	0x0800579d
 80054e4:	0800588d 	.word	0x0800588d
 80054e8:	080059a5 	.word	0x080059a5
 80054ec:	080059b3 	.word	0x080059b3
 80054f0:	0800542b 	.word	0x0800542b
 80054f4:	0800542b 	.word	0x0800542b
 80054f8:	0800542b 	.word	0x0800542b
 80054fc:	080059e3 	.word	0x080059e3
 8005500:	0800542b 	.word	0x0800542b
 8005504:	0800542b 	.word	0x0800542b
 8005508:	080059f5 	.word	0x080059f5
 800550c:	0800542b 	.word	0x0800542b
 8005510:	08005a53 	.word	0x08005a53
 8005514:	08005b6b 	.word	0x08005b6b
 8005518:	08005b79 	.word	0x08005b79
 800551c:	08005bc9 	.word	0x08005bc9
 8005520:	08005bd9 	.word	0x08005bd9
 8005524:	08005c49 	.word	0x08005c49
 8005528:	080056ad 	.word	0x080056ad
 800552c:	08005c83 	.word	0x08005c83
 8005530:	08005d49 	.word	0x08005d49
 8005534:	0800542b 	.word	0x0800542b
 8005538:	0800542b 	.word	0x0800542b
 800553c:	0800542b 	.word	0x0800542b
 8005540:	0800542b 	.word	0x0800542b
 8005544:	0800542b 	.word	0x0800542b
 8005548:	0800542b 	.word	0x0800542b
 800554c:	080055b5 	.word	0x080055b5
 8005550:	0800561d 	.word	0x0800561d
 8005554:	0800566f 	.word	0x0800566f
 8005558:	0800572b 	.word	0x0800572b
 800555c:	0800572b 	.word	0x0800572b
 8005560:	0800542b 	.word	0x0800542b
 8005564:	080057f5 	.word	0x080057f5
 8005568:	0800561d 	.word	0x0800561d
 800556c:	0800542b 	.word	0x0800542b
 8005570:	080059d5 	.word	0x080059d5
 8005574:	080059a5 	.word	0x080059a5
 8005578:	080059b3 	.word	0x080059b3
 800557c:	080059dd 	.word	0x080059dd
 8005580:	080059e7 	.word	0x080059e7
 8005584:	0800542b 	.word	0x0800542b
 8005588:	080059f5 	.word	0x080059f5
 800558c:	0800542b 	.word	0x0800542b
 8005590:	0800569d 	.word	0x0800569d
 8005594:	08005a65 	.word	0x08005a65
 8005598:	08005b6f 	.word	0x08005b6f
 800559c:	08005bb1 	.word	0x08005bb1
 80055a0:	0800542b 	.word	0x0800542b
 80055a4:	08005c3d 	.word	0x08005c3d
 80055a8:	080056a5 	.word	0x080056a5
 80055ac:	08005c61 	.word	0x08005c61
 80055b0:	08005cd7 	.word	0x08005cd7
 80055b4:	69ab      	ldr	r3, [r5, #24]
 80055b6:	4aa8      	ldr	r2, [pc, #672]	; (8005858 <__strftime+0x494>)
 80055b8:	3318      	adds	r3, #24
 80055ba:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80055be:	4648      	mov	r0, r9
 80055c0:	f7fa fdc6 	bl	8000150 <strlen>
 80055c4:	eba9 0904 	sub.w	r9, r9, r4
 80055c8:	4420      	add	r0, r4
 80055ca:	42a0      	cmp	r0, r4
 80055cc:	d108      	bne.n	80055e0 <__strftime+0x21c>
 80055ce:	4604      	mov	r4, r0
 80055d0:	f898 3000 	ldrb.w	r3, [r8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 83e6 	beq.w	8005da6 <__strftime+0x9e2>
 80055da:	f108 0201 	add.w	r2, r8, #1
 80055de:	e6fc      	b.n	80053da <__strftime+0x16>
 80055e0:	45a3      	cmp	fp, r4
 80055e2:	f67f af22 	bls.w	800542a <__strftime+0x66>
 80055e6:	f819 3004 	ldrb.w	r3, [r9, r4]
 80055ea:	553b      	strb	r3, [r7, r4]
 80055ec:	3401      	adds	r4, #1
 80055ee:	e7ec      	b.n	80055ca <__strftime+0x206>
 80055f0:	69aa      	ldr	r2, [r5, #24]
 80055f2:	4b99      	ldr	r3, [pc, #612]	; (8005858 <__strftime+0x494>)
 80055f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80055f8:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80055fc:	4648      	mov	r0, r9
 80055fe:	f7fa fda7 	bl	8000150 <strlen>
 8005602:	eba9 0904 	sub.w	r9, r9, r4
 8005606:	4420      	add	r0, r4
 8005608:	42a0      	cmp	r0, r4
 800560a:	d0e0      	beq.n	80055ce <__strftime+0x20a>
 800560c:	45a3      	cmp	fp, r4
 800560e:	f67f af0c 	bls.w	800542a <__strftime+0x66>
 8005612:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005616:	553b      	strb	r3, [r7, r4]
 8005618:	3401      	adds	r4, #1
 800561a:	e7f5      	b.n	8005608 <__strftime+0x244>
 800561c:	692a      	ldr	r2, [r5, #16]
 800561e:	4b8e      	ldr	r3, [pc, #568]	; (8005858 <__strftime+0x494>)
 8005620:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8005624:	4648      	mov	r0, r9
 8005626:	f7fa fd93 	bl	8000150 <strlen>
 800562a:	eba9 0904 	sub.w	r9, r9, r4
 800562e:	4420      	add	r0, r4
 8005630:	42a0      	cmp	r0, r4
 8005632:	d0cc      	beq.n	80055ce <__strftime+0x20a>
 8005634:	45a3      	cmp	fp, r4
 8005636:	f67f aef8 	bls.w	800542a <__strftime+0x66>
 800563a:	f819 3004 	ldrb.w	r3, [r9, r4]
 800563e:	553b      	strb	r3, [r7, r4]
 8005640:	3401      	adds	r4, #1
 8005642:	e7f5      	b.n	8005630 <__strftime+0x26c>
 8005644:	692b      	ldr	r3, [r5, #16]
 8005646:	4a84      	ldr	r2, [pc, #528]	; (8005858 <__strftime+0x494>)
 8005648:	330c      	adds	r3, #12
 800564a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800564e:	4648      	mov	r0, r9
 8005650:	f7fa fd7e 	bl	8000150 <strlen>
 8005654:	eba9 0904 	sub.w	r9, r9, r4
 8005658:	4420      	add	r0, r4
 800565a:	42a0      	cmp	r0, r4
 800565c:	d0b7      	beq.n	80055ce <__strftime+0x20a>
 800565e:	45a3      	cmp	fp, r4
 8005660:	f67f aee3 	bls.w	800542a <__strftime+0x66>
 8005664:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005668:	553b      	strb	r3, [r7, r4]
 800566a:	3401      	adds	r4, #1
 800566c:	e7f5      	b.n	800565a <__strftime+0x296>
 800566e:	4b7a      	ldr	r3, [pc, #488]	; (8005858 <__strftime+0x494>)
 8005670:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8005674:	4648      	mov	r0, r9
 8005676:	f7fa fd6b 	bl	8000150 <strlen>
 800567a:	f899 3000 	ldrb.w	r3, [r9]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0a6      	beq.n	80055d0 <__strftime+0x20c>
 8005682:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005684:	464a      	mov	r2, r9
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	462b      	mov	r3, r5
 800568a:	1b31      	subs	r1, r6, r4
 800568c:	1938      	adds	r0, r7, r4
 800568e:	f7ff fe99 	bl	80053c4 <__strftime>
 8005692:	2800      	cmp	r0, #0
 8005694:	f77f aec9 	ble.w	800542a <__strftime+0x66>
 8005698:	4404      	add	r4, r0
 800569a:	e799      	b.n	80055d0 <__strftime+0x20c>
 800569c:	4b6e      	ldr	r3, [pc, #440]	; (8005858 <__strftime+0x494>)
 800569e:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80056a2:	e7e7      	b.n	8005674 <__strftime+0x2b0>
 80056a4:	4b6c      	ldr	r3, [pc, #432]	; (8005858 <__strftime+0x494>)
 80056a6:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80056aa:	e7e3      	b.n	8005674 <__strftime+0x2b0>
 80056ac:	4b6a      	ldr	r3, [pc, #424]	; (8005858 <__strftime+0x494>)
 80056ae:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80056b2:	e7df      	b.n	8005674 <__strftime+0x2b0>
 80056b4:	4b69      	ldr	r3, [pc, #420]	; (800585c <__strftime+0x498>)
 80056b6:	6969      	ldr	r1, [r5, #20]
 80056b8:	4299      	cmp	r1, r3
 80056ba:	bfac      	ite	ge
 80056bc:	2300      	movge	r3, #0
 80056be:	2301      	movlt	r3, #1
 80056c0:	2900      	cmp	r1, #0
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	db10      	blt.n	80056e8 <__strftime+0x324>
 80056c6:	2064      	movs	r0, #100	; 0x64
 80056c8:	fb91 f0f0 	sdiv	r0, r1, r0
 80056cc:	3013      	adds	r0, #19
 80056ce:	f1ba 0f00 	cmp.w	sl, #0
 80056d2:	d013      	beq.n	80056fc <__strftime+0x338>
 80056d4:	2863      	cmp	r0, #99	; 0x63
 80056d6:	dd26      	ble.n	8005726 <__strftime+0x362>
 80056d8:	4a61      	ldr	r2, [pc, #388]	; (8005860 <__strftime+0x49c>)
 80056da:	4b62      	ldr	r3, [pc, #392]	; (8005864 <__strftime+0x4a0>)
 80056dc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80056e0:	bf18      	it	ne
 80056e2:	4613      	movne	r3, r2
 80056e4:	4a60      	ldr	r2, [pc, #384]	; (8005868 <__strftime+0x4a4>)
 80056e6:	e00b      	b.n	8005700 <__strftime+0x33c>
 80056e8:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80056ec:	9105      	str	r1, [sp, #20]
 80056ee:	f000 fdcb 	bl	8006288 <abs>
 80056f2:	2364      	movs	r3, #100	; 0x64
 80056f4:	9905      	ldr	r1, [sp, #20]
 80056f6:	fb90 f0f3 	sdiv	r0, r0, r3
 80056fa:	e7e8      	b.n	80056ce <__strftime+0x30a>
 80056fc:	4b58      	ldr	r3, [pc, #352]	; (8005860 <__strftime+0x49c>)
 80056fe:	4a5b      	ldr	r2, [pc, #364]	; (800586c <__strftime+0x4a8>)
 8005700:	9001      	str	r0, [sp, #4]
 8005702:	9804      	ldr	r0, [sp, #16]
 8005704:	f8df c154 	ldr.w	ip, [pc, #340]	; 800585c <__strftime+0x498>
 8005708:	f1b9 0f02 	cmp.w	r9, #2
 800570c:	bf2c      	ite	cs
 800570e:	ebc0 0009 	rsbcs	r0, r0, r9
 8005712:	f1c0 0002 	rsbcc	r0, r0, #2
 8005716:	9000      	str	r0, [sp, #0]
 8005718:	4855      	ldr	r0, [pc, #340]	; (8005870 <__strftime+0x4ac>)
 800571a:	4561      	cmp	r1, ip
 800571c:	bfb8      	it	lt
 800571e:	4603      	movlt	r3, r0
 8005720:	1b31      	subs	r1, r6, r4
 8005722:	1938      	adds	r0, r7, r4
 8005724:	e029      	b.n	800577a <__strftime+0x3b6>
 8005726:	4b4e      	ldr	r3, [pc, #312]	; (8005860 <__strftime+0x49c>)
 8005728:	e7dc      	b.n	80056e4 <__strftime+0x320>
 800572a:	4852      	ldr	r0, [pc, #328]	; (8005874 <__strftime+0x4b0>)
 800572c:	4a52      	ldr	r2, [pc, #328]	; (8005878 <__strftime+0x4b4>)
 800572e:	68eb      	ldr	r3, [r5, #12]
 8005730:	2964      	cmp	r1, #100	; 0x64
 8005732:	bf18      	it	ne
 8005734:	4602      	movne	r2, r0
 8005736:	1b31      	subs	r1, r6, r4
 8005738:	1938      	adds	r0, r7, r4
 800573a:	f001 f907 	bl	800694c <sniprintf>
 800573e:	2800      	cmp	r0, #0
 8005740:	f6ff ae73 	blt.w	800542a <__strftime+0x66>
 8005744:	4404      	add	r4, r0
 8005746:	42a6      	cmp	r6, r4
 8005748:	f63f af42 	bhi.w	80055d0 <__strftime+0x20c>
 800574c:	e66d      	b.n	800542a <__strftime+0x66>
 800574e:	6968      	ldr	r0, [r5, #20]
 8005750:	692b      	ldr	r3, [r5, #16]
 8005752:	2800      	cmp	r0, #0
 8005754:	eb07 0904 	add.w	r9, r7, r4
 8005758:	eba6 0a04 	sub.w	sl, r6, r4
 800575c:	f103 0301 	add.w	r3, r3, #1
 8005760:	68ea      	ldr	r2, [r5, #12]
 8005762:	db0d      	blt.n	8005780 <__strftime+0x3bc>
 8005764:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005768:	fb90 f1fc 	sdiv	r1, r0, ip
 800576c:	fb0c 0011 	mls	r0, ip, r1, r0
 8005770:	e9cd 2000 	strd	r2, r0, [sp]
 8005774:	4651      	mov	r1, sl
 8005776:	4648      	mov	r0, r9
 8005778:	4a40      	ldr	r2, [pc, #256]	; (800587c <__strftime+0x4b8>)
 800577a:	f001 f8e7 	bl	800694c <sniprintf>
 800577e:	e7de      	b.n	800573e <__strftime+0x37a>
 8005780:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005784:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8005788:	f000 fd7e 	bl	8006288 <abs>
 800578c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8005790:	2164      	movs	r1, #100	; 0x64
 8005792:	fb90 fcf1 	sdiv	ip, r0, r1
 8005796:	fb0c 0011 	mls	r0, ip, r1, r0
 800579a:	e7e9      	b.n	8005770 <__strftime+0x3ac>
 800579c:	2325      	movs	r3, #37	; 0x25
 800579e:	f88d 3020 	strb.w	r3, [sp, #32]
 80057a2:	f1ba 0f00 	cmp.w	sl, #0
 80057a6:	d013      	beq.n	80057d0 <__strftime+0x40c>
 80057a8:	f1b9 0f06 	cmp.w	r9, #6
 80057ac:	bf38      	it	cc
 80057ae:	f04f 0906 	movcc.w	r9, #6
 80057b2:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 80057b6:	f1b9 0306 	subs.w	r3, r9, #6
 80057ba:	d10f      	bne.n	80057dc <__strftime+0x418>
 80057bc:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80057c0:	492f      	ldr	r1, [pc, #188]	; (8005880 <__strftime+0x4bc>)
 80057c2:	f001 f923 	bl	8006a0c <strcpy>
 80057c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80057c8:	aa08      	add	r2, sp, #32
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	462b      	mov	r3, r5
 80057ce:	e75c      	b.n	800568a <__strftime+0x2c6>
 80057d0:	232b      	movs	r3, #43	; 0x2b
 80057d2:	f04f 090a 	mov.w	r9, #10
 80057d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80057da:	e7ec      	b.n	80057b6 <__strftime+0x3f2>
 80057dc:	4a29      	ldr	r2, [pc, #164]	; (8005884 <__strftime+0x4c0>)
 80057de:	211e      	movs	r1, #30
 80057e0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80057e4:	f001 f8b2 	bl	800694c <sniprintf>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	dde7      	ble.n	80057bc <__strftime+0x3f8>
 80057ec:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80057f0:	4418      	add	r0, r3
 80057f2:	e7e5      	b.n	80057c0 <__strftime+0x3fc>
 80057f4:	4628      	mov	r0, r5
 80057f6:	f7ff fd8d 	bl	8005314 <iso_year_adjust>
 80057fa:	4681      	mov	r9, r0
 80057fc:	6968      	ldr	r0, [r5, #20]
 80057fe:	2800      	cmp	r0, #0
 8005800:	db1a      	blt.n	8005838 <__strftime+0x474>
 8005802:	2264      	movs	r2, #100	; 0x64
 8005804:	fb90 f3f2 	sdiv	r3, r0, r2
 8005808:	f1b9 0f00 	cmp.w	r9, #0
 800580c:	fb02 0013 	mls	r0, r2, r3, r0
 8005810:	da1a      	bge.n	8005848 <__strftime+0x484>
 8005812:	696a      	ldr	r2, [r5, #20]
 8005814:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <__strftime+0x4c4>)
 8005816:	429a      	cmp	r2, r3
 8005818:	bfb8      	it	lt
 800581a:	f04f 0901 	movlt.w	r9, #1
 800581e:	2364      	movs	r3, #100	; 0x64
 8005820:	4481      	add	r9, r0
 8005822:	fb99 f0f3 	sdiv	r0, r9, r3
 8005826:	fb03 9910 	mls	r9, r3, r0, r9
 800582a:	4499      	add	r9, r3
 800582c:	fb99 f2f3 	sdiv	r2, r9, r3
 8005830:	fb03 9312 	mls	r3, r3, r2, r9
 8005834:	4a10      	ldr	r2, [pc, #64]	; (8005878 <__strftime+0x4b4>)
 8005836:	e77e      	b.n	8005736 <__strftime+0x372>
 8005838:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800583c:	f000 fd24 	bl	8006288 <abs>
 8005840:	2364      	movs	r3, #100	; 0x64
 8005842:	fb90 f2f3 	sdiv	r2, r0, r3
 8005846:	e7df      	b.n	8005808 <__strftime+0x444>
 8005848:	d0e9      	beq.n	800581e <__strftime+0x45a>
 800584a:	696a      	ldr	r2, [r5, #20]
 800584c:	4b03      	ldr	r3, [pc, #12]	; (800585c <__strftime+0x498>)
 800584e:	429a      	cmp	r2, r3
 8005850:	bfb8      	it	lt
 8005852:	f04f 39ff 	movlt.w	r9, #4294967295
 8005856:	e7e2      	b.n	800581e <__strftime+0x45a>
 8005858:	080076f0 	.word	0x080076f0
 800585c:	fffff894 	.word	0xfffff894
 8005860:	08007962 	.word	0x08007962
 8005864:	080076a3 	.word	0x080076a3
 8005868:	0800769b 	.word	0x0800769b
 800586c:	08007694 	.word	0x08007694
 8005870:	08007b07 	.word	0x08007b07
 8005874:	080076a5 	.word	0x080076a5
 8005878:	080076b3 	.word	0x080076b3
 800587c:	080076a9 	.word	0x080076a9
 8005880:	080076bc 	.word	0x080076bc
 8005884:	080076b8 	.word	0x080076b8
 8005888:	fffff895 	.word	0xfffff895
 800588c:	696b      	ldr	r3, [r5, #20]
 800588e:	4628      	mov	r0, r5
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	9a04      	ldr	r2, [sp, #16]
 8005894:	4bbc      	ldr	r3, [pc, #752]	; (8005b88 <__strftime+0x7c4>)
 8005896:	429a      	cmp	r2, r3
 8005898:	bfac      	ite	ge
 800589a:	2300      	movge	r3, #0
 800589c:	2301      	movlt	r3, #1
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	f7ff fd38 	bl	8005314 <iso_year_adjust>
 80058a4:	9a04      	ldr	r2, [sp, #16]
 80058a6:	4603      	mov	r3, r0
 80058a8:	2a00      	cmp	r2, #0
 80058aa:	db3a      	blt.n	8005922 <__strftime+0x55e>
 80058ac:	2264      	movs	r2, #100	; 0x64
 80058ae:	9904      	ldr	r1, [sp, #16]
 80058b0:	fb91 f2f2 	sdiv	r2, r1, r2
 80058b4:	3213      	adds	r2, #19
 80058b6:	6968      	ldr	r0, [r5, #20]
 80058b8:	2800      	cmp	r0, #0
 80058ba:	db3d      	blt.n	8005938 <__strftime+0x574>
 80058bc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80058c0:	fb90 fefc 	sdiv	lr, r0, ip
 80058c4:	fb0c 001e 	mls	r0, ip, lr, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	da44      	bge.n	8005956 <__strftime+0x592>
 80058cc:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8005bac <__strftime+0x7e8>
 80058d0:	6969      	ldr	r1, [r5, #20]
 80058d2:	4561      	cmp	r1, ip
 80058d4:	da01      	bge.n	80058da <__strftime+0x516>
 80058d6:	2301      	movs	r3, #1
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	4403      	add	r3, r0
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	d146      	bne.n	800596e <__strftime+0x5aa>
 80058e0:	2363      	movs	r3, #99	; 0x63
 80058e2:	3a01      	subs	r2, #1
 80058e4:	2064      	movs	r0, #100	; 0x64
 80058e6:	fb00 3202 	mla	r2, r0, r2, r3
 80058ea:	9b05      	ldr	r3, [sp, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d043      	beq.n	8005978 <__strftime+0x5b4>
 80058f0:	232d      	movs	r3, #45	; 0x2d
 80058f2:	f88d 3020 	strb.w	r3, [sp, #32]
 80058f6:	f1b9 0f00 	cmp.w	r9, #0
 80058fa:	d001      	beq.n	8005900 <__strftime+0x53c>
 80058fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8005900:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8005904:	2125      	movs	r1, #37	; 0x25
 8005906:	7019      	strb	r1, [r3, #0]
 8005908:	f1ba 0f00 	cmp.w	sl, #0
 800590c:	d144      	bne.n	8005998 <__strftime+0x5d4>
 800590e:	1c58      	adds	r0, r3, #1
 8005910:	499e      	ldr	r1, [pc, #632]	; (8005b8c <__strftime+0x7c8>)
 8005912:	9204      	str	r2, [sp, #16]
 8005914:	f001 f87a 	bl	8006a0c <strcpy>
 8005918:	9a04      	ldr	r2, [sp, #16]
 800591a:	9200      	str	r2, [sp, #0]
 800591c:	464b      	mov	r3, r9
 800591e:	aa08      	add	r2, sp, #32
 8005920:	e09b      	b.n	8005a5a <__strftime+0x696>
 8005922:	9b04      	ldr	r3, [sp, #16]
 8005924:	9006      	str	r0, [sp, #24]
 8005926:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 800592a:	f000 fcad 	bl	8006288 <abs>
 800592e:	2264      	movs	r2, #100	; 0x64
 8005930:	9b06      	ldr	r3, [sp, #24]
 8005932:	fb90 f2f2 	sdiv	r2, r0, r2
 8005936:	e7be      	b.n	80058b6 <__strftime+0x4f2>
 8005938:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800593c:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8005940:	f000 fca2 	bl	8006288 <abs>
 8005944:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005948:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800594c:	fb90 fefc 	sdiv	lr, r0, ip
 8005950:	fb0e 001c 	mls	r0, lr, ip, r0
 8005954:	e7b8      	b.n	80058c8 <__strftime+0x504>
 8005956:	d0c0      	beq.n	80058da <__strftime+0x516>
 8005958:	9904      	ldr	r1, [sp, #16]
 800595a:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8005b88 <__strftime+0x7c4>
 800595e:	4561      	cmp	r1, ip
 8005960:	bfae      	itee	ge
 8005962:	2100      	movge	r1, #0
 8005964:	2101      	movlt	r1, #1
 8005966:	f04f 33ff 	movlt.w	r3, #4294967295
 800596a:	9105      	str	r1, [sp, #20]
 800596c:	e7b5      	b.n	80058da <__strftime+0x516>
 800596e:	2b64      	cmp	r3, #100	; 0x64
 8005970:	bf04      	itt	eq
 8005972:	3201      	addeq	r2, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	e7b5      	b.n	80058e4 <__strftime+0x520>
 8005978:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 800597c:	d110      	bne.n	80059a0 <__strftime+0x5dc>
 800597e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005982:	429a      	cmp	r2, r3
 8005984:	d90c      	bls.n	80059a0 <__strftime+0x5dc>
 8005986:	f88d a020 	strb.w	sl, [sp, #32]
 800598a:	f1b9 0f00 	cmp.w	r9, #0
 800598e:	d1b5      	bne.n	80058fc <__strftime+0x538>
 8005990:	2125      	movs	r1, #37	; 0x25
 8005992:	ab10      	add	r3, sp, #64	; 0x40
 8005994:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 8005998:	2130      	movs	r1, #48	; 0x30
 800599a:	1c98      	adds	r0, r3, #2
 800599c:	7059      	strb	r1, [r3, #1]
 800599e:	e7b7      	b.n	8005910 <__strftime+0x54c>
 80059a0:	ab08      	add	r3, sp, #32
 80059a2:	e7af      	b.n	8005904 <__strftime+0x540>
 80059a4:	487a      	ldr	r0, [pc, #488]	; (8005b90 <__strftime+0x7cc>)
 80059a6:	4a7b      	ldr	r2, [pc, #492]	; (8005b94 <__strftime+0x7d0>)
 80059a8:	68ab      	ldr	r3, [r5, #8]
 80059aa:	296b      	cmp	r1, #107	; 0x6b
 80059ac:	bf18      	it	ne
 80059ae:	4602      	movne	r2, r0
 80059b0:	e6c1      	b.n	8005736 <__strftime+0x372>
 80059b2:	68ab      	ldr	r3, [r5, #8]
 80059b4:	220c      	movs	r2, #12
 80059b6:	b15b      	cbz	r3, 80059d0 <__strftime+0x60c>
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <__strftime+0x600>
 80059bc:	fb93 f0f2 	sdiv	r0, r3, r2
 80059c0:	fb02 3310 	mls	r3, r2, r0, r3
 80059c4:	4873      	ldr	r0, [pc, #460]	; (8005b94 <__strftime+0x7d0>)
 80059c6:	4a72      	ldr	r2, [pc, #456]	; (8005b90 <__strftime+0x7cc>)
 80059c8:	2949      	cmp	r1, #73	; 0x49
 80059ca:	bf18      	it	ne
 80059cc:	4602      	movne	r2, r0
 80059ce:	e6b2      	b.n	8005736 <__strftime+0x372>
 80059d0:	4613      	mov	r3, r2
 80059d2:	e7f7      	b.n	80059c4 <__strftime+0x600>
 80059d4:	69eb      	ldr	r3, [r5, #28]
 80059d6:	4a70      	ldr	r2, [pc, #448]	; (8005b98 <__strftime+0x7d4>)
 80059d8:	3301      	adds	r3, #1
 80059da:	e6ac      	b.n	8005736 <__strftime+0x372>
 80059dc:	692b      	ldr	r3, [r5, #16]
 80059de:	3301      	adds	r3, #1
 80059e0:	e728      	b.n	8005834 <__strftime+0x470>
 80059e2:	686b      	ldr	r3, [r5, #4]
 80059e4:	e726      	b.n	8005834 <__strftime+0x470>
 80059e6:	45a3      	cmp	fp, r4
 80059e8:	f67f ad1f 	bls.w	800542a <__strftime+0x66>
 80059ec:	230a      	movs	r3, #10
 80059ee:	553b      	strb	r3, [r7, r4]
 80059f0:	3401      	adds	r4, #1
 80059f2:	e5ed      	b.n	80055d0 <__strftime+0x20c>
 80059f4:	68ab      	ldr	r3, [r5, #8]
 80059f6:	2b0b      	cmp	r3, #11
 80059f8:	bfcc      	ite	gt
 80059fa:	22a4      	movgt	r2, #164	; 0xa4
 80059fc:	22a0      	movle	r2, #160	; 0xa0
 80059fe:	4b67      	ldr	r3, [pc, #412]	; (8005b9c <__strftime+0x7d8>)
 8005a00:	4413      	add	r3, r2
 8005a02:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005a06:	4648      	mov	r0, r9
 8005a08:	f7fa fba2 	bl	8000150 <strlen>
 8005a0c:	eba9 0304 	sub.w	r3, r9, r4
 8005a10:	eb04 0a00 	add.w	sl, r4, r0
 8005a14:	45a2      	cmp	sl, r4
 8005a16:	d101      	bne.n	8005a1c <__strftime+0x658>
 8005a18:	4654      	mov	r4, sl
 8005a1a:	e5d9      	b.n	80055d0 <__strftime+0x20c>
 8005a1c:	45a3      	cmp	fp, r4
 8005a1e:	f67f ad04 	bls.w	800542a <__strftime+0x66>
 8005a22:	f898 2000 	ldrb.w	r2, [r8]
 8005a26:	f813 9004 	ldrb.w	r9, [r3, r4]
 8005a2a:	2a50      	cmp	r2, #80	; 0x50
 8005a2c:	d10d      	bne.n	8005a4a <__strftime+0x686>
 8005a2e:	9304      	str	r3, [sp, #16]
 8005a30:	f000 fc90 	bl	8006354 <__locale_ctype_ptr>
 8005a34:	4448      	add	r0, r9
 8005a36:	7842      	ldrb	r2, [r0, #1]
 8005a38:	9b04      	ldr	r3, [sp, #16]
 8005a3a:	f002 0203 	and.w	r2, r2, #3
 8005a3e:	2a01      	cmp	r2, #1
 8005a40:	bf08      	it	eq
 8005a42:	f109 0920 	addeq.w	r9, r9, #32
 8005a46:	fa5f f989 	uxtb.w	r9, r9
 8005a4a:	f807 9004 	strb.w	r9, [r7, r4]
 8005a4e:	3401      	adds	r4, #1
 8005a50:	e7e0      	b.n	8005a14 <__strftime+0x650>
 8005a52:	686b      	ldr	r3, [r5, #4]
 8005a54:	4a52      	ldr	r2, [pc, #328]	; (8005ba0 <__strftime+0x7dc>)
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	68ab      	ldr	r3, [r5, #8]
 8005a5a:	1b31      	subs	r1, r6, r4
 8005a5c:	1938      	adds	r0, r7, r4
 8005a5e:	f000 ff75 	bl	800694c <sniprintf>
 8005a62:	e66c      	b.n	800573e <__strftime+0x37a>
 8005a64:	6a2b      	ldr	r3, [r5, #32]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	db7c      	blt.n	8005b64 <__strftime+0x7a0>
 8005a6a:	f000 fa87 	bl	8005f7c <__tz_lock>
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	b90b      	cbnz	r3, 8005a76 <__strftime+0x6b2>
 8005a72:	f000 fa85 	bl	8005f80 <_tzset_unlocked>
 8005a76:	f000 fc61 	bl	800633c <__gettzinfo>
 8005a7a:	6a2b      	ldr	r3, [r5, #32]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bfcc      	ite	gt
 8005a80:	2350      	movgt	r3, #80	; 0x50
 8005a82:	2328      	movle	r3, #40	; 0x28
 8005a84:	58c3      	ldr	r3, [r0, r3]
 8005a86:	425b      	negs	r3, r3
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	f000 fa78 	bl	8005f7e <__tz_unlock>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9303      	str	r3, [sp, #12]
 8005a92:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8005a96:	193b      	adds	r3, r7, r4
 8005a98:	4662      	mov	r2, ip
 8005a9a:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005aa4:	f143 31ff 	adc.w	r1, r3, #4294967295
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f171 0e00 	sbcs.w	lr, r1, #0
 8005aae:	da03      	bge.n	8005ab8 <__strftime+0x6f4>
 8005ab0:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8005ab4:	f143 31ff 	adc.w	r1, r3, #4294967295
 8005ab8:	0883      	lsrs	r3, r0, #2
 8005aba:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8005abe:	4699      	mov	r9, r3
 8005ac0:	108b      	asrs	r3, r1, #2
 8005ac2:	2164      	movs	r1, #100	; 0x64
 8005ac4:	f10c 30ff 	add.w	r0, ip, #4294967295
 8005ac8:	fb90 f1f1 	sdiv	r1, r0, r1
 8005acc:	ebb9 0201 	subs.w	r2, r9, r1
 8005ad0:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8005ad4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ad8:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 8005adc:	fb90 f1f1 	sdiv	r1, r0, r1
 8005ae0:	eb12 0901 	adds.w	r9, r2, r1
 8005ae4:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8005ae8:	f240 116d 	movw	r1, #365	; 0x16d
 8005aec:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8005af0:	fb01 fc0c 	mul.w	ip, r1, ip
 8005af4:	eb19 020c 	adds.w	r2, r9, ip
 8005af8:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 8005afc:	f04f 0c18 	mov.w	ip, #24
 8005b00:	69e9      	ldr	r1, [r5, #28]
 8005b02:	eb12 0901 	adds.w	r9, r2, r1
 8005b06:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8005b0a:	fba9 230c 	umull	r2, r3, r9, ip
 8005b0e:	4619      	mov	r1, r3
 8005b10:	fb0c 130a 	mla	r3, ip, sl, r1
 8005b14:	4610      	mov	r0, r2
 8005b16:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68ab      	ldr	r3, [r5, #8]
 8005b1e:	18c0      	adds	r0, r0, r3
 8005b20:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8005b24:	fba0 230c 	umull	r2, r3, r0, ip
 8005b28:	4691      	mov	r9, r2
 8005b2a:	fb0c 3301 	mla	r3, ip, r1, r3
 8005b2e:	6869      	ldr	r1, [r5, #4]
 8005b30:	eb19 0201 	adds.w	r2, r9, r1
 8005b34:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8005b38:	fba2 010c 	umull	r0, r1, r2, ip
 8005b3c:	fb0c 1103 	mla	r1, ip, r3, r1
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <__strftime+0x7e0>)
 8005b44:	eb10 0903 	adds.w	r9, r0, r3
 8005b48:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 8005b4c:	9b04      	ldr	r3, [sp, #16]
 8005b4e:	ebb9 0003 	subs.w	r0, r9, r3
 8005b52:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 8005b56:	e9cd 0100 	strd	r0, r1, [sp]
 8005b5a:	1b31      	subs	r1, r6, r4
 8005b5c:	1938      	adds	r0, r7, r4
 8005b5e:	f000 fef5 	bl	800694c <sniprintf>
 8005b62:	e5ec      	b.n	800573e <__strftime+0x37a>
 8005b64:	2300      	movs	r3, #0
 8005b66:	9304      	str	r3, [sp, #16]
 8005b68:	e793      	b.n	8005a92 <__strftime+0x6ce>
 8005b6a:	682b      	ldr	r3, [r5, #0]
 8005b6c:	e662      	b.n	8005834 <__strftime+0x470>
 8005b6e:	45a3      	cmp	fp, r4
 8005b70:	f67f ac5b 	bls.w	800542a <__strftime+0x66>
 8005b74:	2309      	movs	r3, #9
 8005b76:	e73a      	b.n	80059ee <__strftime+0x62a>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <__strftime+0x7e4>)
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	686b      	ldr	r3, [r5, #4]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	68ab      	ldr	r3, [r5, #8]
 8005b84:	e5cc      	b.n	8005720 <__strftime+0x35c>
 8005b86:	bf00      	nop
 8005b88:	fffff894 	.word	0xfffff894
 8005b8c:	080076c4 	.word	0x080076c4
 8005b90:	080076b3 	.word	0x080076b3
 8005b94:	080076a5 	.word	0x080076a5
 8005b98:	080076c8 	.word	0x080076c8
 8005b9c:	080076f0 	.word	0x080076f0
 8005ba0:	080076d7 	.word	0x080076d7
 8005ba4:	080076cd 	.word	0x080076cd
 8005ba8:	080076d2 	.word	0x080076d2
 8005bac:	fffff895 	.word	0xfffff895
 8005bb0:	45a3      	cmp	fp, r4
 8005bb2:	f67f ac3a 	bls.w	800542a <__strftime+0x66>
 8005bb6:	69ab      	ldr	r3, [r5, #24]
 8005bb8:	193a      	adds	r2, r7, r4
 8005bba:	3401      	adds	r4, #1
 8005bbc:	b913      	cbnz	r3, 8005bc4 <__strftime+0x800>
 8005bbe:	2337      	movs	r3, #55	; 0x37
 8005bc0:	7013      	strb	r3, [r2, #0]
 8005bc2:	e505      	b.n	80055d0 <__strftime+0x20c>
 8005bc4:	3330      	adds	r3, #48	; 0x30
 8005bc6:	e7fb      	b.n	8005bc0 <__strftime+0x7fc>
 8005bc8:	69eb      	ldr	r3, [r5, #28]
 8005bca:	69aa      	ldr	r2, [r5, #24]
 8005bcc:	3307      	adds	r3, #7
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bd6:	e62d      	b.n	8005834 <__strftime+0x470>
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f7ff fb9b 	bl	8005314 <iso_year_adjust>
 8005bde:	69aa      	ldr	r2, [r5, #24]
 8005be0:	b132      	cbz	r2, 8005bf0 <__strftime+0x82c>
 8005be2:	3a01      	subs	r2, #1
 8005be4:	2800      	cmp	r0, #0
 8005be6:	dc27      	bgt.n	8005c38 <__strftime+0x874>
 8005be8:	69eb      	ldr	r3, [r5, #28]
 8005bea:	d103      	bne.n	8005bf4 <__strftime+0x830>
 8005bec:	330a      	adds	r3, #10
 8005bee:	e7ee      	b.n	8005bce <__strftime+0x80a>
 8005bf0:	2206      	movs	r2, #6
 8005bf2:	e7f7      	b.n	8005be4 <__strftime+0x820>
 8005bf4:	6968      	ldr	r0, [r5, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f240 726b 	movw	r2, #1899	; 0x76b
 8005bfe:	bfa8      	it	ge
 8005c00:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8005c04:	4410      	add	r0, r2
 8005c06:	0782      	lsls	r2, r0, #30
 8005c08:	d105      	bne.n	8005c16 <__strftime+0x852>
 8005c0a:	2264      	movs	r2, #100	; 0x64
 8005c0c:	fb90 f1f2 	sdiv	r1, r0, r2
 8005c10:	fb02 0111 	mls	r1, r2, r1, r0
 8005c14:	b971      	cbnz	r1, 8005c34 <__strftime+0x870>
 8005c16:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c1a:	fb90 f2f1 	sdiv	r2, r0, r1
 8005c1e:	fb01 0212 	mls	r2, r1, r2, r0
 8005c22:	fab2 f282 	clz	r2, r2
 8005c26:	0952      	lsrs	r2, r2, #5
 8005c28:	1a9a      	subs	r2, r3, r2
 8005c2a:	2a04      	cmp	r2, #4
 8005c2c:	bfcc      	ite	gt
 8005c2e:	2334      	movgt	r3, #52	; 0x34
 8005c30:	2335      	movle	r3, #53	; 0x35
 8005c32:	e5ff      	b.n	8005834 <__strftime+0x470>
 8005c34:	2201      	movs	r2, #1
 8005c36:	e7f7      	b.n	8005c28 <__strftime+0x864>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e5fb      	b.n	8005834 <__strftime+0x470>
 8005c3c:	45a3      	cmp	fp, r4
 8005c3e:	f67f abf4 	bls.w	800542a <__strftime+0x66>
 8005c42:	69ab      	ldr	r3, [r5, #24]
 8005c44:	3330      	adds	r3, #48	; 0x30
 8005c46:	e6d2      	b.n	80059ee <__strftime+0x62a>
 8005c48:	69ab      	ldr	r3, [r5, #24]
 8005c4a:	b13b      	cbz	r3, 8005c5c <__strftime+0x898>
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	69ea      	ldr	r2, [r5, #28]
 8005c50:	3207      	adds	r2, #7
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	2307      	movs	r3, #7
 8005c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c5a:	e5eb      	b.n	8005834 <__strftime+0x470>
 8005c5c:	2306      	movs	r3, #6
 8005c5e:	e7f6      	b.n	8005c4e <__strftime+0x88a>
 8005c60:	6968      	ldr	r0, [r5, #20]
 8005c62:	2800      	cmp	r0, #0
 8005c64:	db05      	blt.n	8005c72 <__strftime+0x8ae>
 8005c66:	2264      	movs	r2, #100	; 0x64
 8005c68:	fb90 f3f2 	sdiv	r3, r0, r2
 8005c6c:	fb02 0313 	mls	r3, r2, r3, r0
 8005c70:	e5e0      	b.n	8005834 <__strftime+0x470>
 8005c72:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005c76:	f000 fb07 	bl	8006288 <abs>
 8005c7a:	2364      	movs	r3, #100	; 0x64
 8005c7c:	fb90 f2f3 	sdiv	r2, r0, r3
 8005c80:	e7f4      	b.n	8005c6c <__strftime+0x8a8>
 8005c82:	696b      	ldr	r3, [r5, #20]
 8005c84:	4a52      	ldr	r2, [pc, #328]	; (8005dd0 <__strftime+0xa0c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	da18      	bge.n	8005cbc <__strftime+0x8f8>
 8005c8a:	212d      	movs	r1, #45	; 0x2d
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f88d 1020 	strb.w	r1, [sp, #32]
 8005c92:	f1b9 0f00 	cmp.w	r9, #0
 8005c96:	d001      	beq.n	8005c9c <__strftime+0x8d8>
 8005c98:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c9c:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 8005ca0:	2125      	movs	r1, #37	; 0x25
 8005ca2:	7011      	strb	r1, [r2, #0]
 8005ca4:	f1ba 0f00 	cmp.w	sl, #0
 8005ca8:	f040 8088 	bne.w	8005dbc <__strftime+0x9f8>
 8005cac:	1c50      	adds	r0, r2, #1
 8005cae:	4949      	ldr	r1, [pc, #292]	; (8005dd4 <__strftime+0xa10>)
 8005cb0:	9304      	str	r3, [sp, #16]
 8005cb2:	f000 feab 	bl	8006a0c <strcpy>
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	e62f      	b.n	800591c <__strftime+0x558>
 8005cbc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005cc0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8005cc4:	f040 8081 	bne.w	8005dca <__strftime+0xa06>
 8005cc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d979      	bls.n	8005dc4 <__strftime+0xa00>
 8005cd0:	f88d a020 	strb.w	sl, [sp, #32]
 8005cd4:	e7dd      	b.n	8005c92 <__strftime+0x8ce>
 8005cd6:	6a2b      	ldr	r3, [r5, #32]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f6ff ac79 	blt.w	80055d0 <__strftime+0x20c>
 8005cde:	f000 f94d 	bl	8005f7c <__tz_lock>
 8005ce2:	9b03      	ldr	r3, [sp, #12]
 8005ce4:	b90b      	cbnz	r3, 8005cea <__strftime+0x926>
 8005ce6:	f000 f94b 	bl	8005f80 <_tzset_unlocked>
 8005cea:	f000 fb27 	bl	800633c <__gettzinfo>
 8005cee:	6a2b      	ldr	r3, [r5, #32]
 8005cf0:	eb07 0a04 	add.w	sl, r7, r4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bfcc      	ite	gt
 8005cf8:	2350      	movgt	r3, #80	; 0x50
 8005cfa:	2328      	movle	r3, #40	; 0x28
 8005cfc:	58c3      	ldr	r3, [r0, r3]
 8005cfe:	f1c3 0900 	rsb	r9, r3, #0
 8005d02:	f000 f93c 	bl	8005f7e <__tz_unlock>
 8005d06:	233c      	movs	r3, #60	; 0x3c
 8005d08:	1b31      	subs	r1, r6, r4
 8005d0a:	fb99 f0f3 	sdiv	r0, r9, r3
 8005d0e:	9104      	str	r1, [sp, #16]
 8005d10:	9303      	str	r3, [sp, #12]
 8005d12:	f000 fb17 	bl	8006344 <labs>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	9904      	ldr	r1, [sp, #16]
 8005d1a:	fb90 f2f3 	sdiv	r2, r0, r3
 8005d1e:	fb02 0013 	mls	r0, r2, r3, r0
 8005d22:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005d26:	9000      	str	r0, [sp, #0]
 8005d28:	fb99 f3f3 	sdiv	r3, r9, r3
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <__strftime+0xa14>)
 8005d2e:	4650      	mov	r0, sl
 8005d30:	f000 fe0c 	bl	800694c <sniprintf>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f6ff ab78 	blt.w	800542a <__strftime+0x66>
 8005d3a:	4404      	add	r4, r0
 8005d3c:	42a6      	cmp	r6, r4
 8005d3e:	f67f ab74 	bls.w	800542a <__strftime+0x66>
 8005d42:	2301      	movs	r3, #1
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	e443      	b.n	80055d0 <__strftime+0x20c>
 8005d48:	6a2b      	ldr	r3, [r5, #32]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f6ff ac40 	blt.w	80055d0 <__strftime+0x20c>
 8005d50:	f000 f914 	bl	8005f7c <__tz_lock>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	b90b      	cbnz	r3, 8005d5c <__strftime+0x998>
 8005d58:	f000 f912 	bl	8005f80 <_tzset_unlocked>
 8005d5c:	6a2b      	ldr	r3, [r5, #32]
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <__strftime+0xa18>)
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bfd4      	ite	le
 8005d64:	2300      	movle	r3, #0
 8005d66:	2301      	movgt	r3, #1
 8005d68:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005d6c:	4648      	mov	r0, r9
 8005d6e:	f7fa f9ef 	bl	8000150 <strlen>
 8005d72:	eba9 0904 	sub.w	r9, r9, r4
 8005d76:	eb04 0a00 	add.w	sl, r4, r0
 8005d7a:	45a2      	cmp	sl, r4
 8005d7c:	d103      	bne.n	8005d86 <__strftime+0x9c2>
 8005d7e:	f000 f8fe 	bl	8005f7e <__tz_unlock>
 8005d82:	4654      	mov	r4, sl
 8005d84:	e7dd      	b.n	8005d42 <__strftime+0x97e>
 8005d86:	45a3      	cmp	fp, r4
 8005d88:	d904      	bls.n	8005d94 <__strftime+0x9d0>
 8005d8a:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005d8e:	553b      	strb	r3, [r7, r4]
 8005d90:	3401      	adds	r4, #1
 8005d92:	e7f2      	b.n	8005d7a <__strftime+0x9b6>
 8005d94:	f000 f8f3 	bl	8005f7e <__tz_unlock>
 8005d98:	f7ff bb47 	b.w	800542a <__strftime+0x66>
 8005d9c:	45a3      	cmp	fp, r4
 8005d9e:	f67f ab44 	bls.w	800542a <__strftime+0x66>
 8005da2:	2325      	movs	r3, #37	; 0x25
 8005da4:	e623      	b.n	80059ee <__strftime+0x62a>
 8005da6:	b10e      	cbz	r6, 8005dac <__strftime+0x9e8>
 8005da8:	2300      	movs	r3, #0
 8005daa:	553b      	strb	r3, [r7, r4]
 8005dac:	4620      	mov	r0, r4
 8005dae:	b011      	add	sp, #68	; 0x44
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db4:	2225      	movs	r2, #37	; 0x25
 8005db6:	f88d 2020 	strb.w	r2, [sp, #32]
 8005dba:	aa08      	add	r2, sp, #32
 8005dbc:	2130      	movs	r1, #48	; 0x30
 8005dbe:	1c90      	adds	r0, r2, #2
 8005dc0:	7051      	strb	r1, [r2, #1]
 8005dc2:	e774      	b.n	8005cae <__strftime+0x8ea>
 8005dc4:	f1b9 0f00 	cmp.w	r9, #0
 8005dc8:	d1f4      	bne.n	8005db4 <__strftime+0x9f0>
 8005dca:	aa08      	add	r2, sp, #32
 8005dcc:	e768      	b.n	8005ca0 <__strftime+0x8dc>
 8005dce:	bf00      	nop
 8005dd0:	fffff894 	.word	0xfffff894
 8005dd4:	080076c4 	.word	0x080076c4
 8005dd8:	080076e1 	.word	0x080076e1
 8005ddc:	20000074 	.word	0x20000074

08005de0 <strftime>:
 8005de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005de2:	4c06      	ldr	r4, [pc, #24]	; (8005dfc <strftime+0x1c>)
 8005de4:	4d06      	ldr	r5, [pc, #24]	; (8005e00 <strftime+0x20>)
 8005de6:	6824      	ldr	r4, [r4, #0]
 8005de8:	6a24      	ldr	r4, [r4, #32]
 8005dea:	2c00      	cmp	r4, #0
 8005dec:	bf08      	it	eq
 8005dee:	462c      	moveq	r4, r5
 8005df0:	9400      	str	r4, [sp, #0]
 8005df2:	f7ff fae7 	bl	80053c4 <__strftime>
 8005df6:	b003      	add	sp, #12
 8005df8:	bd30      	pop	{r4, r5, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000010 	.word	0x20000010
 8005e00:	200000d8 	.word	0x200000d8

08005e04 <_strtoul_l.isra.0>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4689      	mov	r9, r1
 8005e0c:	4692      	mov	sl, r2
 8005e0e:	461e      	mov	r6, r3
 8005e10:	460f      	mov	r7, r1
 8005e12:	463d      	mov	r5, r7
 8005e14:	9808      	ldr	r0, [sp, #32]
 8005e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e1a:	f000 fa97 	bl	800634c <__locale_ctype_ptr_l>
 8005e1e:	4420      	add	r0, r4
 8005e20:	7843      	ldrb	r3, [r0, #1]
 8005e22:	f013 0308 	ands.w	r3, r3, #8
 8005e26:	d130      	bne.n	8005e8a <_strtoul_l.isra.0+0x86>
 8005e28:	2c2d      	cmp	r4, #45	; 0x2d
 8005e2a:	d130      	bne.n	8005e8e <_strtoul_l.isra.0+0x8a>
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	787c      	ldrb	r4, [r7, #1]
 8005e30:	1cbd      	adds	r5, r7, #2
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	d05c      	beq.n	8005ef0 <_strtoul_l.isra.0+0xec>
 8005e36:	2e10      	cmp	r6, #16
 8005e38:	d109      	bne.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005e3a:	2c30      	cmp	r4, #48	; 0x30
 8005e3c:	d107      	bne.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005e3e:	782b      	ldrb	r3, [r5, #0]
 8005e40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e44:	2b58      	cmp	r3, #88	; 0x58
 8005e46:	d14e      	bne.n	8005ee6 <_strtoul_l.isra.0+0xe2>
 8005e48:	2610      	movs	r6, #16
 8005e4a:	786c      	ldrb	r4, [r5, #1]
 8005e4c:	3502      	adds	r5, #2
 8005e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e52:	fbb2 f2f6 	udiv	r2, r2, r6
 8005e56:	2300      	movs	r3, #0
 8005e58:	fb06 fc02 	mul.w	ip, r6, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	ea6f 0c0c 	mvn.w	ip, ip
 8005e62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005e66:	2f09      	cmp	r7, #9
 8005e68:	d817      	bhi.n	8005e9a <_strtoul_l.isra.0+0x96>
 8005e6a:	463c      	mov	r4, r7
 8005e6c:	42a6      	cmp	r6, r4
 8005e6e:	dd23      	ble.n	8005eb8 <_strtoul_l.isra.0+0xb4>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	db1e      	blt.n	8005eb2 <_strtoul_l.isra.0+0xae>
 8005e74:	4282      	cmp	r2, r0
 8005e76:	d31c      	bcc.n	8005eb2 <_strtoul_l.isra.0+0xae>
 8005e78:	d101      	bne.n	8005e7e <_strtoul_l.isra.0+0x7a>
 8005e7a:	45a4      	cmp	ip, r4
 8005e7c:	db19      	blt.n	8005eb2 <_strtoul_l.isra.0+0xae>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	fb00 4006 	mla	r0, r0, r6, r4
 8005e84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e88:	e7eb      	b.n	8005e62 <_strtoul_l.isra.0+0x5e>
 8005e8a:	462f      	mov	r7, r5
 8005e8c:	e7c1      	b.n	8005e12 <_strtoul_l.isra.0+0xe>
 8005e8e:	2c2b      	cmp	r4, #43	; 0x2b
 8005e90:	bf04      	itt	eq
 8005e92:	1cbd      	addeq	r5, r7, #2
 8005e94:	787c      	ldrbeq	r4, [r7, #1]
 8005e96:	4619      	mov	r1, r3
 8005e98:	e7cb      	b.n	8005e32 <_strtoul_l.isra.0+0x2e>
 8005e9a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005e9e:	2f19      	cmp	r7, #25
 8005ea0:	d801      	bhi.n	8005ea6 <_strtoul_l.isra.0+0xa2>
 8005ea2:	3c37      	subs	r4, #55	; 0x37
 8005ea4:	e7e2      	b.n	8005e6c <_strtoul_l.isra.0+0x68>
 8005ea6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005eaa:	2f19      	cmp	r7, #25
 8005eac:	d804      	bhi.n	8005eb8 <_strtoul_l.isra.0+0xb4>
 8005eae:	3c57      	subs	r4, #87	; 0x57
 8005eb0:	e7dc      	b.n	8005e6c <_strtoul_l.isra.0+0x68>
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb6:	e7e5      	b.n	8005e84 <_strtoul_l.isra.0+0x80>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da09      	bge.n	8005ed0 <_strtoul_l.isra.0+0xcc>
 8005ebc:	2322      	movs	r3, #34	; 0x22
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	f8c8 3000 	str.w	r3, [r8]
 8005ec6:	f1ba 0f00 	cmp.w	sl, #0
 8005eca:	d107      	bne.n	8005edc <_strtoul_l.isra.0+0xd8>
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	b101      	cbz	r1, 8005ed4 <_strtoul_l.isra.0+0xd0>
 8005ed2:	4240      	negs	r0, r0
 8005ed4:	f1ba 0f00 	cmp.w	sl, #0
 8005ed8:	d0f8      	beq.n	8005ecc <_strtoul_l.isra.0+0xc8>
 8005eda:	b10b      	cbz	r3, 8005ee0 <_strtoul_l.isra.0+0xdc>
 8005edc:	f105 39ff 	add.w	r9, r5, #4294967295
 8005ee0:	f8ca 9000 	str.w	r9, [sl]
 8005ee4:	e7f2      	b.n	8005ecc <_strtoul_l.isra.0+0xc8>
 8005ee6:	2430      	movs	r4, #48	; 0x30
 8005ee8:	2e00      	cmp	r6, #0
 8005eea:	d1b0      	bne.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005eec:	2608      	movs	r6, #8
 8005eee:	e7ae      	b.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005ef0:	2c30      	cmp	r4, #48	; 0x30
 8005ef2:	d0a4      	beq.n	8005e3e <_strtoul_l.isra.0+0x3a>
 8005ef4:	260a      	movs	r6, #10
 8005ef6:	e7aa      	b.n	8005e4e <_strtoul_l.isra.0+0x4a>

08005ef8 <_strtoul_r>:
 8005ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005efa:	4c06      	ldr	r4, [pc, #24]	; (8005f14 <_strtoul_r+0x1c>)
 8005efc:	4d06      	ldr	r5, [pc, #24]	; (8005f18 <_strtoul_r+0x20>)
 8005efe:	6824      	ldr	r4, [r4, #0]
 8005f00:	6a24      	ldr	r4, [r4, #32]
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	bf08      	it	eq
 8005f06:	462c      	moveq	r4, r5
 8005f08:	9400      	str	r4, [sp, #0]
 8005f0a:	f7ff ff7b 	bl	8005e04 <_strtoul_l.isra.0>
 8005f0e:	b003      	add	sp, #12
 8005f10:	bd30      	pop	{r4, r5, pc}
 8005f12:	bf00      	nop
 8005f14:	20000010 	.word	0x20000010
 8005f18:	200000d8 	.word	0x200000d8

08005f1c <strtoul>:
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <strtoul+0x24>)
 8005f1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f20:	681c      	ldr	r4, [r3, #0]
 8005f22:	4d08      	ldr	r5, [pc, #32]	; (8005f44 <strtoul+0x28>)
 8005f24:	6a23      	ldr	r3, [r4, #32]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bf08      	it	eq
 8005f2a:	462b      	moveq	r3, r5
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	460a      	mov	r2, r1
 8005f32:	4601      	mov	r1, r0
 8005f34:	4620      	mov	r0, r4
 8005f36:	f7ff ff65 	bl	8005e04 <_strtoul_l.isra.0>
 8005f3a:	b003      	add	sp, #12
 8005f3c:	bd30      	pop	{r4, r5, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000010 	.word	0x20000010
 8005f44:	200000d8 	.word	0x200000d8

08005f48 <time>:
 8005f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <time+0x30>)
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4669      	mov	r1, sp
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	f000 f9e0 	bl	8006318 <_gettimeofday_r>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	da05      	bge.n	8005f68 <time+0x20>
 8005f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295
 8005f64:	e9cd 2300 	strd	r2, r3, [sp]
 8005f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f6c:	b10c      	cbz	r4, 8005f72 <time+0x2a>
 8005f6e:	e9c4 0100 	strd	r0, r1, [r4]
 8005f72:	b004      	add	sp, #16
 8005f74:	bd10      	pop	{r4, pc}
 8005f76:	bf00      	nop
 8005f78:	20000010 	.word	0x20000010

08005f7c <__tz_lock>:
 8005f7c:	4770      	bx	lr

08005f7e <__tz_unlock>:
 8005f7e:	4770      	bx	lr

08005f80 <_tzset_unlocked>:
 8005f80:	4b01      	ldr	r3, [pc, #4]	; (8005f88 <_tzset_unlocked+0x8>)
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	f000 b802 	b.w	8005f8c <_tzset_unlocked_r>
 8005f88:	20000010 	.word	0x20000010

08005f8c <_tzset_unlocked_r>:
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	b08d      	sub	sp, #52	; 0x34
 8005f92:	4607      	mov	r7, r0
 8005f94:	f000 f9d2 	bl	800633c <__gettzinfo>
 8005f98:	49af      	ldr	r1, [pc, #700]	; (8006258 <_tzset_unlocked_r+0x2cc>)
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f000 f9b3 	bl	8006308 <_getenv_r>
 8005fa2:	4eae      	ldr	r6, [pc, #696]	; (800625c <_tzset_unlocked_r+0x2d0>)
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	b970      	cbnz	r0, 8005fc6 <_tzset_unlocked_r+0x3a>
 8005fa8:	4bad      	ldr	r3, [pc, #692]	; (8006260 <_tzset_unlocked_r+0x2d4>)
 8005faa:	4aae      	ldr	r2, [pc, #696]	; (8006264 <_tzset_unlocked_r+0x2d8>)
 8005fac:	6018      	str	r0, [r3, #0]
 8005fae:	4bae      	ldr	r3, [pc, #696]	; (8006268 <_tzset_unlocked_r+0x2dc>)
 8005fb0:	6018      	str	r0, [r3, #0]
 8005fb2:	4bae      	ldr	r3, [pc, #696]	; (800626c <_tzset_unlocked_r+0x2e0>)
 8005fb4:	6830      	ldr	r0, [r6, #0]
 8005fb6:	e9c3 2200 	strd	r2, r2, [r3]
 8005fba:	f7ff f8e5 	bl	8005188 <free>
 8005fbe:	6034      	str	r4, [r6, #0]
 8005fc0:	b00d      	add	sp, #52	; 0x34
 8005fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc6:	6831      	ldr	r1, [r6, #0]
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	d15f      	bne.n	800608c <_tzset_unlocked_r+0x100>
 8005fcc:	6830      	ldr	r0, [r6, #0]
 8005fce:	f7ff f8db 	bl	8005188 <free>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7fa f8bc 	bl	8000150 <strlen>
 8005fd8:	1c41      	adds	r1, r0, #1
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f7ff f930 	bl	8005240 <_malloc_r>
 8005fe0:	6030      	str	r0, [r6, #0]
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d157      	bne.n	8006096 <_tzset_unlocked_r+0x10a>
 8005fe6:	7823      	ldrb	r3, [r4, #0]
 8005fe8:	ae0a      	add	r6, sp, #40	; 0x28
 8005fea:	2b3a      	cmp	r3, #58	; 0x3a
 8005fec:	bf08      	it	eq
 8005fee:	3401      	addeq	r4, #1
 8005ff0:	4633      	mov	r3, r6
 8005ff2:	4a9f      	ldr	r2, [pc, #636]	; (8006270 <_tzset_unlocked_r+0x2e4>)
 8005ff4:	499f      	ldr	r1, [pc, #636]	; (8006274 <_tzset_unlocked_r+0x2e8>)
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 fcdc 	bl	80069b4 <siscanf>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	dddf      	ble.n	8005fc0 <_tzset_unlocked_r+0x34>
 8006000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006002:	18e7      	adds	r7, r4, r3
 8006004:	5ce3      	ldrb	r3, [r4, r3]
 8006006:	2b2d      	cmp	r3, #45	; 0x2d
 8006008:	d149      	bne.n	800609e <_tzset_unlocked_r+0x112>
 800600a:	f04f 34ff 	mov.w	r4, #4294967295
 800600e:	3701      	adds	r7, #1
 8006010:	f04f 0800 	mov.w	r8, #0
 8006014:	f10d 0a20 	add.w	sl, sp, #32
 8006018:	f10d 0b1e 	add.w	fp, sp, #30
 800601c:	9603      	str	r6, [sp, #12]
 800601e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8006022:	f8cd b000 	str.w	fp, [sp]
 8006026:	4633      	mov	r3, r6
 8006028:	aa07      	add	r2, sp, #28
 800602a:	4993      	ldr	r1, [pc, #588]	; (8006278 <_tzset_unlocked_r+0x2ec>)
 800602c:	4638      	mov	r0, r7
 800602e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8006032:	f8ad 8020 	strh.w	r8, [sp, #32]
 8006036:	f000 fcbd 	bl	80069b4 <siscanf>
 800603a:	4540      	cmp	r0, r8
 800603c:	ddc0      	ble.n	8005fc0 <_tzset_unlocked_r+0x34>
 800603e:	213c      	movs	r1, #60	; 0x3c
 8006040:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006044:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006048:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8006284 <_tzset_unlocked_r+0x2f8>
 800604c:	fb01 2203 	mla	r2, r1, r3, r2
 8006050:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006054:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006058:	fb01 2303 	mla	r3, r1, r3, r2
 800605c:	435c      	muls	r4, r3
 800605e:	4b84      	ldr	r3, [pc, #528]	; (8006270 <_tzset_unlocked_r+0x2e4>)
 8006060:	62ac      	str	r4, [r5, #40]	; 0x28
 8006062:	4c82      	ldr	r4, [pc, #520]	; (800626c <_tzset_unlocked_r+0x2e0>)
 8006064:	464a      	mov	r2, r9
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606a:	4982      	ldr	r1, [pc, #520]	; (8006274 <_tzset_unlocked_r+0x2e8>)
 800606c:	441f      	add	r7, r3
 800606e:	4638      	mov	r0, r7
 8006070:	4633      	mov	r3, r6
 8006072:	f000 fc9f 	bl	80069b4 <siscanf>
 8006076:	4540      	cmp	r0, r8
 8006078:	dc16      	bgt.n	80060a8 <_tzset_unlocked_r+0x11c>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	4b77      	ldr	r3, [pc, #476]	; (8006260 <_tzset_unlocked_r+0x2d4>)
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	4b78      	ldr	r3, [pc, #480]	; (8006268 <_tzset_unlocked_r+0x2dc>)
 8006086:	f8c3 8000 	str.w	r8, [r3]
 800608a:	e799      	b.n	8005fc0 <_tzset_unlocked_r+0x34>
 800608c:	f7fa f868 	bl	8000160 <strcmp>
 8006090:	2800      	cmp	r0, #0
 8006092:	d095      	beq.n	8005fc0 <_tzset_unlocked_r+0x34>
 8006094:	e79a      	b.n	8005fcc <_tzset_unlocked_r+0x40>
 8006096:	4621      	mov	r1, r4
 8006098:	f000 fcb8 	bl	8006a0c <strcpy>
 800609c:	e7a3      	b.n	8005fe6 <_tzset_unlocked_r+0x5a>
 800609e:	2b2b      	cmp	r3, #43	; 0x2b
 80060a0:	bf08      	it	eq
 80060a2:	3701      	addeq	r7, #1
 80060a4:	2401      	movs	r4, #1
 80060a6:	e7b3      	b.n	8006010 <_tzset_unlocked_r+0x84>
 80060a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060aa:	f8c4 9004 	str.w	r9, [r4, #4]
 80060ae:	18fc      	adds	r4, r7, r3
 80060b0:	5cfb      	ldrb	r3, [r7, r3]
 80060b2:	2b2d      	cmp	r3, #45	; 0x2d
 80060b4:	f040 808c 	bne.w	80061d0 <_tzset_unlocked_r+0x244>
 80060b8:	f04f 37ff 	mov.w	r7, #4294967295
 80060bc:	3401      	adds	r4, #1
 80060be:	2300      	movs	r3, #0
 80060c0:	e9cd a602 	strd	sl, r6, [sp, #8]
 80060c4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80060c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80060cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80060d0:	930a      	str	r3, [sp, #40]	; 0x28
 80060d2:	e9cd b600 	strd	fp, r6, [sp]
 80060d6:	4633      	mov	r3, r6
 80060d8:	aa07      	add	r2, sp, #28
 80060da:	4967      	ldr	r1, [pc, #412]	; (8006278 <_tzset_unlocked_r+0x2ec>)
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 fc69 	bl	80069b4 <siscanf>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	dc79      	bgt.n	80061da <_tzset_unlocked_r+0x24e>
 80060e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80060e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80060ec:	652b      	str	r3, [r5, #80]	; 0x50
 80060ee:	462f      	mov	r7, r5
 80060f0:	f04f 0900 	mov.w	r9, #0
 80060f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f6:	441c      	add	r4, r3
 80060f8:	7823      	ldrb	r3, [r4, #0]
 80060fa:	2b2c      	cmp	r3, #44	; 0x2c
 80060fc:	bf08      	it	eq
 80060fe:	3401      	addeq	r4, #1
 8006100:	f894 8000 	ldrb.w	r8, [r4]
 8006104:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8006108:	d17a      	bne.n	8006200 <_tzset_unlocked_r+0x274>
 800610a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800610e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006112:	ab09      	add	r3, sp, #36	; 0x24
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	9603      	str	r6, [sp, #12]
 8006118:	4633      	mov	r3, r6
 800611a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800611e:	4957      	ldr	r1, [pc, #348]	; (800627c <_tzset_unlocked_r+0x2f0>)
 8006120:	4620      	mov	r0, r4
 8006122:	f000 fc47 	bl	80069b4 <siscanf>
 8006126:	2803      	cmp	r0, #3
 8006128:	f47f af4a 	bne.w	8005fc0 <_tzset_unlocked_r+0x34>
 800612c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8006130:	1e4b      	subs	r3, r1, #1
 8006132:	2b0b      	cmp	r3, #11
 8006134:	f63f af44 	bhi.w	8005fc0 <_tzset_unlocked_r+0x34>
 8006138:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800613c:	1e53      	subs	r3, r2, #1
 800613e:	2b04      	cmp	r3, #4
 8006140:	f63f af3e 	bhi.w	8005fc0 <_tzset_unlocked_r+0x34>
 8006144:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006148:	2b06      	cmp	r3, #6
 800614a:	f63f af39 	bhi.w	8005fc0 <_tzset_unlocked_r+0x34>
 800614e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8006152:	f887 8008 	strb.w	r8, [r7, #8]
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615a:	eb04 0803 	add.w	r8, r4, r3
 800615e:	2302      	movs	r3, #2
 8006160:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006164:	2300      	movs	r3, #0
 8006166:	f8ad 301e 	strh.w	r3, [sp, #30]
 800616a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800616e:	930a      	str	r3, [sp, #40]	; 0x28
 8006170:	f898 3000 	ldrb.w	r3, [r8]
 8006174:	2b2f      	cmp	r3, #47	; 0x2f
 8006176:	d109      	bne.n	800618c <_tzset_unlocked_r+0x200>
 8006178:	e9cd a602 	strd	sl, r6, [sp, #8]
 800617c:	e9cd b600 	strd	fp, r6, [sp]
 8006180:	4633      	mov	r3, r6
 8006182:	aa07      	add	r2, sp, #28
 8006184:	493e      	ldr	r1, [pc, #248]	; (8006280 <_tzset_unlocked_r+0x2f4>)
 8006186:	4640      	mov	r0, r8
 8006188:	f000 fc14 	bl	80069b4 <siscanf>
 800618c:	213c      	movs	r1, #60	; 0x3c
 800618e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006192:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006196:	3728      	adds	r7, #40	; 0x28
 8006198:	fb01 2203 	mla	r2, r1, r3, r2
 800619c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80061a0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80061a4:	fb01 2303 	mla	r3, r1, r3, r2
 80061a8:	f847 3c10 	str.w	r3, [r7, #-16]
 80061ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061ae:	4444      	add	r4, r8
 80061b0:	f1b9 0f00 	cmp.w	r9, #0
 80061b4:	d021      	beq.n	80061fa <_tzset_unlocked_r+0x26e>
 80061b6:	6868      	ldr	r0, [r5, #4]
 80061b8:	f000 fc42 	bl	8006a40 <__tzcalc_limits>
 80061bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <_tzset_unlocked_r+0x2d4>)
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	bf18      	it	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	4a27      	ldr	r2, [pc, #156]	; (8006268 <_tzset_unlocked_r+0x2dc>)
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e6f7      	b.n	8005fc0 <_tzset_unlocked_r+0x34>
 80061d0:	2b2b      	cmp	r3, #43	; 0x2b
 80061d2:	bf08      	it	eq
 80061d4:	3401      	addeq	r4, #1
 80061d6:	2701      	movs	r7, #1
 80061d8:	e771      	b.n	80060be <_tzset_unlocked_r+0x132>
 80061da:	213c      	movs	r1, #60	; 0x3c
 80061dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80061e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80061e4:	fb01 2203 	mla	r2, r1, r3, r2
 80061e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80061ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80061f0:	fb01 2303 	mla	r3, r1, r3, r2
 80061f4:	435f      	muls	r7, r3
 80061f6:	652f      	str	r7, [r5, #80]	; 0x50
 80061f8:	e779      	b.n	80060ee <_tzset_unlocked_r+0x162>
 80061fa:	f04f 0901 	mov.w	r9, #1
 80061fe:	e77b      	b.n	80060f8 <_tzset_unlocked_r+0x16c>
 8006200:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8006204:	bf0a      	itet	eq
 8006206:	4643      	moveq	r3, r8
 8006208:	2344      	movne	r3, #68	; 0x44
 800620a:	3401      	addeq	r4, #1
 800620c:	220a      	movs	r2, #10
 800620e:	a90b      	add	r1, sp, #44	; 0x2c
 8006210:	4620      	mov	r0, r4
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	f7ff fe82 	bl	8005f1c <strtoul>
 8006218:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800621c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8006220:	45a0      	cmp	r8, r4
 8006222:	9b05      	ldr	r3, [sp, #20]
 8006224:	d114      	bne.n	8006250 <_tzset_unlocked_r+0x2c4>
 8006226:	234d      	movs	r3, #77	; 0x4d
 8006228:	f1b9 0f00 	cmp.w	r9, #0
 800622c:	d107      	bne.n	800623e <_tzset_unlocked_r+0x2b2>
 800622e:	722b      	strb	r3, [r5, #8]
 8006230:	2103      	movs	r1, #3
 8006232:	2302      	movs	r3, #2
 8006234:	f8c5 9014 	str.w	r9, [r5, #20]
 8006238:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800623c:	e78f      	b.n	800615e <_tzset_unlocked_r+0x1d2>
 800623e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8006242:	220b      	movs	r2, #11
 8006244:	2301      	movs	r3, #1
 8006246:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800624a:	2300      	movs	r3, #0
 800624c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800624e:	e786      	b.n	800615e <_tzset_unlocked_r+0x1d2>
 8006250:	b280      	uxth	r0, r0
 8006252:	723b      	strb	r3, [r7, #8]
 8006254:	6178      	str	r0, [r7, #20]
 8006256:	e782      	b.n	800615e <_tzset_unlocked_r+0x1d2>
 8006258:	08007917 	.word	0x08007917
 800625c:	2000028c 	.word	0x2000028c
 8006260:	20000294 	.word	0x20000294
 8006264:	0800791a 	.word	0x0800791a
 8006268:	20000290 	.word	0x20000290
 800626c:	20000074 	.word	0x20000074
 8006270:	2000027f 	.word	0x2000027f
 8006274:	0800791e 	.word	0x0800791e
 8006278:	08007941 	.word	0x08007941
 800627c:	0800792d 	.word	0x0800792d
 8006280:	08007940 	.word	0x08007940
 8006284:	20000274 	.word	0x20000274

08006288 <abs>:
 8006288:	2800      	cmp	r0, #0
 800628a:	bfb8      	it	lt
 800628c:	4240      	neglt	r0, r0
 800628e:	4770      	bx	lr

08006290 <_findenv_r>:
 8006290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	4607      	mov	r7, r0
 8006296:	468b      	mov	fp, r1
 8006298:	4690      	mov	r8, r2
 800629a:	f000 fc86 	bl	8006baa <__env_lock>
 800629e:	4b19      	ldr	r3, [pc, #100]	; (8006304 <_findenv_r+0x74>)
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	469a      	mov	sl, r3
 80062a4:	b13d      	cbz	r5, 80062b6 <_findenv_r+0x26>
 80062a6:	465c      	mov	r4, fp
 80062a8:	4623      	mov	r3, r4
 80062aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ae:	b32a      	cbz	r2, 80062fc <_findenv_r+0x6c>
 80062b0:	2a3d      	cmp	r2, #61	; 0x3d
 80062b2:	461c      	mov	r4, r3
 80062b4:	d1f8      	bne.n	80062a8 <_findenv_r+0x18>
 80062b6:	4638      	mov	r0, r7
 80062b8:	f000 fc78 	bl	8006bac <__env_unlock>
 80062bc:	2000      	movs	r0, #0
 80062be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	464d      	mov	r5, r9
 80062c4:	46a9      	mov	r9, r5
 80062c6:	f859 0b04 	ldr.w	r0, [r9], #4
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d0f3      	beq.n	80062b6 <_findenv_r+0x26>
 80062ce:	4622      	mov	r2, r4
 80062d0:	4659      	mov	r1, fp
 80062d2:	f000 fba3 	bl	8006a1c <strncmp>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d1f3      	bne.n	80062c2 <_findenv_r+0x32>
 80062da:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80062de:	191e      	adds	r6, r3, r4
 80062e0:	5d1b      	ldrb	r3, [r3, r4]
 80062e2:	2b3d      	cmp	r3, #61	; 0x3d
 80062e4:	d1ed      	bne.n	80062c2 <_findenv_r+0x32>
 80062e6:	f8da 3000 	ldr.w	r3, [sl]
 80062ea:	4638      	mov	r0, r7
 80062ec:	1aed      	subs	r5, r5, r3
 80062ee:	10ad      	asrs	r5, r5, #2
 80062f0:	f8c8 5000 	str.w	r5, [r8]
 80062f4:	f000 fc5a 	bl	8006bac <__env_unlock>
 80062f8:	1c70      	adds	r0, r6, #1
 80062fa:	e7e0      	b.n	80062be <_findenv_r+0x2e>
 80062fc:	eba4 040b 	sub.w	r4, r4, fp
 8006300:	e7e0      	b.n	80062c4 <_findenv_r+0x34>
 8006302:	bf00      	nop
 8006304:	20000000 	.word	0x20000000

08006308 <_getenv_r>:
 8006308:	b507      	push	{r0, r1, r2, lr}
 800630a:	aa01      	add	r2, sp, #4
 800630c:	f7ff ffc0 	bl	8006290 <_findenv_r>
 8006310:	b003      	add	sp, #12
 8006312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006318 <_gettimeofday_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	2300      	movs	r3, #0
 800631c:	4c06      	ldr	r4, [pc, #24]	; (8006338 <_gettimeofday_r+0x20>)
 800631e:	4605      	mov	r5, r0
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	f001 f89b 	bl	8007460 <_gettimeofday>
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	d102      	bne.n	8006334 <_gettimeofday_r+0x1c>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	b103      	cbz	r3, 8006334 <_gettimeofday_r+0x1c>
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	bd38      	pop	{r3, r4, r5, pc}
 8006336:	bf00      	nop
 8006338:	20000368 	.word	0x20000368

0800633c <__gettzinfo>:
 800633c:	4800      	ldr	r0, [pc, #0]	; (8006340 <__gettzinfo+0x4>)
 800633e:	4770      	bx	lr
 8006340:	20000080 	.word	0x20000080

08006344 <labs>:
 8006344:	2800      	cmp	r0, #0
 8006346:	bfb8      	it	lt
 8006348:	4240      	neglt	r0, r0
 800634a:	4770      	bx	lr

0800634c <__locale_ctype_ptr_l>:
 800634c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006350:	4770      	bx	lr
	...

08006354 <__locale_ctype_ptr>:
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <__locale_ctype_ptr+0x14>)
 8006356:	4a05      	ldr	r2, [pc, #20]	; (800636c <__locale_ctype_ptr+0x18>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bf08      	it	eq
 8006360:	4613      	moveq	r3, r2
 8006362:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006366:	4770      	bx	lr
 8006368:	20000010 	.word	0x20000010
 800636c:	200000d8 	.word	0x200000d8

08006370 <__ascii_mbtowc>:
 8006370:	b082      	sub	sp, #8
 8006372:	b901      	cbnz	r1, 8006376 <__ascii_mbtowc+0x6>
 8006374:	a901      	add	r1, sp, #4
 8006376:	b142      	cbz	r2, 800638a <__ascii_mbtowc+0x1a>
 8006378:	b14b      	cbz	r3, 800638e <__ascii_mbtowc+0x1e>
 800637a:	7813      	ldrb	r3, [r2, #0]
 800637c:	600b      	str	r3, [r1, #0]
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	1c10      	adds	r0, r2, #0
 8006382:	bf18      	it	ne
 8006384:	2001      	movne	r0, #1
 8006386:	b002      	add	sp, #8
 8006388:	4770      	bx	lr
 800638a:	4610      	mov	r0, r2
 800638c:	e7fb      	b.n	8006386 <__ascii_mbtowc+0x16>
 800638e:	f06f 0001 	mvn.w	r0, #1
 8006392:	e7f8      	b.n	8006386 <__ascii_mbtowc+0x16>

08006394 <__malloc_lock>:
 8006394:	4770      	bx	lr

08006396 <__malloc_unlock>:
 8006396:	4770      	bx	lr

08006398 <__ssputs_r>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	688e      	ldr	r6, [r1, #8]
 800639e:	4682      	mov	sl, r0
 80063a0:	429e      	cmp	r6, r3
 80063a2:	460c      	mov	r4, r1
 80063a4:	4690      	mov	r8, r2
 80063a6:	4699      	mov	r9, r3
 80063a8:	d837      	bhi.n	800641a <__ssputs_r+0x82>
 80063aa:	898a      	ldrh	r2, [r1, #12]
 80063ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063b0:	d031      	beq.n	8006416 <__ssputs_r+0x7e>
 80063b2:	2302      	movs	r3, #2
 80063b4:	6825      	ldr	r5, [r4, #0]
 80063b6:	6909      	ldr	r1, [r1, #16]
 80063b8:	1a6f      	subs	r7, r5, r1
 80063ba:	6965      	ldr	r5, [r4, #20]
 80063bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80063c4:	f109 0301 	add.w	r3, r9, #1
 80063c8:	443b      	add	r3, r7
 80063ca:	429d      	cmp	r5, r3
 80063cc:	bf38      	it	cc
 80063ce:	461d      	movcc	r5, r3
 80063d0:	0553      	lsls	r3, r2, #21
 80063d2:	d530      	bpl.n	8006436 <__ssputs_r+0x9e>
 80063d4:	4629      	mov	r1, r5
 80063d6:	f7fe ff33 	bl	8005240 <_malloc_r>
 80063da:	4606      	mov	r6, r0
 80063dc:	b950      	cbnz	r0, 80063f4 <__ssputs_r+0x5c>
 80063de:	230c      	movs	r3, #12
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	f8ca 3000 	str.w	r3, [sl]
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f4:	463a      	mov	r2, r7
 80063f6:	6921      	ldr	r1, [r4, #16]
 80063f8:	f000 fbe7 	bl	8006bca <memcpy>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	6126      	str	r6, [r4, #16]
 800640a:	443e      	add	r6, r7
 800640c:	6026      	str	r6, [r4, #0]
 800640e:	464e      	mov	r6, r9
 8006410:	6165      	str	r5, [r4, #20]
 8006412:	1bed      	subs	r5, r5, r7
 8006414:	60a5      	str	r5, [r4, #8]
 8006416:	454e      	cmp	r6, r9
 8006418:	d900      	bls.n	800641c <__ssputs_r+0x84>
 800641a:	464e      	mov	r6, r9
 800641c:	4632      	mov	r2, r6
 800641e:	4641      	mov	r1, r8
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	f000 fbdd 	bl	8006be0 <memmove>
 8006426:	68a3      	ldr	r3, [r4, #8]
 8006428:	2000      	movs	r0, #0
 800642a:	1b9b      	subs	r3, r3, r6
 800642c:	60a3      	str	r3, [r4, #8]
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	441e      	add	r6, r3
 8006432:	6026      	str	r6, [r4, #0]
 8006434:	e7dc      	b.n	80063f0 <__ssputs_r+0x58>
 8006436:	462a      	mov	r2, r5
 8006438:	f000 fbeb 	bl	8006c12 <_realloc_r>
 800643c:	4606      	mov	r6, r0
 800643e:	2800      	cmp	r0, #0
 8006440:	d1e2      	bne.n	8006408 <__ssputs_r+0x70>
 8006442:	6921      	ldr	r1, [r4, #16]
 8006444:	4650      	mov	r0, sl
 8006446:	f7fe feaf 	bl	80051a8 <_free_r>
 800644a:	e7c8      	b.n	80063de <__ssputs_r+0x46>

0800644c <_svfiprintf_r>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	461d      	mov	r5, r3
 8006452:	898b      	ldrh	r3, [r1, #12]
 8006454:	b09d      	sub	sp, #116	; 0x74
 8006456:	061f      	lsls	r7, r3, #24
 8006458:	4680      	mov	r8, r0
 800645a:	460c      	mov	r4, r1
 800645c:	4616      	mov	r6, r2
 800645e:	d50f      	bpl.n	8006480 <_svfiprintf_r+0x34>
 8006460:	690b      	ldr	r3, [r1, #16]
 8006462:	b96b      	cbnz	r3, 8006480 <_svfiprintf_r+0x34>
 8006464:	2140      	movs	r1, #64	; 0x40
 8006466:	f7fe feeb 	bl	8005240 <_malloc_r>
 800646a:	6020      	str	r0, [r4, #0]
 800646c:	6120      	str	r0, [r4, #16]
 800646e:	b928      	cbnz	r0, 800647c <_svfiprintf_r+0x30>
 8006470:	230c      	movs	r3, #12
 8006472:	f8c8 3000 	str.w	r3, [r8]
 8006476:	f04f 30ff 	mov.w	r0, #4294967295
 800647a:	e0c8      	b.n	800660e <_svfiprintf_r+0x1c2>
 800647c:	2340      	movs	r3, #64	; 0x40
 800647e:	6163      	str	r3, [r4, #20]
 8006480:	2300      	movs	r3, #0
 8006482:	9309      	str	r3, [sp, #36]	; 0x24
 8006484:	2320      	movs	r3, #32
 8006486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800648a:	2330      	movs	r3, #48	; 0x30
 800648c:	f04f 0b01 	mov.w	fp, #1
 8006490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006494:	9503      	str	r5, [sp, #12]
 8006496:	4637      	mov	r7, r6
 8006498:	463d      	mov	r5, r7
 800649a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800649e:	b10b      	cbz	r3, 80064a4 <_svfiprintf_r+0x58>
 80064a0:	2b25      	cmp	r3, #37	; 0x25
 80064a2:	d13e      	bne.n	8006522 <_svfiprintf_r+0xd6>
 80064a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80064a8:	d00b      	beq.n	80064c2 <_svfiprintf_r+0x76>
 80064aa:	4653      	mov	r3, sl
 80064ac:	4632      	mov	r2, r6
 80064ae:	4621      	mov	r1, r4
 80064b0:	4640      	mov	r0, r8
 80064b2:	f7ff ff71 	bl	8006398 <__ssputs_r>
 80064b6:	3001      	adds	r0, #1
 80064b8:	f000 80a4 	beq.w	8006604 <_svfiprintf_r+0x1b8>
 80064bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064be:	4453      	add	r3, sl
 80064c0:	9309      	str	r3, [sp, #36]	; 0x24
 80064c2:	783b      	ldrb	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 809d 	beq.w	8006604 <_svfiprintf_r+0x1b8>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f04f 32ff 	mov.w	r2, #4294967295
 80064d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064dc:	931a      	str	r3, [sp, #104]	; 0x68
 80064de:	462f      	mov	r7, r5
 80064e0:	2205      	movs	r2, #5
 80064e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064e6:	4850      	ldr	r0, [pc, #320]	; (8006628 <_svfiprintf_r+0x1dc>)
 80064e8:	f000 fb61 	bl	8006bae <memchr>
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	b9d0      	cbnz	r0, 8006526 <_svfiprintf_r+0xda>
 80064f0:	06d9      	lsls	r1, r3, #27
 80064f2:	bf44      	itt	mi
 80064f4:	2220      	movmi	r2, #32
 80064f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064fa:	071a      	lsls	r2, r3, #28
 80064fc:	bf44      	itt	mi
 80064fe:	222b      	movmi	r2, #43	; 0x2b
 8006500:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006504:	782a      	ldrb	r2, [r5, #0]
 8006506:	2a2a      	cmp	r2, #42	; 0x2a
 8006508:	d015      	beq.n	8006536 <_svfiprintf_r+0xea>
 800650a:	462f      	mov	r7, r5
 800650c:	2000      	movs	r0, #0
 800650e:	250a      	movs	r5, #10
 8006510:	9a07      	ldr	r2, [sp, #28]
 8006512:	4639      	mov	r1, r7
 8006514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006518:	3b30      	subs	r3, #48	; 0x30
 800651a:	2b09      	cmp	r3, #9
 800651c:	d94d      	bls.n	80065ba <_svfiprintf_r+0x16e>
 800651e:	b1b8      	cbz	r0, 8006550 <_svfiprintf_r+0x104>
 8006520:	e00f      	b.n	8006542 <_svfiprintf_r+0xf6>
 8006522:	462f      	mov	r7, r5
 8006524:	e7b8      	b.n	8006498 <_svfiprintf_r+0x4c>
 8006526:	4a40      	ldr	r2, [pc, #256]	; (8006628 <_svfiprintf_r+0x1dc>)
 8006528:	463d      	mov	r5, r7
 800652a:	1a80      	subs	r0, r0, r2
 800652c:	fa0b f000 	lsl.w	r0, fp, r0
 8006530:	4318      	orrs	r0, r3
 8006532:	9004      	str	r0, [sp, #16]
 8006534:	e7d3      	b.n	80064de <_svfiprintf_r+0x92>
 8006536:	9a03      	ldr	r2, [sp, #12]
 8006538:	1d11      	adds	r1, r2, #4
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	9103      	str	r1, [sp, #12]
 800653e:	2a00      	cmp	r2, #0
 8006540:	db01      	blt.n	8006546 <_svfiprintf_r+0xfa>
 8006542:	9207      	str	r2, [sp, #28]
 8006544:	e004      	b.n	8006550 <_svfiprintf_r+0x104>
 8006546:	4252      	negs	r2, r2
 8006548:	f043 0302 	orr.w	r3, r3, #2
 800654c:	9207      	str	r2, [sp, #28]
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	783b      	ldrb	r3, [r7, #0]
 8006552:	2b2e      	cmp	r3, #46	; 0x2e
 8006554:	d10c      	bne.n	8006570 <_svfiprintf_r+0x124>
 8006556:	787b      	ldrb	r3, [r7, #1]
 8006558:	2b2a      	cmp	r3, #42	; 0x2a
 800655a:	d133      	bne.n	80065c4 <_svfiprintf_r+0x178>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	3702      	adds	r7, #2
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	9203      	str	r2, [sp, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfb8      	it	lt
 800656a:	f04f 33ff 	movlt.w	r3, #4294967295
 800656e:	9305      	str	r3, [sp, #20]
 8006570:	4d2e      	ldr	r5, [pc, #184]	; (800662c <_svfiprintf_r+0x1e0>)
 8006572:	2203      	movs	r2, #3
 8006574:	7839      	ldrb	r1, [r7, #0]
 8006576:	4628      	mov	r0, r5
 8006578:	f000 fb19 	bl	8006bae <memchr>
 800657c:	b138      	cbz	r0, 800658e <_svfiprintf_r+0x142>
 800657e:	2340      	movs	r3, #64	; 0x40
 8006580:	1b40      	subs	r0, r0, r5
 8006582:	fa03 f000 	lsl.w	r0, r3, r0
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	3701      	adds	r7, #1
 800658a:	4303      	orrs	r3, r0
 800658c:	9304      	str	r3, [sp, #16]
 800658e:	7839      	ldrb	r1, [r7, #0]
 8006590:	2206      	movs	r2, #6
 8006592:	4827      	ldr	r0, [pc, #156]	; (8006630 <_svfiprintf_r+0x1e4>)
 8006594:	1c7e      	adds	r6, r7, #1
 8006596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800659a:	f000 fb08 	bl	8006bae <memchr>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d038      	beq.n	8006614 <_svfiprintf_r+0x1c8>
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <_svfiprintf_r+0x1e8>)
 80065a4:	bb13      	cbnz	r3, 80065ec <_svfiprintf_r+0x1a0>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	3307      	adds	r3, #7
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	3308      	adds	r3, #8
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b4:	444b      	add	r3, r9
 80065b6:	9309      	str	r3, [sp, #36]	; 0x24
 80065b8:	e76d      	b.n	8006496 <_svfiprintf_r+0x4a>
 80065ba:	fb05 3202 	mla	r2, r5, r2, r3
 80065be:	2001      	movs	r0, #1
 80065c0:	460f      	mov	r7, r1
 80065c2:	e7a6      	b.n	8006512 <_svfiprintf_r+0xc6>
 80065c4:	2300      	movs	r3, #0
 80065c6:	250a      	movs	r5, #10
 80065c8:	4619      	mov	r1, r3
 80065ca:	3701      	adds	r7, #1
 80065cc:	9305      	str	r3, [sp, #20]
 80065ce:	4638      	mov	r0, r7
 80065d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065d4:	3a30      	subs	r2, #48	; 0x30
 80065d6:	2a09      	cmp	r2, #9
 80065d8:	d903      	bls.n	80065e2 <_svfiprintf_r+0x196>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0c8      	beq.n	8006570 <_svfiprintf_r+0x124>
 80065de:	9105      	str	r1, [sp, #20]
 80065e0:	e7c6      	b.n	8006570 <_svfiprintf_r+0x124>
 80065e2:	fb05 2101 	mla	r1, r5, r1, r2
 80065e6:	2301      	movs	r3, #1
 80065e8:	4607      	mov	r7, r0
 80065ea:	e7f0      	b.n	80065ce <_svfiprintf_r+0x182>
 80065ec:	ab03      	add	r3, sp, #12
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4622      	mov	r2, r4
 80065f2:	4b11      	ldr	r3, [pc, #68]	; (8006638 <_svfiprintf_r+0x1ec>)
 80065f4:	a904      	add	r1, sp, #16
 80065f6:	4640      	mov	r0, r8
 80065f8:	f3af 8000 	nop.w
 80065fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006600:	4681      	mov	r9, r0
 8006602:	d1d6      	bne.n	80065b2 <_svfiprintf_r+0x166>
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	065b      	lsls	r3, r3, #25
 8006608:	f53f af35 	bmi.w	8006476 <_svfiprintf_r+0x2a>
 800660c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800660e:	b01d      	add	sp, #116	; 0x74
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	ab03      	add	r3, sp, #12
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	4622      	mov	r2, r4
 800661a:	4b07      	ldr	r3, [pc, #28]	; (8006638 <_svfiprintf_r+0x1ec>)
 800661c:	a904      	add	r1, sp, #16
 800661e:	4640      	mov	r0, r8
 8006620:	f000 f882 	bl	8006728 <_printf_i>
 8006624:	e7ea      	b.n	80065fc <_svfiprintf_r+0x1b0>
 8006626:	bf00      	nop
 8006628:	0800795d 	.word	0x0800795d
 800662c:	08007963 	.word	0x08007963
 8006630:	08007967 	.word	0x08007967
 8006634:	00000000 	.word	0x00000000
 8006638:	08006399 	.word	0x08006399

0800663c <_printf_common>:
 800663c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006640:	4691      	mov	r9, r2
 8006642:	461f      	mov	r7, r3
 8006644:	688a      	ldr	r2, [r1, #8]
 8006646:	690b      	ldr	r3, [r1, #16]
 8006648:	4606      	mov	r6, r0
 800664a:	4293      	cmp	r3, r2
 800664c:	bfb8      	it	lt
 800664e:	4613      	movlt	r3, r2
 8006650:	f8c9 3000 	str.w	r3, [r9]
 8006654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006658:	460c      	mov	r4, r1
 800665a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800665e:	b112      	cbz	r2, 8006666 <_printf_common+0x2a>
 8006660:	3301      	adds	r3, #1
 8006662:	f8c9 3000 	str.w	r3, [r9]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	0699      	lsls	r1, r3, #26
 800666a:	bf42      	ittt	mi
 800666c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006670:	3302      	addmi	r3, #2
 8006672:	f8c9 3000 	strmi.w	r3, [r9]
 8006676:	6825      	ldr	r5, [r4, #0]
 8006678:	f015 0506 	ands.w	r5, r5, #6
 800667c:	d107      	bne.n	800668e <_printf_common+0x52>
 800667e:	f104 0a19 	add.w	sl, r4, #25
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	f8d9 2000 	ldr.w	r2, [r9]
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	42ab      	cmp	r3, r5
 800668c:	dc29      	bgt.n	80066e2 <_printf_common+0xa6>
 800668e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	3300      	adds	r3, #0
 8006696:	bf18      	it	ne
 8006698:	2301      	movne	r3, #1
 800669a:	0692      	lsls	r2, r2, #26
 800669c:	d42e      	bmi.n	80066fc <_printf_common+0xc0>
 800669e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a2:	4639      	mov	r1, r7
 80066a4:	4630      	mov	r0, r6
 80066a6:	47c0      	blx	r8
 80066a8:	3001      	adds	r0, #1
 80066aa:	d021      	beq.n	80066f0 <_printf_common+0xb4>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	68e5      	ldr	r5, [r4, #12]
 80066b0:	f003 0306 	and.w	r3, r3, #6
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	bf18      	it	ne
 80066b8:	2500      	movne	r5, #0
 80066ba:	f8d9 2000 	ldr.w	r2, [r9]
 80066be:	f04f 0900 	mov.w	r9, #0
 80066c2:	bf08      	it	eq
 80066c4:	1aad      	subeq	r5, r5, r2
 80066c6:	68a3      	ldr	r3, [r4, #8]
 80066c8:	6922      	ldr	r2, [r4, #16]
 80066ca:	bf08      	it	eq
 80066cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d0:	4293      	cmp	r3, r2
 80066d2:	bfc4      	itt	gt
 80066d4:	1a9b      	subgt	r3, r3, r2
 80066d6:	18ed      	addgt	r5, r5, r3
 80066d8:	341a      	adds	r4, #26
 80066da:	454d      	cmp	r5, r9
 80066dc:	d11a      	bne.n	8006714 <_printf_common+0xd8>
 80066de:	2000      	movs	r0, #0
 80066e0:	e008      	b.n	80066f4 <_printf_common+0xb8>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4639      	mov	r1, r7
 80066e8:	4630      	mov	r0, r6
 80066ea:	47c0      	blx	r8
 80066ec:	3001      	adds	r0, #1
 80066ee:	d103      	bne.n	80066f8 <_printf_common+0xbc>
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f8:	3501      	adds	r5, #1
 80066fa:	e7c2      	b.n	8006682 <_printf_common+0x46>
 80066fc:	2030      	movs	r0, #48	; 0x30
 80066fe:	18e1      	adds	r1, r4, r3
 8006700:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800670a:	4422      	add	r2, r4
 800670c:	3302      	adds	r3, #2
 800670e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006712:	e7c4      	b.n	800669e <_printf_common+0x62>
 8006714:	2301      	movs	r3, #1
 8006716:	4622      	mov	r2, r4
 8006718:	4639      	mov	r1, r7
 800671a:	4630      	mov	r0, r6
 800671c:	47c0      	blx	r8
 800671e:	3001      	adds	r0, #1
 8006720:	d0e6      	beq.n	80066f0 <_printf_common+0xb4>
 8006722:	f109 0901 	add.w	r9, r9, #1
 8006726:	e7d8      	b.n	80066da <_printf_common+0x9e>

08006728 <_printf_i>:
 8006728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800672c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006730:	460c      	mov	r4, r1
 8006732:	7e09      	ldrb	r1, [r1, #24]
 8006734:	b085      	sub	sp, #20
 8006736:	296e      	cmp	r1, #110	; 0x6e
 8006738:	4617      	mov	r7, r2
 800673a:	4606      	mov	r6, r0
 800673c:	4698      	mov	r8, r3
 800673e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006740:	f000 80b3 	beq.w	80068aa <_printf_i+0x182>
 8006744:	d822      	bhi.n	800678c <_printf_i+0x64>
 8006746:	2963      	cmp	r1, #99	; 0x63
 8006748:	d036      	beq.n	80067b8 <_printf_i+0x90>
 800674a:	d80a      	bhi.n	8006762 <_printf_i+0x3a>
 800674c:	2900      	cmp	r1, #0
 800674e:	f000 80b9 	beq.w	80068c4 <_printf_i+0x19c>
 8006752:	2958      	cmp	r1, #88	; 0x58
 8006754:	f000 8083 	beq.w	800685e <_printf_i+0x136>
 8006758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800675c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006760:	e032      	b.n	80067c8 <_printf_i+0xa0>
 8006762:	2964      	cmp	r1, #100	; 0x64
 8006764:	d001      	beq.n	800676a <_printf_i+0x42>
 8006766:	2969      	cmp	r1, #105	; 0x69
 8006768:	d1f6      	bne.n	8006758 <_printf_i+0x30>
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	0605      	lsls	r5, r0, #24
 8006770:	f103 0104 	add.w	r1, r3, #4
 8006774:	d52a      	bpl.n	80067cc <_printf_i+0xa4>
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6011      	str	r1, [r2, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	da03      	bge.n	8006786 <_printf_i+0x5e>
 800677e:	222d      	movs	r2, #45	; 0x2d
 8006780:	425b      	negs	r3, r3
 8006782:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006786:	486f      	ldr	r0, [pc, #444]	; (8006944 <_printf_i+0x21c>)
 8006788:	220a      	movs	r2, #10
 800678a:	e039      	b.n	8006800 <_printf_i+0xd8>
 800678c:	2973      	cmp	r1, #115	; 0x73
 800678e:	f000 809d 	beq.w	80068cc <_printf_i+0x1a4>
 8006792:	d808      	bhi.n	80067a6 <_printf_i+0x7e>
 8006794:	296f      	cmp	r1, #111	; 0x6f
 8006796:	d020      	beq.n	80067da <_printf_i+0xb2>
 8006798:	2970      	cmp	r1, #112	; 0x70
 800679a:	d1dd      	bne.n	8006758 <_printf_i+0x30>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	f043 0320 	orr.w	r3, r3, #32
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	e003      	b.n	80067ae <_printf_i+0x86>
 80067a6:	2975      	cmp	r1, #117	; 0x75
 80067a8:	d017      	beq.n	80067da <_printf_i+0xb2>
 80067aa:	2978      	cmp	r1, #120	; 0x78
 80067ac:	d1d4      	bne.n	8006758 <_printf_i+0x30>
 80067ae:	2378      	movs	r3, #120	; 0x78
 80067b0:	4865      	ldr	r0, [pc, #404]	; (8006948 <_printf_i+0x220>)
 80067b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067b6:	e055      	b.n	8006864 <_printf_i+0x13c>
 80067b8:	6813      	ldr	r3, [r2, #0]
 80067ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067be:	1d19      	adds	r1, r3, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6011      	str	r1, [r2, #0]
 80067c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067c8:	2301      	movs	r3, #1
 80067ca:	e08c      	b.n	80068e6 <_printf_i+0x1be>
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067d2:	6011      	str	r1, [r2, #0]
 80067d4:	bf18      	it	ne
 80067d6:	b21b      	sxthne	r3, r3
 80067d8:	e7cf      	b.n	800677a <_printf_i+0x52>
 80067da:	6813      	ldr	r3, [r2, #0]
 80067dc:	6825      	ldr	r5, [r4, #0]
 80067de:	1d18      	adds	r0, r3, #4
 80067e0:	6010      	str	r0, [r2, #0]
 80067e2:	0628      	lsls	r0, r5, #24
 80067e4:	d501      	bpl.n	80067ea <_printf_i+0xc2>
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	e002      	b.n	80067f0 <_printf_i+0xc8>
 80067ea:	0668      	lsls	r0, r5, #25
 80067ec:	d5fb      	bpl.n	80067e6 <_printf_i+0xbe>
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	296f      	cmp	r1, #111	; 0x6f
 80067f2:	bf14      	ite	ne
 80067f4:	220a      	movne	r2, #10
 80067f6:	2208      	moveq	r2, #8
 80067f8:	4852      	ldr	r0, [pc, #328]	; (8006944 <_printf_i+0x21c>)
 80067fa:	2100      	movs	r1, #0
 80067fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006800:	6865      	ldr	r5, [r4, #4]
 8006802:	2d00      	cmp	r5, #0
 8006804:	60a5      	str	r5, [r4, #8]
 8006806:	f2c0 8095 	blt.w	8006934 <_printf_i+0x20c>
 800680a:	6821      	ldr	r1, [r4, #0]
 800680c:	f021 0104 	bic.w	r1, r1, #4
 8006810:	6021      	str	r1, [r4, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d13d      	bne.n	8006892 <_printf_i+0x16a>
 8006816:	2d00      	cmp	r5, #0
 8006818:	f040 808e 	bne.w	8006938 <_printf_i+0x210>
 800681c:	4665      	mov	r5, ip
 800681e:	2a08      	cmp	r2, #8
 8006820:	d10b      	bne.n	800683a <_printf_i+0x112>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	07db      	lsls	r3, r3, #31
 8006826:	d508      	bpl.n	800683a <_printf_i+0x112>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	6862      	ldr	r2, [r4, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	bfde      	ittt	le
 8006830:	2330      	movle	r3, #48	; 0x30
 8006832:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006836:	f105 35ff 	addle.w	r5, r5, #4294967295
 800683a:	ebac 0305 	sub.w	r3, ip, r5
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	f8cd 8000 	str.w	r8, [sp]
 8006844:	463b      	mov	r3, r7
 8006846:	aa03      	add	r2, sp, #12
 8006848:	4621      	mov	r1, r4
 800684a:	4630      	mov	r0, r6
 800684c:	f7ff fef6 	bl	800663c <_printf_common>
 8006850:	3001      	adds	r0, #1
 8006852:	d14d      	bne.n	80068f0 <_printf_i+0x1c8>
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	b005      	add	sp, #20
 800685a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800685e:	4839      	ldr	r0, [pc, #228]	; (8006944 <_printf_i+0x21c>)
 8006860:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006864:	6813      	ldr	r3, [r2, #0]
 8006866:	6821      	ldr	r1, [r4, #0]
 8006868:	1d1d      	adds	r5, r3, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6015      	str	r5, [r2, #0]
 800686e:	060a      	lsls	r2, r1, #24
 8006870:	d50b      	bpl.n	800688a <_printf_i+0x162>
 8006872:	07ca      	lsls	r2, r1, #31
 8006874:	bf44      	itt	mi
 8006876:	f041 0120 	orrmi.w	r1, r1, #32
 800687a:	6021      	strmi	r1, [r4, #0]
 800687c:	b91b      	cbnz	r3, 8006886 <_printf_i+0x15e>
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	f022 0220 	bic.w	r2, r2, #32
 8006884:	6022      	str	r2, [r4, #0]
 8006886:	2210      	movs	r2, #16
 8006888:	e7b7      	b.n	80067fa <_printf_i+0xd2>
 800688a:	064d      	lsls	r5, r1, #25
 800688c:	bf48      	it	mi
 800688e:	b29b      	uxthmi	r3, r3
 8006890:	e7ef      	b.n	8006872 <_printf_i+0x14a>
 8006892:	4665      	mov	r5, ip
 8006894:	fbb3 f1f2 	udiv	r1, r3, r2
 8006898:	fb02 3311 	mls	r3, r2, r1, r3
 800689c:	5cc3      	ldrb	r3, [r0, r3]
 800689e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068a2:	460b      	mov	r3, r1
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d1f5      	bne.n	8006894 <_printf_i+0x16c>
 80068a8:	e7b9      	b.n	800681e <_printf_i+0xf6>
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	6825      	ldr	r5, [r4, #0]
 80068ae:	1d18      	adds	r0, r3, #4
 80068b0:	6961      	ldr	r1, [r4, #20]
 80068b2:	6010      	str	r0, [r2, #0]
 80068b4:	0628      	lsls	r0, r5, #24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	d501      	bpl.n	80068be <_printf_i+0x196>
 80068ba:	6019      	str	r1, [r3, #0]
 80068bc:	e002      	b.n	80068c4 <_printf_i+0x19c>
 80068be:	066a      	lsls	r2, r5, #25
 80068c0:	d5fb      	bpl.n	80068ba <_printf_i+0x192>
 80068c2:	8019      	strh	r1, [r3, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	4665      	mov	r5, ip
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	e7b9      	b.n	8006840 <_printf_i+0x118>
 80068cc:	6813      	ldr	r3, [r2, #0]
 80068ce:	1d19      	adds	r1, r3, #4
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	681d      	ldr	r5, [r3, #0]
 80068d4:	6862      	ldr	r2, [r4, #4]
 80068d6:	2100      	movs	r1, #0
 80068d8:	4628      	mov	r0, r5
 80068da:	f000 f968 	bl	8006bae <memchr>
 80068de:	b108      	cbz	r0, 80068e4 <_printf_i+0x1bc>
 80068e0:	1b40      	subs	r0, r0, r5
 80068e2:	6060      	str	r0, [r4, #4]
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	2300      	movs	r3, #0
 80068ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ee:	e7a7      	b.n	8006840 <_printf_i+0x118>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	462a      	mov	r2, r5
 80068f4:	4639      	mov	r1, r7
 80068f6:	4630      	mov	r0, r6
 80068f8:	47c0      	blx	r8
 80068fa:	3001      	adds	r0, #1
 80068fc:	d0aa      	beq.n	8006854 <_printf_i+0x12c>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	079b      	lsls	r3, r3, #30
 8006902:	d413      	bmi.n	800692c <_printf_i+0x204>
 8006904:	68e0      	ldr	r0, [r4, #12]
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	4298      	cmp	r0, r3
 800690a:	bfb8      	it	lt
 800690c:	4618      	movlt	r0, r3
 800690e:	e7a3      	b.n	8006858 <_printf_i+0x130>
 8006910:	2301      	movs	r3, #1
 8006912:	464a      	mov	r2, r9
 8006914:	4639      	mov	r1, r7
 8006916:	4630      	mov	r0, r6
 8006918:	47c0      	blx	r8
 800691a:	3001      	adds	r0, #1
 800691c:	d09a      	beq.n	8006854 <_printf_i+0x12c>
 800691e:	3501      	adds	r5, #1
 8006920:	68e3      	ldr	r3, [r4, #12]
 8006922:	9a03      	ldr	r2, [sp, #12]
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	42ab      	cmp	r3, r5
 8006928:	dcf2      	bgt.n	8006910 <_printf_i+0x1e8>
 800692a:	e7eb      	b.n	8006904 <_printf_i+0x1dc>
 800692c:	2500      	movs	r5, #0
 800692e:	f104 0919 	add.w	r9, r4, #25
 8006932:	e7f5      	b.n	8006920 <_printf_i+0x1f8>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1ac      	bne.n	8006892 <_printf_i+0x16a>
 8006938:	7803      	ldrb	r3, [r0, #0]
 800693a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800693e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006942:	e76c      	b.n	800681e <_printf_i+0xf6>
 8006944:	0800796e 	.word	0x0800796e
 8006948:	0800797f 	.word	0x0800797f

0800694c <sniprintf>:
 800694c:	b40c      	push	{r2, r3}
 800694e:	b530      	push	{r4, r5, lr}
 8006950:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <sniprintf+0x64>)
 8006952:	1e0c      	subs	r4, r1, #0
 8006954:	b09d      	sub	sp, #116	; 0x74
 8006956:	681d      	ldr	r5, [r3, #0]
 8006958:	da08      	bge.n	800696c <sniprintf+0x20>
 800695a:	238b      	movs	r3, #139	; 0x8b
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	b01d      	add	sp, #116	; 0x74
 8006964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006968:	b002      	add	sp, #8
 800696a:	4770      	bx	lr
 800696c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006970:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006974:	bf0c      	ite	eq
 8006976:	4623      	moveq	r3, r4
 8006978:	f104 33ff 	addne.w	r3, r4, #4294967295
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	9307      	str	r3, [sp, #28]
 8006980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006984:	9002      	str	r0, [sp, #8]
 8006986:	9006      	str	r0, [sp, #24]
 8006988:	f8ad 3016 	strh.w	r3, [sp, #22]
 800698c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800698e:	ab21      	add	r3, sp, #132	; 0x84
 8006990:	a902      	add	r1, sp, #8
 8006992:	4628      	mov	r0, r5
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	f7ff fd59 	bl	800644c <_svfiprintf_r>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	bfbc      	itt	lt
 800699e:	238b      	movlt	r3, #139	; 0x8b
 80069a0:	602b      	strlt	r3, [r5, #0]
 80069a2:	2c00      	cmp	r4, #0
 80069a4:	d0dd      	beq.n	8006962 <sniprintf+0x16>
 80069a6:	2200      	movs	r2, #0
 80069a8:	9b02      	ldr	r3, [sp, #8]
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	e7d9      	b.n	8006962 <sniprintf+0x16>
 80069ae:	bf00      	nop
 80069b0:	20000010 	.word	0x20000010

080069b4 <siscanf>:
 80069b4:	b40e      	push	{r1, r2, r3}
 80069b6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80069ba:	b530      	push	{r4, r5, lr}
 80069bc:	b09c      	sub	sp, #112	; 0x70
 80069be:	ac1f      	add	r4, sp, #124	; 0x7c
 80069c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80069c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80069c8:	9002      	str	r0, [sp, #8]
 80069ca:	9006      	str	r0, [sp, #24]
 80069cc:	f7f9 fbc0 	bl	8000150 <strlen>
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <siscanf+0x4c>)
 80069d2:	9003      	str	r0, [sp, #12]
 80069d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d6:	2300      	movs	r3, #0
 80069d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80069da:	9314      	str	r3, [sp, #80]	; 0x50
 80069dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069e0:	9007      	str	r0, [sp, #28]
 80069e2:	4808      	ldr	r0, [pc, #32]	; (8006a04 <siscanf+0x50>)
 80069e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069e8:	462a      	mov	r2, r5
 80069ea:	4623      	mov	r3, r4
 80069ec:	a902      	add	r1, sp, #8
 80069ee:	6800      	ldr	r0, [r0, #0]
 80069f0:	9401      	str	r4, [sp, #4]
 80069f2:	f000 f98f 	bl	8006d14 <__ssvfiscanf_r>
 80069f6:	b01c      	add	sp, #112	; 0x70
 80069f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069fc:	b003      	add	sp, #12
 80069fe:	4770      	bx	lr
 8006a00:	08006a09 	.word	0x08006a09
 8006a04:	20000010 	.word	0x20000010

08006a08 <__seofread>:
 8006a08:	2000      	movs	r0, #0
 8006a0a:	4770      	bx	lr

08006a0c <strcpy>:
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a12:	f803 2b01 	strb.w	r2, [r3], #1
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d1f9      	bne.n	8006a0e <strcpy+0x2>
 8006a1a:	4770      	bx	lr

08006a1c <strncmp>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	b16a      	cbz	r2, 8006a3c <strncmp+0x20>
 8006a20:	3901      	subs	r1, #1
 8006a22:	1884      	adds	r4, r0, r2
 8006a24:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006a28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d103      	bne.n	8006a38 <strncmp+0x1c>
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	d001      	beq.n	8006a38 <strncmp+0x1c>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f5      	bne.n	8006a24 <strncmp+0x8>
 8006a38:	1a98      	subs	r0, r3, r2
 8006a3a:	bd10      	pop	{r4, pc}
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	e7fc      	b.n	8006a3a <strncmp+0x1e>

08006a40 <__tzcalc_limits>:
 8006a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	4680      	mov	r8, r0
 8006a46:	f7ff fc79 	bl	800633c <__gettzinfo>
 8006a4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8006a4e:	4598      	cmp	r8, r3
 8006a50:	f340 8097 	ble.w	8006b82 <__tzcalc_limits+0x142>
 8006a54:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006a58:	f240 126d 	movw	r2, #365	; 0x16d
 8006a5c:	4443      	add	r3, r8
 8006a5e:	109b      	asrs	r3, r3, #2
 8006a60:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8006a64:	fb02 3505 	mla	r5, r2, r5, r3
 8006a68:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8006a6c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8006a70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a74:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8006a78:	441d      	add	r5, r3
 8006a7a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006a7e:	4442      	add	r2, r8
 8006a80:	fb92 f2f3 	sdiv	r2, r2, r3
 8006a84:	fb98 f7f3 	sdiv	r7, r8, r3
 8006a88:	4415      	add	r5, r2
 8006a8a:	2264      	movs	r2, #100	; 0x64
 8006a8c:	fb03 8717 	mls	r7, r3, r7, r8
 8006a90:	fb98 f6f2 	sdiv	r6, r8, r2
 8006a94:	fab7 fc87 	clz	ip, r7
 8006a98:	4604      	mov	r4, r0
 8006a9a:	f04f 0e07 	mov.w	lr, #7
 8006a9e:	fb02 8616 	mls	r6, r2, r6, r8
 8006aa2:	f008 0303 	and.w	r3, r8, #3
 8006aa6:	f8c0 8004 	str.w	r8, [r0, #4]
 8006aaa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8006aae:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	7a22      	ldrb	r2, [r4, #8]
 8006ab6:	6963      	ldr	r3, [r4, #20]
 8006ab8:	2a4a      	cmp	r2, #74	; 0x4a
 8006aba:	d128      	bne.n	8006b0e <__tzcalc_limits+0xce>
 8006abc:	9900      	ldr	r1, [sp, #0]
 8006abe:	18ea      	adds	r2, r5, r3
 8006ac0:	b901      	cbnz	r1, 8006ac4 <__tzcalc_limits+0x84>
 8006ac2:	b906      	cbnz	r6, 8006ac6 <__tzcalc_limits+0x86>
 8006ac4:	bb0f      	cbnz	r7, 8006b0a <__tzcalc_limits+0xca>
 8006ac6:	2b3b      	cmp	r3, #59	; 0x3b
 8006ac8:	bfd4      	ite	le
 8006aca:	2300      	movle	r3, #0
 8006acc:	2301      	movgt	r3, #1
 8006ace:	4413      	add	r3, r2
 8006ad0:	1e5a      	subs	r2, r3, #1
 8006ad2:	69a3      	ldr	r3, [r4, #24]
 8006ad4:	492c      	ldr	r1, [pc, #176]	; (8006b88 <__tzcalc_limits+0x148>)
 8006ad6:	3428      	adds	r4, #40	; 0x28
 8006ad8:	fb01 3202 	mla	r2, r1, r2, r3
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	4413      	add	r3, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	17db      	asrs	r3, r3, #31
 8006ae4:	e944 2302 	strd	r2, r3, [r4, #-8]
 8006ae8:	45a3      	cmp	fp, r4
 8006aea:	d1e3      	bne.n	8006ab4 <__tzcalc_limits+0x74>
 8006aec:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8006af0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8006af4:	4294      	cmp	r4, r2
 8006af6:	eb75 0303 	sbcs.w	r3, r5, r3
 8006afa:	bfb4      	ite	lt
 8006afc:	2301      	movlt	r3, #1
 8006afe:	2300      	movge	r3, #0
 8006b00:	6003      	str	r3, [r0, #0]
 8006b02:	2001      	movs	r0, #1
 8006b04:	b003      	add	sp, #12
 8006b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e7df      	b.n	8006ace <__tzcalc_limits+0x8e>
 8006b0e:	2a44      	cmp	r2, #68	; 0x44
 8006b10:	d101      	bne.n	8006b16 <__tzcalc_limits+0xd6>
 8006b12:	18ea      	adds	r2, r5, r3
 8006b14:	e7dd      	b.n	8006ad2 <__tzcalc_limits+0x92>
 8006b16:	9a00      	ldr	r2, [sp, #0]
 8006b18:	bb6a      	cbnz	r2, 8006b76 <__tzcalc_limits+0x136>
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	bf0c      	ite	eq
 8006b1e:	46e1      	moveq	r9, ip
 8006b20:	f04f 0901 	movne.w	r9, #1
 8006b24:	2230      	movs	r2, #48	; 0x30
 8006b26:	fb02 f909 	mul.w	r9, r2, r9
 8006b2a:	68e2      	ldr	r2, [r4, #12]
 8006b2c:	f04f 0800 	mov.w	r8, #0
 8006b30:	9201      	str	r2, [sp, #4]
 8006b32:	462a      	mov	r2, r5
 8006b34:	f108 0801 	add.w	r8, r8, #1
 8006b38:	4914      	ldr	r1, [pc, #80]	; (8006b8c <__tzcalc_limits+0x14c>)
 8006b3a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8006b3e:	448a      	add	sl, r1
 8006b40:	9901      	ldr	r1, [sp, #4]
 8006b42:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8006b46:	4541      	cmp	r1, r8
 8006b48:	dc17      	bgt.n	8006b7a <__tzcalc_limits+0x13a>
 8006b4a:	f102 0804 	add.w	r8, r2, #4
 8006b4e:	fb98 f9fe 	sdiv	r9, r8, lr
 8006b52:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8006b56:	eba8 0909 	sub.w	r9, r8, r9
 8006b5a:	ebb3 0909 	subs.w	r9, r3, r9
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	bf48      	it	mi
 8006b62:	f109 0907 	addmi.w	r9, r9, #7
 8006b66:	3b01      	subs	r3, #1
 8006b68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b6c:	444b      	add	r3, r9
 8006b6e:	4553      	cmp	r3, sl
 8006b70:	da05      	bge.n	8006b7e <__tzcalc_limits+0x13e>
 8006b72:	441a      	add	r2, r3
 8006b74:	e7ad      	b.n	8006ad2 <__tzcalc_limits+0x92>
 8006b76:	46e1      	mov	r9, ip
 8006b78:	e7d4      	b.n	8006b24 <__tzcalc_limits+0xe4>
 8006b7a:	4452      	add	r2, sl
 8006b7c:	e7da      	b.n	8006b34 <__tzcalc_limits+0xf4>
 8006b7e:	3b07      	subs	r3, #7
 8006b80:	e7f5      	b.n	8006b6e <__tzcalc_limits+0x12e>
 8006b82:	2000      	movs	r0, #0
 8006b84:	e7be      	b.n	8006b04 <__tzcalc_limits+0xc4>
 8006b86:	bf00      	nop
 8006b88:	00015180 	.word	0x00015180
 8006b8c:	08007a94 	.word	0x08007a94

08006b90 <__ascii_wctomb>:
 8006b90:	b149      	cbz	r1, 8006ba6 <__ascii_wctomb+0x16>
 8006b92:	2aff      	cmp	r2, #255	; 0xff
 8006b94:	bf8b      	itete	hi
 8006b96:	238a      	movhi	r3, #138	; 0x8a
 8006b98:	700a      	strbls	r2, [r1, #0]
 8006b9a:	6003      	strhi	r3, [r0, #0]
 8006b9c:	2001      	movls	r0, #1
 8006b9e:	bf88      	it	hi
 8006ba0:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ba4:	4770      	bx	lr
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4770      	bx	lr

08006baa <__env_lock>:
 8006baa:	4770      	bx	lr

08006bac <__env_unlock>:
 8006bac:	4770      	bx	lr

08006bae <memchr>:
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	b2c9      	uxtb	r1, r1
 8006bb2:	4402      	add	r2, r0
 8006bb4:	4290      	cmp	r0, r2
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	d101      	bne.n	8006bbe <memchr+0x10>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e003      	b.n	8006bc6 <memchr+0x18>
 8006bbe:	781c      	ldrb	r4, [r3, #0]
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	428c      	cmp	r4, r1
 8006bc4:	d1f6      	bne.n	8006bb4 <memchr+0x6>
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	bd10      	pop	{r4, pc}

08006bca <memcpy>:
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	1e43      	subs	r3, r0, #1
 8006bce:	440a      	add	r2, r1
 8006bd0:	4291      	cmp	r1, r2
 8006bd2:	d100      	bne.n	8006bd6 <memcpy+0xc>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bde:	e7f7      	b.n	8006bd0 <memcpy+0x6>

08006be0 <memmove>:
 8006be0:	4288      	cmp	r0, r1
 8006be2:	b510      	push	{r4, lr}
 8006be4:	eb01 0302 	add.w	r3, r1, r2
 8006be8:	d807      	bhi.n	8006bfa <memmove+0x1a>
 8006bea:	1e42      	subs	r2, r0, #1
 8006bec:	4299      	cmp	r1, r3
 8006bee:	d00a      	beq.n	8006c06 <memmove+0x26>
 8006bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006bf8:	e7f8      	b.n	8006bec <memmove+0xc>
 8006bfa:	4283      	cmp	r3, r0
 8006bfc:	d9f5      	bls.n	8006bea <memmove+0xa>
 8006bfe:	1881      	adds	r1, r0, r2
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	42d3      	cmn	r3, r2
 8006c04:	d100      	bne.n	8006c08 <memmove+0x28>
 8006c06:	bd10      	pop	{r4, pc}
 8006c08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c10:	e7f7      	b.n	8006c02 <memmove+0x22>

08006c12 <_realloc_r>:
 8006c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c14:	4607      	mov	r7, r0
 8006c16:	4614      	mov	r4, r2
 8006c18:	460e      	mov	r6, r1
 8006c1a:	b921      	cbnz	r1, 8006c26 <_realloc_r+0x14>
 8006c1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c20:	4611      	mov	r1, r2
 8006c22:	f7fe bb0d 	b.w	8005240 <_malloc_r>
 8006c26:	b922      	cbnz	r2, 8006c32 <_realloc_r+0x20>
 8006c28:	f7fe fabe 	bl	80051a8 <_free_r>
 8006c2c:	4625      	mov	r5, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c32:	f000 fc0d 	bl	8007450 <_malloc_usable_size_r>
 8006c36:	42a0      	cmp	r0, r4
 8006c38:	d20f      	bcs.n	8006c5a <_realloc_r+0x48>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f7fe faff 	bl	8005240 <_malloc_r>
 8006c42:	4605      	mov	r5, r0
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d0f2      	beq.n	8006c2e <_realloc_r+0x1c>
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	f7ff ffbd 	bl	8006bca <memcpy>
 8006c50:	4631      	mov	r1, r6
 8006c52:	4638      	mov	r0, r7
 8006c54:	f7fe faa8 	bl	80051a8 <_free_r>
 8006c58:	e7e9      	b.n	8006c2e <_realloc_r+0x1c>
 8006c5a:	4635      	mov	r5, r6
 8006c5c:	e7e7      	b.n	8006c2e <_realloc_r+0x1c>

08006c5e <_sungetc_r>:
 8006c5e:	b538      	push	{r3, r4, r5, lr}
 8006c60:	1c4b      	adds	r3, r1, #1
 8006c62:	4614      	mov	r4, r2
 8006c64:	d103      	bne.n	8006c6e <_sungetc_r+0x10>
 8006c66:	f04f 35ff 	mov.w	r5, #4294967295
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	8993      	ldrh	r3, [r2, #12]
 8006c70:	b2cd      	uxtb	r5, r1
 8006c72:	f023 0320 	bic.w	r3, r3, #32
 8006c76:	8193      	strh	r3, [r2, #12]
 8006c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c7a:	6852      	ldr	r2, [r2, #4]
 8006c7c:	b18b      	cbz	r3, 8006ca2 <_sungetc_r+0x44>
 8006c7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c80:	4293      	cmp	r3, r2
 8006c82:	dd08      	ble.n	8006c96 <_sungetc_r+0x38>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	1e5a      	subs	r2, r3, #1
 8006c88:	6022      	str	r2, [r4, #0]
 8006c8a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	3301      	adds	r3, #1
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	e7e9      	b.n	8006c6a <_sungetc_r+0xc>
 8006c96:	4621      	mov	r1, r4
 8006c98:	f000 fba2 	bl	80073e0 <__submore>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d0f1      	beq.n	8006c84 <_sungetc_r+0x26>
 8006ca0:	e7e1      	b.n	8006c66 <_sungetc_r+0x8>
 8006ca2:	6921      	ldr	r1, [r4, #16]
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	b151      	cbz	r1, 8006cbe <_sungetc_r+0x60>
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d208      	bcs.n	8006cbe <_sungetc_r+0x60>
 8006cac:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006cb0:	42a9      	cmp	r1, r5
 8006cb2:	d104      	bne.n	8006cbe <_sungetc_r+0x60>
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	3201      	adds	r2, #1
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	6062      	str	r2, [r4, #4]
 8006cbc:	e7d5      	b.n	8006c6a <_sungetc_r+0xc>
 8006cbe:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8006cc8:	2303      	movs	r3, #3
 8006cca:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ccc:	4623      	mov	r3, r4
 8006cce:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e7dc      	b.n	8006c92 <_sungetc_r+0x34>

08006cd8 <__ssrefill_r>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	460c      	mov	r4, r1
 8006cdc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006cde:	b169      	cbz	r1, 8006cfc <__ssrefill_r+0x24>
 8006ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	d001      	beq.n	8006cec <__ssrefill_r+0x14>
 8006ce8:	f7fe fa5e 	bl	80051a8 <_free_r>
 8006cec:	2000      	movs	r0, #0
 8006cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cf0:	6360      	str	r0, [r4, #52]	; 0x34
 8006cf2:	6063      	str	r3, [r4, #4]
 8006cf4:	b113      	cbz	r3, 8006cfc <__ssrefill_r+0x24>
 8006cf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd10      	pop	{r4, pc}
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	f043 0320 	orr.w	r3, r3, #32
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	e7f3      	b.n	8006cfa <__ssrefill_r+0x22>
	...

08006d14 <__ssvfiscanf_r>:
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	4692      	mov	sl, r2
 8006d20:	270a      	movs	r7, #10
 8006d22:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006d26:	9144      	str	r1, [sp, #272]	; 0x110
 8006d28:	9145      	str	r1, [sp, #276]	; 0x114
 8006d2a:	499e      	ldr	r1, [pc, #632]	; (8006fa4 <__ssvfiscanf_r+0x290>)
 8006d2c:	f10d 0804 	add.w	r8, sp, #4
 8006d30:	91a0      	str	r1, [sp, #640]	; 0x280
 8006d32:	499d      	ldr	r1, [pc, #628]	; (8006fa8 <__ssvfiscanf_r+0x294>)
 8006d34:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8006fac <__ssvfiscanf_r+0x298>
 8006d38:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006d3c:	91a1      	str	r1, [sp, #644]	; 0x284
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	f89a 3000 	ldrb.w	r3, [sl]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 812a 	beq.w	8006f9e <__ssvfiscanf_r+0x28a>
 8006d4a:	4655      	mov	r5, sl
 8006d4c:	f7ff fb02 	bl	8006354 <__locale_ctype_ptr>
 8006d50:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006d54:	4458      	add	r0, fp
 8006d56:	7843      	ldrb	r3, [r0, #1]
 8006d58:	f013 0308 	ands.w	r3, r3, #8
 8006d5c:	d01c      	beq.n	8006d98 <__ssvfiscanf_r+0x84>
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dd12      	ble.n	8006d8a <__ssvfiscanf_r+0x76>
 8006d64:	f7ff faf6 	bl	8006354 <__locale_ctype_ptr>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	4410      	add	r0, r2
 8006d6e:	7842      	ldrb	r2, [r0, #1]
 8006d70:	0712      	lsls	r2, r2, #28
 8006d72:	d401      	bmi.n	8006d78 <__ssvfiscanf_r+0x64>
 8006d74:	46aa      	mov	sl, r5
 8006d76:	e7e3      	b.n	8006d40 <__ssvfiscanf_r+0x2c>
 8006d78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	3201      	adds	r2, #1
 8006d7e:	9245      	str	r2, [sp, #276]	; 0x114
 8006d80:	6862      	ldr	r2, [r4, #4]
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	3a01      	subs	r2, #1
 8006d86:	6062      	str	r2, [r4, #4]
 8006d88:	e7e9      	b.n	8006d5e <__ssvfiscanf_r+0x4a>
 8006d8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4630      	mov	r0, r6
 8006d90:	4798      	blx	r3
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d0e6      	beq.n	8006d64 <__ssvfiscanf_r+0x50>
 8006d96:	e7ed      	b.n	8006d74 <__ssvfiscanf_r+0x60>
 8006d98:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006d9c:	f040 8082 	bne.w	8006ea4 <__ssvfiscanf_r+0x190>
 8006da0:	9343      	str	r3, [sp, #268]	; 0x10c
 8006da2:	9341      	str	r3, [sp, #260]	; 0x104
 8006da4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006da8:	2b2a      	cmp	r3, #42	; 0x2a
 8006daa:	d103      	bne.n	8006db4 <__ssvfiscanf_r+0xa0>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f10a 0502 	add.w	r5, sl, #2
 8006db2:	9341      	str	r3, [sp, #260]	; 0x104
 8006db4:	46aa      	mov	sl, r5
 8006db6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006dba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006dbe:	2a09      	cmp	r2, #9
 8006dc0:	d922      	bls.n	8006e08 <__ssvfiscanf_r+0xf4>
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	4879      	ldr	r0, [pc, #484]	; (8006fac <__ssvfiscanf_r+0x298>)
 8006dc6:	f7ff fef2 	bl	8006bae <memchr>
 8006dca:	b138      	cbz	r0, 8006ddc <__ssvfiscanf_r+0xc8>
 8006dcc:	eba0 0309 	sub.w	r3, r0, r9
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	46aa      	mov	sl, r5
 8006dd4:	4098      	lsls	r0, r3
 8006dd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006dd8:	4318      	orrs	r0, r3
 8006dda:	9041      	str	r0, [sp, #260]	; 0x104
 8006ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8006de0:	f10a 0501 	add.w	r5, sl, #1
 8006de4:	2b67      	cmp	r3, #103	; 0x67
 8006de6:	d82b      	bhi.n	8006e40 <__ssvfiscanf_r+0x12c>
 8006de8:	2b65      	cmp	r3, #101	; 0x65
 8006dea:	f080 809f 	bcs.w	8006f2c <__ssvfiscanf_r+0x218>
 8006dee:	2b47      	cmp	r3, #71	; 0x47
 8006df0:	d810      	bhi.n	8006e14 <__ssvfiscanf_r+0x100>
 8006df2:	2b45      	cmp	r3, #69	; 0x45
 8006df4:	f080 809a 	bcs.w	8006f2c <__ssvfiscanf_r+0x218>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d06c      	beq.n	8006ed6 <__ssvfiscanf_r+0x1c2>
 8006dfc:	2b25      	cmp	r3, #37	; 0x25
 8006dfe:	d051      	beq.n	8006ea4 <__ssvfiscanf_r+0x190>
 8006e00:	2303      	movs	r3, #3
 8006e02:	9742      	str	r7, [sp, #264]	; 0x108
 8006e04:	9347      	str	r3, [sp, #284]	; 0x11c
 8006e06:	e027      	b.n	8006e58 <__ssvfiscanf_r+0x144>
 8006e08:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006e0a:	fb07 1303 	mla	r3, r7, r3, r1
 8006e0e:	3b30      	subs	r3, #48	; 0x30
 8006e10:	9343      	str	r3, [sp, #268]	; 0x10c
 8006e12:	e7cf      	b.n	8006db4 <__ssvfiscanf_r+0xa0>
 8006e14:	2b5b      	cmp	r3, #91	; 0x5b
 8006e16:	d06a      	beq.n	8006eee <__ssvfiscanf_r+0x1da>
 8006e18:	d80c      	bhi.n	8006e34 <__ssvfiscanf_r+0x120>
 8006e1a:	2b58      	cmp	r3, #88	; 0x58
 8006e1c:	d1f0      	bne.n	8006e00 <__ssvfiscanf_r+0xec>
 8006e1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e24:	9241      	str	r2, [sp, #260]	; 0x104
 8006e26:	2210      	movs	r2, #16
 8006e28:	9242      	str	r2, [sp, #264]	; 0x108
 8006e2a:	2b6e      	cmp	r3, #110	; 0x6e
 8006e2c:	bf8c      	ite	hi
 8006e2e:	2304      	movhi	r3, #4
 8006e30:	2303      	movls	r3, #3
 8006e32:	e010      	b.n	8006e56 <__ssvfiscanf_r+0x142>
 8006e34:	2b63      	cmp	r3, #99	; 0x63
 8006e36:	d065      	beq.n	8006f04 <__ssvfiscanf_r+0x1f0>
 8006e38:	2b64      	cmp	r3, #100	; 0x64
 8006e3a:	d1e1      	bne.n	8006e00 <__ssvfiscanf_r+0xec>
 8006e3c:	9742      	str	r7, [sp, #264]	; 0x108
 8006e3e:	e7f4      	b.n	8006e2a <__ssvfiscanf_r+0x116>
 8006e40:	2b70      	cmp	r3, #112	; 0x70
 8006e42:	d04b      	beq.n	8006edc <__ssvfiscanf_r+0x1c8>
 8006e44:	d826      	bhi.n	8006e94 <__ssvfiscanf_r+0x180>
 8006e46:	2b6e      	cmp	r3, #110	; 0x6e
 8006e48:	d062      	beq.n	8006f10 <__ssvfiscanf_r+0x1fc>
 8006e4a:	d84c      	bhi.n	8006ee6 <__ssvfiscanf_r+0x1d2>
 8006e4c:	2b69      	cmp	r3, #105	; 0x69
 8006e4e:	d1d7      	bne.n	8006e00 <__ssvfiscanf_r+0xec>
 8006e50:	2300      	movs	r3, #0
 8006e52:	9342      	str	r3, [sp, #264]	; 0x108
 8006e54:	2303      	movs	r3, #3
 8006e56:	9347      	str	r3, [sp, #284]	; 0x11c
 8006e58:	6863      	ldr	r3, [r4, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd68      	ble.n	8006f30 <__ssvfiscanf_r+0x21c>
 8006e5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e60:	0659      	lsls	r1, r3, #25
 8006e62:	d407      	bmi.n	8006e74 <__ssvfiscanf_r+0x160>
 8006e64:	f7ff fa76 	bl	8006354 <__locale_ctype_ptr>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	4410      	add	r0, r2
 8006e6e:	7842      	ldrb	r2, [r0, #1]
 8006e70:	0712      	lsls	r2, r2, #28
 8006e72:	d464      	bmi.n	8006f3e <__ssvfiscanf_r+0x22a>
 8006e74:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	dc73      	bgt.n	8006f62 <__ssvfiscanf_r+0x24e>
 8006e7a:	466b      	mov	r3, sp
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	a941      	add	r1, sp, #260	; 0x104
 8006e80:	4630      	mov	r0, r6
 8006e82:	f000 f897 	bl	8006fb4 <_scanf_chars>
 8006e86:	2801      	cmp	r0, #1
 8006e88:	f000 8089 	beq.w	8006f9e <__ssvfiscanf_r+0x28a>
 8006e8c:	2802      	cmp	r0, #2
 8006e8e:	f47f af71 	bne.w	8006d74 <__ssvfiscanf_r+0x60>
 8006e92:	e01d      	b.n	8006ed0 <__ssvfiscanf_r+0x1bc>
 8006e94:	2b75      	cmp	r3, #117	; 0x75
 8006e96:	d0d1      	beq.n	8006e3c <__ssvfiscanf_r+0x128>
 8006e98:	2b78      	cmp	r3, #120	; 0x78
 8006e9a:	d0c0      	beq.n	8006e1e <__ssvfiscanf_r+0x10a>
 8006e9c:	2b73      	cmp	r3, #115	; 0x73
 8006e9e:	d1af      	bne.n	8006e00 <__ssvfiscanf_r+0xec>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e7d8      	b.n	8006e56 <__ssvfiscanf_r+0x142>
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	dd0c      	ble.n	8006ec4 <__ssvfiscanf_r+0x1b0>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	781a      	ldrb	r2, [r3, #0]
 8006eae:	455a      	cmp	r2, fp
 8006eb0:	d175      	bne.n	8006f9e <__ssvfiscanf_r+0x28a>
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	6862      	ldr	r2, [r4, #4]
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006eba:	3a01      	subs	r2, #1
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	6062      	str	r2, [r4, #4]
 8006ec0:	9345      	str	r3, [sp, #276]	; 0x114
 8006ec2:	e757      	b.n	8006d74 <__ssvfiscanf_r+0x60>
 8006ec4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4630      	mov	r0, r6
 8006eca:	4798      	blx	r3
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d0ec      	beq.n	8006eaa <__ssvfiscanf_r+0x196>
 8006ed0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d159      	bne.n	8006f8a <__ssvfiscanf_r+0x276>
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eda:	e05c      	b.n	8006f96 <__ssvfiscanf_r+0x282>
 8006edc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ede:	f042 0220 	orr.w	r2, r2, #32
 8006ee2:	9241      	str	r2, [sp, #260]	; 0x104
 8006ee4:	e79b      	b.n	8006e1e <__ssvfiscanf_r+0x10a>
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	9342      	str	r3, [sp, #264]	; 0x108
 8006eea:	2304      	movs	r3, #4
 8006eec:	e7b3      	b.n	8006e56 <__ssvfiscanf_r+0x142>
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	f000 f9b7 	bl	8007264 <__sccl>
 8006ef6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006ef8:	4605      	mov	r5, r0
 8006efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efe:	9341      	str	r3, [sp, #260]	; 0x104
 8006f00:	2301      	movs	r3, #1
 8006f02:	e7a8      	b.n	8006e56 <__ssvfiscanf_r+0x142>
 8006f04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f0a:	9341      	str	r3, [sp, #260]	; 0x104
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e7a2      	b.n	8006e56 <__ssvfiscanf_r+0x142>
 8006f10:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006f12:	06c3      	lsls	r3, r0, #27
 8006f14:	f53f af2e 	bmi.w	8006d74 <__ssvfiscanf_r+0x60>
 8006f18:	9b00      	ldr	r3, [sp, #0]
 8006f1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006f1c:	1d19      	adds	r1, r3, #4
 8006f1e:	9100      	str	r1, [sp, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	07c0      	lsls	r0, r0, #31
 8006f24:	bf4c      	ite	mi
 8006f26:	801a      	strhmi	r2, [r3, #0]
 8006f28:	601a      	strpl	r2, [r3, #0]
 8006f2a:	e723      	b.n	8006d74 <__ssvfiscanf_r+0x60>
 8006f2c:	2305      	movs	r3, #5
 8006f2e:	e792      	b.n	8006e56 <__ssvfiscanf_r+0x142>
 8006f30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f32:	4621      	mov	r1, r4
 8006f34:	4630      	mov	r0, r6
 8006f36:	4798      	blx	r3
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d090      	beq.n	8006e5e <__ssvfiscanf_r+0x14a>
 8006f3c:	e7c8      	b.n	8006ed0 <__ssvfiscanf_r+0x1bc>
 8006f3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006f40:	3201      	adds	r2, #1
 8006f42:	9245      	str	r2, [sp, #276]	; 0x114
 8006f44:	6862      	ldr	r2, [r4, #4]
 8006f46:	3a01      	subs	r2, #1
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	6062      	str	r2, [r4, #4]
 8006f4c:	dd02      	ble.n	8006f54 <__ssvfiscanf_r+0x240>
 8006f4e:	3301      	adds	r3, #1
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	e787      	b.n	8006e64 <__ssvfiscanf_r+0x150>
 8006f54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f56:	4621      	mov	r1, r4
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4798      	blx	r3
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d081      	beq.n	8006e64 <__ssvfiscanf_r+0x150>
 8006f60:	e7b6      	b.n	8006ed0 <__ssvfiscanf_r+0x1bc>
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	dc06      	bgt.n	8006f74 <__ssvfiscanf_r+0x260>
 8006f66:	466b      	mov	r3, sp
 8006f68:	4622      	mov	r2, r4
 8006f6a:	a941      	add	r1, sp, #260	; 0x104
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f000 f883 	bl	8007078 <_scanf_i>
 8006f72:	e788      	b.n	8006e86 <__ssvfiscanf_r+0x172>
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <__ssvfiscanf_r+0x29c>)
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f43f aefc 	beq.w	8006d74 <__ssvfiscanf_r+0x60>
 8006f7c:	466b      	mov	r3, sp
 8006f7e:	4622      	mov	r2, r4
 8006f80:	a941      	add	r1, sp, #260	; 0x104
 8006f82:	4630      	mov	r0, r6
 8006f84:	f3af 8000 	nop.w
 8006f88:	e77d      	b.n	8006e86 <__ssvfiscanf_r+0x172>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f90:	bf18      	it	ne
 8006f92:	f04f 30ff 	movne.w	r0, #4294967295
 8006f96:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006fa0:	e7f9      	b.n	8006f96 <__ssvfiscanf_r+0x282>
 8006fa2:	bf00      	nop
 8006fa4:	08006c5f 	.word	0x08006c5f
 8006fa8:	08006cd9 	.word	0x08006cd9
 8006fac:	08007963 	.word	0x08007963
 8006fb0:	00000000 	.word	0x00000000

08006fb4 <_scanf_chars>:
 8006fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb8:	4615      	mov	r5, r2
 8006fba:	688a      	ldr	r2, [r1, #8]
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	b932      	cbnz	r2, 8006fd0 <_scanf_chars+0x1c>
 8006fc2:	698a      	ldr	r2, [r1, #24]
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	f04f 32ff 	movne.w	r2, #4294967295
 8006fcc:	2201      	moveq	r2, #1
 8006fce:	608a      	str	r2, [r1, #8]
 8006fd0:	2600      	movs	r6, #0
 8006fd2:	6822      	ldr	r2, [r4, #0]
 8006fd4:	06d1      	lsls	r1, r2, #27
 8006fd6:	bf5f      	itttt	pl
 8006fd8:	681a      	ldrpl	r2, [r3, #0]
 8006fda:	1d11      	addpl	r1, r2, #4
 8006fdc:	6019      	strpl	r1, [r3, #0]
 8006fde:	6817      	ldrpl	r7, [r2, #0]
 8006fe0:	69a3      	ldr	r3, [r4, #24]
 8006fe2:	b1db      	cbz	r3, 800701c <_scanf_chars+0x68>
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <_scanf_chars+0x44>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6962      	ldr	r2, [r4, #20]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	5cd3      	ldrb	r3, [r2, r3]
 8006ff0:	b9a3      	cbnz	r3, 800701c <_scanf_chars+0x68>
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	d131      	bne.n	800705a <_scanf_chars+0xa6>
 8006ff6:	e006      	b.n	8007006 <_scanf_chars+0x52>
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d007      	beq.n	800700c <_scanf_chars+0x58>
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	d12c      	bne.n	800705a <_scanf_chars+0xa6>
 8007000:	69a3      	ldr	r3, [r4, #24]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d129      	bne.n	800705a <_scanf_chars+0xa6>
 8007006:	2001      	movs	r0, #1
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	f7ff f9a2 	bl	8006354 <__locale_ctype_ptr>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	4418      	add	r0, r3
 8007016:	7843      	ldrb	r3, [r0, #1]
 8007018:	071b      	lsls	r3, r3, #28
 800701a:	d4ef      	bmi.n	8006ffc <_scanf_chars+0x48>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	3601      	adds	r6, #1
 8007020:	06da      	lsls	r2, r3, #27
 8007022:	bf5e      	ittt	pl
 8007024:	682b      	ldrpl	r3, [r5, #0]
 8007026:	781b      	ldrbpl	r3, [r3, #0]
 8007028:	703b      	strbpl	r3, [r7, #0]
 800702a:	682a      	ldr	r2, [r5, #0]
 800702c:	686b      	ldr	r3, [r5, #4]
 800702e:	f102 0201 	add.w	r2, r2, #1
 8007032:	602a      	str	r2, [r5, #0]
 8007034:	68a2      	ldr	r2, [r4, #8]
 8007036:	f103 33ff 	add.w	r3, r3, #4294967295
 800703a:	f102 32ff 	add.w	r2, r2, #4294967295
 800703e:	606b      	str	r3, [r5, #4]
 8007040:	bf58      	it	pl
 8007042:	3701      	addpl	r7, #1
 8007044:	60a2      	str	r2, [r4, #8]
 8007046:	b142      	cbz	r2, 800705a <_scanf_chars+0xa6>
 8007048:	2b00      	cmp	r3, #0
 800704a:	dcc9      	bgt.n	8006fe0 <_scanf_chars+0x2c>
 800704c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007050:	4629      	mov	r1, r5
 8007052:	4640      	mov	r0, r8
 8007054:	4798      	blx	r3
 8007056:	2800      	cmp	r0, #0
 8007058:	d0c2      	beq.n	8006fe0 <_scanf_chars+0x2c>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	f013 0310 	ands.w	r3, r3, #16
 8007060:	d105      	bne.n	800706e <_scanf_chars+0xba>
 8007062:	68e2      	ldr	r2, [r4, #12]
 8007064:	3201      	adds	r2, #1
 8007066:	60e2      	str	r2, [r4, #12]
 8007068:	69a2      	ldr	r2, [r4, #24]
 800706a:	b102      	cbz	r2, 800706e <_scanf_chars+0xba>
 800706c:	703b      	strb	r3, [r7, #0]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	2000      	movs	r0, #0
 8007072:	441e      	add	r6, r3
 8007074:	6126      	str	r6, [r4, #16]
 8007076:	e7c7      	b.n	8007008 <_scanf_chars+0x54>

08007078 <_scanf_i>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	469a      	mov	sl, r3
 8007080:	4b74      	ldr	r3, [pc, #464]	; (8007254 <_scanf_i+0x1dc>)
 8007082:	b087      	sub	sp, #28
 8007084:	4683      	mov	fp, r0
 8007086:	4616      	mov	r6, r2
 8007088:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800708c:	ab03      	add	r3, sp, #12
 800708e:	68a7      	ldr	r7, [r4, #8]
 8007090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007094:	4b70      	ldr	r3, [pc, #448]	; (8007258 <_scanf_i+0x1e0>)
 8007096:	69a1      	ldr	r1, [r4, #24]
 8007098:	4a70      	ldr	r2, [pc, #448]	; (800725c <_scanf_i+0x1e4>)
 800709a:	f104 091c 	add.w	r9, r4, #28
 800709e:	2903      	cmp	r1, #3
 80070a0:	bf08      	it	eq
 80070a2:	461a      	moveq	r2, r3
 80070a4:	1e7b      	subs	r3, r7, #1
 80070a6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80070aa:	bf84      	itt	hi
 80070ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80070b0:	60a3      	strhi	r3, [r4, #8]
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	bf88      	it	hi
 80070b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80070ba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	bf98      	it	ls
 80070c2:	2700      	movls	r7, #0
 80070c4:	464b      	mov	r3, r9
 80070c6:	f04f 0800 	mov.w	r8, #0
 80070ca:	9200      	str	r2, [sp, #0]
 80070cc:	bf88      	it	hi
 80070ce:	197f      	addhi	r7, r7, r5
 80070d0:	6831      	ldr	r1, [r6, #0]
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	ab03      	add	r3, sp, #12
 80070d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80070da:	2202      	movs	r2, #2
 80070dc:	7809      	ldrb	r1, [r1, #0]
 80070de:	f7ff fd66 	bl	8006bae <memchr>
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	b330      	cbz	r0, 8007134 <_scanf_i+0xbc>
 80070e6:	f1b8 0f01 	cmp.w	r8, #1
 80070ea:	d15a      	bne.n	80071a2 <_scanf_i+0x12a>
 80070ec:	6862      	ldr	r2, [r4, #4]
 80070ee:	b92a      	cbnz	r2, 80070fc <_scanf_i+0x84>
 80070f0:	2108      	movs	r1, #8
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	6061      	str	r1, [r4, #4]
 80070f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	6822      	ldr	r2, [r4, #0]
 80070fe:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007102:	6022      	str	r2, [r4, #0]
 8007104:	68a2      	ldr	r2, [r4, #8]
 8007106:	1e51      	subs	r1, r2, #1
 8007108:	60a1      	str	r1, [r4, #8]
 800710a:	b19a      	cbz	r2, 8007134 <_scanf_i+0xbc>
 800710c:	6832      	ldr	r2, [r6, #0]
 800710e:	1c5d      	adds	r5, r3, #1
 8007110:	1c51      	adds	r1, r2, #1
 8007112:	6031      	str	r1, [r6, #0]
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	6873      	ldr	r3, [r6, #4]
 800711a:	3b01      	subs	r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	6073      	str	r3, [r6, #4]
 8007120:	dc07      	bgt.n	8007132 <_scanf_i+0xba>
 8007122:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007126:	4631      	mov	r1, r6
 8007128:	4658      	mov	r0, fp
 800712a:	4798      	blx	r3
 800712c:	2800      	cmp	r0, #0
 800712e:	f040 8087 	bne.w	8007240 <_scanf_i+0x1c8>
 8007132:	462b      	mov	r3, r5
 8007134:	f108 0801 	add.w	r8, r8, #1
 8007138:	f1b8 0f03 	cmp.w	r8, #3
 800713c:	d1c8      	bne.n	80070d0 <_scanf_i+0x58>
 800713e:	6862      	ldr	r2, [r4, #4]
 8007140:	b90a      	cbnz	r2, 8007146 <_scanf_i+0xce>
 8007142:	220a      	movs	r2, #10
 8007144:	6062      	str	r2, [r4, #4]
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	4945      	ldr	r1, [pc, #276]	; (8007260 <_scanf_i+0x1e8>)
 800714a:	6960      	ldr	r0, [r4, #20]
 800714c:	1a89      	subs	r1, r1, r2
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	f000 f888 	bl	8007264 <__sccl>
 8007154:	9b01      	ldr	r3, [sp, #4]
 8007156:	f04f 0800 	mov.w	r8, #0
 800715a:	461d      	mov	r5, r3
 800715c:	68a3      	ldr	r3, [r4, #8]
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d03b      	beq.n	80071dc <_scanf_i+0x164>
 8007164:	6831      	ldr	r1, [r6, #0]
 8007166:	6960      	ldr	r0, [r4, #20]
 8007168:	f891 c000 	ldrb.w	ip, [r1]
 800716c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007170:	2800      	cmp	r0, #0
 8007172:	d033      	beq.n	80071dc <_scanf_i+0x164>
 8007174:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007178:	d121      	bne.n	80071be <_scanf_i+0x146>
 800717a:	0510      	lsls	r0, r2, #20
 800717c:	d51f      	bpl.n	80071be <_scanf_i+0x146>
 800717e:	f108 0801 	add.w	r8, r8, #1
 8007182:	b117      	cbz	r7, 800718a <_scanf_i+0x112>
 8007184:	3301      	adds	r3, #1
 8007186:	3f01      	subs	r7, #1
 8007188:	60a3      	str	r3, [r4, #8]
 800718a:	6873      	ldr	r3, [r6, #4]
 800718c:	3b01      	subs	r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	6073      	str	r3, [r6, #4]
 8007192:	dd1c      	ble.n	80071ce <_scanf_i+0x156>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	3301      	adds	r3, #1
 8007198:	6033      	str	r3, [r6, #0]
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	e7dc      	b.n	800715c <_scanf_i+0xe4>
 80071a2:	f1b8 0f02 	cmp.w	r8, #2
 80071a6:	d1ad      	bne.n	8007104 <_scanf_i+0x8c>
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80071ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80071b2:	d1bf      	bne.n	8007134 <_scanf_i+0xbc>
 80071b4:	2110      	movs	r1, #16
 80071b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ba:	6061      	str	r1, [r4, #4]
 80071bc:	e7a1      	b.n	8007102 <_scanf_i+0x8a>
 80071be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	780b      	ldrb	r3, [r1, #0]
 80071c6:	3501      	adds	r5, #1
 80071c8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80071cc:	e7dd      	b.n	800718a <_scanf_i+0x112>
 80071ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071d2:	4631      	mov	r1, r6
 80071d4:	4658      	mov	r0, fp
 80071d6:	4798      	blx	r3
 80071d8:	2800      	cmp	r0, #0
 80071da:	d0de      	beq.n	800719a <_scanf_i+0x122>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	05d9      	lsls	r1, r3, #23
 80071e0:	d50c      	bpl.n	80071fc <_scanf_i+0x184>
 80071e2:	454d      	cmp	r5, r9
 80071e4:	d908      	bls.n	80071f8 <_scanf_i+0x180>
 80071e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80071ea:	1e6f      	subs	r7, r5, #1
 80071ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071f0:	4632      	mov	r2, r6
 80071f2:	4658      	mov	r0, fp
 80071f4:	4798      	blx	r3
 80071f6:	463d      	mov	r5, r7
 80071f8:	454d      	cmp	r5, r9
 80071fa:	d029      	beq.n	8007250 <_scanf_i+0x1d8>
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	f012 0210 	ands.w	r2, r2, #16
 8007202:	d113      	bne.n	800722c <_scanf_i+0x1b4>
 8007204:	702a      	strb	r2, [r5, #0]
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	4649      	mov	r1, r9
 800720a:	4658      	mov	r0, fp
 800720c:	9e00      	ldr	r6, [sp, #0]
 800720e:	47b0      	blx	r6
 8007210:	f8da 3000 	ldr.w	r3, [sl]
 8007214:	6821      	ldr	r1, [r4, #0]
 8007216:	1d1a      	adds	r2, r3, #4
 8007218:	f8ca 2000 	str.w	r2, [sl]
 800721c:	f011 0f20 	tst.w	r1, #32
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	d010      	beq.n	8007246 <_scanf_i+0x1ce>
 8007224:	6018      	str	r0, [r3, #0]
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	60e3      	str	r3, [r4, #12]
 800722c:	2000      	movs	r0, #0
 800722e:	eba5 0509 	sub.w	r5, r5, r9
 8007232:	44a8      	add	r8, r5
 8007234:	6925      	ldr	r5, [r4, #16]
 8007236:	4445      	add	r5, r8
 8007238:	6125      	str	r5, [r4, #16]
 800723a:	b007      	add	sp, #28
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	f04f 0800 	mov.w	r8, #0
 8007244:	e7ca      	b.n	80071dc <_scanf_i+0x164>
 8007246:	07ca      	lsls	r2, r1, #31
 8007248:	bf4c      	ite	mi
 800724a:	8018      	strhmi	r0, [r3, #0]
 800724c:	6018      	strpl	r0, [r3, #0]
 800724e:	e7ea      	b.n	8007226 <_scanf_i+0x1ae>
 8007250:	2001      	movs	r0, #1
 8007252:	e7f2      	b.n	800723a <_scanf_i+0x1c2>
 8007254:	08007670 	.word	0x08007670
 8007258:	080073bd 	.word	0x080073bd
 800725c:	08005ef9 	.word	0x08005ef9
 8007260:	08007b04 	.word	0x08007b04

08007264 <__sccl>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	780b      	ldrb	r3, [r1, #0]
 8007268:	1e44      	subs	r4, r0, #1
 800726a:	2b5e      	cmp	r3, #94	; 0x5e
 800726c:	bf13      	iteet	ne
 800726e:	1c4a      	addne	r2, r1, #1
 8007270:	1c8a      	addeq	r2, r1, #2
 8007272:	784b      	ldrbeq	r3, [r1, #1]
 8007274:	2100      	movne	r1, #0
 8007276:	bf08      	it	eq
 8007278:	2101      	moveq	r1, #1
 800727a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800727e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007282:	42ac      	cmp	r4, r5
 8007284:	d1fb      	bne.n	800727e <__sccl+0x1a>
 8007286:	b913      	cbnz	r3, 800728e <__sccl+0x2a>
 8007288:	3a01      	subs	r2, #1
 800728a:	4610      	mov	r0, r2
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	f081 0401 	eor.w	r4, r1, #1
 8007292:	54c4      	strb	r4, [r0, r3]
 8007294:	1c51      	adds	r1, r2, #1
 8007296:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800729a:	1e4e      	subs	r6, r1, #1
 800729c:	2d2d      	cmp	r5, #45	; 0x2d
 800729e:	460a      	mov	r2, r1
 80072a0:	d006      	beq.n	80072b0 <__sccl+0x4c>
 80072a2:	2d5d      	cmp	r5, #93	; 0x5d
 80072a4:	d0f1      	beq.n	800728a <__sccl+0x26>
 80072a6:	b90d      	cbnz	r5, 80072ac <__sccl+0x48>
 80072a8:	4632      	mov	r2, r6
 80072aa:	e7ee      	b.n	800728a <__sccl+0x26>
 80072ac:	462b      	mov	r3, r5
 80072ae:	e7f0      	b.n	8007292 <__sccl+0x2e>
 80072b0:	780e      	ldrb	r6, [r1, #0]
 80072b2:	2e5d      	cmp	r6, #93	; 0x5d
 80072b4:	d0fa      	beq.n	80072ac <__sccl+0x48>
 80072b6:	42b3      	cmp	r3, r6
 80072b8:	dcf8      	bgt.n	80072ac <__sccl+0x48>
 80072ba:	3301      	adds	r3, #1
 80072bc:	429e      	cmp	r6, r3
 80072be:	54c4      	strb	r4, [r0, r3]
 80072c0:	dcfb      	bgt.n	80072ba <__sccl+0x56>
 80072c2:	3102      	adds	r1, #2
 80072c4:	e7e7      	b.n	8007296 <__sccl+0x32>

080072c6 <_strtol_l.isra.0>:
 80072c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ca:	4680      	mov	r8, r0
 80072cc:	4689      	mov	r9, r1
 80072ce:	4692      	mov	sl, r2
 80072d0:	461e      	mov	r6, r3
 80072d2:	460f      	mov	r7, r1
 80072d4:	463d      	mov	r5, r7
 80072d6:	9808      	ldr	r0, [sp, #32]
 80072d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072dc:	f7ff f836 	bl	800634c <__locale_ctype_ptr_l>
 80072e0:	4420      	add	r0, r4
 80072e2:	7843      	ldrb	r3, [r0, #1]
 80072e4:	f013 0308 	ands.w	r3, r3, #8
 80072e8:	d132      	bne.n	8007350 <_strtol_l.isra.0+0x8a>
 80072ea:	2c2d      	cmp	r4, #45	; 0x2d
 80072ec:	d132      	bne.n	8007354 <_strtol_l.isra.0+0x8e>
 80072ee:	2201      	movs	r2, #1
 80072f0:	787c      	ldrb	r4, [r7, #1]
 80072f2:	1cbd      	adds	r5, r7, #2
 80072f4:	2e00      	cmp	r6, #0
 80072f6:	d05d      	beq.n	80073b4 <_strtol_l.isra.0+0xee>
 80072f8:	2e10      	cmp	r6, #16
 80072fa:	d109      	bne.n	8007310 <_strtol_l.isra.0+0x4a>
 80072fc:	2c30      	cmp	r4, #48	; 0x30
 80072fe:	d107      	bne.n	8007310 <_strtol_l.isra.0+0x4a>
 8007300:	782b      	ldrb	r3, [r5, #0]
 8007302:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007306:	2b58      	cmp	r3, #88	; 0x58
 8007308:	d14f      	bne.n	80073aa <_strtol_l.isra.0+0xe4>
 800730a:	2610      	movs	r6, #16
 800730c:	786c      	ldrb	r4, [r5, #1]
 800730e:	3502      	adds	r5, #2
 8007310:	2a00      	cmp	r2, #0
 8007312:	bf14      	ite	ne
 8007314:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007318:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800731c:	2700      	movs	r7, #0
 800731e:	fbb1 fcf6 	udiv	ip, r1, r6
 8007322:	4638      	mov	r0, r7
 8007324:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007328:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800732c:	2b09      	cmp	r3, #9
 800732e:	d817      	bhi.n	8007360 <_strtol_l.isra.0+0x9a>
 8007330:	461c      	mov	r4, r3
 8007332:	42a6      	cmp	r6, r4
 8007334:	dd23      	ble.n	800737e <_strtol_l.isra.0+0xb8>
 8007336:	1c7b      	adds	r3, r7, #1
 8007338:	d007      	beq.n	800734a <_strtol_l.isra.0+0x84>
 800733a:	4584      	cmp	ip, r0
 800733c:	d31c      	bcc.n	8007378 <_strtol_l.isra.0+0xb2>
 800733e:	d101      	bne.n	8007344 <_strtol_l.isra.0+0x7e>
 8007340:	45a6      	cmp	lr, r4
 8007342:	db19      	blt.n	8007378 <_strtol_l.isra.0+0xb2>
 8007344:	2701      	movs	r7, #1
 8007346:	fb00 4006 	mla	r0, r0, r6, r4
 800734a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800734e:	e7eb      	b.n	8007328 <_strtol_l.isra.0+0x62>
 8007350:	462f      	mov	r7, r5
 8007352:	e7bf      	b.n	80072d4 <_strtol_l.isra.0+0xe>
 8007354:	2c2b      	cmp	r4, #43	; 0x2b
 8007356:	bf04      	itt	eq
 8007358:	1cbd      	addeq	r5, r7, #2
 800735a:	787c      	ldrbeq	r4, [r7, #1]
 800735c:	461a      	mov	r2, r3
 800735e:	e7c9      	b.n	80072f4 <_strtol_l.isra.0+0x2e>
 8007360:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007364:	2b19      	cmp	r3, #25
 8007366:	d801      	bhi.n	800736c <_strtol_l.isra.0+0xa6>
 8007368:	3c37      	subs	r4, #55	; 0x37
 800736a:	e7e2      	b.n	8007332 <_strtol_l.isra.0+0x6c>
 800736c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007370:	2b19      	cmp	r3, #25
 8007372:	d804      	bhi.n	800737e <_strtol_l.isra.0+0xb8>
 8007374:	3c57      	subs	r4, #87	; 0x57
 8007376:	e7dc      	b.n	8007332 <_strtol_l.isra.0+0x6c>
 8007378:	f04f 37ff 	mov.w	r7, #4294967295
 800737c:	e7e5      	b.n	800734a <_strtol_l.isra.0+0x84>
 800737e:	1c7b      	adds	r3, r7, #1
 8007380:	d108      	bne.n	8007394 <_strtol_l.isra.0+0xce>
 8007382:	2322      	movs	r3, #34	; 0x22
 8007384:	4608      	mov	r0, r1
 8007386:	f8c8 3000 	str.w	r3, [r8]
 800738a:	f1ba 0f00 	cmp.w	sl, #0
 800738e:	d107      	bne.n	80073a0 <_strtol_l.isra.0+0xda>
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	b102      	cbz	r2, 8007398 <_strtol_l.isra.0+0xd2>
 8007396:	4240      	negs	r0, r0
 8007398:	f1ba 0f00 	cmp.w	sl, #0
 800739c:	d0f8      	beq.n	8007390 <_strtol_l.isra.0+0xca>
 800739e:	b10f      	cbz	r7, 80073a4 <_strtol_l.isra.0+0xde>
 80073a0:	f105 39ff 	add.w	r9, r5, #4294967295
 80073a4:	f8ca 9000 	str.w	r9, [sl]
 80073a8:	e7f2      	b.n	8007390 <_strtol_l.isra.0+0xca>
 80073aa:	2430      	movs	r4, #48	; 0x30
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	d1af      	bne.n	8007310 <_strtol_l.isra.0+0x4a>
 80073b0:	2608      	movs	r6, #8
 80073b2:	e7ad      	b.n	8007310 <_strtol_l.isra.0+0x4a>
 80073b4:	2c30      	cmp	r4, #48	; 0x30
 80073b6:	d0a3      	beq.n	8007300 <_strtol_l.isra.0+0x3a>
 80073b8:	260a      	movs	r6, #10
 80073ba:	e7a9      	b.n	8007310 <_strtol_l.isra.0+0x4a>

080073bc <_strtol_r>:
 80073bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073be:	4c06      	ldr	r4, [pc, #24]	; (80073d8 <_strtol_r+0x1c>)
 80073c0:	4d06      	ldr	r5, [pc, #24]	; (80073dc <_strtol_r+0x20>)
 80073c2:	6824      	ldr	r4, [r4, #0]
 80073c4:	6a24      	ldr	r4, [r4, #32]
 80073c6:	2c00      	cmp	r4, #0
 80073c8:	bf08      	it	eq
 80073ca:	462c      	moveq	r4, r5
 80073cc:	9400      	str	r4, [sp, #0]
 80073ce:	f7ff ff7a 	bl	80072c6 <_strtol_l.isra.0>
 80073d2:	b003      	add	sp, #12
 80073d4:	bd30      	pop	{r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	20000010 	.word	0x20000010
 80073dc:	200000d8 	.word	0x200000d8

080073e0 <__submore>:
 80073e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e4:	460c      	mov	r4, r1
 80073e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80073e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ec:	4299      	cmp	r1, r3
 80073ee:	d11b      	bne.n	8007428 <__submore+0x48>
 80073f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073f4:	f7fd ff24 	bl	8005240 <_malloc_r>
 80073f8:	b918      	cbnz	r0, 8007402 <__submore+0x22>
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007406:	63a3      	str	r3, [r4, #56]	; 0x38
 8007408:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800740c:	6360      	str	r0, [r4, #52]	; 0x34
 800740e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007412:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007416:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800741a:	7043      	strb	r3, [r0, #1]
 800741c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007420:	7003      	strb	r3, [r0, #0]
 8007422:	6020      	str	r0, [r4, #0]
 8007424:	2000      	movs	r0, #0
 8007426:	e7ea      	b.n	80073fe <__submore+0x1e>
 8007428:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800742a:	0077      	lsls	r7, r6, #1
 800742c:	463a      	mov	r2, r7
 800742e:	f7ff fbf0 	bl	8006c12 <_realloc_r>
 8007432:	4605      	mov	r5, r0
 8007434:	2800      	cmp	r0, #0
 8007436:	d0e0      	beq.n	80073fa <__submore+0x1a>
 8007438:	eb00 0806 	add.w	r8, r0, r6
 800743c:	4601      	mov	r1, r0
 800743e:	4632      	mov	r2, r6
 8007440:	4640      	mov	r0, r8
 8007442:	f7ff fbc2 	bl	8006bca <memcpy>
 8007446:	f8c4 8000 	str.w	r8, [r4]
 800744a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800744e:	e7e9      	b.n	8007424 <__submore+0x44>

08007450 <_malloc_usable_size_r>:
 8007450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007454:	1f18      	subs	r0, r3, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfbc      	itt	lt
 800745a:	580b      	ldrlt	r3, [r1, r0]
 800745c:	18c0      	addlt	r0, r0, r3
 800745e:	4770      	bx	lr

08007460 <_gettimeofday>:
 8007460:	2258      	movs	r2, #88	; 0x58
 8007462:	4b02      	ldr	r3, [pc, #8]	; (800746c <_gettimeofday+0xc>)
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	4770      	bx	lr
 800746c:	20000368 	.word	0x20000368

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	bf00      	nop
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
