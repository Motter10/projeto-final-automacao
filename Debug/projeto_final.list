
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007518  08007518  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007520  08007520  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08007528  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000244  0800776c  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800776c  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001080e  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ac5  00000000  00000000  00030a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  00033540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  000342e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a4ba  00000000  00000000  00034f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0fc  00000000  00000000  0004f3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f295  00000000  00000000  0005d4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec753  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  000ec7d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f0c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f0cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e88 	.word	0x08006e88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	08006e88 	.word	0x08006e88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <__aeabi_fmul>:
 8000950:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000954:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000958:	bf1e      	ittt	ne
 800095a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800095e:	ea92 0f0c 	teqne	r2, ip
 8000962:	ea93 0f0c 	teqne	r3, ip
 8000966:	d06f      	beq.n	8000a48 <__aeabi_fmul+0xf8>
 8000968:	441a      	add	r2, r3
 800096a:	ea80 0c01 	eor.w	ip, r0, r1
 800096e:	0240      	lsls	r0, r0, #9
 8000970:	bf18      	it	ne
 8000972:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000976:	d01e      	beq.n	80009b6 <__aeabi_fmul+0x66>
 8000978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800097c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000980:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000984:	fba0 3101 	umull	r3, r1, r0, r1
 8000988:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800098c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000990:	bf3e      	ittt	cc
 8000992:	0049      	lslcc	r1, r1, #1
 8000994:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	ea40 0001 	orr.w	r0, r0, r1
 800099e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009a2:	2afd      	cmp	r2, #253	; 0xfd
 80009a4:	d81d      	bhi.n	80009e2 <__aeabi_fmul+0x92>
 80009a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ae:	bf08      	it	eq
 80009b0:	f020 0001 	biceq.w	r0, r0, #1
 80009b4:	4770      	bx	lr
 80009b6:	f090 0f00 	teq	r0, #0
 80009ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009be:	bf08      	it	eq
 80009c0:	0249      	lsleq	r1, r1, #9
 80009c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009ca:	3a7f      	subs	r2, #127	; 0x7f
 80009cc:	bfc2      	ittt	gt
 80009ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009d6:	4770      	bxgt	lr
 80009d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	3a01      	subs	r2, #1
 80009e2:	dc5d      	bgt.n	8000aa0 <__aeabi_fmul+0x150>
 80009e4:	f112 0f19 	cmn.w	r2, #25
 80009e8:	bfdc      	itt	le
 80009ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009ee:	4770      	bxle	lr
 80009f0:	f1c2 0200 	rsb	r2, r2, #0
 80009f4:	0041      	lsls	r1, r0, #1
 80009f6:	fa21 f102 	lsr.w	r1, r1, r2
 80009fa:	f1c2 0220 	rsb	r2, r2, #32
 80009fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a06:	f140 0000 	adc.w	r0, r0, #0
 8000a0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a0e:	bf08      	it	eq
 8000a10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a14:	4770      	bx	lr
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fmul+0xce>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fmul+0xe6>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e78f      	b.n	8000968 <__aeabi_fmul+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	bf18      	it	ne
 8000a52:	ea93 0f0c 	teqne	r3, ip
 8000a56:	d00a      	beq.n	8000a6e <__aeabi_fmul+0x11e>
 8000a58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a5c:	bf18      	it	ne
 8000a5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a62:	d1d8      	bne.n	8000a16 <__aeabi_fmul+0xc6>
 8000a64:	ea80 0001 	eor.w	r0, r0, r1
 8000a68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f090 0f00 	teq	r0, #0
 8000a72:	bf17      	itett	ne
 8000a74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a78:	4608      	moveq	r0, r1
 8000a7a:	f091 0f00 	teqne	r1, #0
 8000a7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a82:	d014      	beq.n	8000aae <__aeabi_fmul+0x15e>
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	d101      	bne.n	8000a8e <__aeabi_fmul+0x13e>
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	d10f      	bne.n	8000aae <__aeabi_fmul+0x15e>
 8000a8e:	ea93 0f0c 	teq	r3, ip
 8000a92:	d103      	bne.n	8000a9c <__aeabi_fmul+0x14c>
 8000a94:	024b      	lsls	r3, r1, #9
 8000a96:	bf18      	it	ne
 8000a98:	4608      	movne	r0, r1
 8000a9a:	d108      	bne.n	8000aae <__aeabi_fmul+0x15e>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aac:	4770      	bx	lr
 8000aae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_fdiv>:
 8000ab8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000abc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ac6:	ea92 0f0c 	teqne	r2, ip
 8000aca:	ea93 0f0c 	teqne	r3, ip
 8000ace:	d069      	beq.n	8000ba4 <__aeabi_fdiv+0xec>
 8000ad0:	eba2 0203 	sub.w	r2, r2, r3
 8000ad4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ad8:	0249      	lsls	r1, r1, #9
 8000ada:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ade:	d037      	beq.n	8000b50 <__aeabi_fdiv+0x98>
 8000ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ae4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ae8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000aec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000af0:	428b      	cmp	r3, r1
 8000af2:	bf38      	it	cc
 8000af4:	005b      	lslcc	r3, r3, #1
 8000af6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000afa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000afe:	428b      	cmp	r3, r1
 8000b00:	bf24      	itt	cs
 8000b02:	1a5b      	subcs	r3, r3, r1
 8000b04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b0c:	bf24      	itt	cs
 8000b0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b1a:	bf24      	itt	cs
 8000b1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b28:	bf24      	itt	cs
 8000b2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	bf18      	it	ne
 8000b36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b3a:	d1e0      	bne.n	8000afe <__aeabi_fdiv+0x46>
 8000b3c:	2afd      	cmp	r2, #253	; 0xfd
 8000b3e:	f63f af50 	bhi.w	80009e2 <__aeabi_fmul+0x92>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b58:	327f      	adds	r2, #127	; 0x7f
 8000b5a:	bfc2      	ittt	gt
 8000b5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b64:	4770      	bxgt	lr
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	3a01      	subs	r2, #1
 8000b70:	e737      	b.n	80009e2 <__aeabi_fmul+0x92>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b7a:	bf02      	ittt	eq
 8000b7c:	0040      	lsleq	r0, r0, #1
 8000b7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b82:	3a01      	subeq	r2, #1
 8000b84:	d0f9      	beq.n	8000b7a <__aeabi_fdiv+0xc2>
 8000b86:	ea40 000c 	orr.w	r0, r0, ip
 8000b8a:	f093 0f00 	teq	r3, #0
 8000b8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b92:	bf02      	ittt	eq
 8000b94:	0049      	lsleq	r1, r1, #1
 8000b96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b9a:	3b01      	subeq	r3, #1
 8000b9c:	d0f9      	beq.n	8000b92 <__aeabi_fdiv+0xda>
 8000b9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ba2:	e795      	b.n	8000ad0 <__aeabi_fdiv+0x18>
 8000ba4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ba8:	ea92 0f0c 	teq	r2, ip
 8000bac:	d108      	bne.n	8000bc0 <__aeabi_fdiv+0x108>
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	f47f af7d 	bne.w	8000aae <__aeabi_fmul+0x15e>
 8000bb4:	ea93 0f0c 	teq	r3, ip
 8000bb8:	f47f af70 	bne.w	8000a9c <__aeabi_fmul+0x14c>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e776      	b.n	8000aae <__aeabi_fmul+0x15e>
 8000bc0:	ea93 0f0c 	teq	r3, ip
 8000bc4:	d104      	bne.n	8000bd0 <__aeabi_fdiv+0x118>
 8000bc6:	024b      	lsls	r3, r1, #9
 8000bc8:	f43f af4c 	beq.w	8000a64 <__aeabi_fmul+0x114>
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e76e      	b.n	8000aae <__aeabi_fmul+0x15e>
 8000bd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bd4:	bf18      	it	ne
 8000bd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bda:	d1ca      	bne.n	8000b72 <__aeabi_fdiv+0xba>
 8000bdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000be0:	f47f af5c 	bne.w	8000a9c <__aeabi_fmul+0x14c>
 8000be4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000be8:	f47f af3c 	bne.w	8000a64 <__aeabi_fmul+0x114>
 8000bec:	e75f      	b.n	8000aae <__aeabi_fmul+0x15e>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_f2uiz>:
 8000bf0:	0042      	lsls	r2, r0, #1
 8000bf2:	d20e      	bcs.n	8000c12 <__aeabi_f2uiz+0x22>
 8000bf4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf8:	d30b      	bcc.n	8000c12 <__aeabi_f2uiz+0x22>
 8000bfa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c02:	d409      	bmi.n	8000c18 <__aeabi_f2uiz+0x28>
 8000c04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr
 8000c18:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c1c:	d101      	bne.n	8000c22 <__aeabi_f2uiz+0x32>
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	d102      	bne.n	8000c28 <__aeabi_f2uiz+0x38>
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_ldivmod>:
 8000c30:	b97b      	cbnz	r3, 8000c52 <__aeabi_ldivmod+0x22>
 8000c32:	b972      	cbnz	r2, 8000c52 <__aeabi_ldivmod+0x22>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bfbe      	ittt	lt
 8000c38:	2000      	movlt	r0, #0
 8000c3a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c3e:	e006      	blt.n	8000c4e <__aeabi_ldivmod+0x1e>
 8000c40:	bf08      	it	eq
 8000c42:	2800      	cmpeq	r0, #0
 8000c44:	bf1c      	itt	ne
 8000c46:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c4a:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4e:	f000 b9a7 	b.w	8000fa0 <__aeabi_idiv0>
 8000c52:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c56:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	db09      	blt.n	8000c72 <__aeabi_ldivmod+0x42>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db1a      	blt.n	8000c98 <__aeabi_ldivmod+0x68>
 8000c62:	f000 f835 	bl	8000cd0 <__udivmoddi4>
 8000c66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6e:	b004      	add	sp, #16
 8000c70:	4770      	bx	lr
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db1b      	blt.n	8000cb4 <__aeabi_ldivmod+0x84>
 8000c7c:	f000 f828 	bl	8000cd0 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr
 8000c98:	4252      	negs	r2, r2
 8000c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9e:	f000 f817 	bl	8000cd0 <__udivmoddi4>
 8000ca2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000caa:	b004      	add	sp, #16
 8000cac:	4240      	negs	r0, r0
 8000cae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f809 	bl	8000cd0 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d14b      	bne.n	8000d76 <__udivmoddi4+0xa6>
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	4615      	mov	r5, r2
 8000ce2:	d967      	bls.n	8000db4 <__udivmoddi4+0xe4>
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	b14a      	cbz	r2, 8000cfe <__udivmoddi4+0x2e>
 8000cea:	f1c2 0720 	rsb	r7, r2, #32
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf6:	4095      	lsls	r5, r2
 8000cf8:	ea47 0c03 	orr.w	ip, r7, r3
 8000cfc:	4094      	lsls	r4, r2
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	fbbc f7fe 	udiv	r7, ip, lr
 8000d06:	fa1f f885 	uxth.w	r8, r5
 8000d0a:	fb0e c317 	mls	r3, lr, r7, ip
 8000d0e:	fb07 f908 	mul.w	r9, r7, r8
 8000d12:	0c21      	lsrs	r1, r4, #16
 8000d14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d18:	4599      	cmp	r9, r3
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x60>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000d22:	f080 811c 	bcs.w	8000f5e <__udivmoddi4+0x28e>
 8000d26:	4599      	cmp	r9, r3
 8000d28:	f240 8119 	bls.w	8000f5e <__udivmoddi4+0x28e>
 8000d2c:	3f02      	subs	r7, #2
 8000d2e:	442b      	add	r3, r5
 8000d30:	eba3 0309 	sub.w	r3, r3, r9
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	fb00 f108 	mul.w	r1, r0, r8
 8000d40:	b2a4      	uxth	r4, r4
 8000d42:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d46:	42a1      	cmp	r1, r4
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0x8e>
 8000d4a:	192c      	adds	r4, r5, r4
 8000d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d50:	f080 8107 	bcs.w	8000f62 <__udivmoddi4+0x292>
 8000d54:	42a1      	cmp	r1, r4
 8000d56:	f240 8104 	bls.w	8000f62 <__udivmoddi4+0x292>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	442c      	add	r4, r5
 8000d5e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d62:	2700      	movs	r7, #0
 8000d64:	1a64      	subs	r4, r4, r1
 8000d66:	b11e      	cbz	r6, 8000d70 <__udivmoddi4+0xa0>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	40d4      	lsrs	r4, r2
 8000d6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0xbe>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	f000 80ec 	beq.w	8000f58 <__udivmoddi4+0x288>
 8000d80:	2700      	movs	r7, #0
 8000d82:	e9c6 0100 	strd	r0, r1, [r6]
 8000d86:	4638      	mov	r0, r7
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f783 	clz	r7, r3
 8000d92:	2f00      	cmp	r7, #0
 8000d94:	d148      	bne.n	8000e28 <__udivmoddi4+0x158>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xd0>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80fb 	bhi.w	8000f96 <__udivmoddi4+0x2c6>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0303 	sbc.w	r3, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	469c      	mov	ip, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d0e0      	beq.n	8000d70 <__udivmoddi4+0xa0>
 8000dae:	e9c6 4c00 	strd	r4, ip, [r6]
 8000db2:	e7dd      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000db4:	b902      	cbnz	r2, 8000db8 <__udivmoddi4+0xe8>
 8000db6:	deff      	udf	#255	; 0xff
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	f040 808f 	bne.w	8000ee0 <__udivmoddi4+0x210>
 8000dc2:	2701      	movs	r7, #1
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000dca:	fa1f f985 	uxth.w	r9, r5
 8000dce:	fbb1 fef8 	udiv	lr, r1, r8
 8000dd2:	fb08 111e 	mls	r1, r8, lr, r1
 8000dd6:	fb09 f00e 	mul.w	r0, r9, lr
 8000dda:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000dde:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x126>
 8000de6:	18eb      	adds	r3, r5, r3
 8000de8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x124>
 8000dee:	4298      	cmp	r0, r3
 8000df0:	f200 80cd 	bhi.w	8000f8e <__udivmoddi4+0x2be>
 8000df4:	468e      	mov	lr, r1
 8000df6:	1a1b      	subs	r3, r3, r0
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000e00:	fb09 f900 	mul.w	r9, r9, r0
 8000e04:	b2a4      	uxth	r4, r4
 8000e06:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0a:	45a1      	cmp	r9, r4
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x14e>
 8000e0e:	192c      	adds	r4, r5, r4
 8000e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x14c>
 8000e16:	45a1      	cmp	r9, r4
 8000e18:	f200 80b6 	bhi.w	8000f88 <__udivmoddi4+0x2b8>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e26:	e79e      	b.n	8000d66 <__udivmoddi4+0x96>
 8000e28:	f1c7 0520 	rsb	r5, r7, #32
 8000e2c:	40bb      	lsls	r3, r7
 8000e2e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa21 f405 	lsr.w	r4, r1, r5
 8000e3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e42:	fa1f f88c 	uxth.w	r8, ip
 8000e46:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e4a:	fa20 f305 	lsr.w	r3, r0, r5
 8000e4e:	40b9      	lsls	r1, r7
 8000e50:	fb09 fa08 	mul.w	sl, r9, r8
 8000e54:	4319      	orrs	r1, r3
 8000e56:	0c0b      	lsrs	r3, r1, #16
 8000e58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000e62:	fa00 f307 	lsl.w	r3, r0, r7
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b0>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2b4>
 8000e74:	45a2      	cmp	sl, r4
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2b4>
 8000e7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7e:	4464      	add	r4, ip
 8000e80:	eba4 040a 	sub.w	r4, r4, sl
 8000e84:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e88:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e8c:	fb00 fa08 	mul.w	sl, r0, r8
 8000e90:	b289      	uxth	r1, r1
 8000e92:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e96:	45a2      	cmp	sl, r4
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x1dc>
 8000e9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	d26b      	bcs.n	8000f7c <__udivmoddi4+0x2ac>
 8000ea4:	45a2      	cmp	sl, r4
 8000ea6:	d969      	bls.n	8000f7c <__udivmoddi4+0x2ac>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4464      	add	r4, ip
 8000eac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb0:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb4:	eba4 040a 	sub.w	r4, r4, sl
 8000eb8:	454c      	cmp	r4, r9
 8000eba:	4641      	mov	r1, r8
 8000ebc:	46ce      	mov	lr, r9
 8000ebe:	d354      	bcc.n	8000f6a <__udivmoddi4+0x29a>
 8000ec0:	d051      	beq.n	8000f66 <__udivmoddi4+0x296>
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d069      	beq.n	8000f9a <__udivmoddi4+0x2ca>
 8000ec6:	1a5a      	subs	r2, r3, r1
 8000ec8:	eb64 040e 	sbc.w	r4, r4, lr
 8000ecc:	fa04 f505 	lsl.w	r5, r4, r5
 8000ed0:	fa22 f307 	lsr.w	r3, r2, r7
 8000ed4:	40fc      	lsrs	r4, r7
 8000ed6:	431d      	orrs	r5, r3
 8000ed8:	e9c6 5400 	strd	r5, r4, [r6]
 8000edc:	2700      	movs	r7, #0
 8000ede:	e747      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	fa21 f003 	lsr.w	r0, r1, r3
 8000eea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000eee:	fbb0 f7f8 	udiv	r7, r0, r8
 8000ef2:	fa1f f985 	uxth.w	r9, r5
 8000ef6:	fb08 0017 	mls	r0, r8, r7, r0
 8000efa:	fa24 f303 	lsr.w	r3, r4, r3
 8000efe:	4091      	lsls	r1, r2
 8000f00:	fb07 fc09 	mul.w	ip, r7, r9
 8000f04:	430b      	orrs	r3, r1
 8000f06:	0c19      	lsrs	r1, r3, #16
 8000f08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f0c:	458c      	cmp	ip, r1
 8000f0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f12:	d907      	bls.n	8000f24 <__udivmoddi4+0x254>
 8000f14:	1869      	adds	r1, r5, r1
 8000f16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f1a:	d231      	bcs.n	8000f80 <__udivmoddi4+0x2b0>
 8000f1c:	458c      	cmp	ip, r1
 8000f1e:	d92f      	bls.n	8000f80 <__udivmoddi4+0x2b0>
 8000f20:	3f02      	subs	r7, #2
 8000f22:	4429      	add	r1, r5
 8000f24:	eba1 010c 	sub.w	r1, r1, ip
 8000f28:	fbb1 f0f8 	udiv	r0, r1, r8
 8000f2c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000f30:	fb00 fe09 	mul.w	lr, r0, r9
 8000f34:	b299      	uxth	r1, r3
 8000f36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f3a:	458e      	cmp	lr, r1
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x27e>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f44:	d218      	bcs.n	8000f78 <__udivmoddi4+0x2a8>
 8000f46:	458e      	cmp	lr, r1
 8000f48:	d916      	bls.n	8000f78 <__udivmoddi4+0x2a8>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f56:	e73a      	b.n	8000dce <__udivmoddi4+0xfe>
 8000f58:	4637      	mov	r7, r6
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e708      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000f5e:	460f      	mov	r7, r1
 8000f60:	e6e6      	b.n	8000d30 <__udivmoddi4+0x60>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6fb      	b.n	8000d5e <__udivmoddi4+0x8e>
 8000f66:	4543      	cmp	r3, r8
 8000f68:	d2ab      	bcs.n	8000ec2 <__udivmoddi4+0x1f2>
 8000f6a:	ebb8 0102 	subs.w	r1, r8, r2
 8000f6e:	eb69 020c 	sbc.w	r2, r9, ip
 8000f72:	3801      	subs	r0, #1
 8000f74:	4696      	mov	lr, r2
 8000f76:	e7a4      	b.n	8000ec2 <__udivmoddi4+0x1f2>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e7e8      	b.n	8000f4e <__udivmoddi4+0x27e>
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	e795      	b.n	8000eac <__udivmoddi4+0x1dc>
 8000f80:	4607      	mov	r7, r0
 8000f82:	e7cf      	b.n	8000f24 <__udivmoddi4+0x254>
 8000f84:	4681      	mov	r9, r0
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	442c      	add	r4, r5
 8000f8c:	e747      	b.n	8000e1e <__udivmoddi4+0x14e>
 8000f8e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f92:	442b      	add	r3, r5
 8000f94:	e72f      	b.n	8000df6 <__udivmoddi4+0x126>
 8000f96:	4638      	mov	r0, r7
 8000f98:	e707      	b.n	8000daa <__udivmoddi4+0xda>
 8000f9a:	4637      	mov	r7, r6
 8000f9c:	e6e8      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <ADC_Init>:

uint32_t adc_data[NUMBER_OF_CONVERSTION];
uint8_t  adc_data_ready = 0;

void ADC_Init(ADC_HandleTypeDef hadc1)
{
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	f107 0c08 	add.w	ip, r7, #8
 8000fae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//calibração do ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000fb2:	f107 0008 	add.w	r0, r7, #8
 8000fb6:	f001 fc8d 	bl	80028d4 <HAL_ADCEx_Calibration_Start>
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc2:	b004      	add	sp, #16
 8000fc4:	4770      	bx	lr
	...

08000fc8 <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef hadc1, ADC_CHANNEL_Id channel_id)
{
 8000fc8:	b084      	sub	sp, #16
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	f107 0c08 	add.w	ip, r7, #8
 8000fd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	adc_data_ready = 0;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <ADC_GetValue+0x40>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc_data, NUMBER_OF_CONVERSTION);
 8000fdc:	2202      	movs	r2, #2
 8000fde:	490b      	ldr	r1, [pc, #44]	; (800100c <ADC_GetValue+0x44>)
 8000fe0:	f107 0008 	add.w	r0, r7, #8
 8000fe4:	f001 f99c 	bl	8002320 <HAL_ADC_Start_DMA>

	HAL_ADC_Stop(&hadc1);
 8000fe8:	f107 0008 	add.w	r0, r7, #8
 8000fec:	f001 f96c 	bl	80022c8 <HAL_ADC_Stop>

//	while(!adc_data_ready);

	return adc_data[channel_id];
 8000ff0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <ADC_GetValue+0x44>)
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001002:	b004      	add	sp, #16
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000260 	.word	0x20000260
 800100c:	20000298 	.word	0x20000298

08001010 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	adc_data_ready = 1;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_ADC_ConvCpltCallback+0x18>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	20000260 	.word	0x20000260

0800102c <LCD_Send>:
 *
 * Aciona pino enable, espera 15ms, desaciona pino enable
 *
 * @retval Nenhum
 */
void LCD_Send() {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_PINS, EN, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <LCD_Send+0x28>)
 8001038:	f002 f955 	bl	80032e6 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 800103c:	200f      	movs	r0, #15
 800103e:	f001 f849 	bl	80020d4 <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_PINS, EN, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <LCD_Send+0x28>)
 800104a:	f002 f94c 	bl	80032e6 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010c00 	.word	0x40010c00

08001058 <LCD_Write>:
 *
 * @retval Nenhum
 * @param[in] data byte a ser enviado
 * @param[in] is_data 1 se for dado, 0 se for instrução
 */
void LCD_Write(uint8_t data, bool is_data) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CTRL_PINS, RS, is_data);  //instrução / data
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	461a      	mov	r2, r3
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	4825      	ldr	r0, [pc, #148]	; (8001108 <LCD_Write+0xb0>)
 8001072:	f002 f938 	bl	80032e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_PINS, RW, 0);		//escrita
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <LCD_Write+0xb0>)
 800107e:	f002 f932 	bl	80032e6 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e017      	b.n	80010b8 <LCD_Write+0x60>
			{
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	b299      	uxth	r1, r3
				data & (1 << (i + 4)));
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	3304      	adds	r3, #4
 8001098:	2201      	movs	r2, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <LCD_Write+0xb0>)
 80010ae:	f002 f91a 	bl	80032e6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d9e4      	bls.n	8001088 <LCD_Write+0x30>
		//00100111
	}

	LCD_Send();
 80010be:	f7ff ffb5 	bl	800102c <LCD_Send>

	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80010c2:	2300      	movs	r3, #0
 80010c4:	73bb      	strb	r3, [r7, #14]
 80010c6:	e016      	b.n	80010f6 <LCD_Write+0x9e>
			{
		HAL_GPIO_WritePin(DATA_PINS, (uint16_t) FRST_PIN << i, data & (1 << i));
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	b299      	uxth	r1, r3
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	4013      	ands	r3, r2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <LCD_Write+0xb0>)
 80010ec:	f002 f8fb 	bl	80032e6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	3301      	adds	r3, #1
 80010f4:	73bb      	strb	r3, [r7, #14]
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d9e5      	bls.n	80010c8 <LCD_Write+0x70>
	}

	LCD_Send();
 80010fc:	f7ff ff96 	bl	800102c <LCD_Send>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010c00 	.word	0x40010c00

0800110c <LCD_Write_Buffer>:
 *
 *
 * @retval Nenhum
 * @param[in] *data string a ser enviado
 */
void LCD_Write_Buffer(uint8_t *data) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e069      	b.n	80011ee <LCD_Write_Buffer+0xe2>
		if(i == 17)
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	2b11      	cmp	r3, #17
 800111e:	d103      	bne.n	8001128 <LCD_Write_Buffer+0x1c>
		{
			LCD_Write(0xC0, 0);
 8001120:	2100      	movs	r1, #0
 8001122:	20c0      	movs	r0, #192	; 0xc0
 8001124:	f7ff ff98 	bl	8001058 <LCD_Write>
		}
		//caracter espciais
		switch (*data) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2bc3      	cmp	r3, #195	; 0xc3
 800112e:	d152      	bne.n	80011d6 <LCD_Write_Buffer+0xca>
			case 195:
				data++;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
				switch (*data) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3ba1      	subs	r3, #161	; 0xa1
 800113c:	2b14      	cmp	r3, #20
 800113e:	d846      	bhi.n	80011ce <LCD_Write_Buffer+0xc2>
 8001140:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <LCD_Write_Buffer+0x3c>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	0800119d 	.word	0x0800119d
 800114c:	080011cf 	.word	0x080011cf
 8001150:	080011bb 	.word	0x080011bb
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011cf 	.word	0x080011cf
 800115c:	080011cf 	.word	0x080011cf
 8001160:	080011b1 	.word	0x080011b1
 8001164:	080011cf 	.word	0x080011cf
 8001168:	080011a7 	.word	0x080011a7
 800116c:	080011cf 	.word	0x080011cf
 8001170:	080011cf 	.word	0x080011cf
 8001174:	080011cf 	.word	0x080011cf
 8001178:	080011cf 	.word	0x080011cf
 800117c:	080011cf 	.word	0x080011cf
 8001180:	080011cf 	.word	0x080011cf
 8001184:	080011cf 	.word	0x080011cf
 8001188:	080011cf 	.word	0x080011cf
 800118c:	080011cf 	.word	0x080011cf
 8001190:	080011cf 	.word	0x080011cf
 8001194:	080011cf 	.word	0x080011cf
 8001198:	080011c5 	.word	0x080011c5
					case 161:
						LCD_Write(0, 1);
 800119c:	2101      	movs	r1, #1
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff ff5a 	bl	8001058 <LCD_Write>
						break;
 80011a4:	e013      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 169:
						LCD_Write(1, 1);
 80011a6:	2101      	movs	r1, #1
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ff55 	bl	8001058 <LCD_Write>
						break;
 80011ae:	e00e      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 167:
						LCD_Write(2, 1);
 80011b0:	2101      	movs	r1, #1
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff ff50 	bl	8001058 <LCD_Write>
						break;
 80011b8:	e009      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 163:
						LCD_Write(3, 1);
 80011ba:	2101      	movs	r1, #1
 80011bc:	2003      	movs	r0, #3
 80011be:	f7ff ff4b 	bl	8001058 <LCD_Write>
						break;
 80011c2:	e004      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 181:
						LCD_Write(4, 1);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2004      	movs	r0, #4
 80011c8:	f7ff ff46 	bl	8001058 <LCD_Write>
						break;
 80011cc:	bf00      	nop
				}
				data++;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
				break;
 80011d4:	e008      	b.n	80011e8 <LCD_Write_Buffer+0xdc>
			default:
				LCD_Write(*data++, 1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2101      	movs	r1, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff39 	bl	8001058 <LCD_Write>
				break;
 80011e6:	bf00      	nop
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3301      	adds	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d390      	bcc.n	800111a <LCD_Write_Buffer+0xe>
		}
	}
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LCD_Clear>:
/**
 * @brief limpa display e retorna cursor para primeira linha
 *
 * @retval Nenhum
 */
void LCD_Clear(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	LCD_Write(0x01, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff ff26 	bl	8001058 <LCD_Write>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <LCD_Seccond_Line>:
 * @brief Desloca o cursor para a posição inicial da segunda linha
 *
 * @retval Nenhum
 */
void LCD_Seccond_Line()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	LCD_Write(0xC0, 0);
 8001214:	2100      	movs	r1, #0
 8001216:	20c0      	movs	r0, #192	; 0xc0
 8001218:	f7ff ff1e 	bl	8001058 <LCD_Write>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <LCD_Create_Custom_Char>:
 *
 * @retval Nenhum
 * @param[in] loc localização para escrever o caracter
 * @param[in] *c ponteiro para o vetor de 8 bytes do caracter
 */
void LCD_Create_Custom_Char(uint8_t loc, uint8_t *c) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	if (loc < 8) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d819      	bhi.n	8001266 <LCD_Create_Custom_Char+0x46>
		LCD_Write(0x40 + (loc * 8), 0); /* aponta para 0x40 + loc * 8 */
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3308      	adds	r3, #8
 8001236:	b2db      	uxtb	r3, r3
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff0a 	bl	8001058 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e00a      	b.n	8001260 <LCD_Create_Custom_Char+0x40>
			LCD_Write(c[i], 1);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff feff 	bl	8001058 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b07      	cmp	r3, #7
 8001264:	d9f1      	bls.n	800124a <LCD_Create_Custom_Char+0x2a>
	}
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <LCD_Init_Custom_Characters>:
 *
 *	Define vetor de caracteres customizados e escreve na CGRAM
 *
 * @retval Nenhum
 */
void LCD_Init_Custom_Characters() {
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
	uint8_t character1[8] = { 0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 8001276:	4a21      	ldr	r2, [pc, #132]	; (80012fc <LCD_Init_Custom_Characters+0x8c>)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001280:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character2[8] = { 0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,
 8001284:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <LCD_Init_Custom_Characters+0x90>)
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128e:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character3[8] = { 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x04,
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <LCD_Init_Custom_Characters+0x94>)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character4[8] = { 0x1F, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <LCD_Init_Custom_Characters+0x98>)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012aa:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character5[8] = { 0x1F, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <LCD_Init_Custom_Characters+0x9c>)
 80012b0:	463b      	mov	r3, r7
 80012b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b6:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	LCD_Create_Custom_Char(0, character1);
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4619      	mov	r1, r3
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff ffad 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(1, character2);
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4619      	mov	r1, r3
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ffa7 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(2, character3);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff ffa1 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(3, character4);
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	2003      	movs	r0, #3
 80012e6:	f7ff ff9b 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(4, character5);
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	2004      	movs	r0, #4
 80012f0:	f7ff ff96 	bl	8001220 <LCD_Create_Custom_Char>
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08006ea4 	.word	0x08006ea4
 8001300:	08006eac 	.word	0x08006eac
 8001304:	08006eb4 	.word	0x08006eb4
 8001308:	08006ebc 	.word	0x08006ebc
 800130c:	08006ec4 	.word	0x08006ec4

08001310 <LCD_Init>:
 *	Escreve deslocando a mensagem para a esquerda
 *	Inicializa caracteres especiais
 *
 * @retval Nenhum
 */
void LCD_Init() {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8001314:	200f      	movs	r0, #15
 8001316:	f000 fedd 	bl	80020d4 <HAL_Delay>
	LCD_Write(0x03, 0); // 1
 800131a:	2100      	movs	r1, #0
 800131c:	2003      	movs	r0, #3
 800131e:	f7ff fe9b 	bl	8001058 <LCD_Write>
	LCD_Write(0x03, 0); // 2
 8001322:	2100      	movs	r1, #0
 8001324:	2003      	movs	r0, #3
 8001326:	f7ff fe97 	bl	8001058 <LCD_Write>
	LCD_Write(0x03, 0); // 3
 800132a:	2100      	movs	r1, #0
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fe93 	bl	8001058 <LCD_Write>
	LCD_Write(0x02, 0); // 4
 8001332:	2100      	movs	r1, #0
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fe8f 	bl	8001058 <LCD_Write>
	LCD_Write(0x02, 0); // 5
 800133a:	2100      	movs	r1, #0
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fe8b 	bl	8001058 <LCD_Write>
	LCD_Write(0x08, 0); // 6
 8001342:	2100      	movs	r1, #0
 8001344:	2008      	movs	r0, #8
 8001346:	f7ff fe87 	bl	8001058 <LCD_Write>
	LCD_Write(0x00, 0); // 7
 800134a:	2100      	movs	r1, #0
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fe83 	bl	8001058 <LCD_Write>
	LCD_Write(0x08, 0); // 8
 8001352:	2100      	movs	r1, #0
 8001354:	2008      	movs	r0, #8
 8001356:	f7ff fe7f 	bl	8001058 <LCD_Write>
	LCD_Write(0x00, 0); // 9
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fe7b 	bl	8001058 <LCD_Write>
	LCD_Write(0x01, 0); // 10
 8001362:	2100      	movs	r1, #0
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fe77 	bl	8001058 <LCD_Write>
	LCD_Write(0x00, 0); // 11
 800136a:	2100      	movs	r1, #0
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fe73 	bl	8001058 <LCD_Write>
	LCD_Write(0x01, 0); // 12
 8001372:	2100      	movs	r1, #0
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fe6f 	bl	8001058 <LCD_Write>

	LCD_Write(0x28, 0); //2 linhas 5x7 (4 bits)
 800137a:	2100      	movs	r1, #0
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f7ff fe6b 	bl	8001058 <LCD_Write>
	LCD_Write(0x0E, 0); //Display aceso c/ cursor fixo
 8001382:	2100      	movs	r1, #0
 8001384:	200e      	movs	r0, #14
 8001386:	f7ff fe67 	bl	8001058 <LCD_Write>
	LCD_Write(0x06, 0); //Escreve deslocando a mensagem para a esquerda
 800138a:	2100      	movs	r1, #0
 800138c:	2006      	movs	r0, #6
 800138e:	f7ff fe63 	bl	8001058 <LCD_Write>

	LCD_Init_Custom_Characters();
 8001392:	f7ff ff6d 	bl	8001270 <LCD_Init_Custom_Characters>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <PWM_Increase>:
//		  duty_cycle -= 1;
//		  HAL_Delay(0);
//	  }

void PWM_Increase(PWM_TypeDef pwm_data)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	463b      	mov	r3, r7
 80013a4:	e883 0003 	stmia.w	r3, {r0, r1}
	//converte de porcentagem para valor
	uint32_t duty_value = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	490f      	ldr	r1, [pc, #60]	; (80013e8 <PWM_Increase+0x4c>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff facf 	bl	8000950 <__aeabi_fmul>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fc1b 	bl	8000bf0 <__aeabi_f2uiz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	60fb      	str	r3, [r7, #12]

	while(duty_value < MAX_DUTY_CYCLE_VALUE)
 80013be:	e009      	b.n	80013d4 <PWM_Increase+0x38>
	{
		//Como identificar canal?
	  TIM2->CCR1 = duty_value;
 80013c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6353      	str	r3, [r2, #52]	; 0x34
	  duty_value += 1;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 fe80 	bl	80020d4 <HAL_Delay>
	while(duty_value < MAX_DUTY_CYCLE_VALUE)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f640 2269 	movw	r2, #2665	; 0xa69
 80013da:	4293      	cmp	r3, r2
 80013dc:	d9f0      	bls.n	80013c0 <PWM_Increase+0x24>
	}
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	4526a000 	.word	0x4526a000

080013ec <CAPSULE_Verify_Insertion>:
 */

#include "capsule.h"

CAPSULE_Recipe_TypeDef CAPSULE_Verify_Insertion()
{
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b0bc      	sub	sp, #240	; 0xf0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	uint8_t bit_0 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_0);
 80013f4:	2108      	movs	r1, #8
 80013f6:	4861      	ldr	r0, [pc, #388]	; (800157c <CAPSULE_Verify_Insertion+0x190>)
 80013f8:	f001 ff5e 	bl	80032b8 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t bit_1 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_1);
 8001402:	2110      	movs	r1, #16
 8001404:	485d      	ldr	r0, [pc, #372]	; (800157c <CAPSULE_Verify_Insertion+0x190>)
 8001406:	f001 ff57 	bl	80032b8 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	uint8_t bit_2 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_2);
 8001410:	2120      	movs	r1, #32
 8001412:	485a      	ldr	r0, [pc, #360]	; (800157c <CAPSULE_Verify_Insertion+0x190>)
 8001414:	f001 ff50 	bl	80032b8 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	//monta número que identifica capsula
	CAPSULE_Type capsule_type = bit_0 | (bit_1 << 1) | (bit_2 << 2);
 800141e:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	b25a      	sxtb	r2, r3
 8001426:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 800142a:	4313      	orrs	r3, r2
 800142c:	b25a      	sxtb	r2, r3
 800142e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	b25b      	sxtb	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b25b      	sxtb	r3, r3
 800143a:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

	CAPSULE_Recipe_TypeDef recipe;

	//inicializa receitas
	RECIPE_NONE_CAPSULE_TYPE_DATA(recipe_none);
 800143e:	4b50      	ldr	r3, [pc, #320]	; (8001580 <CAPSULE_Verify_Insertion+0x194>)
 8001440:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001444:	461d      	mov	r5, r3
 8001446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800144e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_WATER_DATA(recipe_water);
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <CAPSULE_Verify_Insertion+0x198>)
 8001454:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001458:	461d      	mov	r5, r3
 800145a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SPARKLINK_WATER_DATA(recipe_sparklink_water);
 8001466:	4b48      	ldr	r3, [pc, #288]	; (8001588 <CAPSULE_Verify_Insertion+0x19c>)
 8001468:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800146c:	461d      	mov	r5, r3
 800146e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001472:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_ICE_TEA_DATA(recipe_ice_tea);
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <CAPSULE_Verify_Insertion+0x1a0>)
 800147c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001480:	461d      	mov	r5, r3
 8001482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001486:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800148a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_HOT_TEA_DATA(recipe_hot_tea);
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <CAPSULE_Verify_Insertion+0x1a4>)
 8001490:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001494:	461d      	mov	r5, r3
 8001496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800149e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SODA_DATA(recipe_soda);
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <CAPSULE_Verify_Insertion+0x1a8>)
 80014a4:	f107 040c 	add.w	r4, r7, #12
 80014a8:	461d      	mov	r5, r3
 80014aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (capsule_type) {
 80014b6:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d850      	bhi.n	8001560 <CAPSULE_Verify_Insertion+0x174>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <CAPSULE_Verify_Insertion+0xd8>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014dd 	.word	0x080014dd
 80014c8:	080014f3 	.word	0x080014f3
 80014cc:	08001509 	.word	0x08001509
 80014d0:	0800151f 	.word	0x0800151f
 80014d4:	08001535 	.word	0x08001535
 80014d8:	0800154b 	.word	0x0800154b
		case NONE_CAPSULE_TYPE:
			return recipe_none;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	461d      	mov	r5, r3
 80014e0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80014f0:	e040      	b.n	8001574 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_WATER:
				return recipe_water;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	461d      	mov	r5, r3
 80014f6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001502:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001506:	e035      	b.n	8001574 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SPARKLINK_WATER:
			return recipe_sparklink_water;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	461d      	mov	r5, r3
 800150c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001518:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800151c:	e02a      	b.n	8001574 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_ICE_TEA:
				return recipe_ice_tea;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	461d      	mov	r5, r3
 8001522:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800152e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001532:	e01f      	b.n	8001574 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_HOT_TEA:
				return recipe_hot_tea;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	461d      	mov	r5, r3
 8001538:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001544:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001548:	e014      	b.n	8001574 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SODA:
				return recipe_soda;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	461d      	mov	r5, r3
 800154e:	f107 040c 	add.w	r4, r7, #12
 8001552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001556:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800155a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800155e:	e009      	b.n	8001574 <CAPSULE_Verify_Insertion+0x188>
				break;
		default:
			return recipe_none;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	461d      	mov	r5, r3
 8001564:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001570:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			break;
	}

}
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	37f0      	adds	r7, #240	; 0xf0
 8001578:	46bd      	mov	sp, r7
 800157a:	bdb0      	pop	{r4, r5, r7, pc}
 800157c:	40010c00 	.word	0x40010c00
 8001580:	08006ecc 	.word	0x08006ecc
 8001584:	08006eec 	.word	0x08006eec
 8001588:	08006f0c 	.word	0x08006f0c
 800158c:	08006f2c 	.word	0x08006f2c
 8001590:	08006f4c 	.word	0x08006f4c
 8001594:	08006f6c 	.word	0x08006f6c

08001598 <CONTROLLER_Get_IsReady>:
 */

#include "controller.h"

void CONTROLLER_Get_IsReady(ADC_HandleTypeDef hadc, CAPSULE_Recipe_TypeDef capsule)
{
 8001598:	b084      	sub	sp, #16
 800159a:	b5b0      	push	{r4, r5, r7, lr}
 800159c:	b094      	sub	sp, #80	; 0x50
 800159e:	af0a      	add	r7, sp, #40	; 0x28
 80015a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int32_t sensor_signal = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
	uint32_t sensor_temp = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
	uint32_t error_signal = 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ref_sinal = capsule.water_temp;
 80015b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015b8:	617b      	str	r3, [r7, #20]
	ADC_CHANNEL_Id sensor_channel_id;

	LCD_Clear();
 80015ba:	f7ff fe21 	bl	8001200 <LCD_Clear>

	switch (capsule.water_type) {
 80015be:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d000      	beq.n	80015c8 <CONTROLLER_Get_IsReady+0x30>
//			PWM_CP1_DATA(CP1);
//			//aciona CP1, compressor de refrigeração
//			PWM_Increase(CP1);
//			break;
		default:
			break;
 80015c6:	e010      	b.n	80015ea <CONTROLLER_Get_IsReady+0x52>
			LCD_Write_Buffer("Aquecendo a água.");
 80015c8:	481c      	ldr	r0, [pc, #112]	; (800163c <CONTROLLER_Get_IsReady+0xa4>)
 80015ca:	f7ff fd9f 	bl	800110c <LCD_Write_Buffer>
			CONTROLLER_BLOCK_HEATER_DATA(heater_block);
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <CONTROLLER_Get_IsReady+0xa8>)
 80015d0:	1d3c      	adds	r4, r7, #4
 80015d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			PWM_Increase(heater_block.pwm);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015de:	f7ff fedd 	bl	800139c <PWM_Increase>
			sensor_channel_id = heater_block.adc_channel_id;
 80015e2:	7b3b      	ldrb	r3, [r7, #12]
 80015e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			break;
 80015e8:	bf00      	nop
	}

	//fica no while até chegar na temperatura desejada
	while(error_signal != 0)
 80015ea:	e01d      	b.n	8001628 <CONTROLLER_Get_IsReady+0x90>
	{
		sensor_signal = ADC_GetValue(hadc, sensor_channel_id);
 80015ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015f0:	9308      	str	r3, [sp, #32]
 80015f2:	466d      	mov	r5, sp
 80015f4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80015f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001600:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001604:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160a:	f7ff fcdd 	bl	8000fc8 <ADC_GetValue>
 800160e:	61f8      	str	r0, [r7, #28]

		sensor_temp = UTILS_To_Temp(sensor_signal);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fcac 	bl	8001f70 <UTILS_To_Temp>
 8001618:	61b8      	str	r0, [r7, #24]

		error_signal = ref_sinal - sensor_temp;
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	627b      	str	r3, [r7, #36]	; 0x24


		HAL_Delay(50);
 8001622:	2032      	movs	r0, #50	; 0x32
 8001624:	f000 fd56 	bl	80020d4 <HAL_Delay>
	while(error_signal != 0)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1de      	bne.n	80015ec <CONTROLLER_Get_IsReady+0x54>
	}
	return;
 800162e:	bf00      	nop
}
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001638:	b004      	add	sp, #16
 800163a:	4770      	bx	lr
 800163c:	08006f8c 	.word	0x08006f8c
 8001640:	08006fa0 	.word	0x08006fa0

08001644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	b0a3      	sub	sp, #140	; 0x8c
 8001648:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164a:	f000 fce1 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164e:	f000 f877 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001652:	f000 f9c5 	bl	80019e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001656:	f000 f9a5 	bl	80019a4 <MX_DMA_Init>
  MX_TIM2_Init();
 800165a:	f000 f917 	bl	800188c <MX_TIM2_Init>
  MX_ADC1_Init();
 800165e:	f000 f8c7 	bl	80017f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  //inicializa LCD em modo 4 bits
  LCD_Init();
 8001662:	f7ff fe55 	bl	8001310 <LCD_Init>
  ADC_Init(hadc1);
 8001666:	4e33      	ldr	r6, [pc, #204]	; (8001734 <main+0xf0>)
 8001668:	466d      	mov	r5, sp
 800166a:	f106 0410 	add.w	r4, r6, #16
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001676:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800167a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800167e:	f7ff fc91 	bl	8000fa4 <ADC_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001682:	2100      	movs	r1, #0
 8001684:	482c      	ldr	r0, [pc, #176]	; (8001738 <main+0xf4>)
 8001686:	f002 fc81 	bl	8003f8c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  STATE current_state = STATE_SHOWING_CLOCK;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

//	  HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSTION);



	switch (current_state) {
 8001690:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <main+0x5a>
 8001698:	2b01      	cmp	r3, #1
 800169a:	d009      	beq.n	80016b0 <main+0x6c>
				current_state = STATE_SHOWING_CLOCK;
			}
			current_state = STATE_SHOWING_CLOCK;
			break;
		default:
			break;
 800169c:	e040      	b.n	8001720 <main+0xdc>
			capsule = STATE_Show_Clock();
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fa20 	bl	8001ae8 <STATE_Show_Clock>
			current_state = STATE_STARTING_PROCESS;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80016ae:	e037      	b.n	8001720 <main+0xdc>
			capsule = STATE_Starting_Process(capsule);
 80016b0:	463e      	mov	r6, r7
 80016b2:	466d      	mov	r5, sp
 80016b4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	602b      	str	r3, [r5, #0]
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c6:	4630      	mov	r0, r6
 80016c8:	f000 fa5a 	bl	8001b80 <STATE_Starting_Process>
 80016cc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80016d0:	463d      	mov	r5, r7
 80016d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(capsule.capsule_type != NONE_CAPSULE_TYPE)
 80016de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d018      	beq.n	8001718 <main+0xd4>
				STATE_Started_Process(capsule, hadc1);
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <main+0xf0>)
 80016e8:	ac04      	add	r4, sp, #16
 80016ea:	461d      	mov	r5, r3
 80016ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016fc:	466c      	mov	r4, sp
 80016fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800170e:	f000 fa7b 	bl	8001c08 <STATE_Started_Process>
				current_state = STATE_SHOWING_CLOCK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			current_state = STATE_SHOWING_CLOCK;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 800171e:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <main+0xf8>)
 8001726:	f001 fdf6 	bl	8003316 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 800172a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800172e:	f000 fcd1 	bl	80020d4 <HAL_Delay>
	switch (current_state) {
 8001732:	e7ad      	b.n	8001690 <main+0x4c>
 8001734:	200002a0 	.word	0x200002a0
 8001738:	20000314 	.word	0x20000314
 800173c:	40011000 	.word	0x40011000

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174a:	2228      	movs	r2, #40	; 0x28
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fa2e 	bl	8004bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001774:	2301      	movs	r3, #1
 8001776:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001778:	2310      	movs	r3, #16
 800177a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177c:	2302      	movs	r3, #2
 800177e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001780:	2300      	movs	r3, #0
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001784:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178e:	4618      	mov	r0, r3
 8001790:	f001 fdda 	bl	8003348 <HAL_RCC_OscConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800179a:	f000 f99f 	bl	8001adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179e:	230f      	movs	r3, #15
 80017a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2102      	movs	r1, #2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 f844 	bl	8003848 <HAL_RCC_ClockConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017c6:	f000 f989 	bl	8001adc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ca:	2302      	movs	r3, #2
 80017cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 f9be 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017e2:	f000 f97b 	bl	8001adc <Error_Handler>
  }
}
 80017e6:	bf00      	nop
 80017e8:	3750      	adds	r7, #80	; 0x50
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_ADC1_Init+0x94>)
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <MX_ADC1_Init+0x98>)
 8001804:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_ADC1_Init+0x94>)
 8001808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_ADC1_Init+0x94>)
 8001810:	2201      	movs	r2, #1
 8001812:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_ADC1_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_ADC1_Init+0x94>)
 800181c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_ADC1_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_ADC1_Init+0x94>)
 800182a:	2202      	movs	r2, #2
 800182c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800182e:	4815      	ldr	r0, [pc, #84]	; (8001884 <MX_ADC1_Init+0x94>)
 8001830:	f000 fc72 	bl	8002118 <HAL_ADC_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800183a:	f000 f94f 	bl	8001adc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800183e:	2304      	movs	r3, #4
 8001840:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001842:	2301      	movs	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_ADC1_Init+0x94>)
 8001850:	f000 fe56 	bl	8002500 <HAL_ADC_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800185a:	f000 f93f 	bl	8001adc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800185e:	2305      	movs	r3, #5
 8001860:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001862:	2302      	movs	r3, #2
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_ADC1_Init+0x94>)
 800186c:	f000 fe48 	bl	8002500 <HAL_ADC_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001876:	f000 f931 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002a0 	.word	0x200002a0
 8001888:	40012400 	.word	0x40012400

0800188c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <MX_TIM2_Init+0x114>)
 80018be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <MX_TIM2_Init+0x114>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <MX_TIM2_Init+0x114>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2667 - 1;
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <MX_TIM2_Init+0x114>)
 80018d2:	f640 226a 	movw	r2, #2666	; 0xa6a
 80018d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <MX_TIM2_Init+0x114>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <MX_TIM2_Init+0x114>)
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018e4:	482e      	ldr	r0, [pc, #184]	; (80019a0 <MX_TIM2_Init+0x114>)
 80018e6:	f002 faa9 	bl	8003e3c <HAL_TIM_Base_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018f0:	f000 f8f4 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	4619      	mov	r1, r3
 8001900:	4827      	ldr	r0, [pc, #156]	; (80019a0 <MX_TIM2_Init+0x114>)
 8001902:	f002 fca3 	bl	800424c <HAL_TIM_ConfigClockSource>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800190c:	f000 f8e6 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001910:	4823      	ldr	r0, [pc, #140]	; (80019a0 <MX_TIM2_Init+0x114>)
 8001912:	f002 fae2 	bl	8003eda <HAL_TIM_PWM_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800191c:	f000 f8de 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4619      	mov	r1, r3
 800192e:	481c      	ldr	r0, [pc, #112]	; (80019a0 <MX_TIM2_Init+0x114>)
 8001930:	f002 ffe8 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800193a:	f000 f8cf 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193e:	2360      	movs	r3, #96	; 0x60
 8001940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	4812      	ldr	r0, [pc, #72]	; (80019a0 <MX_TIM2_Init+0x114>)
 8001956:	f002 fbbb 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001960:	f000 f8bc 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2204      	movs	r2, #4
 8001968:	4619      	mov	r1, r3
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <MX_TIM2_Init+0x114>)
 800196c:	f002 fbb0 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001976:	f000 f8b1 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2208      	movs	r2, #8
 800197e:	4619      	mov	r1, r3
 8001980:	4807      	ldr	r0, [pc, #28]	; (80019a0 <MX_TIM2_Init+0x114>)
 8001982:	f002 fba5 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800198c:	f000 f8a6 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <MX_TIM2_Init+0x114>)
 8001992:	f000 fa2f 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001996:	bf00      	nop
 8001998:	3738      	adds	r7, #56	; 0x38
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000314 	.word	0x20000314

080019a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_DMA_Init+0x38>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <MX_DMA_Init+0x38>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6153      	str	r3, [r2, #20]
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_DMA_Init+0x38>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	200b      	movs	r0, #11
 80019c8:	f001 f8f7 	bl	8002bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019cc:	200b      	movs	r0, #11
 80019ce:	f001 f910 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <MX_GPIO_Init+0xec>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a34      	ldr	r2, [pc, #208]	; (8001acc <MX_GPIO_Init+0xec>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <MX_GPIO_Init+0xec>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <MX_GPIO_Init+0xec>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a2e      	ldr	r2, [pc, #184]	; (8001acc <MX_GPIO_Init+0xec>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <MX_GPIO_Init+0xec>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <MX_GPIO_Init+0xec>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a28      	ldr	r2, [pc, #160]	; (8001acc <MX_GPIO_Init+0xec>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <MX_GPIO_Init+0xec>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a42:	4823      	ldr	r0, [pc, #140]	; (8001ad0 <MX_GPIO_Init+0xf0>)
 8001a44:	f001 fc4f 	bl	80032e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Display_RW_Pin|Display_EN_Pin|Display_D4_Pin|Display_D5_Pin
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8001a4e:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <MX_GPIO_Init+0xf4>)
 8001a50:	f001 fc49 	bl	80032e6 <HAL_GPIO_WritePin>
                          |Display_D6_Pin|Display_D7_Pin|Display_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_GPIO_Init+0xf0>)
 8001a6e:	f001 fac9 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_RW_Pin Display_EN_Pin Display_D4_Pin Display_D5_Pin
                           Display_D6_Pin Display_D7_Pin Display_RS_Pin */
  GPIO_InitStruct.Pin = Display_RW_Pin|Display_EN_Pin|Display_D4_Pin|Display_D5_Pin
 8001a72:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001a76:	613b      	str	r3, [r7, #16]
                          |Display_D6_Pin|Display_D7_Pin|Display_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <MX_GPIO_Init+0xf4>)
 8001a8c:	f001 faba 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Increase_Pin Button_Confirmar_Pin */
  GPIO_InitStruct.Pin = Button_Increase_Pin|Button_Confirmar_Pin;
 8001a90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <MX_GPIO_Init+0xf8>)
 8001aa6:	f001 faad 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1_Bit_0_Pin BN1_bit_1_Pin BN1_bit_2_Pin Inserir_Capsula_Pin */
  GPIO_InitStruct.Pin = BN1_Bit_0_Pin|BN1_bit_1_Pin|BN1_bit_2_Pin|Inserir_Capsula_Pin;
 8001aaa:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_GPIO_Init+0xf4>)
 8001ac0:	f001 faa0 	bl	8003004 <HAL_GPIO_Init>

}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	40010800 	.word	0x40010800

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <STATE_Show_Clock>:

#include "controller.h"
#include "states.h"

CAPSULE_Recipe_TypeDef STATE_Show_Clock()
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b08e      	sub	sp, #56	; 0x38
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	char hour[10];
	CAPSULE_Recipe_TypeDef capsule = {
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2220      	movs	r2, #32
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 f859 	bl	8004bb0 <memset>
			.capsule_type = NONE_CAPSULE_TYPE,
	};
	uint8_t insert_button = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while(1)
	{
		UTILS_get_Hour(hour);
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fa13 	bl	8001f34 <UTILS_get_Hour>
		LCD_Clear();
 8001b0e:	f7ff fb77 	bl	8001200 <LCD_Clear>
		LCD_Write_Buffer(hour);
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff faf8 	bl	800110c <LCD_Write_Buffer>

		insert_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8001b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b20:	4815      	ldr	r0, [pc, #84]	; (8001b78 <STATE_Show_Clock+0x90>)
 8001b22:	f001 fbc9 	bl	80032b8 <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//se botão de inserir capsula for pressionado, verifica  qual é a receita
		if(insert_button)
 8001b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <STATE_Show_Clock+0x56>
		{
			capsule = CAPSULE_Verify_Insertion();
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fc57 	bl	80013ec <CAPSULE_Verify_Insertion>
		}

		//se tiver uma cápsula, retorna
		if(capsule.capsule_type != NONE_CAPSULE_TYPE ){
 8001b3e:	7b3b      	ldrb	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00a      	beq.n	8001b5a <STATE_Show_Clock+0x72>

			return capsule;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	461d      	mov	r5, r3
 8001b48:	f107 040c 	add.w	r4, r7, #12
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b58:	e009      	b.n	8001b6e <STATE_Show_Clock+0x86>
		}
		HAL_Delay(300);
 8001b5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b5e:	f000 fab9 	bl	80020d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <STATE_Show_Clock+0x94>)
 8001b68:	f001 fbd5 	bl	8003316 <HAL_GPIO_TogglePin>
		UTILS_get_Hour(hour);
 8001b6c:	e7ca      	b.n	8001b04 <STATE_Show_Clock+0x1c>
	}
}
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	3738      	adds	r7, #56	; 0x38
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bdb0      	pop	{r4, r5, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40011000 	.word	0x40011000

08001b80 <STATE_Starting_Process>:


CAPSULE_Recipe_TypeDef STATE_Starting_Process(CAPSULE_Recipe_TypeDef capsule)
{
 8001b80:	b084      	sub	sp, #16
 8001b82:	b5b0      	push	{r4, r5, r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t confirm_button = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]

	LCD_Clear();
 8001b96:	f7ff fb33 	bl	8001200 <LCD_Clear>
	LCD_Write_Buffer(capsule.capsule_name);
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fab3 	bl	800110c <LCD_Write_Buffer>
	LCD_Seccond_Line();
 8001ba6:	f7ff fb33 	bl	8001210 <LCD_Seccond_Line>
	LCD_Write_Buffer("S --> Iniciar.");
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <STATE_Starting_Process+0x7c>)
 8001bac:	f7ff faae 	bl	800110c <LCD_Write_Buffer>

	while(1)
	{

		confirm_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8001bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <STATE_Starting_Process+0x80>)
 8001bb6:	f001 fb7f 	bl	80032b8 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]

		if(confirm_button)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00a      	beq.n	8001bda <STATE_Starting_Process+0x5a>
		{
			return capsule;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bd4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001bd8:	e009      	b.n	8001bee <STATE_Starting_Process+0x6e>
		}

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <STATE_Starting_Process+0x84>)
 8001be0:	f001 fb99 	bl	8003316 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001be4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001be8:	f000 fa74 	bl	80020d4 <HAL_Delay>
		confirm_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8001bec:	e7e0      	b.n	8001bb0 <STATE_Starting_Process+0x30>
	}
}
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001bf8:	b004      	add	sp, #16
 8001bfa:	4770      	bx	lr
 8001bfc:	08006fb0 	.word	0x08006fb0
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40011000 	.word	0x40011000

08001c08 <STATE_Started_Process>:

void STATE_Started_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 8001c08:	b084      	sub	sp, #16
 8001c0a:	b5b0      	push	{r4, r5, r7, lr}
 8001c0c:	b092      	sub	sp, #72	; 0x48
 8001c0e:	af10      	add	r7, sp, #64	; 0x40
 8001c10:	f107 0418 	add.w	r4, r7, #24
 8001c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD_Clear();
 8001c18:	f7ff faf2 	bl	8001200 <LCD_Clear>
	LCD_Write_Buffer("Iniciando...");
 8001c1c:	4817      	ldr	r0, [pc, #92]	; (8001c7c <STATE_Started_Process+0x74>)
 8001c1e:	f7ff fa75 	bl	800110c <LCD_Write_Buffer>
	HAL_Delay(1500);
 8001c22:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001c26:	f000 fa55 	bl	80020d4 <HAL_Delay>

	uint8_t confirm_button = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		CONTROLLER_Get_IsReady(hadc, capsule);
 8001c2e:	ac08      	add	r4, sp, #32
 8001c30:	f107 0518 	add.w	r5, r7, #24
 8001c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c40:	466d      	mov	r5, sp
 8001c42:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c58:	f7ff fc9e 	bl	8001598 <CONTROLLER_Get_IsReady>

		LCD_Clear();
 8001c5c:	f7ff fad0 	bl	8001200 <LCD_Clear>
		LCD_Write_Buffer("Despejando água.");
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <STATE_Started_Process+0x78>)
 8001c62:	f7ff fa53 	bl	800110c <LCD_Write_Buffer>

		while(1){
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <STATE_Started_Process+0x7c>)
 8001c6c:	f001 fb53 	bl	8003316 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8001c70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c74:	f000 fa2e 	bl	80020d4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c78:	e7f5      	b.n	8001c66 <STATE_Started_Process+0x5e>
 8001c7a:	bf00      	nop
 8001c7c:	08006fc0 	.word	0x08006fc0
 8001c80:	08006fd0 	.word	0x08006fd0
 8001c84:	40011000 	.word	0x40011000

08001c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_MspInit+0x60>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_MspInit+0x60>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000

08001cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <HAL_ADC_MspInit+0xbc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d149      	bne.n	8001da0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_ADC_MspInit+0xc0>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_ADC_MspInit+0xc0>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_ADC_MspInit+0xc0>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_ADC_MspInit+0xc0>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a20      	ldr	r2, [pc, #128]	; (8001dac <HAL_ADC_MspInit+0xc0>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_ADC_MspInit+0xc0>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN4_____T1_Pin|ADC1_IN5_____T2_Pin;
 8001d3c:	2330      	movs	r3, #48	; 0x30
 8001d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d40:	2303      	movs	r3, #3
 8001d42:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4819      	ldr	r0, [pc, #100]	; (8001db0 <HAL_ADC_MspInit+0xc4>)
 8001d4c:	f001 f95a 	bl	8003004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d52:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_ADC_MspInit+0xcc>)
 8001d54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d86:	f000 ff4f 	bl	8002c28 <HAL_DMA_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001d90:	f7ff fea4 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d98:	621a      	str	r2, [r3, #32]
 8001d9a:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_ADC_MspInit+0xc8>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40012400 	.word	0x40012400
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	200002d0 	.word	0x200002d0
 8001db8:	40020008 	.word	0x40020008

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_TIM_Base_MspInit+0x34>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_TIM_Base_MspInit+0x34>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_TIM_Base_MspInit+0x34>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e12:	d117      	bne.n	8001e44 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_TIM_MspPostInit+0x58>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_TIM_MspPostInit+0x58>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_MspPostInit+0x58>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM2_CH1_____R1_Pin|TIM2_CH2_____CP1_Pin|TIM2_CH3_____B1_Pin;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4804      	ldr	r0, [pc, #16]	; (8001e50 <HAL_TIM_MspPostInit+0x5c>)
 8001e40:	f001 f8e0 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010800 	.word	0x40010800

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <HardFault_Handler+0x4>

08001e66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <MemManage_Handler+0x4>

08001e6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <BusFault_Handler+0x4>

08001e72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <UsageFault_Handler+0x4>

08001e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 f8fc 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA1_Channel1_IRQHandler+0x10>)
 8001eae:	f000 ff75 	bl	8002d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200002d0 	.word	0x200002d0

08001ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <_sbrk+0x5c>)
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <_sbrk+0x60>)
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <_sbrk+0x64>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <_sbrk+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d207      	bcs.n	8001efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eec:	f002 fd68 	bl	80049c0 <__errno>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	230c      	movs	r3, #12
 8001ef4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e009      	b.n	8001f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <_sbrk+0x64>)
 8001f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20005000 	.word	0x20005000
 8001f1c:	00000400 	.word	0x00000400
 8001f20:	20000268 	.word	0x20000268
 8001f24:	20000368 	.word	0x20000368

08001f28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <UTILS_get_Hour>:
 */
#include "utils.h"
#include "ADC.h"

void UTILS_get_Hour(char* hour)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	  struct tm *sTm;

	  time_t now = time (0);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f003 fd0f 	bl	8005960 <time>
 8001f42:	4603      	mov	r3, r0
 8001f44:	460c      	mov	r4, r1
 8001f46:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  sTm = gmtime (&now);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fd3c 	bl	80049cc <gmtime>
 8001f54:	6178      	str	r0, [r7, #20]

	  strftime (hour, 9, "%H:%M:%S", sTm);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <UTILS_get_Hour+0x38>)
 8001f5a:	2109      	movs	r1, #9
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f003 fc4b 	bl	80057f8 <strftime>
	  return;
 8001f62:	bf00      	nop
}
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	08006fe4 	.word	0x08006fe4

08001f70 <UTILS_To_Temp>:

uint32_t UTILS_To_Temp(uint32_t value_adc)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	//
//	float v25 = 4000;// When V25=1.41V at ref 3V3
//	float avgSlope = 5.0;// When avgSlope=5mV/C at ref 3V3
//	float temperature = ((value_adc - v25)/avgSlope)+25;
//	return (uint32_t)temperature;
	uint32_t temperature = (value_adc * ADC_SCALE) * 25;
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fa3d 	bl	80003f8 <__aeabi_ui2d>
 8001f7e:	a30e      	add	r3, pc, #56	; (adr r3, 8001fb8 <UTILS_To_Temp+0x48>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe fab2 	bl	80004ec <__aeabi_dmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4621      	mov	r1, r4
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <UTILS_To_Temp+0x50>)
 8001f96:	f7fe faa9 	bl	80004ec <__aeabi_dmul>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	f7fe fcb5 	bl	8000910 <__aeabi_d2uiz>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	60fb      	str	r3, [r7, #12]
	return temperature;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd90      	pop	{r4, r7, pc}
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	e734d9b4 	.word	0xe734d9b4
 8001fbc:	3f4a680c 	.word	0x3f4a680c
 8001fc0:	40390000 	.word	0x40390000

08001fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fc6:	e003      	b.n	8001fd0 <LoopCopyDataInit>

08001fc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001fca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fcc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fce:	3104      	adds	r1, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fd0:	480a      	ldr	r0, [pc, #40]	; (8001ffc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fd8:	d3f6      	bcc.n	8001fc8 <CopyDataInit>
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fdc:	e002      	b.n	8001fe4 <LoopFillZerobss>

08001fde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fe0:	f842 3b04 	str.w	r3, [r2], #4

08001fe4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fe6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fe8:	d3f9      	bcc.n	8001fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fea:	f7ff ff9d 	bl	8001f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f002 fdab 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff2:	f7ff fb27 	bl	8001644 <main>
  bx lr
 8001ff6:	4770      	bx	lr
  ldr r3, =_sidata
 8001ff8:	08007528 	.word	0x08007528
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002000:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 8002004:	20000244 	.word	0x20000244
  ldr r3, = _ebss
 8002008:	20000364 	.word	0x20000364

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_Init+0x28>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x28>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 fdbf 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fe2c 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fdd7 	bl	8002c0e <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 fd9f 	bl	8002bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000004 	.word	0x20000004
 8002094:	2000000c 	.word	0x2000000c
 8002098:	20000008 	.word	0x20000008

0800209c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_IncTick+0x1c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x20>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_IncTick+0x20>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	2000000c 	.word	0x2000000c
 80020bc:	2000035c 	.word	0x2000035c

080020c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <HAL_GetTick+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	2000035c 	.word	0x2000035c

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_Delay+0x40>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffe0 	bl	80020c0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000000c 	.word	0x2000000c

08002118 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0be      	b.n	80022b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fdc8 	bl	8001cec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fb19 	bl	8002794 <ADC_ConversionStop_Disable>
 8002162:	4603      	mov	r3, r0
 8002164:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 8099 	bne.w	80022a6 <HAL_ADC_Init+0x18e>
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 8095 	bne.w	80022a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002184:	f023 0302 	bic.w	r3, r3, #2
 8002188:	f043 0202 	orr.w	r2, r3, #2
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002198:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7b1b      	ldrb	r3, [r3, #12]
 800219e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b0:	d003      	beq.n	80021ba <HAL_ADC_Init+0xa2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_ADC_Init+0xa8>
 80021ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021be:	e000      	b.n	80021c2 <HAL_ADC_Init+0xaa>
 80021c0:	2300      	movs	r3, #0
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7d1b      	ldrb	r3, [r3, #20]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d119      	bne.n	8002204 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7b1b      	ldrb	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	3b01      	subs	r3, #1
 80021de:	035a      	lsls	r2, r3, #13
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	e00b      	b.n	8002204 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_ADC_Init+0x1a8>)
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	430b      	orrs	r3, r1
 800222a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002234:	d003      	beq.n	800223e <HAL_ADC_Init+0x126>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d104      	bne.n	8002248 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	3b01      	subs	r3, #1
 8002244:	051b      	lsls	r3, r3, #20
 8002246:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	430a      	orrs	r2, r1
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_ADC_Init+0x1ac>)
 8002264:	4013      	ands	r3, r2
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d10b      	bne.n	8002284 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002282:	e018      	b.n	80022b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f023 0312 	bic.w	r3, r3, #18
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022a4:	e007      	b.n	80022b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f043 0210 	orr.w	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	ffe1f7fd 	.word	0xffe1f7fd
 80022c4:	ff1f0efe 	.word	0xff1f0efe

080022c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Stop+0x1a>
 80022de:	2302      	movs	r3, #2
 80022e0:	e01a      	b.n	8002318 <HAL_ADC_Stop+0x50>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fa52 	bl	8002794 <ADC_ConversionStop_Disable>
 80022f0:	4603      	mov	r3, r0
 80022f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a64      	ldr	r2, [pc, #400]	; (80024c8 <HAL_ADC_Start_DMA+0x1a8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_ADC_Start_DMA+0x24>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a63      	ldr	r2, [pc, #396]	; (80024cc <HAL_ADC_Start_DMA+0x1ac>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d106      	bne.n	8002352 <HAL_ADC_Start_DMA+0x32>
 8002344:	4b60      	ldr	r3, [pc, #384]	; (80024c8 <HAL_ADC_Start_DMA+0x1a8>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 80b3 	bne.w	80024b8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_ADC_Start_DMA+0x40>
 800235c:	2302      	movs	r3, #2
 800235e:	e0ae      	b.n	80024be <HAL_ADC_Start_DMA+0x19e>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f9c1 	bl	80026f0 <ADC_Enable>
 800236e:	4603      	mov	r3, r0
 8002370:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 809a 	bne.w	80024ae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a4e      	ldr	r2, [pc, #312]	; (80024cc <HAL_ADC_Start_DMA+0x1ac>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_Start_DMA+0x84>
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_ADC_Start_DMA+0x1a8>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d115      	bne.n	80023d0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d026      	beq.n	800240c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ce:	e01d      	b.n	800240c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <HAL_ADC_Start_DMA+0x1a8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_ADC_Start_DMA+0xd0>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a38      	ldr	r2, [pc, #224]	; (80024cc <HAL_ADC_Start_DMA+0x1ac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10d      	bne.n	800240c <HAL_ADC_Start_DMA+0xec>
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <HAL_ADC_Start_DMA+0x1a8>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002404:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f023 0206 	bic.w	r2, r3, #6
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
 8002424:	e002      	b.n	800242c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_ADC_Start_DMA+0x1b0>)
 800243a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_ADC_Start_DMA+0x1b4>)
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_ADC_Start_DMA+0x1b8>)
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0202 	mvn.w	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002464:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a18      	ldr	r0, [r3, #32]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	334c      	adds	r3, #76	; 0x4c
 8002470:	4619      	mov	r1, r3
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f000 fc31 	bl	8002cdc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002484:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002488:	d108      	bne.n	800249c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002498:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800249a:	e00f      	b.n	80024bc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024aa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024ac:	e006      	b.n	80024bc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80024b6:	e001      	b.n	80024bc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40012400 	.word	0x40012400
 80024cc:	40012800 	.word	0x40012800
 80024d0:	08002809 	.word	0x08002809
 80024d4:	08002885 	.word	0x08002885
 80024d8:	080028a1 	.word	0x080028a1

080024dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x20>
 800251c:	2302      	movs	r3, #2
 800251e:	e0dc      	b.n	80026da <HAL_ADC_ConfigChannel+0x1da>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b06      	cmp	r3, #6
 800252e:	d81c      	bhi.n	800256a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	3b05      	subs	r3, #5
 8002542:	221f      	movs	r2, #31
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	4019      	ands	r1, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3b05      	subs	r3, #5
 800255c:	fa00 f203 	lsl.w	r2, r0, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	; 0x34
 8002568:	e03c      	b.n	80025e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d81c      	bhi.n	80025ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b23      	subs	r3, #35	; 0x23
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	4019      	ands	r1, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b23      	subs	r3, #35	; 0x23
 800259e:	fa00 f203 	lsl.w	r2, r0, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
 80025aa:	e01b      	b.n	80025e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b41      	subs	r3, #65	; 0x41
 80025be:	221f      	movs	r2, #31
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4019      	ands	r1, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3b41      	subs	r3, #65	; 0x41
 80025d8:	fa00 f203 	lsl.w	r2, r0, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b09      	cmp	r3, #9
 80025ea:	d91c      	bls.n	8002626 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68d9      	ldr	r1, [r3, #12]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	3b1e      	subs	r3, #30
 80025fe:	2207      	movs	r2, #7
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	4019      	ands	r1, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6898      	ldr	r0, [r3, #8]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	3b1e      	subs	r3, #30
 8002618:	fa00 f203 	lsl.w	r2, r0, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	e019      	b.n	800265a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6919      	ldr	r1, [r3, #16]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	2207      	movs	r2, #7
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	4019      	ands	r1, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6898      	ldr	r0, [r3, #8]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b10      	cmp	r3, #16
 8002660:	d003      	beq.n	800266a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002666:	2b11      	cmp	r3, #17
 8002668:	d132      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d125      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d126      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002690:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d11a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_ADC_ConfigChannel+0x1ec>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	0c9a      	lsrs	r2, r3, #18
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x1b2>
 80026be:	e007      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	40012400 	.word	0x40012400
 80026e8:	20000004 	.word	0x20000004
 80026ec:	431bde83 	.word	0x431bde83

080026f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d039      	beq.n	8002782 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <ADC_Enable+0x9c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <ADC_Enable+0xa0>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800272c:	e002      	b.n	8002734 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3b01      	subs	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f9      	bne.n	800272e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800273a:	f7ff fcc1 	bl	80020c0 <HAL_GetTick>
 800273e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002740:	e018      	b.n	8002774 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002742:	f7ff fcbd 	bl	80020c0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d911      	bls.n	8002774 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f043 0210 	orr.w	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e007      	b.n	8002784 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d1df      	bne.n	8002742 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000004 	.word	0x20000004
 8002790:	431bde83 	.word	0x431bde83

08002794 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d127      	bne.n	80027fe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027be:	f7ff fc7f 	bl	80020c0 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027c4:	e014      	b.n	80027f0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027c6:	f7ff fc7b 	bl	80020c0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d90d      	bls.n	80027f0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e007      	b.n	8002800 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d0e3      	beq.n	80027c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d127      	bne.n	8002872 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002838:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800283c:	d115      	bne.n	800286a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002842:	2b00      	cmp	r3, #0
 8002844:	d111      	bne.n	800286a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7fe fbd0 	bl	8001010 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002870:	e004      	b.n	800287c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff fe22 	bl	80024dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fe11 	bl	80024ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e086      	b.n	8002a00 <HAL_ADCEx_Calibration_Start+0x12c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff4a 	bl	8002794 <ADC_ConversionStop_Disable>
 8002900:	4603      	mov	r3, r0
 8002902:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d175      	bne.n	80029f6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002912:	f023 0302 	bic.w	r3, r3, #2
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800291e:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_ADCEx_Calibration_Start+0x134>)
 8002920:	681c      	ldr	r4, [r3, #0]
 8002922:	2002      	movs	r0, #2
 8002924:	f001 f9ce 	bl	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002928:	4603      	mov	r3, r0
 800292a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800292e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002930:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002932:	e002      	b.n	800293a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3b01      	subs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f9      	bne.n	8002934 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fed5 	bl	80026f0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0208 	orr.w	r2, r2, #8
 8002954:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002956:	f7ff fbb3 	bl	80020c0 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800295c:	e014      	b.n	8002988 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800295e:	f7ff fbaf 	bl	80020c0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b0a      	cmp	r3, #10
 800296a:	d90d      	bls.n	8002988 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	f023 0312 	bic.w	r3, r3, #18
 8002974:	f043 0210 	orr.w	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e03b      	b.n	8002a00 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e3      	bne.n	800295e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0204 	orr.w	r2, r2, #4
 80029a4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80029a6:	f7ff fb8b 	bl	80020c0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80029ac:	e014      	b.n	80029d8 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029ae:	f7ff fb87 	bl	80020c0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b0a      	cmp	r3, #10
 80029ba:	d90d      	bls.n	80029d8 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f023 0312 	bic.w	r3, r3, #18
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e013      	b.n	8002a00 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e3      	bne.n	80029ae <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	20000004 	.word	0x20000004

08002a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4906      	ldr	r1, [pc, #24]	; (8002aa4 <__NVIC_EnableIRQ+0x34>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b70:	d301      	bcc.n	8002b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <SysTick_Config+0x40>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f7ff ff90 	bl	8002aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SysTick_Config+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <SysTick_Config+0x40>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000e010 	.word	0xe000e010

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff2d 	bl	8002a0c <__NVIC_SetPriorityGrouping>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bcc:	f7ff ff42 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff90 	bl	8002afc <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff5f 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff35 	bl	8002a70 <__NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffa2 	bl	8002b60 <SysTick_Config>
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e043      	b.n	8002cc6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_DMA_Init+0xa8>)
 8002c46:	4413      	add	r3, r2
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_DMA_Init+0xac>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <HAL_DMA_Init+0xb0>)
 8002c5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	bffdfff8 	.word	0xbffdfff8
 8002cd4:	cccccccd 	.word	0xcccccccd
 8002cd8:	40020000 	.word	0x40020000

08002cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Start_IT+0x20>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e04a      	b.n	8002d92 <HAL_DMA_Start_IT+0xb6>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d13a      	bne.n	8002d84 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f938 	bl	8002fa8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 020e 	orr.w	r2, r2, #14
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e00f      	b.n	8002d72 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0204 	bic.w	r2, r2, #4
 8002d60:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 020a 	orr.w	r2, r2, #10
 8002d70:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e005      	b.n	8002d90 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2204      	movs	r2, #4
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d04f      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xc8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a66      	ldr	r2, [pc, #408]	; (8002f8c <HAL_DMA_IRQHandler+0x1f0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d029      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xae>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a65      	ldr	r2, [pc, #404]	; (8002f90 <HAL_DMA_IRQHandler+0x1f4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <HAL_DMA_IRQHandler+0xaa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a63      	ldr	r2, [pc, #396]	; (8002f94 <HAL_DMA_IRQHandler+0x1f8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01a      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xa4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a62      	ldr	r2, [pc, #392]	; (8002f98 <HAL_DMA_IRQHandler+0x1fc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d012      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x9e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a60      	ldr	r2, [pc, #384]	; (8002f9c <HAL_DMA_IRQHandler+0x200>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00a      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x98>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5f      	ldr	r2, [pc, #380]	; (8002fa0 <HAL_DMA_IRQHandler+0x204>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d102      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x92>
 8002e28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e2c:	e00e      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e32:	e00b      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e38:	e008      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e3e:	e005      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e44:	e002      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e46:	2340      	movs	r3, #64	; 0x40
 8002e48:	e000      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	4a55      	ldr	r2, [pc, #340]	; (8002fa4 <HAL_DMA_IRQHandler+0x208>)
 8002e4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8094 	beq.w	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e62:	e08e      	b.n	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	2202      	movs	r2, #2
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d056      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x186>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d051      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 020a 	bic.w	r2, r2, #10
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a38      	ldr	r2, [pc, #224]	; (8002f8c <HAL_DMA_IRQHandler+0x1f0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d029      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x166>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a37      	ldr	r2, [pc, #220]	; (8002f90 <HAL_DMA_IRQHandler+0x1f4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_IRQHandler+0x162>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <HAL_DMA_IRQHandler+0x1f8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01a      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x15c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_DMA_IRQHandler+0x1fc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d012      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x156>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <HAL_DMA_IRQHandler+0x200>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x150>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a31      	ldr	r2, [pc, #196]	; (8002fa0 <HAL_DMA_IRQHandler+0x204>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x14a>
 8002ee0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ee4:	e00e      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eea:	e00b      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef0:	e008      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef6:	e005      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efc:	e002      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002efe:	2320      	movs	r3, #32
 8002f00:	e000      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002f02:	2302      	movs	r3, #2
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_DMA_IRQHandler+0x208>)
 8002f06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d034      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f20:	e02f      	b.n	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2208      	movs	r2, #8
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d028      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x1e8>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 020e 	bic.w	r2, r2, #14
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
    }
  }
  return;
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
}
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40020008 	.word	0x40020008
 8002f90:	4002001c 	.word	0x4002001c
 8002f94:	40020030 	.word	0x40020030
 8002f98:	40020044 	.word	0x40020044
 8002f9c:	40020058 	.word	0x40020058
 8002fa0:	4002006c 	.word	0x4002006c
 8002fa4:	40020000 	.word	0x40020000

08002fa8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d108      	bne.n	8002fe8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fe6:	e007      	b.n	8002ff8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
	...

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b08b      	sub	sp, #44	; 0x2c
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003016:	e127      	b.n	8003268 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003018:	2201      	movs	r2, #1
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 8116 	bne.w	8003262 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b12      	cmp	r3, #18
 800303c:	d034      	beq.n	80030a8 <HAL_GPIO_Init+0xa4>
 800303e:	2b12      	cmp	r3, #18
 8003040:	d80d      	bhi.n	800305e <HAL_GPIO_Init+0x5a>
 8003042:	2b02      	cmp	r3, #2
 8003044:	d02b      	beq.n	800309e <HAL_GPIO_Init+0x9a>
 8003046:	2b02      	cmp	r3, #2
 8003048:	d804      	bhi.n	8003054 <HAL_GPIO_Init+0x50>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d031      	beq.n	80030b2 <HAL_GPIO_Init+0xae>
 800304e:	2b01      	cmp	r3, #1
 8003050:	d01c      	beq.n	800308c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003052:	e048      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003054:	2b03      	cmp	r3, #3
 8003056:	d043      	beq.n	80030e0 <HAL_GPIO_Init+0xdc>
 8003058:	2b11      	cmp	r3, #17
 800305a:	d01b      	beq.n	8003094 <HAL_GPIO_Init+0x90>
          break;
 800305c:	e043      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800305e:	4a89      	ldr	r2, [pc, #548]	; (8003284 <HAL_GPIO_Init+0x280>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d026      	beq.n	80030b2 <HAL_GPIO_Init+0xae>
 8003064:	4a87      	ldr	r2, [pc, #540]	; (8003284 <HAL_GPIO_Init+0x280>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d806      	bhi.n	8003078 <HAL_GPIO_Init+0x74>
 800306a:	4a87      	ldr	r2, [pc, #540]	; (8003288 <HAL_GPIO_Init+0x284>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d020      	beq.n	80030b2 <HAL_GPIO_Init+0xae>
 8003070:	4a86      	ldr	r2, [pc, #536]	; (800328c <HAL_GPIO_Init+0x288>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_GPIO_Init+0xae>
          break;
 8003076:	e036      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003078:	4a85      	ldr	r2, [pc, #532]	; (8003290 <HAL_GPIO_Init+0x28c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d019      	beq.n	80030b2 <HAL_GPIO_Init+0xae>
 800307e:	4a85      	ldr	r2, [pc, #532]	; (8003294 <HAL_GPIO_Init+0x290>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d016      	beq.n	80030b2 <HAL_GPIO_Init+0xae>
 8003084:	4a84      	ldr	r2, [pc, #528]	; (8003298 <HAL_GPIO_Init+0x294>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_GPIO_Init+0xae>
          break;
 800308a:	e02c      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	623b      	str	r3, [r7, #32]
          break;
 8003092:	e028      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e023      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	3308      	adds	r3, #8
 80030a4:	623b      	str	r3, [r7, #32]
          break;
 80030a6:	e01e      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	330c      	adds	r3, #12
 80030ae:	623b      	str	r3, [r7, #32]
          break;
 80030b0:	e019      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ba:	2304      	movs	r3, #4
 80030bc:	623b      	str	r3, [r7, #32]
          break;
 80030be:	e012      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c8:	2308      	movs	r3, #8
 80030ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	611a      	str	r2, [r3, #16]
          break;
 80030d2:	e008      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d4:	2308      	movs	r3, #8
 80030d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	615a      	str	r2, [r3, #20]
          break;
 80030de:	e002      	b.n	80030e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
          break;
 80030e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2bff      	cmp	r3, #255	; 0xff
 80030ea:	d801      	bhi.n	80030f0 <HAL_GPIO_Init+0xec>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	e001      	b.n	80030f4 <HAL_GPIO_Init+0xf0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2bff      	cmp	r3, #255	; 0xff
 80030fa:	d802      	bhi.n	8003102 <HAL_GPIO_Init+0xfe>
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	e002      	b.n	8003108 <HAL_GPIO_Init+0x104>
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	3b08      	subs	r3, #8
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	210f      	movs	r1, #15
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	401a      	ands	r2, r3
 800311a:	6a39      	ldr	r1, [r7, #32]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	431a      	orrs	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8096 	beq.w	8003262 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_GPIO_Init+0x298>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_GPIO_Init+0x298>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6193      	str	r3, [r2, #24]
 8003142:	4b56      	ldr	r3, [pc, #344]	; (800329c <HAL_GPIO_Init+0x298>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800314e:	4a54      	ldr	r2, [pc, #336]	; (80032a0 <HAL_GPIO_Init+0x29c>)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	220f      	movs	r2, #15
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4b      	ldr	r2, [pc, #300]	; (80032a4 <HAL_GPIO_Init+0x2a0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0x19e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4a      	ldr	r2, [pc, #296]	; (80032a8 <HAL_GPIO_Init+0x2a4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00d      	beq.n	800319e <HAL_GPIO_Init+0x19a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a49      	ldr	r2, [pc, #292]	; (80032ac <HAL_GPIO_Init+0x2a8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <HAL_GPIO_Init+0x196>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a48      	ldr	r2, [pc, #288]	; (80032b0 <HAL_GPIO_Init+0x2ac>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_GPIO_Init+0x192>
 8003192:	2303      	movs	r3, #3
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x1a0>
 8003196:	2304      	movs	r3, #4
 8003198:	e004      	b.n	80031a4 <HAL_GPIO_Init+0x1a0>
 800319a:	2302      	movs	r3, #2
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_Init+0x1a0>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_GPIO_Init+0x1a0>
 80031a2:	2300      	movs	r3, #0
 80031a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a6:	f002 0203 	and.w	r2, r2, #3
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	4093      	lsls	r3, r2
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031b4:	493a      	ldr	r1, [pc, #232]	; (80032a0 <HAL_GPIO_Init+0x29c>)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4938      	ldr	r1, [pc, #224]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
 80031da:	e006      	b.n	80031ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031dc:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4933      	ldr	r1, [pc, #204]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	492e      	ldr	r1, [pc, #184]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
 8003202:	e006      	b.n	8003212 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	43db      	mvns	r3, r3
 800320c:	4929      	ldr	r1, [pc, #164]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 800320e:	4013      	ands	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	4924      	ldr	r1, [pc, #144]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
 800322a:	e006      	b.n	800323a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	43db      	mvns	r3, r3
 8003234:	491f      	ldr	r1, [pc, #124]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 8003236:	4013      	ands	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	491a      	ldr	r1, [pc, #104]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	60cb      	str	r3, [r1, #12]
 8003252:	e006      	b.n	8003262 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	43db      	mvns	r3, r3
 800325c:	4915      	ldr	r1, [pc, #84]	; (80032b4 <HAL_GPIO_Init+0x2b0>)
 800325e:	4013      	ands	r3, r2
 8003260:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	f47f aed0 	bne.w	8003018 <HAL_GPIO_Init+0x14>
  }
}
 8003278:	bf00      	nop
 800327a:	372c      	adds	r7, #44	; 0x2c
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	10210000 	.word	0x10210000
 8003288:	10110000 	.word	0x10110000
 800328c:	10120000 	.word	0x10120000
 8003290:	10310000 	.word	0x10310000
 8003294:	10320000 	.word	0x10320000
 8003298:	10220000 	.word	0x10220000
 800329c:	40021000 	.word	0x40021000
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40010800 	.word	0x40010800
 80032a8:	40010c00 	.word	0x40010c00
 80032ac:	40011000 	.word	0x40011000
 80032b0:	40011400 	.word	0x40011400
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e001      	b.n	80032da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]
 80032f2:	4613      	mov	r3, r2
 80032f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f6:	787b      	ldrb	r3, [r7, #1]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fc:	887a      	ldrh	r2, [r7, #2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003302:	e003      	b.n	800330c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	041a      	lsls	r2, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003328:	887a      	ldrh	r2, [r7, #2]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	041a      	lsls	r2, r3, #16
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43d9      	mvns	r1, r3
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	400b      	ands	r3, r1
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e26c      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8087 	beq.w	8003476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003368:	4b92      	ldr	r3, [pc, #584]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b04      	cmp	r3, #4
 8003372:	d00c      	beq.n	800338e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003374:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d112      	bne.n	80033a6 <HAL_RCC_OscConfig+0x5e>
 8003380:	4b8c      	ldr	r3, [pc, #560]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d10b      	bne.n	80033a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338e:	4b89      	ldr	r3, [pc, #548]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06c      	beq.n	8003474 <HAL_RCC_OscConfig+0x12c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d168      	bne.n	8003474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e246      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x76>
 80033b0:	4b80      	ldr	r3, [pc, #512]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a7f      	ldr	r2, [pc, #508]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	e02e      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b7b      	ldr	r3, [pc, #492]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7a      	ldr	r2, [pc, #488]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b78      	ldr	r3, [pc, #480]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a77      	ldr	r2, [pc, #476]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e01d      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0xbc>
 80033ea:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a71      	ldr	r2, [pc, #452]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6e      	ldr	r2, [pc, #440]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e00b      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 8003404:	4b6b      	ldr	r3, [pc, #428]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6a      	ldr	r2, [pc, #424]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b68      	ldr	r3, [pc, #416]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a67      	ldr	r2, [pc, #412]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fe4c 	bl	80020c0 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fe48 	bl	80020c0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1fa      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0xe4>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fe38 	bl	80020c0 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fe fe34 	bl	80020c0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1e6      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x10c>
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d063      	beq.n	800354a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003482:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d11c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x18c>
 800349a:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d116      	bne.n	80034d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_RCC_OscConfig+0x176>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1ba      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4939      	ldr	r1, [pc, #228]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	e03a      	b.n	800354a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe fded 	bl	80020c0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ea:	f7fe fde9 	bl	80020c0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e19b      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4927      	ldr	r1, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe fdcc 	bl	80020c0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe fdc8 	bl	80020c0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e17a      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03a      	beq.n	80035cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d019      	beq.n	8003592 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_RCC_OscConfig+0x274>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003564:	f7fe fdac 	bl	80020c0 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356c:	f7fe fda8 	bl	80020c0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e15a      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800358a:	2001      	movs	r0, #1
 800358c:	f000 fac6 	bl	8003b1c <RCC_Delay>
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_OscConfig+0x274>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003598:	f7fe fd92 	bl	80020c0 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359e:	e00f      	b.n	80035c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a0:	f7fe fd8e 	bl	80020c0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d908      	bls.n	80035c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e140      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	42420000 	.word	0x42420000
 80035bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b9e      	ldr	r3, [pc, #632]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e9      	bne.n	80035a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a6 	beq.w	8003726 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b97      	ldr	r3, [pc, #604]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	4b94      	ldr	r3, [pc, #592]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4a93      	ldr	r2, [pc, #588]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	61d3      	str	r3, [r2, #28]
 80035f6:	4b91      	ldr	r3, [pc, #580]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b8e      	ldr	r3, [pc, #568]	; (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b8b      	ldr	r3, [pc, #556]	; (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a8a      	ldr	r2, [pc, #552]	; (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fe fd4f 	bl	80020c0 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fe fd4b 	bl	80020c0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b64      	cmp	r3, #100	; 0x64
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0fd      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x4f8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x312>
 800364c:	4b7b      	ldr	r3, [pc, #492]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a7a      	ldr	r2, [pc, #488]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6213      	str	r3, [r2, #32]
 8003658:	e02d      	b.n	80036b6 <HAL_RCC_OscConfig+0x36e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x334>
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	6213      	str	r3, [r2, #32]
 800366e:	4b73      	ldr	r3, [pc, #460]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a72      	ldr	r2, [pc, #456]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	e01c      	b.n	80036b6 <HAL_RCC_OscConfig+0x36e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b05      	cmp	r3, #5
 8003682:	d10c      	bne.n	800369e <HAL_RCC_OscConfig+0x356>
 8003684:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4a6c      	ldr	r2, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	6213      	str	r3, [r2, #32]
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a69      	ldr	r2, [pc, #420]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	e00b      	b.n	80036b6 <HAL_RCC_OscConfig+0x36e>
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a66      	ldr	r2, [pc, #408]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	4b64      	ldr	r3, [pc, #400]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a63      	ldr	r2, [pc, #396]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d015      	beq.n	80036ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fe fcff 	bl	80020c0 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe fcfb 	bl	80020c0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0ab      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	4b57      	ldr	r3, [pc, #348]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ee      	beq.n	80036c6 <HAL_RCC_OscConfig+0x37e>
 80036e8:	e014      	b.n	8003714 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ea:	f7fe fce9 	bl	80020c0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe fce5 	bl	80020c0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e095      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003708:	4b4c      	ldr	r3, [pc, #304]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ee      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b48      	ldr	r3, [pc, #288]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a47      	ldr	r2, [pc, #284]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8081 	beq.w	8003832 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003730:	4b42      	ldr	r3, [pc, #264]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d061      	beq.n	8003800 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d146      	bne.n	80037d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCC_OscConfig+0x4fc>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe fcb9 	bl	80020c0 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe fcb5 	bl	80020c0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e067      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003764:	4b35      	ldr	r3, [pc, #212]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d108      	bne.n	800378c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800377a:	4b30      	ldr	r3, [pc, #192]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	492d      	ldr	r1, [pc, #180]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a19      	ldr	r1, [r3, #32]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	430b      	orrs	r3, r1
 800379e:	4927      	ldr	r1, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x4fc>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7fe fc89 	bl	80020c0 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe fc85 	bl	80020c0 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e037      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x46a>
 80037d0:	e02f      	b.n	8003832 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <HAL_RCC_OscConfig+0x4fc>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fc72 	bl	80020c0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe fc6e 	bl	80020c0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e020      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x498>
 80037fe:	e018      	b.n	8003832 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e013      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x4f4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	429a      	cmp	r2, r3
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
 8003844:	42420060 	.word	0x42420060

08003848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0d0      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 0207 	bic.w	r2, r3, #7
 8003872:	4965      	ldr	r1, [pc, #404]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b8      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a4:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	494d      	ldr	r1, [pc, #308]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d040      	beq.n	8003968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e073      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06b      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4936      	ldr	r1, [pc, #216]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003938:	f7fe fbc2 	bl	80020c0 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fe fbbe 	bl	80020c0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e053      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 020c 	and.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	429a      	cmp	r2, r3
 8003966:	d1eb      	bne.n	8003940 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003968:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d210      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 0207 	bic.w	r2, r3, #7
 800397e:	4922      	ldr	r1, [pc, #136]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e032      	b.n	80039fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	490e      	ldr	r1, [pc, #56]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039d6:	f000 f821 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039da:	4601      	mov	r1, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	fa21 f303 	lsr.w	r3, r1, r3
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1cc>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1d0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fb20 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	08007024 	.word	0x08007024
 8003a14:	20000004 	.word	0x20000004
 8003a18:	20000008 	.word	0x20000008

08003a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b490      	push	{r4, r7}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a22:	4b2a      	ldr	r3, [pc, #168]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a24:	1d3c      	adds	r4, r7, #4
 8003a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a2c:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x40>
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x46>
 8003a5a:	e02d      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a5e:	623b      	str	r3, [r7, #32]
      break;
 8003a60:	e02d      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	0c9b      	lsrs	r3, r3, #18
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a6e:	4413      	add	r3, r2
 8003a70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a80:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	0c5b      	lsrs	r3, r3, #17
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a8e:	4413      	add	r3, r2
 8003a90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a9a:	fb02 f203 	mul.w	r2, r2, r3
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e004      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	623b      	str	r3, [r7, #32]
      break;
 8003ab6:	e002      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aba:	623b      	str	r3, [r7, #32]
      break;
 8003abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc90      	pop	{r4, r7}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	08006ff0 	.word	0x08006ff0
 8003ad0:	08007000 	.word	0x08007000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	007a1200 	.word	0x007a1200
 8003adc:	003d0900 	.word	0x003d0900

08003ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae4:	4b02      	ldr	r3, [pc, #8]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	20000004 	.word	0x20000004

08003af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af8:	f7ff fff2 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003afc:	4601      	mov	r1, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	0adb      	lsrs	r3, r3, #11
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4a03      	ldr	r2, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08007034 	.word	0x08007034

08003b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <RCC_Delay+0x34>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <RCC_Delay+0x38>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0a5b      	lsrs	r3, r3, #9
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b38:	bf00      	nop
  }
  while (Delay --);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1e5a      	subs	r2, r3, #1
 8003b3e:	60fa      	str	r2, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f9      	bne.n	8003b38 <RCC_Delay+0x1c>
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000004 	.word	0x20000004
 8003b54:	10624dd3 	.word	0x10624dd3

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d07d      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b78:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	61d3      	str	r3, [r2, #28]
 8003b90:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d118      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bac:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb8:	f7fe fa82 	bl	80020c0 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fe fa7e 	bl	80020c0 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e06d      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d02e      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d027      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c06:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c0c:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c12:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fe fa4d 	bl	80020c0 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fe fa49 	bl	80020c0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e036      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ee      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4917      	ldr	r1, [pc, #92]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	490b      	ldr	r1, [pc, #44]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42420440 	.word	0x42420440

08003cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b08d      	sub	sp, #52	; 0x34
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ccc:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003cce:	f107 040c 	add.w	r4, r7, #12
 8003cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cd8:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d07f      	beq.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d002      	beq.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d048      	beq.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d00:	e08b      	b.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003d02:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d08:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d07f      	beq.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	0c9b      	lsrs	r3, r3, #18
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d20:	4413      	add	r3, r2
 8003d22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d26:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d018      	beq.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d32:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	0c5b      	lsrs	r3, r3, #17
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d40:	4413      	add	r3, r2
 8003d42:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d52:	4a37      	ldr	r2, [pc, #220]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d62:	e004      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7a:	d102      	bne.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d80:	e048      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d90:	e040      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003d92:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da2:	d108      	bne.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db4:	e01f      	b.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003dce:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de0:	d11a      	bne.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d014      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003dee:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003df4:	e010      	b.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003df6:	e00f      	b.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003df8:	f7ff fe7c 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	0b9b      	lsrs	r3, r3, #14
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	3301      	adds	r3, #1
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e18:	bf00      	nop
    }
  }
  return (frequency);
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3734      	adds	r7, #52	; 0x34
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	08007004 	.word	0x08007004
 8003e28:	08007014 	.word	0x08007014
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	007a1200 	.word	0x007a1200
 8003e34:	003d0900 	.word	0x003d0900
 8003e38:	aaaaaaab 	.word	0xaaaaaaab

08003e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e041      	b.n	8003ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd ffaa 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 fa9e 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e041      	b.n	8003f70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f839 	bl	8003f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f000 fa4f 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIM_PWM_Start+0x24>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e022      	b.n	8003ff6 <HAL_TIM_PWM_Start+0x6a>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d109      	bne.n	8003fca <HAL_TIM_PWM_Start+0x3e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e015      	b.n	8003ff6 <HAL_TIM_PWM_Start+0x6a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d109      	bne.n	8003fe4 <HAL_TIM_PWM_Start+0x58>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e008      	b.n	8003ff6 <HAL_TIM_PWM_Start+0x6a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e05e      	b.n	80040bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0x82>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800400c:	e013      	b.n	8004036 <HAL_TIM_PWM_Start+0xaa>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0x92>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800401c:	e00b      	b.n	8004036 <HAL_TIM_PWM_Start+0xaa>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0xa2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402c:	e003      	b.n	8004036 <HAL_TIM_PWM_Start+0xaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fc3c 	bl	80048bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <HAL_TIM_PWM_Start+0x138>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d107      	bne.n	800405e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_TIM_PWM_Start+0x138>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_TIM_PWM_Start+0xfa>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d009      	beq.n	8004086 <HAL_TIM_PWM_Start+0xfa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <HAL_TIM_PWM_Start+0x13c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_TIM_PWM_Start+0xfa>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <HAL_TIM_PWM_Start+0x140>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b06      	cmp	r3, #6
 8004096:	d010      	beq.n	80040ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	e007      	b.n	80040ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800

080040d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0ac      	b.n	8004244 <HAL_TIM_PWM_ConfigChannel+0x174>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	f200 809f 	bhi.w	8004238 <HAL_TIM_PWM_ConfigChannel+0x168>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004135 	.word	0x08004135
 8004104:	08004239 	.word	0x08004239
 8004108:	08004239 	.word	0x08004239
 800410c:	08004239 	.word	0x08004239
 8004110:	08004175 	.word	0x08004175
 8004114:	08004239 	.word	0x08004239
 8004118:	08004239 	.word	0x08004239
 800411c:	08004239 	.word	0x08004239
 8004120:	080041b7 	.word	0x080041b7
 8004124:	08004239 	.word	0x08004239
 8004128:	08004239 	.word	0x08004239
 800412c:	08004239 	.word	0x08004239
 8004130:	080041f7 	.word	0x080041f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f9a0 	bl	8004480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	619a      	str	r2, [r3, #24]
      break;
 8004172:	e062      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f9e6 	bl	800454c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	619a      	str	r2, [r3, #24]
      break;
 80041b4:	e041      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fa2f 	bl	8004620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0208 	orr.w	r2, r2, #8
 80041d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0204 	bic.w	r2, r2, #4
 80041e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
      break;
 80041f4:	e021      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fa79 	bl	80046f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	021a      	lsls	r2, r3, #8
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	61da      	str	r2, [r3, #28]
      break;
 8004236:	e000      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIM_ConfigClockSource+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e0a6      	b.n	80043b2 <HAL_TIM_ConfigClockSource+0x166>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004282:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800428a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d067      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x120>
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d80b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x6c>
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d073      	beq.n	800438c <HAL_TIM_ConfigClockSource+0x140>
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d802      	bhi.n	80042ae <HAL_TIM_ConfigClockSource+0x62>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d06f      	beq.n	800438c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042ac:	e078      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d06c      	beq.n	800438c <HAL_TIM_ConfigClockSource+0x140>
 80042b2:	2b30      	cmp	r3, #48	; 0x30
 80042b4:	d06a      	beq.n	800438c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80042b6:	e073      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042b8:	2b70      	cmp	r3, #112	; 0x70
 80042ba:	d00d      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0x8c>
 80042bc:	2b70      	cmp	r3, #112	; 0x70
 80042be:	d804      	bhi.n	80042ca <HAL_TIM_ConfigClockSource+0x7e>
 80042c0:	2b50      	cmp	r3, #80	; 0x50
 80042c2:	d033      	beq.n	800432c <HAL_TIM_ConfigClockSource+0xe0>
 80042c4:	2b60      	cmp	r3, #96	; 0x60
 80042c6:	d041      	beq.n	800434c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80042c8:	e06a      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ce:	d066      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x152>
 80042d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d4:	d017      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80042d6:	e063      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6899      	ldr	r1, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f000 fac9 	bl	800487e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e04c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f000 fab2 	bl	800487e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004328:	609a      	str	r2, [r3, #8]
      break;
 800432a:	e039      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	461a      	mov	r2, r3
 800433a:	f000 fa29 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2150      	movs	r1, #80	; 0x50
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fa80 	bl	800484a <TIM_ITRx_SetConfig>
      break;
 800434a:	e029      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	461a      	mov	r2, r3
 800435a:	f000 fa47 	bl	80047ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2160      	movs	r1, #96	; 0x60
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fa70 	bl	800484a <TIM_ITRx_SetConfig>
      break;
 800436a:	e019      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	461a      	mov	r2, r3
 800437a:	f000 fa09 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2140      	movs	r1, #64	; 0x40
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fa60 	bl	800484a <TIM_ITRx_SetConfig>
      break;
 800438a:	e009      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 fa57 	bl	800484a <TIM_ITRx_SetConfig>
        break;
 800439c:	e000      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800439e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a29      	ldr	r2, [pc, #164]	; (8004474 <TIM_Base_SetConfig+0xb8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <TIM_Base_SetConfig+0x30>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d007      	beq.n	80043ec <TIM_Base_SetConfig+0x30>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a26      	ldr	r2, [pc, #152]	; (8004478 <TIM_Base_SetConfig+0xbc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0x30>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a25      	ldr	r2, [pc, #148]	; (800447c <TIM_Base_SetConfig+0xc0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d108      	bne.n	80043fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <TIM_Base_SetConfig+0xb8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_Base_SetConfig+0x62>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d007      	beq.n	800441e <TIM_Base_SetConfig+0x62>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a19      	ldr	r2, [pc, #100]	; (8004478 <TIM_Base_SetConfig+0xbc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_Base_SetConfig+0x62>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <TIM_Base_SetConfig+0xc0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d108      	bne.n	8004430 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a07      	ldr	r2, [pc, #28]	; (8004474 <TIM_Base_SetConfig+0xb8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d103      	bne.n	8004464 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	615a      	str	r2, [r3, #20]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800

08004480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f023 0201 	bic.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 0302 	bic.w	r3, r3, #2
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <TIM_OC1_SetConfig+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0308 	bic.w	r3, r3, #8
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a13      	ldr	r2, [pc, #76]	; (8004548 <TIM_OC1_SetConfig+0xc8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d111      	bne.n	8004522 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	621a      	str	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00

0800454c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f023 0210 	bic.w	r2, r3, #16
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0320 	bic.w	r3, r3, #32
 8004596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1d      	ldr	r2, [pc, #116]	; (800461c <TIM_OC2_SetConfig+0xd0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10d      	bne.n	80045c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a14      	ldr	r2, [pc, #80]	; (800461c <TIM_OC2_SetConfig+0xd0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d113      	bne.n	80045f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	40012c00 	.word	0x40012c00

08004620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <TIM_OC3_SetConfig+0xd0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10d      	bne.n	800469a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <TIM_OC3_SetConfig+0xd0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d113      	bne.n	80046ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800473e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a0f      	ldr	r2, [pc, #60]	; (800478c <TIM_OC4_SetConfig+0x98>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d109      	bne.n	8004768 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr
 800478c:	40012c00 	.word	0x40012c00

08004790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 030a 	bic.w	r3, r3, #10
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 0210 	bic.w	r2, r3, #16
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004816:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	031b      	lsls	r3, r3, #12
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	621a      	str	r2, [r3, #32]
}
 8004840:	bf00      	nop
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	f043 0307 	orr.w	r3, r3, #7
 800486c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	609a      	str	r2, [r3, #8]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800487e:	b480      	push	{r7}
 8004880:	b087      	sub	sp, #28
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
 800488a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004898:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	021a      	lsls	r2, r3, #8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	609a      	str	r2, [r3, #8]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2201      	movs	r2, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	43db      	mvns	r3, r3
 80048de:	401a      	ands	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e046      	b.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d009      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a10      	ldr	r2, [pc, #64]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10c      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4313      	orrs	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800

080049c0 <__errno>:
 80049c0:	4b01      	ldr	r3, [pc, #4]	; (80049c8 <__errno+0x8>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000010 	.word	0x20000010

080049cc <gmtime>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <gmtime+0x20>)
 80049d0:	4605      	mov	r5, r0
 80049d2:	681c      	ldr	r4, [r3, #0]
 80049d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049d6:	b91b      	cbnz	r3, 80049e0 <gmtime+0x14>
 80049d8:	2024      	movs	r0, #36	; 0x24
 80049da:	f000 f8d9 	bl	8004b90 <malloc>
 80049de:	63e0      	str	r0, [r4, #60]	; 0x3c
 80049e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80049e2:	4628      	mov	r0, r5
 80049e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049e8:	f000 b802 	b.w	80049f0 <gmtime_r>
 80049ec:	20000010 	.word	0x20000010

080049f0 <gmtime_r>:
 80049f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f4:	e9d0 8900 	ldrd	r8, r9, [r0]
 80049f8:	460c      	mov	r4, r1
 80049fa:	4a4f      	ldr	r2, [pc, #316]	; (8004b38 <gmtime_r+0x148>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4640      	mov	r0, r8
 8004a00:	4649      	mov	r1, r9
 8004a02:	f7fc f915 	bl	8000c30 <__aeabi_ldivmod>
 8004a06:	4a4c      	ldr	r2, [pc, #304]	; (8004b38 <gmtime_r+0x148>)
 8004a08:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4649      	mov	r1, r9
 8004a12:	f7fc f90d 	bl	8000c30 <__aeabi_ldivmod>
 8004a16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	bfbc      	itt	lt
 8004a1e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8004a22:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8004a26:	fb92 f3f1 	sdiv	r3, r2, r1
 8004a2a:	fb01 2213 	mls	r2, r1, r3, r2
 8004a2e:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8004a32:	60a3      	str	r3, [r4, #8]
 8004a34:	fb92 f3f1 	sdiv	r3, r2, r1
 8004a38:	fb01 2213 	mls	r2, r1, r3, r2
 8004a3c:	6022      	str	r2, [r4, #0]
 8004a3e:	f04f 0207 	mov.w	r2, #7
 8004a42:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 8004a46:	bfb8      	it	lt
 8004a48:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8004a4c:	6063      	str	r3, [r4, #4]
 8004a4e:	1ceb      	adds	r3, r5, #3
 8004a50:	fb93 f2f2 	sdiv	r2, r3, r2
 8004a54:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	bf48      	it	mi
 8004a5c:	3307      	addmi	r3, #7
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	4836      	ldr	r0, [pc, #216]	; (8004b3c <gmtime_r+0x14c>)
 8004a62:	61a3      	str	r3, [r4, #24]
 8004a64:	bfbd      	ittte	lt
 8004a66:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 8004a6a:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8004a6e:	fb93 f0f0 	sdivlt	r0, r3, r0
 8004a72:	fb95 f0f0 	sdivge	r0, r5, r0
 8004a76:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8004a7a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8004a7e:	4b30      	ldr	r3, [pc, #192]	; (8004b40 <gmtime_r+0x150>)
 8004a80:	f240 166d 	movw	r6, #365	; 0x16d
 8004a84:	fb03 5300 	mla	r3, r3, r0, r5
 8004a88:	fbb3 f1f1 	udiv	r1, r3, r1
 8004a8c:	fbb3 f2f7 	udiv	r2, r3, r7
 8004a90:	4419      	add	r1, r3
 8004a92:	1a89      	subs	r1, r1, r2
 8004a94:	4a2b      	ldr	r2, [pc, #172]	; (8004b44 <gmtime_r+0x154>)
 8004a96:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a9a:	1a8a      	subs	r2, r1, r2
 8004a9c:	f648 6194 	movw	r1, #36500	; 0x8e94
 8004aa0:	fbb2 f1f1 	udiv	r1, r2, r1
 8004aa4:	fbb2 f5f6 	udiv	r5, r2, r6
 8004aa8:	fbb2 f2f7 	udiv	r2, r2, r7
 8004aac:	440b      	add	r3, r1
 8004aae:	2199      	movs	r1, #153	; 0x99
 8004ab0:	1a9a      	subs	r2, r3, r2
 8004ab2:	fb06 2315 	mls	r3, r6, r5, r2
 8004ab6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004aba:	3202      	adds	r2, #2
 8004abc:	fbb2 f2f1 	udiv	r2, r2, r1
 8004ac0:	2705      	movs	r7, #5
 8004ac2:	4351      	muls	r1, r2
 8004ac4:	3102      	adds	r1, #2
 8004ac6:	fbb1 f1f7 	udiv	r1, r1, r7
 8004aca:	2a0a      	cmp	r2, #10
 8004acc:	f103 0601 	add.w	r6, r3, #1
 8004ad0:	eba6 0101 	sub.w	r1, r6, r1
 8004ad4:	bf34      	ite	cc
 8004ad6:	2602      	movcc	r6, #2
 8004ad8:	f06f 0609 	mvncs.w	r6, #9
 8004adc:	4416      	add	r6, r2
 8004ade:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004ae2:	fb02 5000 	mla	r0, r2, r0, r5
 8004ae6:	2e01      	cmp	r6, #1
 8004ae8:	bf98      	it	ls
 8004aea:	3001      	addls	r0, #1
 8004aec:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8004af0:	d30c      	bcc.n	8004b0c <gmtime_r+0x11c>
 8004af2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004af6:	61e3      	str	r3, [r4, #28]
 8004af8:	2300      	movs	r3, #0
 8004afa:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8004afe:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8004b02:	60e1      	str	r1, [r4, #12]
 8004b04:	6223      	str	r3, [r4, #32]
 8004b06:	4620      	mov	r0, r4
 8004b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0c:	07aa      	lsls	r2, r5, #30
 8004b0e:	d105      	bne.n	8004b1c <gmtime_r+0x12c>
 8004b10:	2764      	movs	r7, #100	; 0x64
 8004b12:	fbb5 f2f7 	udiv	r2, r5, r7
 8004b16:	fb07 5212 	mls	r2, r7, r2, r5
 8004b1a:	b95a      	cbnz	r2, 8004b34 <gmtime_r+0x144>
 8004b1c:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8004b20:	fbb5 f2f7 	udiv	r2, r5, r7
 8004b24:	fb07 5212 	mls	r2, r7, r2, r5
 8004b28:	fab2 f282 	clz	r2, r2
 8004b2c:	0952      	lsrs	r2, r2, #5
 8004b2e:	333b      	adds	r3, #59	; 0x3b
 8004b30:	4413      	add	r3, r2
 8004b32:	e7e0      	b.n	8004af6 <gmtime_r+0x106>
 8004b34:	2201      	movs	r2, #1
 8004b36:	e7fa      	b.n	8004b2e <gmtime_r+0x13e>
 8004b38:	00015180 	.word	0x00015180
 8004b3c:	00023ab1 	.word	0x00023ab1
 8004b40:	fffdc54f 	.word	0xfffdc54f
 8004b44:	00023ab0 	.word	0x00023ab0

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	2500      	movs	r5, #0
 8004b4c:	4e0c      	ldr	r6, [pc, #48]	; (8004b80 <__libc_init_array+0x38>)
 8004b4e:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b50:	1ba4      	subs	r4, r4, r6
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	42a5      	cmp	r5, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	f002 f996 	bl	8006e88 <_init>
 8004b5c:	2500      	movs	r5, #0
 8004b5e:	4e0a      	ldr	r6, [pc, #40]	; (8004b88 <__libc_init_array+0x40>)
 8004b60:	4c0a      	ldr	r4, [pc, #40]	; (8004b8c <__libc_init_array+0x44>)
 8004b62:	1ba4      	subs	r4, r4, r6
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	42a5      	cmp	r5, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b70:	4798      	blx	r3
 8004b72:	3501      	adds	r5, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b7a:	4798      	blx	r3
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	08007520 	.word	0x08007520
 8004b84:	08007520 	.word	0x08007520
 8004b88:	08007520 	.word	0x08007520
 8004b8c:	08007524 	.word	0x08007524

08004b90 <malloc>:
 8004b90:	4b02      	ldr	r3, [pc, #8]	; (8004b9c <malloc+0xc>)
 8004b92:	4601      	mov	r1, r0
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f000 b85f 	b.w	8004c58 <_malloc_r>
 8004b9a:	bf00      	nop
 8004b9c:	20000010 	.word	0x20000010

08004ba0 <free>:
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <free+0xc>)
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	f000 b80b 	b.w	8004bc0 <_free_r>
 8004baa:	bf00      	nop
 8004bac:	20000010 	.word	0x20000010

08004bb0 <memset>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4402      	add	r2, r0
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d100      	bne.n	8004bba <memset+0xa>
 8004bb8:	4770      	bx	lr
 8004bba:	f803 1b01 	strb.w	r1, [r3], #1
 8004bbe:	e7f9      	b.n	8004bb4 <memset+0x4>

08004bc0 <_free_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	d043      	beq.n	8004c50 <_free_r+0x90>
 8004bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bcc:	1f0c      	subs	r4, r1, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfb8      	it	lt
 8004bd2:	18e4      	addlt	r4, r4, r3
 8004bd4:	f001 f8ea 	bl	8005dac <__malloc_lock>
 8004bd8:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <_free_r+0x94>)
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	4610      	mov	r0, r2
 8004bde:	b933      	cbnz	r3, 8004bee <_free_r+0x2e>
 8004be0:	6063      	str	r3, [r4, #4]
 8004be2:	6014      	str	r4, [r2, #0]
 8004be4:	4628      	mov	r0, r5
 8004be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bea:	f001 b8e0 	b.w	8005dae <__malloc_unlock>
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	d90b      	bls.n	8004c0a <_free_r+0x4a>
 8004bf2:	6821      	ldr	r1, [r4, #0]
 8004bf4:	1862      	adds	r2, r4, r1
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bf01      	itttt	eq
 8004bfa:	681a      	ldreq	r2, [r3, #0]
 8004bfc:	685b      	ldreq	r3, [r3, #4]
 8004bfe:	1852      	addeq	r2, r2, r1
 8004c00:	6022      	streq	r2, [r4, #0]
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	6004      	str	r4, [r0, #0]
 8004c06:	e7ed      	b.n	8004be4 <_free_r+0x24>
 8004c08:	4613      	mov	r3, r2
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	b10a      	cbz	r2, 8004c12 <_free_r+0x52>
 8004c0e:	42a2      	cmp	r2, r4
 8004c10:	d9fa      	bls.n	8004c08 <_free_r+0x48>
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	1858      	adds	r0, r3, r1
 8004c16:	42a0      	cmp	r0, r4
 8004c18:	d10b      	bne.n	8004c32 <_free_r+0x72>
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	4401      	add	r1, r0
 8004c1e:	1858      	adds	r0, r3, r1
 8004c20:	4282      	cmp	r2, r0
 8004c22:	6019      	str	r1, [r3, #0]
 8004c24:	d1de      	bne.n	8004be4 <_free_r+0x24>
 8004c26:	6810      	ldr	r0, [r2, #0]
 8004c28:	6852      	ldr	r2, [r2, #4]
 8004c2a:	4401      	add	r1, r0
 8004c2c:	6019      	str	r1, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	e7d8      	b.n	8004be4 <_free_r+0x24>
 8004c32:	d902      	bls.n	8004c3a <_free_r+0x7a>
 8004c34:	230c      	movs	r3, #12
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	e7d4      	b.n	8004be4 <_free_r+0x24>
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1821      	adds	r1, r4, r0
 8004c3e:	428a      	cmp	r2, r1
 8004c40:	bf01      	itttt	eq
 8004c42:	6811      	ldreq	r1, [r2, #0]
 8004c44:	6852      	ldreq	r2, [r2, #4]
 8004c46:	1809      	addeq	r1, r1, r0
 8004c48:	6021      	streq	r1, [r4, #0]
 8004c4a:	6062      	str	r2, [r4, #4]
 8004c4c:	605c      	str	r4, [r3, #4]
 8004c4e:	e7c9      	b.n	8004be4 <_free_r+0x24>
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
 8004c52:	bf00      	nop
 8004c54:	2000026c 	.word	0x2000026c

08004c58 <_malloc_r>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	1ccd      	adds	r5, r1, #3
 8004c5c:	f025 0503 	bic.w	r5, r5, #3
 8004c60:	3508      	adds	r5, #8
 8004c62:	2d0c      	cmp	r5, #12
 8004c64:	bf38      	it	cc
 8004c66:	250c      	movcc	r5, #12
 8004c68:	2d00      	cmp	r5, #0
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	db01      	blt.n	8004c72 <_malloc_r+0x1a>
 8004c6e:	42a9      	cmp	r1, r5
 8004c70:	d903      	bls.n	8004c7a <_malloc_r+0x22>
 8004c72:	230c      	movs	r3, #12
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	2000      	movs	r0, #0
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
 8004c7a:	f001 f897 	bl	8005dac <__malloc_lock>
 8004c7e:	4a21      	ldr	r2, [pc, #132]	; (8004d04 <_malloc_r+0xac>)
 8004c80:	6814      	ldr	r4, [r2, #0]
 8004c82:	4621      	mov	r1, r4
 8004c84:	b991      	cbnz	r1, 8004cac <_malloc_r+0x54>
 8004c86:	4c20      	ldr	r4, [pc, #128]	; (8004d08 <_malloc_r+0xb0>)
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	b91b      	cbnz	r3, 8004c94 <_malloc_r+0x3c>
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f000 f83d 	bl	8004d0c <_sbrk_r>
 8004c92:	6020      	str	r0, [r4, #0]
 8004c94:	4629      	mov	r1, r5
 8004c96:	4630      	mov	r0, r6
 8004c98:	f000 f838 	bl	8004d0c <_sbrk_r>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d124      	bne.n	8004cea <_malloc_r+0x92>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	6033      	str	r3, [r6, #0]
 8004ca6:	f001 f882 	bl	8005dae <__malloc_unlock>
 8004caa:	e7e4      	b.n	8004c76 <_malloc_r+0x1e>
 8004cac:	680b      	ldr	r3, [r1, #0]
 8004cae:	1b5b      	subs	r3, r3, r5
 8004cb0:	d418      	bmi.n	8004ce4 <_malloc_r+0x8c>
 8004cb2:	2b0b      	cmp	r3, #11
 8004cb4:	d90f      	bls.n	8004cd6 <_malloc_r+0x7e>
 8004cb6:	600b      	str	r3, [r1, #0]
 8004cb8:	18cc      	adds	r4, r1, r3
 8004cba:	50cd      	str	r5, [r1, r3]
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f001 f876 	bl	8005dae <__malloc_unlock>
 8004cc2:	f104 000b 	add.w	r0, r4, #11
 8004cc6:	1d23      	adds	r3, r4, #4
 8004cc8:	f020 0007 	bic.w	r0, r0, #7
 8004ccc:	1ac3      	subs	r3, r0, r3
 8004cce:	d0d3      	beq.n	8004c78 <_malloc_r+0x20>
 8004cd0:	425a      	negs	r2, r3
 8004cd2:	50e2      	str	r2, [r4, r3]
 8004cd4:	e7d0      	b.n	8004c78 <_malloc_r+0x20>
 8004cd6:	684b      	ldr	r3, [r1, #4]
 8004cd8:	428c      	cmp	r4, r1
 8004cda:	bf16      	itet	ne
 8004cdc:	6063      	strne	r3, [r4, #4]
 8004cde:	6013      	streq	r3, [r2, #0]
 8004ce0:	460c      	movne	r4, r1
 8004ce2:	e7eb      	b.n	8004cbc <_malloc_r+0x64>
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	6849      	ldr	r1, [r1, #4]
 8004ce8:	e7cc      	b.n	8004c84 <_malloc_r+0x2c>
 8004cea:	1cc4      	adds	r4, r0, #3
 8004cec:	f024 0403 	bic.w	r4, r4, #3
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d005      	beq.n	8004d00 <_malloc_r+0xa8>
 8004cf4:	1a21      	subs	r1, r4, r0
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f000 f808 	bl	8004d0c <_sbrk_r>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d0cf      	beq.n	8004ca0 <_malloc_r+0x48>
 8004d00:	6025      	str	r5, [r4, #0]
 8004d02:	e7db      	b.n	8004cbc <_malloc_r+0x64>
 8004d04:	2000026c 	.word	0x2000026c
 8004d08:	20000270 	.word	0x20000270

08004d0c <_sbrk_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4c05      	ldr	r4, [pc, #20]	; (8004d28 <_sbrk_r+0x1c>)
 8004d12:	4605      	mov	r5, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	f7fd f8d0 	bl	8001ebc <_sbrk>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_sbrk_r+0x1a>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_sbrk_r+0x1a>
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	20000360 	.word	0x20000360

08004d2c <iso_year_adjust>:
 8004d2c:	6942      	ldr	r2, [r0, #20]
 8004d2e:	f240 736c 	movw	r3, #1900	; 0x76c
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	bfa8      	it	ge
 8004d36:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8004d3a:	441a      	add	r2, r3
 8004d3c:	0793      	lsls	r3, r2, #30
 8004d3e:	d105      	bne.n	8004d4c <iso_year_adjust+0x20>
 8004d40:	2164      	movs	r1, #100	; 0x64
 8004d42:	fb92 f3f1 	sdiv	r3, r2, r1
 8004d46:	fb01 2313 	mls	r3, r1, r3, r2
 8004d4a:	b9d3      	cbnz	r3, 8004d82 <iso_year_adjust+0x56>
 8004d4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004d50:	fb92 f3f1 	sdiv	r3, r2, r1
 8004d54:	fb01 2313 	mls	r3, r1, r3, r2
 8004d58:	fab3 f283 	clz	r2, r3
 8004d5c:	0952      	lsrs	r2, r2, #5
 8004d5e:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004d68:	4413      	add	r3, r2
 8004d6a:	2b21      	cmp	r3, #33	; 0x21
 8004d6c:	dc11      	bgt.n	8004d92 <iso_year_adjust+0x66>
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	da30      	bge.n	8004dd4 <iso_year_adjust+0xa8>
 8004d72:	2b0d      	cmp	r3, #13
 8004d74:	dc07      	bgt.n	8004d86 <iso_year_adjust+0x5a>
 8004d76:	2b0a      	cmp	r3, #10
 8004d78:	da2c      	bge.n	8004dd4 <iso_year_adjust+0xa8>
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d92a      	bls.n	8004dd4 <iso_year_adjust+0xa8>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	4770      	bx	lr
 8004d82:	2201      	movs	r2, #1
 8004d84:	e7eb      	b.n	8004d5e <iso_year_adjust+0x32>
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	dbf9      	blt.n	8004d7e <iso_year_adjust+0x52>
 8004d8a:	2b11      	cmp	r3, #17
 8004d8c:	dd22      	ble.n	8004dd4 <iso_year_adjust+0xa8>
 8004d8e:	3b1c      	subs	r3, #28
 8004d90:	e7f3      	b.n	8004d7a <iso_year_adjust+0x4e>
 8004d92:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8004d96:	4293      	cmp	r3, r2
 8004d98:	dc0f      	bgt.n	8004dba <iso_year_adjust+0x8e>
 8004d9a:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	da09      	bge.n	8004db6 <iso_year_adjust+0x8a>
 8004da2:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d005      	beq.n	8004db6 <iso_year_adjust+0x8a>
 8004daa:	dbe8      	blt.n	8004d7e <iso_year_adjust+0x52>
 8004dac:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8004db0:	3b12      	subs	r3, #18
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d8e3      	bhi.n	8004d7e <iso_year_adjust+0x52>
 8004db6:	2001      	movs	r0, #1
 8004db8:	4770      	bx	lr
 8004dba:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d0f9      	beq.n	8004db6 <iso_year_adjust+0x8a>
 8004dc2:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d0f5      	beq.n	8004db6 <iso_year_adjust+0x8a>
 8004dca:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d1d5      	bne.n	8004d7e <iso_year_adjust+0x52>
 8004dd2:	e7f0      	b.n	8004db6 <iso_year_adjust+0x8a>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	4770      	bx	lr
	...

08004ddc <__strftime>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	461d      	mov	r5, r3
 8004de2:	2300      	movs	r3, #0
 8004de4:	4607      	mov	r7, r0
 8004de6:	460e      	mov	r6, r1
 8004de8:	461c      	mov	r4, r3
 8004dea:	b091      	sub	sp, #68	; 0x44
 8004dec:	9303      	str	r3, [sp, #12]
 8004dee:	f101 3bff 	add.w	fp, r1, #4294967295
 8004df2:	7813      	ldrb	r3, [r2, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 84e2 	beq.w	80057be <__strftime+0x9e2>
 8004dfa:	2b25      	cmp	r3, #37	; 0x25
 8004dfc:	d11f      	bne.n	8004e3e <__strftime+0x62>
 8004dfe:	f892 a001 	ldrb.w	sl, [r2, #1]
 8004e02:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8004e06:	d023      	beq.n	8004e50 <__strftime+0x74>
 8004e08:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8004e0c:	d020      	beq.n	8004e50 <__strftime+0x74>
 8004e0e:	f04f 0a00 	mov.w	sl, #0
 8004e12:	f102 0801 	add.w	r8, r2, #1
 8004e16:	f898 3000 	ldrb.w	r3, [r8]
 8004e1a:	3b31      	subs	r3, #49	; 0x31
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d81a      	bhi.n	8004e56 <__strftime+0x7a>
 8004e20:	4640      	mov	r0, r8
 8004e22:	220a      	movs	r2, #10
 8004e24:	a908      	add	r1, sp, #32
 8004e26:	f000 fd85 	bl	8005934 <strtoul>
 8004e2a:	4681      	mov	r9, r0
 8004e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e30:	f898 3000 	ldrb.w	r3, [r8]
 8004e34:	2b45      	cmp	r3, #69	; 0x45
 8004e36:	d111      	bne.n	8004e5c <__strftime+0x80>
 8004e38:	f108 0801 	add.w	r8, r8, #1
 8004e3c:	e010      	b.n	8004e60 <__strftime+0x84>
 8004e3e:	45a3      	cmp	fp, r4
 8004e40:	d802      	bhi.n	8004e48 <__strftime+0x6c>
 8004e42:	2400      	movs	r4, #0
 8004e44:	f000 bcbe 	b.w	80057c4 <__strftime+0x9e8>
 8004e48:	553b      	strb	r3, [r7, r4]
 8004e4a:	3201      	adds	r2, #1
 8004e4c:	3401      	adds	r4, #1
 8004e4e:	e7d0      	b.n	8004df2 <__strftime+0x16>
 8004e50:	f102 0802 	add.w	r8, r2, #2
 8004e54:	e7df      	b.n	8004e16 <__strftime+0x3a>
 8004e56:	f04f 0900 	mov.w	r9, #0
 8004e5a:	e7e9      	b.n	8004e30 <__strftime+0x54>
 8004e5c:	2b4f      	cmp	r3, #79	; 0x4f
 8004e5e:	d0eb      	beq.n	8004e38 <__strftime+0x5c>
 8004e60:	f898 1000 	ldrb.w	r1, [r8]
 8004e64:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8004e68:	2b55      	cmp	r3, #85	; 0x55
 8004e6a:	d8ea      	bhi.n	8004e42 <__strftime+0x66>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <__strftime+0x98>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	080057b5 	.word	0x080057b5
 8004e78:	08004e43 	.word	0x08004e43
 8004e7c:	08004e43 	.word	0x08004e43
 8004e80:	08004e43 	.word	0x08004e43
 8004e84:	08004e43 	.word	0x08004e43
 8004e88:	08004e43 	.word	0x08004e43
 8004e8c:	08004e43 	.word	0x08004e43
 8004e90:	08004e43 	.word	0x08004e43
 8004e94:	08004e43 	.word	0x08004e43
 8004e98:	08004e43 	.word	0x08004e43
 8004e9c:	08004e43 	.word	0x08004e43
 8004ea0:	08004e43 	.word	0x08004e43
 8004ea4:	08004e43 	.word	0x08004e43
 8004ea8:	08004e43 	.word	0x08004e43
 8004eac:	08004e43 	.word	0x08004e43
 8004eb0:	08004e43 	.word	0x08004e43
 8004eb4:	08004e43 	.word	0x08004e43
 8004eb8:	08004e43 	.word	0x08004e43
 8004ebc:	08004e43 	.word	0x08004e43
 8004ec0:	08004e43 	.word	0x08004e43
 8004ec4:	08004e43 	.word	0x08004e43
 8004ec8:	08004e43 	.word	0x08004e43
 8004ecc:	08004e43 	.word	0x08004e43
 8004ed0:	08004e43 	.word	0x08004e43
 8004ed4:	08004e43 	.word	0x08004e43
 8004ed8:	08004e43 	.word	0x08004e43
 8004edc:	08004e43 	.word	0x08004e43
 8004ee0:	08004e43 	.word	0x08004e43
 8004ee4:	08005009 	.word	0x08005009
 8004ee8:	0800505d 	.word	0x0800505d
 8004eec:	080050cd 	.word	0x080050cd
 8004ef0:	08005167 	.word	0x08005167
 8004ef4:	08004e43 	.word	0x08004e43
 8004ef8:	080051b5 	.word	0x080051b5
 8004efc:	080052a5 	.word	0x080052a5
 8004f00:	080053bd 	.word	0x080053bd
 8004f04:	080053cb 	.word	0x080053cb
 8004f08:	08004e43 	.word	0x08004e43
 8004f0c:	08004e43 	.word	0x08004e43
 8004f10:	08004e43 	.word	0x08004e43
 8004f14:	080053fb 	.word	0x080053fb
 8004f18:	08004e43 	.word	0x08004e43
 8004f1c:	08004e43 	.word	0x08004e43
 8004f20:	0800540d 	.word	0x0800540d
 8004f24:	08004e43 	.word	0x08004e43
 8004f28:	0800546b 	.word	0x0800546b
 8004f2c:	08005583 	.word	0x08005583
 8004f30:	08005591 	.word	0x08005591
 8004f34:	080055e1 	.word	0x080055e1
 8004f38:	080055f1 	.word	0x080055f1
 8004f3c:	08005661 	.word	0x08005661
 8004f40:	080050c5 	.word	0x080050c5
 8004f44:	0800569b 	.word	0x0800569b
 8004f48:	08005761 	.word	0x08005761
 8004f4c:	08004e43 	.word	0x08004e43
 8004f50:	08004e43 	.word	0x08004e43
 8004f54:	08004e43 	.word	0x08004e43
 8004f58:	08004e43 	.word	0x08004e43
 8004f5c:	08004e43 	.word	0x08004e43
 8004f60:	08004e43 	.word	0x08004e43
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08005035 	.word	0x08005035
 8004f6c:	08005087 	.word	0x08005087
 8004f70:	08005143 	.word	0x08005143
 8004f74:	08005143 	.word	0x08005143
 8004f78:	08004e43 	.word	0x08004e43
 8004f7c:	0800520d 	.word	0x0800520d
 8004f80:	08005035 	.word	0x08005035
 8004f84:	08004e43 	.word	0x08004e43
 8004f88:	080053ed 	.word	0x080053ed
 8004f8c:	080053bd 	.word	0x080053bd
 8004f90:	080053cb 	.word	0x080053cb
 8004f94:	080053f5 	.word	0x080053f5
 8004f98:	080053ff 	.word	0x080053ff
 8004f9c:	08004e43 	.word	0x08004e43
 8004fa0:	0800540d 	.word	0x0800540d
 8004fa4:	08004e43 	.word	0x08004e43
 8004fa8:	080050b5 	.word	0x080050b5
 8004fac:	0800547d 	.word	0x0800547d
 8004fb0:	08005587 	.word	0x08005587
 8004fb4:	080055c9 	.word	0x080055c9
 8004fb8:	08004e43 	.word	0x08004e43
 8004fbc:	08005655 	.word	0x08005655
 8004fc0:	080050bd 	.word	0x080050bd
 8004fc4:	08005679 	.word	0x08005679
 8004fc8:	080056ef 	.word	0x080056ef
 8004fcc:	69ab      	ldr	r3, [r5, #24]
 8004fce:	4aa8      	ldr	r2, [pc, #672]	; (8005270 <__strftime+0x494>)
 8004fd0:	3318      	adds	r3, #24
 8004fd2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8004fd6:	4648      	mov	r0, r9
 8004fd8:	f7fb f8ba 	bl	8000150 <strlen>
 8004fdc:	eba9 0904 	sub.w	r9, r9, r4
 8004fe0:	4420      	add	r0, r4
 8004fe2:	42a0      	cmp	r0, r4
 8004fe4:	d108      	bne.n	8004ff8 <__strftime+0x21c>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	f898 3000 	ldrb.w	r3, [r8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 83e6 	beq.w	80057be <__strftime+0x9e2>
 8004ff2:	f108 0201 	add.w	r2, r8, #1
 8004ff6:	e6fc      	b.n	8004df2 <__strftime+0x16>
 8004ff8:	45a3      	cmp	fp, r4
 8004ffa:	f67f af22 	bls.w	8004e42 <__strftime+0x66>
 8004ffe:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005002:	553b      	strb	r3, [r7, r4]
 8005004:	3401      	adds	r4, #1
 8005006:	e7ec      	b.n	8004fe2 <__strftime+0x206>
 8005008:	69aa      	ldr	r2, [r5, #24]
 800500a:	4b99      	ldr	r3, [pc, #612]	; (8005270 <__strftime+0x494>)
 800500c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005010:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8005014:	4648      	mov	r0, r9
 8005016:	f7fb f89b 	bl	8000150 <strlen>
 800501a:	eba9 0904 	sub.w	r9, r9, r4
 800501e:	4420      	add	r0, r4
 8005020:	42a0      	cmp	r0, r4
 8005022:	d0e0      	beq.n	8004fe6 <__strftime+0x20a>
 8005024:	45a3      	cmp	fp, r4
 8005026:	f67f af0c 	bls.w	8004e42 <__strftime+0x66>
 800502a:	f819 3004 	ldrb.w	r3, [r9, r4]
 800502e:	553b      	strb	r3, [r7, r4]
 8005030:	3401      	adds	r4, #1
 8005032:	e7f5      	b.n	8005020 <__strftime+0x244>
 8005034:	692a      	ldr	r2, [r5, #16]
 8005036:	4b8e      	ldr	r3, [pc, #568]	; (8005270 <__strftime+0x494>)
 8005038:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800503c:	4648      	mov	r0, r9
 800503e:	f7fb f887 	bl	8000150 <strlen>
 8005042:	eba9 0904 	sub.w	r9, r9, r4
 8005046:	4420      	add	r0, r4
 8005048:	42a0      	cmp	r0, r4
 800504a:	d0cc      	beq.n	8004fe6 <__strftime+0x20a>
 800504c:	45a3      	cmp	fp, r4
 800504e:	f67f aef8 	bls.w	8004e42 <__strftime+0x66>
 8005052:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005056:	553b      	strb	r3, [r7, r4]
 8005058:	3401      	adds	r4, #1
 800505a:	e7f5      	b.n	8005048 <__strftime+0x26c>
 800505c:	692b      	ldr	r3, [r5, #16]
 800505e:	4a84      	ldr	r2, [pc, #528]	; (8005270 <__strftime+0x494>)
 8005060:	330c      	adds	r3, #12
 8005062:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005066:	4648      	mov	r0, r9
 8005068:	f7fb f872 	bl	8000150 <strlen>
 800506c:	eba9 0904 	sub.w	r9, r9, r4
 8005070:	4420      	add	r0, r4
 8005072:	42a0      	cmp	r0, r4
 8005074:	d0b7      	beq.n	8004fe6 <__strftime+0x20a>
 8005076:	45a3      	cmp	fp, r4
 8005078:	f67f aee3 	bls.w	8004e42 <__strftime+0x66>
 800507c:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005080:	553b      	strb	r3, [r7, r4]
 8005082:	3401      	adds	r4, #1
 8005084:	e7f5      	b.n	8005072 <__strftime+0x296>
 8005086:	4b7a      	ldr	r3, [pc, #488]	; (8005270 <__strftime+0x494>)
 8005088:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800508c:	4648      	mov	r0, r9
 800508e:	f7fb f85f 	bl	8000150 <strlen>
 8005092:	f899 3000 	ldrb.w	r3, [r9]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0a6      	beq.n	8004fe8 <__strftime+0x20c>
 800509a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800509c:	464a      	mov	r2, r9
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	462b      	mov	r3, r5
 80050a2:	1b31      	subs	r1, r6, r4
 80050a4:	1938      	adds	r0, r7, r4
 80050a6:	f7ff fe99 	bl	8004ddc <__strftime>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	f77f aec9 	ble.w	8004e42 <__strftime+0x66>
 80050b0:	4404      	add	r4, r0
 80050b2:	e799      	b.n	8004fe8 <__strftime+0x20c>
 80050b4:	4b6e      	ldr	r3, [pc, #440]	; (8005270 <__strftime+0x494>)
 80050b6:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80050ba:	e7e7      	b.n	800508c <__strftime+0x2b0>
 80050bc:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <__strftime+0x494>)
 80050be:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80050c2:	e7e3      	b.n	800508c <__strftime+0x2b0>
 80050c4:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <__strftime+0x494>)
 80050c6:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80050ca:	e7df      	b.n	800508c <__strftime+0x2b0>
 80050cc:	4b69      	ldr	r3, [pc, #420]	; (8005274 <__strftime+0x498>)
 80050ce:	6969      	ldr	r1, [r5, #20]
 80050d0:	4299      	cmp	r1, r3
 80050d2:	bfac      	ite	ge
 80050d4:	2300      	movge	r3, #0
 80050d6:	2301      	movlt	r3, #1
 80050d8:	2900      	cmp	r1, #0
 80050da:	9304      	str	r3, [sp, #16]
 80050dc:	db10      	blt.n	8005100 <__strftime+0x324>
 80050de:	2064      	movs	r0, #100	; 0x64
 80050e0:	fb91 f0f0 	sdiv	r0, r1, r0
 80050e4:	3013      	adds	r0, #19
 80050e6:	f1ba 0f00 	cmp.w	sl, #0
 80050ea:	d013      	beq.n	8005114 <__strftime+0x338>
 80050ec:	2863      	cmp	r0, #99	; 0x63
 80050ee:	dd26      	ble.n	800513e <__strftime+0x362>
 80050f0:	4a61      	ldr	r2, [pc, #388]	; (8005278 <__strftime+0x49c>)
 80050f2:	4b62      	ldr	r3, [pc, #392]	; (800527c <__strftime+0x4a0>)
 80050f4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80050f8:	bf18      	it	ne
 80050fa:	4613      	movne	r3, r2
 80050fc:	4a60      	ldr	r2, [pc, #384]	; (8005280 <__strftime+0x4a4>)
 80050fe:	e00b      	b.n	8005118 <__strftime+0x33c>
 8005100:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8005104:	9105      	str	r1, [sp, #20]
 8005106:	f000 fdcb 	bl	8005ca0 <abs>
 800510a:	2364      	movs	r3, #100	; 0x64
 800510c:	9905      	ldr	r1, [sp, #20]
 800510e:	fb90 f0f3 	sdiv	r0, r0, r3
 8005112:	e7e8      	b.n	80050e6 <__strftime+0x30a>
 8005114:	4b58      	ldr	r3, [pc, #352]	; (8005278 <__strftime+0x49c>)
 8005116:	4a5b      	ldr	r2, [pc, #364]	; (8005284 <__strftime+0x4a8>)
 8005118:	9001      	str	r0, [sp, #4]
 800511a:	9804      	ldr	r0, [sp, #16]
 800511c:	f8df c154 	ldr.w	ip, [pc, #340]	; 8005274 <__strftime+0x498>
 8005120:	f1b9 0f02 	cmp.w	r9, #2
 8005124:	bf2c      	ite	cs
 8005126:	ebc0 0009 	rsbcs	r0, r0, r9
 800512a:	f1c0 0002 	rsbcc	r0, r0, #2
 800512e:	9000      	str	r0, [sp, #0]
 8005130:	4855      	ldr	r0, [pc, #340]	; (8005288 <__strftime+0x4ac>)
 8005132:	4561      	cmp	r1, ip
 8005134:	bfb8      	it	lt
 8005136:	4603      	movlt	r3, r0
 8005138:	1b31      	subs	r1, r6, r4
 800513a:	1938      	adds	r0, r7, r4
 800513c:	e029      	b.n	8005192 <__strftime+0x3b6>
 800513e:	4b4e      	ldr	r3, [pc, #312]	; (8005278 <__strftime+0x49c>)
 8005140:	e7dc      	b.n	80050fc <__strftime+0x320>
 8005142:	4852      	ldr	r0, [pc, #328]	; (800528c <__strftime+0x4b0>)
 8005144:	4a52      	ldr	r2, [pc, #328]	; (8005290 <__strftime+0x4b4>)
 8005146:	68eb      	ldr	r3, [r5, #12]
 8005148:	2964      	cmp	r1, #100	; 0x64
 800514a:	bf18      	it	ne
 800514c:	4602      	movne	r2, r0
 800514e:	1b31      	subs	r1, r6, r4
 8005150:	1938      	adds	r0, r7, r4
 8005152:	f001 f907 	bl	8006364 <sniprintf>
 8005156:	2800      	cmp	r0, #0
 8005158:	f6ff ae73 	blt.w	8004e42 <__strftime+0x66>
 800515c:	4404      	add	r4, r0
 800515e:	42a6      	cmp	r6, r4
 8005160:	f63f af42 	bhi.w	8004fe8 <__strftime+0x20c>
 8005164:	e66d      	b.n	8004e42 <__strftime+0x66>
 8005166:	6968      	ldr	r0, [r5, #20]
 8005168:	692b      	ldr	r3, [r5, #16]
 800516a:	2800      	cmp	r0, #0
 800516c:	eb07 0904 	add.w	r9, r7, r4
 8005170:	eba6 0a04 	sub.w	sl, r6, r4
 8005174:	f103 0301 	add.w	r3, r3, #1
 8005178:	68ea      	ldr	r2, [r5, #12]
 800517a:	db0d      	blt.n	8005198 <__strftime+0x3bc>
 800517c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005180:	fb90 f1fc 	sdiv	r1, r0, ip
 8005184:	fb0c 0011 	mls	r0, ip, r1, r0
 8005188:	e9cd 2000 	strd	r2, r0, [sp]
 800518c:	4651      	mov	r1, sl
 800518e:	4648      	mov	r0, r9
 8005190:	4a40      	ldr	r2, [pc, #256]	; (8005294 <__strftime+0x4b8>)
 8005192:	f001 f8e7 	bl	8006364 <sniprintf>
 8005196:	e7de      	b.n	8005156 <__strftime+0x37a>
 8005198:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800519c:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80051a0:	f000 fd7e 	bl	8005ca0 <abs>
 80051a4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80051a8:	2164      	movs	r1, #100	; 0x64
 80051aa:	fb90 fcf1 	sdiv	ip, r0, r1
 80051ae:	fb0c 0011 	mls	r0, ip, r1, r0
 80051b2:	e7e9      	b.n	8005188 <__strftime+0x3ac>
 80051b4:	2325      	movs	r3, #37	; 0x25
 80051b6:	f88d 3020 	strb.w	r3, [sp, #32]
 80051ba:	f1ba 0f00 	cmp.w	sl, #0
 80051be:	d013      	beq.n	80051e8 <__strftime+0x40c>
 80051c0:	f1b9 0f06 	cmp.w	r9, #6
 80051c4:	bf38      	it	cc
 80051c6:	f04f 0906 	movcc.w	r9, #6
 80051ca:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 80051ce:	f1b9 0306 	subs.w	r3, r9, #6
 80051d2:	d10f      	bne.n	80051f4 <__strftime+0x418>
 80051d4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80051d8:	492f      	ldr	r1, [pc, #188]	; (8005298 <__strftime+0x4bc>)
 80051da:	f001 f923 	bl	8006424 <strcpy>
 80051de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80051e0:	aa08      	add	r2, sp, #32
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	462b      	mov	r3, r5
 80051e6:	e75c      	b.n	80050a2 <__strftime+0x2c6>
 80051e8:	232b      	movs	r3, #43	; 0x2b
 80051ea:	f04f 090a 	mov.w	r9, #10
 80051ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80051f2:	e7ec      	b.n	80051ce <__strftime+0x3f2>
 80051f4:	4a29      	ldr	r2, [pc, #164]	; (800529c <__strftime+0x4c0>)
 80051f6:	211e      	movs	r1, #30
 80051f8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80051fc:	f001 f8b2 	bl	8006364 <sniprintf>
 8005200:	2800      	cmp	r0, #0
 8005202:	dde7      	ble.n	80051d4 <__strftime+0x3f8>
 8005204:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8005208:	4418      	add	r0, r3
 800520a:	e7e5      	b.n	80051d8 <__strftime+0x3fc>
 800520c:	4628      	mov	r0, r5
 800520e:	f7ff fd8d 	bl	8004d2c <iso_year_adjust>
 8005212:	4681      	mov	r9, r0
 8005214:	6968      	ldr	r0, [r5, #20]
 8005216:	2800      	cmp	r0, #0
 8005218:	db1a      	blt.n	8005250 <__strftime+0x474>
 800521a:	2264      	movs	r2, #100	; 0x64
 800521c:	fb90 f3f2 	sdiv	r3, r0, r2
 8005220:	f1b9 0f00 	cmp.w	r9, #0
 8005224:	fb02 0013 	mls	r0, r2, r3, r0
 8005228:	da1a      	bge.n	8005260 <__strftime+0x484>
 800522a:	696a      	ldr	r2, [r5, #20]
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <__strftime+0x4c4>)
 800522e:	429a      	cmp	r2, r3
 8005230:	bfb8      	it	lt
 8005232:	f04f 0901 	movlt.w	r9, #1
 8005236:	2364      	movs	r3, #100	; 0x64
 8005238:	4481      	add	r9, r0
 800523a:	fb99 f0f3 	sdiv	r0, r9, r3
 800523e:	fb03 9910 	mls	r9, r3, r0, r9
 8005242:	4499      	add	r9, r3
 8005244:	fb99 f2f3 	sdiv	r2, r9, r3
 8005248:	fb03 9312 	mls	r3, r3, r2, r9
 800524c:	4a10      	ldr	r2, [pc, #64]	; (8005290 <__strftime+0x4b4>)
 800524e:	e77e      	b.n	800514e <__strftime+0x372>
 8005250:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005254:	f000 fd24 	bl	8005ca0 <abs>
 8005258:	2364      	movs	r3, #100	; 0x64
 800525a:	fb90 f2f3 	sdiv	r2, r0, r3
 800525e:	e7df      	b.n	8005220 <__strftime+0x444>
 8005260:	d0e9      	beq.n	8005236 <__strftime+0x45a>
 8005262:	696a      	ldr	r2, [r5, #20]
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <__strftime+0x498>)
 8005266:	429a      	cmp	r2, r3
 8005268:	bfb8      	it	lt
 800526a:	f04f 39ff 	movlt.w	r9, #4294967295
 800526e:	e7e2      	b.n	8005236 <__strftime+0x45a>
 8005270:	08007098 	.word	0x08007098
 8005274:	fffff894 	.word	0xfffff894
 8005278:	0800730a 	.word	0x0800730a
 800527c:	0800704b 	.word	0x0800704b
 8005280:	08007043 	.word	0x08007043
 8005284:	0800703c 	.word	0x0800703c
 8005288:	080074af 	.word	0x080074af
 800528c:	0800704d 	.word	0x0800704d
 8005290:	0800705b 	.word	0x0800705b
 8005294:	08007051 	.word	0x08007051
 8005298:	08007064 	.word	0x08007064
 800529c:	08007060 	.word	0x08007060
 80052a0:	fffff895 	.word	0xfffff895
 80052a4:	696b      	ldr	r3, [r5, #20]
 80052a6:	4628      	mov	r0, r5
 80052a8:	9304      	str	r3, [sp, #16]
 80052aa:	9a04      	ldr	r2, [sp, #16]
 80052ac:	4bbc      	ldr	r3, [pc, #752]	; (80055a0 <__strftime+0x7c4>)
 80052ae:	429a      	cmp	r2, r3
 80052b0:	bfac      	ite	ge
 80052b2:	2300      	movge	r3, #0
 80052b4:	2301      	movlt	r3, #1
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	f7ff fd38 	bl	8004d2c <iso_year_adjust>
 80052bc:	9a04      	ldr	r2, [sp, #16]
 80052be:	4603      	mov	r3, r0
 80052c0:	2a00      	cmp	r2, #0
 80052c2:	db3a      	blt.n	800533a <__strftime+0x55e>
 80052c4:	2264      	movs	r2, #100	; 0x64
 80052c6:	9904      	ldr	r1, [sp, #16]
 80052c8:	fb91 f2f2 	sdiv	r2, r1, r2
 80052cc:	3213      	adds	r2, #19
 80052ce:	6968      	ldr	r0, [r5, #20]
 80052d0:	2800      	cmp	r0, #0
 80052d2:	db3d      	blt.n	8005350 <__strftime+0x574>
 80052d4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80052d8:	fb90 fefc 	sdiv	lr, r0, ip
 80052dc:	fb0c 001e 	mls	r0, ip, lr, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da44      	bge.n	800536e <__strftime+0x592>
 80052e4:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80055c4 <__strftime+0x7e8>
 80052e8:	6969      	ldr	r1, [r5, #20]
 80052ea:	4561      	cmp	r1, ip
 80052ec:	da01      	bge.n	80052f2 <__strftime+0x516>
 80052ee:	2301      	movs	r3, #1
 80052f0:	9305      	str	r3, [sp, #20]
 80052f2:	4403      	add	r3, r0
 80052f4:	1c59      	adds	r1, r3, #1
 80052f6:	d146      	bne.n	8005386 <__strftime+0x5aa>
 80052f8:	2363      	movs	r3, #99	; 0x63
 80052fa:	3a01      	subs	r2, #1
 80052fc:	2064      	movs	r0, #100	; 0x64
 80052fe:	fb00 3202 	mla	r2, r0, r2, r3
 8005302:	9b05      	ldr	r3, [sp, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d043      	beq.n	8005390 <__strftime+0x5b4>
 8005308:	232d      	movs	r3, #45	; 0x2d
 800530a:	f88d 3020 	strb.w	r3, [sp, #32]
 800530e:	f1b9 0f00 	cmp.w	r9, #0
 8005312:	d001      	beq.n	8005318 <__strftime+0x53c>
 8005314:	f109 39ff 	add.w	r9, r9, #4294967295
 8005318:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 800531c:	2125      	movs	r1, #37	; 0x25
 800531e:	7019      	strb	r1, [r3, #0]
 8005320:	f1ba 0f00 	cmp.w	sl, #0
 8005324:	d144      	bne.n	80053b0 <__strftime+0x5d4>
 8005326:	1c58      	adds	r0, r3, #1
 8005328:	499e      	ldr	r1, [pc, #632]	; (80055a4 <__strftime+0x7c8>)
 800532a:	9204      	str	r2, [sp, #16]
 800532c:	f001 f87a 	bl	8006424 <strcpy>
 8005330:	9a04      	ldr	r2, [sp, #16]
 8005332:	9200      	str	r2, [sp, #0]
 8005334:	464b      	mov	r3, r9
 8005336:	aa08      	add	r2, sp, #32
 8005338:	e09b      	b.n	8005472 <__strftime+0x696>
 800533a:	9b04      	ldr	r3, [sp, #16]
 800533c:	9006      	str	r0, [sp, #24]
 800533e:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 8005342:	f000 fcad 	bl	8005ca0 <abs>
 8005346:	2264      	movs	r2, #100	; 0x64
 8005348:	9b06      	ldr	r3, [sp, #24]
 800534a:	fb90 f2f2 	sdiv	r2, r0, r2
 800534e:	e7be      	b.n	80052ce <__strftime+0x4f2>
 8005350:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005354:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8005358:	f000 fca2 	bl	8005ca0 <abs>
 800535c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005360:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005364:	fb90 fefc 	sdiv	lr, r0, ip
 8005368:	fb0e 001c 	mls	r0, lr, ip, r0
 800536c:	e7b8      	b.n	80052e0 <__strftime+0x504>
 800536e:	d0c0      	beq.n	80052f2 <__strftime+0x516>
 8005370:	9904      	ldr	r1, [sp, #16]
 8005372:	f8df c22c 	ldr.w	ip, [pc, #556]	; 80055a0 <__strftime+0x7c4>
 8005376:	4561      	cmp	r1, ip
 8005378:	bfae      	itee	ge
 800537a:	2100      	movge	r1, #0
 800537c:	2101      	movlt	r1, #1
 800537e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005382:	9105      	str	r1, [sp, #20]
 8005384:	e7b5      	b.n	80052f2 <__strftime+0x516>
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	bf04      	itt	eq
 800538a:	3201      	addeq	r2, #1
 800538c:	2300      	moveq	r3, #0
 800538e:	e7b5      	b.n	80052fc <__strftime+0x520>
 8005390:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005394:	d110      	bne.n	80053b8 <__strftime+0x5dc>
 8005396:	f242 730f 	movw	r3, #9999	; 0x270f
 800539a:	429a      	cmp	r2, r3
 800539c:	d90c      	bls.n	80053b8 <__strftime+0x5dc>
 800539e:	f88d a020 	strb.w	sl, [sp, #32]
 80053a2:	f1b9 0f00 	cmp.w	r9, #0
 80053a6:	d1b5      	bne.n	8005314 <__strftime+0x538>
 80053a8:	2125      	movs	r1, #37	; 0x25
 80053aa:	ab10      	add	r3, sp, #64	; 0x40
 80053ac:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 80053b0:	2130      	movs	r1, #48	; 0x30
 80053b2:	1c98      	adds	r0, r3, #2
 80053b4:	7059      	strb	r1, [r3, #1]
 80053b6:	e7b7      	b.n	8005328 <__strftime+0x54c>
 80053b8:	ab08      	add	r3, sp, #32
 80053ba:	e7af      	b.n	800531c <__strftime+0x540>
 80053bc:	487a      	ldr	r0, [pc, #488]	; (80055a8 <__strftime+0x7cc>)
 80053be:	4a7b      	ldr	r2, [pc, #492]	; (80055ac <__strftime+0x7d0>)
 80053c0:	68ab      	ldr	r3, [r5, #8]
 80053c2:	296b      	cmp	r1, #107	; 0x6b
 80053c4:	bf18      	it	ne
 80053c6:	4602      	movne	r2, r0
 80053c8:	e6c1      	b.n	800514e <__strftime+0x372>
 80053ca:	68ab      	ldr	r3, [r5, #8]
 80053cc:	220c      	movs	r2, #12
 80053ce:	b15b      	cbz	r3, 80053e8 <__strftime+0x60c>
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <__strftime+0x600>
 80053d4:	fb93 f0f2 	sdiv	r0, r3, r2
 80053d8:	fb02 3310 	mls	r3, r2, r0, r3
 80053dc:	4873      	ldr	r0, [pc, #460]	; (80055ac <__strftime+0x7d0>)
 80053de:	4a72      	ldr	r2, [pc, #456]	; (80055a8 <__strftime+0x7cc>)
 80053e0:	2949      	cmp	r1, #73	; 0x49
 80053e2:	bf18      	it	ne
 80053e4:	4602      	movne	r2, r0
 80053e6:	e6b2      	b.n	800514e <__strftime+0x372>
 80053e8:	4613      	mov	r3, r2
 80053ea:	e7f7      	b.n	80053dc <__strftime+0x600>
 80053ec:	69eb      	ldr	r3, [r5, #28]
 80053ee:	4a70      	ldr	r2, [pc, #448]	; (80055b0 <__strftime+0x7d4>)
 80053f0:	3301      	adds	r3, #1
 80053f2:	e6ac      	b.n	800514e <__strftime+0x372>
 80053f4:	692b      	ldr	r3, [r5, #16]
 80053f6:	3301      	adds	r3, #1
 80053f8:	e728      	b.n	800524c <__strftime+0x470>
 80053fa:	686b      	ldr	r3, [r5, #4]
 80053fc:	e726      	b.n	800524c <__strftime+0x470>
 80053fe:	45a3      	cmp	fp, r4
 8005400:	f67f ad1f 	bls.w	8004e42 <__strftime+0x66>
 8005404:	230a      	movs	r3, #10
 8005406:	553b      	strb	r3, [r7, r4]
 8005408:	3401      	adds	r4, #1
 800540a:	e5ed      	b.n	8004fe8 <__strftime+0x20c>
 800540c:	68ab      	ldr	r3, [r5, #8]
 800540e:	2b0b      	cmp	r3, #11
 8005410:	bfcc      	ite	gt
 8005412:	22a4      	movgt	r2, #164	; 0xa4
 8005414:	22a0      	movle	r2, #160	; 0xa0
 8005416:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <__strftime+0x7d8>)
 8005418:	4413      	add	r3, r2
 800541a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800541e:	4648      	mov	r0, r9
 8005420:	f7fa fe96 	bl	8000150 <strlen>
 8005424:	eba9 0304 	sub.w	r3, r9, r4
 8005428:	eb04 0a00 	add.w	sl, r4, r0
 800542c:	45a2      	cmp	sl, r4
 800542e:	d101      	bne.n	8005434 <__strftime+0x658>
 8005430:	4654      	mov	r4, sl
 8005432:	e5d9      	b.n	8004fe8 <__strftime+0x20c>
 8005434:	45a3      	cmp	fp, r4
 8005436:	f67f ad04 	bls.w	8004e42 <__strftime+0x66>
 800543a:	f898 2000 	ldrb.w	r2, [r8]
 800543e:	f813 9004 	ldrb.w	r9, [r3, r4]
 8005442:	2a50      	cmp	r2, #80	; 0x50
 8005444:	d10d      	bne.n	8005462 <__strftime+0x686>
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	f000 fc90 	bl	8005d6c <__locale_ctype_ptr>
 800544c:	4448      	add	r0, r9
 800544e:	7842      	ldrb	r2, [r0, #1]
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	f002 0203 	and.w	r2, r2, #3
 8005456:	2a01      	cmp	r2, #1
 8005458:	bf08      	it	eq
 800545a:	f109 0920 	addeq.w	r9, r9, #32
 800545e:	fa5f f989 	uxtb.w	r9, r9
 8005462:	f807 9004 	strb.w	r9, [r7, r4]
 8005466:	3401      	adds	r4, #1
 8005468:	e7e0      	b.n	800542c <__strftime+0x650>
 800546a:	686b      	ldr	r3, [r5, #4]
 800546c:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <__strftime+0x7dc>)
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	68ab      	ldr	r3, [r5, #8]
 8005472:	1b31      	subs	r1, r6, r4
 8005474:	1938      	adds	r0, r7, r4
 8005476:	f000 ff75 	bl	8006364 <sniprintf>
 800547a:	e66c      	b.n	8005156 <__strftime+0x37a>
 800547c:	6a2b      	ldr	r3, [r5, #32]
 800547e:	2b00      	cmp	r3, #0
 8005480:	db7c      	blt.n	800557c <__strftime+0x7a0>
 8005482:	f000 fa87 	bl	8005994 <__tz_lock>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	b90b      	cbnz	r3, 800548e <__strftime+0x6b2>
 800548a:	f000 fa85 	bl	8005998 <_tzset_unlocked>
 800548e:	f000 fc61 	bl	8005d54 <__gettzinfo>
 8005492:	6a2b      	ldr	r3, [r5, #32]
 8005494:	2b00      	cmp	r3, #0
 8005496:	bfcc      	ite	gt
 8005498:	2350      	movgt	r3, #80	; 0x50
 800549a:	2328      	movle	r3, #40	; 0x28
 800549c:	58c3      	ldr	r3, [r0, r3]
 800549e:	425b      	negs	r3, r3
 80054a0:	9304      	str	r3, [sp, #16]
 80054a2:	f000 fa78 	bl	8005996 <__tz_unlock>
 80054a6:	2301      	movs	r3, #1
 80054a8:	9303      	str	r3, [sp, #12]
 80054aa:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80054ae:	193b      	adds	r3, r7, r4
 80054b0:	4662      	mov	r2, ip
 80054b2:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 80054b6:	9305      	str	r3, [sp, #20]
 80054b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80054bc:	f143 31ff 	adc.w	r1, r3, #4294967295
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f171 0e00 	sbcs.w	lr, r1, #0
 80054c6:	da03      	bge.n	80054d0 <__strftime+0x6f4>
 80054c8:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 80054cc:	f143 31ff 	adc.w	r1, r3, #4294967295
 80054d0:	0883      	lsrs	r3, r0, #2
 80054d2:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80054d6:	4699      	mov	r9, r3
 80054d8:	108b      	asrs	r3, r1, #2
 80054da:	2164      	movs	r1, #100	; 0x64
 80054dc:	f10c 30ff 	add.w	r0, ip, #4294967295
 80054e0:	fb90 f1f1 	sdiv	r1, r0, r1
 80054e4:	ebb9 0201 	subs.w	r2, r9, r1
 80054e8:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80054ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80054f0:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 80054f4:	fb90 f1f1 	sdiv	r1, r0, r1
 80054f8:	eb12 0901 	adds.w	r9, r2, r1
 80054fc:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8005500:	f240 116d 	movw	r1, #365	; 0x16d
 8005504:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8005508:	fb01 fc0c 	mul.w	ip, r1, ip
 800550c:	eb19 020c 	adds.w	r2, r9, ip
 8005510:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 8005514:	f04f 0c18 	mov.w	ip, #24
 8005518:	69e9      	ldr	r1, [r5, #28]
 800551a:	eb12 0901 	adds.w	r9, r2, r1
 800551e:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8005522:	fba9 230c 	umull	r2, r3, r9, ip
 8005526:	4619      	mov	r1, r3
 8005528:	fb0c 130a 	mla	r3, ip, sl, r1
 800552c:	4610      	mov	r0, r2
 800552e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8005532:	4619      	mov	r1, r3
 8005534:	68ab      	ldr	r3, [r5, #8]
 8005536:	18c0      	adds	r0, r0, r3
 8005538:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 800553c:	fba0 230c 	umull	r2, r3, r0, ip
 8005540:	4691      	mov	r9, r2
 8005542:	fb0c 3301 	mla	r3, ip, r1, r3
 8005546:	6869      	ldr	r1, [r5, #4]
 8005548:	eb19 0201 	adds.w	r2, r9, r1
 800554c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8005550:	fba2 010c 	umull	r0, r1, r2, ip
 8005554:	fb0c 1103 	mla	r1, ip, r3, r1
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <__strftime+0x7e0>)
 800555c:	eb10 0903 	adds.w	r9, r0, r3
 8005560:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 8005564:	9b04      	ldr	r3, [sp, #16]
 8005566:	ebb9 0003 	subs.w	r0, r9, r3
 800556a:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 800556e:	e9cd 0100 	strd	r0, r1, [sp]
 8005572:	1b31      	subs	r1, r6, r4
 8005574:	1938      	adds	r0, r7, r4
 8005576:	f000 fef5 	bl	8006364 <sniprintf>
 800557a:	e5ec      	b.n	8005156 <__strftime+0x37a>
 800557c:	2300      	movs	r3, #0
 800557e:	9304      	str	r3, [sp, #16]
 8005580:	e793      	b.n	80054aa <__strftime+0x6ce>
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	e662      	b.n	800524c <__strftime+0x470>
 8005586:	45a3      	cmp	fp, r4
 8005588:	f67f ac5b 	bls.w	8004e42 <__strftime+0x66>
 800558c:	2309      	movs	r3, #9
 800558e:	e73a      	b.n	8005406 <__strftime+0x62a>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <__strftime+0x7e4>)
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	686b      	ldr	r3, [r5, #4]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	68ab      	ldr	r3, [r5, #8]
 800559c:	e5cc      	b.n	8005138 <__strftime+0x35c>
 800559e:	bf00      	nop
 80055a0:	fffff894 	.word	0xfffff894
 80055a4:	0800706c 	.word	0x0800706c
 80055a8:	0800705b 	.word	0x0800705b
 80055ac:	0800704d 	.word	0x0800704d
 80055b0:	08007070 	.word	0x08007070
 80055b4:	08007098 	.word	0x08007098
 80055b8:	0800707f 	.word	0x0800707f
 80055bc:	08007075 	.word	0x08007075
 80055c0:	0800707a 	.word	0x0800707a
 80055c4:	fffff895 	.word	0xfffff895
 80055c8:	45a3      	cmp	fp, r4
 80055ca:	f67f ac3a 	bls.w	8004e42 <__strftime+0x66>
 80055ce:	69ab      	ldr	r3, [r5, #24]
 80055d0:	193a      	adds	r2, r7, r4
 80055d2:	3401      	adds	r4, #1
 80055d4:	b913      	cbnz	r3, 80055dc <__strftime+0x800>
 80055d6:	2337      	movs	r3, #55	; 0x37
 80055d8:	7013      	strb	r3, [r2, #0]
 80055da:	e505      	b.n	8004fe8 <__strftime+0x20c>
 80055dc:	3330      	adds	r3, #48	; 0x30
 80055de:	e7fb      	b.n	80055d8 <__strftime+0x7fc>
 80055e0:	69eb      	ldr	r3, [r5, #28]
 80055e2:	69aa      	ldr	r2, [r5, #24]
 80055e4:	3307      	adds	r3, #7
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	2207      	movs	r2, #7
 80055ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ee:	e62d      	b.n	800524c <__strftime+0x470>
 80055f0:	4628      	mov	r0, r5
 80055f2:	f7ff fb9b 	bl	8004d2c <iso_year_adjust>
 80055f6:	69aa      	ldr	r2, [r5, #24]
 80055f8:	b132      	cbz	r2, 8005608 <__strftime+0x82c>
 80055fa:	3a01      	subs	r2, #1
 80055fc:	2800      	cmp	r0, #0
 80055fe:	dc27      	bgt.n	8005650 <__strftime+0x874>
 8005600:	69eb      	ldr	r3, [r5, #28]
 8005602:	d103      	bne.n	800560c <__strftime+0x830>
 8005604:	330a      	adds	r3, #10
 8005606:	e7ee      	b.n	80055e6 <__strftime+0x80a>
 8005608:	2206      	movs	r2, #6
 800560a:	e7f7      	b.n	80055fc <__strftime+0x820>
 800560c:	6968      	ldr	r0, [r5, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2800      	cmp	r0, #0
 8005612:	f240 726b 	movw	r2, #1899	; 0x76b
 8005616:	bfa8      	it	ge
 8005618:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 800561c:	4410      	add	r0, r2
 800561e:	0782      	lsls	r2, r0, #30
 8005620:	d105      	bne.n	800562e <__strftime+0x852>
 8005622:	2264      	movs	r2, #100	; 0x64
 8005624:	fb90 f1f2 	sdiv	r1, r0, r2
 8005628:	fb02 0111 	mls	r1, r2, r1, r0
 800562c:	b971      	cbnz	r1, 800564c <__strftime+0x870>
 800562e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005632:	fb90 f2f1 	sdiv	r2, r0, r1
 8005636:	fb01 0212 	mls	r2, r1, r2, r0
 800563a:	fab2 f282 	clz	r2, r2
 800563e:	0952      	lsrs	r2, r2, #5
 8005640:	1a9a      	subs	r2, r3, r2
 8005642:	2a04      	cmp	r2, #4
 8005644:	bfcc      	ite	gt
 8005646:	2334      	movgt	r3, #52	; 0x34
 8005648:	2335      	movle	r3, #53	; 0x35
 800564a:	e5ff      	b.n	800524c <__strftime+0x470>
 800564c:	2201      	movs	r2, #1
 800564e:	e7f7      	b.n	8005640 <__strftime+0x864>
 8005650:	2301      	movs	r3, #1
 8005652:	e5fb      	b.n	800524c <__strftime+0x470>
 8005654:	45a3      	cmp	fp, r4
 8005656:	f67f abf4 	bls.w	8004e42 <__strftime+0x66>
 800565a:	69ab      	ldr	r3, [r5, #24]
 800565c:	3330      	adds	r3, #48	; 0x30
 800565e:	e6d2      	b.n	8005406 <__strftime+0x62a>
 8005660:	69ab      	ldr	r3, [r5, #24]
 8005662:	b13b      	cbz	r3, 8005674 <__strftime+0x898>
 8005664:	3b01      	subs	r3, #1
 8005666:	69ea      	ldr	r2, [r5, #28]
 8005668:	3207      	adds	r2, #7
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	2307      	movs	r3, #7
 800566e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005672:	e5eb      	b.n	800524c <__strftime+0x470>
 8005674:	2306      	movs	r3, #6
 8005676:	e7f6      	b.n	8005666 <__strftime+0x88a>
 8005678:	6968      	ldr	r0, [r5, #20]
 800567a:	2800      	cmp	r0, #0
 800567c:	db05      	blt.n	800568a <__strftime+0x8ae>
 800567e:	2264      	movs	r2, #100	; 0x64
 8005680:	fb90 f3f2 	sdiv	r3, r0, r2
 8005684:	fb02 0313 	mls	r3, r2, r3, r0
 8005688:	e5e0      	b.n	800524c <__strftime+0x470>
 800568a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800568e:	f000 fb07 	bl	8005ca0 <abs>
 8005692:	2364      	movs	r3, #100	; 0x64
 8005694:	fb90 f2f3 	sdiv	r2, r0, r3
 8005698:	e7f4      	b.n	8005684 <__strftime+0x8a8>
 800569a:	696b      	ldr	r3, [r5, #20]
 800569c:	4a52      	ldr	r2, [pc, #328]	; (80057e8 <__strftime+0xa0c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	da18      	bge.n	80056d4 <__strftime+0x8f8>
 80056a2:	212d      	movs	r1, #45	; 0x2d
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f88d 1020 	strb.w	r1, [sp, #32]
 80056aa:	f1b9 0f00 	cmp.w	r9, #0
 80056ae:	d001      	beq.n	80056b4 <__strftime+0x8d8>
 80056b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80056b4:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 80056b8:	2125      	movs	r1, #37	; 0x25
 80056ba:	7011      	strb	r1, [r2, #0]
 80056bc:	f1ba 0f00 	cmp.w	sl, #0
 80056c0:	f040 8088 	bne.w	80057d4 <__strftime+0x9f8>
 80056c4:	1c50      	adds	r0, r2, #1
 80056c6:	4949      	ldr	r1, [pc, #292]	; (80057ec <__strftime+0xa10>)
 80056c8:	9304      	str	r3, [sp, #16]
 80056ca:	f000 feab 	bl	8006424 <strcpy>
 80056ce:	9b04      	ldr	r3, [sp, #16]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	e62f      	b.n	8005334 <__strftime+0x558>
 80056d4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80056d8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80056dc:	f040 8081 	bne.w	80057e2 <__strftime+0xa06>
 80056e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d979      	bls.n	80057dc <__strftime+0xa00>
 80056e8:	f88d a020 	strb.w	sl, [sp, #32]
 80056ec:	e7dd      	b.n	80056aa <__strftime+0x8ce>
 80056ee:	6a2b      	ldr	r3, [r5, #32]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f6ff ac79 	blt.w	8004fe8 <__strftime+0x20c>
 80056f6:	f000 f94d 	bl	8005994 <__tz_lock>
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	b90b      	cbnz	r3, 8005702 <__strftime+0x926>
 80056fe:	f000 f94b 	bl	8005998 <_tzset_unlocked>
 8005702:	f000 fb27 	bl	8005d54 <__gettzinfo>
 8005706:	6a2b      	ldr	r3, [r5, #32]
 8005708:	eb07 0a04 	add.w	sl, r7, r4
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfcc      	ite	gt
 8005710:	2350      	movgt	r3, #80	; 0x50
 8005712:	2328      	movle	r3, #40	; 0x28
 8005714:	58c3      	ldr	r3, [r0, r3]
 8005716:	f1c3 0900 	rsb	r9, r3, #0
 800571a:	f000 f93c 	bl	8005996 <__tz_unlock>
 800571e:	233c      	movs	r3, #60	; 0x3c
 8005720:	1b31      	subs	r1, r6, r4
 8005722:	fb99 f0f3 	sdiv	r0, r9, r3
 8005726:	9104      	str	r1, [sp, #16]
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	f000 fb17 	bl	8005d5c <labs>
 800572e:	9b03      	ldr	r3, [sp, #12]
 8005730:	9904      	ldr	r1, [sp, #16]
 8005732:	fb90 f2f3 	sdiv	r2, r0, r3
 8005736:	fb02 0013 	mls	r0, r2, r3, r0
 800573a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800573e:	9000      	str	r0, [sp, #0]
 8005740:	fb99 f3f3 	sdiv	r3, r9, r3
 8005744:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <__strftime+0xa14>)
 8005746:	4650      	mov	r0, sl
 8005748:	f000 fe0c 	bl	8006364 <sniprintf>
 800574c:	2800      	cmp	r0, #0
 800574e:	f6ff ab78 	blt.w	8004e42 <__strftime+0x66>
 8005752:	4404      	add	r4, r0
 8005754:	42a6      	cmp	r6, r4
 8005756:	f67f ab74 	bls.w	8004e42 <__strftime+0x66>
 800575a:	2301      	movs	r3, #1
 800575c:	9303      	str	r3, [sp, #12]
 800575e:	e443      	b.n	8004fe8 <__strftime+0x20c>
 8005760:	6a2b      	ldr	r3, [r5, #32]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f6ff ac40 	blt.w	8004fe8 <__strftime+0x20c>
 8005768:	f000 f914 	bl	8005994 <__tz_lock>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	b90b      	cbnz	r3, 8005774 <__strftime+0x998>
 8005770:	f000 f912 	bl	8005998 <_tzset_unlocked>
 8005774:	6a2b      	ldr	r3, [r5, #32]
 8005776:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <__strftime+0xa18>)
 8005778:	2b00      	cmp	r3, #0
 800577a:	bfd4      	ite	le
 800577c:	2300      	movle	r3, #0
 800577e:	2301      	movgt	r3, #1
 8005780:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005784:	4648      	mov	r0, r9
 8005786:	f7fa fce3 	bl	8000150 <strlen>
 800578a:	eba9 0904 	sub.w	r9, r9, r4
 800578e:	eb04 0a00 	add.w	sl, r4, r0
 8005792:	45a2      	cmp	sl, r4
 8005794:	d103      	bne.n	800579e <__strftime+0x9c2>
 8005796:	f000 f8fe 	bl	8005996 <__tz_unlock>
 800579a:	4654      	mov	r4, sl
 800579c:	e7dd      	b.n	800575a <__strftime+0x97e>
 800579e:	45a3      	cmp	fp, r4
 80057a0:	d904      	bls.n	80057ac <__strftime+0x9d0>
 80057a2:	f819 3004 	ldrb.w	r3, [r9, r4]
 80057a6:	553b      	strb	r3, [r7, r4]
 80057a8:	3401      	adds	r4, #1
 80057aa:	e7f2      	b.n	8005792 <__strftime+0x9b6>
 80057ac:	f000 f8f3 	bl	8005996 <__tz_unlock>
 80057b0:	f7ff bb47 	b.w	8004e42 <__strftime+0x66>
 80057b4:	45a3      	cmp	fp, r4
 80057b6:	f67f ab44 	bls.w	8004e42 <__strftime+0x66>
 80057ba:	2325      	movs	r3, #37	; 0x25
 80057bc:	e623      	b.n	8005406 <__strftime+0x62a>
 80057be:	b10e      	cbz	r6, 80057c4 <__strftime+0x9e8>
 80057c0:	2300      	movs	r3, #0
 80057c2:	553b      	strb	r3, [r7, r4]
 80057c4:	4620      	mov	r0, r4
 80057c6:	b011      	add	sp, #68	; 0x44
 80057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057cc:	2225      	movs	r2, #37	; 0x25
 80057ce:	f88d 2020 	strb.w	r2, [sp, #32]
 80057d2:	aa08      	add	r2, sp, #32
 80057d4:	2130      	movs	r1, #48	; 0x30
 80057d6:	1c90      	adds	r0, r2, #2
 80057d8:	7051      	strb	r1, [r2, #1]
 80057da:	e774      	b.n	80056c6 <__strftime+0x8ea>
 80057dc:	f1b9 0f00 	cmp.w	r9, #0
 80057e0:	d1f4      	bne.n	80057cc <__strftime+0x9f0>
 80057e2:	aa08      	add	r2, sp, #32
 80057e4:	e768      	b.n	80056b8 <__strftime+0x8dc>
 80057e6:	bf00      	nop
 80057e8:	fffff894 	.word	0xfffff894
 80057ec:	0800706c 	.word	0x0800706c
 80057f0:	08007089 	.word	0x08007089
 80057f4:	20000074 	.word	0x20000074

080057f8 <strftime>:
 80057f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057fa:	4c06      	ldr	r4, [pc, #24]	; (8005814 <strftime+0x1c>)
 80057fc:	4d06      	ldr	r5, [pc, #24]	; (8005818 <strftime+0x20>)
 80057fe:	6824      	ldr	r4, [r4, #0]
 8005800:	6a24      	ldr	r4, [r4, #32]
 8005802:	2c00      	cmp	r4, #0
 8005804:	bf08      	it	eq
 8005806:	462c      	moveq	r4, r5
 8005808:	9400      	str	r4, [sp, #0]
 800580a:	f7ff fae7 	bl	8004ddc <__strftime>
 800580e:	b003      	add	sp, #12
 8005810:	bd30      	pop	{r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	20000010 	.word	0x20000010
 8005818:	200000d8 	.word	0x200000d8

0800581c <_strtoul_l.isra.0>:
 800581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	4680      	mov	r8, r0
 8005822:	4689      	mov	r9, r1
 8005824:	4692      	mov	sl, r2
 8005826:	461e      	mov	r6, r3
 8005828:	460f      	mov	r7, r1
 800582a:	463d      	mov	r5, r7
 800582c:	9808      	ldr	r0, [sp, #32]
 800582e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005832:	f000 fa97 	bl	8005d64 <__locale_ctype_ptr_l>
 8005836:	4420      	add	r0, r4
 8005838:	7843      	ldrb	r3, [r0, #1]
 800583a:	f013 0308 	ands.w	r3, r3, #8
 800583e:	d130      	bne.n	80058a2 <_strtoul_l.isra.0+0x86>
 8005840:	2c2d      	cmp	r4, #45	; 0x2d
 8005842:	d130      	bne.n	80058a6 <_strtoul_l.isra.0+0x8a>
 8005844:	2101      	movs	r1, #1
 8005846:	787c      	ldrb	r4, [r7, #1]
 8005848:	1cbd      	adds	r5, r7, #2
 800584a:	2e00      	cmp	r6, #0
 800584c:	d05c      	beq.n	8005908 <_strtoul_l.isra.0+0xec>
 800584e:	2e10      	cmp	r6, #16
 8005850:	d109      	bne.n	8005866 <_strtoul_l.isra.0+0x4a>
 8005852:	2c30      	cmp	r4, #48	; 0x30
 8005854:	d107      	bne.n	8005866 <_strtoul_l.isra.0+0x4a>
 8005856:	782b      	ldrb	r3, [r5, #0]
 8005858:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800585c:	2b58      	cmp	r3, #88	; 0x58
 800585e:	d14e      	bne.n	80058fe <_strtoul_l.isra.0+0xe2>
 8005860:	2610      	movs	r6, #16
 8005862:	786c      	ldrb	r4, [r5, #1]
 8005864:	3502      	adds	r5, #2
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	fbb2 f2f6 	udiv	r2, r2, r6
 800586e:	2300      	movs	r3, #0
 8005870:	fb06 fc02 	mul.w	ip, r6, r2
 8005874:	4618      	mov	r0, r3
 8005876:	ea6f 0c0c 	mvn.w	ip, ip
 800587a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800587e:	2f09      	cmp	r7, #9
 8005880:	d817      	bhi.n	80058b2 <_strtoul_l.isra.0+0x96>
 8005882:	463c      	mov	r4, r7
 8005884:	42a6      	cmp	r6, r4
 8005886:	dd23      	ble.n	80058d0 <_strtoul_l.isra.0+0xb4>
 8005888:	2b00      	cmp	r3, #0
 800588a:	db1e      	blt.n	80058ca <_strtoul_l.isra.0+0xae>
 800588c:	4282      	cmp	r2, r0
 800588e:	d31c      	bcc.n	80058ca <_strtoul_l.isra.0+0xae>
 8005890:	d101      	bne.n	8005896 <_strtoul_l.isra.0+0x7a>
 8005892:	45a4      	cmp	ip, r4
 8005894:	db19      	blt.n	80058ca <_strtoul_l.isra.0+0xae>
 8005896:	2301      	movs	r3, #1
 8005898:	fb00 4006 	mla	r0, r0, r6, r4
 800589c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058a0:	e7eb      	b.n	800587a <_strtoul_l.isra.0+0x5e>
 80058a2:	462f      	mov	r7, r5
 80058a4:	e7c1      	b.n	800582a <_strtoul_l.isra.0+0xe>
 80058a6:	2c2b      	cmp	r4, #43	; 0x2b
 80058a8:	bf04      	itt	eq
 80058aa:	1cbd      	addeq	r5, r7, #2
 80058ac:	787c      	ldrbeq	r4, [r7, #1]
 80058ae:	4619      	mov	r1, r3
 80058b0:	e7cb      	b.n	800584a <_strtoul_l.isra.0+0x2e>
 80058b2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80058b6:	2f19      	cmp	r7, #25
 80058b8:	d801      	bhi.n	80058be <_strtoul_l.isra.0+0xa2>
 80058ba:	3c37      	subs	r4, #55	; 0x37
 80058bc:	e7e2      	b.n	8005884 <_strtoul_l.isra.0+0x68>
 80058be:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80058c2:	2f19      	cmp	r7, #25
 80058c4:	d804      	bhi.n	80058d0 <_strtoul_l.isra.0+0xb4>
 80058c6:	3c57      	subs	r4, #87	; 0x57
 80058c8:	e7dc      	b.n	8005884 <_strtoul_l.isra.0+0x68>
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	e7e5      	b.n	800589c <_strtoul_l.isra.0+0x80>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da09      	bge.n	80058e8 <_strtoul_l.isra.0+0xcc>
 80058d4:	2322      	movs	r3, #34	; 0x22
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	f8c8 3000 	str.w	r3, [r8]
 80058de:	f1ba 0f00 	cmp.w	sl, #0
 80058e2:	d107      	bne.n	80058f4 <_strtoul_l.isra.0+0xd8>
 80058e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e8:	b101      	cbz	r1, 80058ec <_strtoul_l.isra.0+0xd0>
 80058ea:	4240      	negs	r0, r0
 80058ec:	f1ba 0f00 	cmp.w	sl, #0
 80058f0:	d0f8      	beq.n	80058e4 <_strtoul_l.isra.0+0xc8>
 80058f2:	b10b      	cbz	r3, 80058f8 <_strtoul_l.isra.0+0xdc>
 80058f4:	f105 39ff 	add.w	r9, r5, #4294967295
 80058f8:	f8ca 9000 	str.w	r9, [sl]
 80058fc:	e7f2      	b.n	80058e4 <_strtoul_l.isra.0+0xc8>
 80058fe:	2430      	movs	r4, #48	; 0x30
 8005900:	2e00      	cmp	r6, #0
 8005902:	d1b0      	bne.n	8005866 <_strtoul_l.isra.0+0x4a>
 8005904:	2608      	movs	r6, #8
 8005906:	e7ae      	b.n	8005866 <_strtoul_l.isra.0+0x4a>
 8005908:	2c30      	cmp	r4, #48	; 0x30
 800590a:	d0a4      	beq.n	8005856 <_strtoul_l.isra.0+0x3a>
 800590c:	260a      	movs	r6, #10
 800590e:	e7aa      	b.n	8005866 <_strtoul_l.isra.0+0x4a>

08005910 <_strtoul_r>:
 8005910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005912:	4c06      	ldr	r4, [pc, #24]	; (800592c <_strtoul_r+0x1c>)
 8005914:	4d06      	ldr	r5, [pc, #24]	; (8005930 <_strtoul_r+0x20>)
 8005916:	6824      	ldr	r4, [r4, #0]
 8005918:	6a24      	ldr	r4, [r4, #32]
 800591a:	2c00      	cmp	r4, #0
 800591c:	bf08      	it	eq
 800591e:	462c      	moveq	r4, r5
 8005920:	9400      	str	r4, [sp, #0]
 8005922:	f7ff ff7b 	bl	800581c <_strtoul_l.isra.0>
 8005926:	b003      	add	sp, #12
 8005928:	bd30      	pop	{r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	20000010 	.word	0x20000010
 8005930:	200000d8 	.word	0x200000d8

08005934 <strtoul>:
 8005934:	4b08      	ldr	r3, [pc, #32]	; (8005958 <strtoul+0x24>)
 8005936:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005938:	681c      	ldr	r4, [r3, #0]
 800593a:	4d08      	ldr	r5, [pc, #32]	; (800595c <strtoul+0x28>)
 800593c:	6a23      	ldr	r3, [r4, #32]
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf08      	it	eq
 8005942:	462b      	moveq	r3, r5
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	460a      	mov	r2, r1
 800594a:	4601      	mov	r1, r0
 800594c:	4620      	mov	r0, r4
 800594e:	f7ff ff65 	bl	800581c <_strtoul_l.isra.0>
 8005952:	b003      	add	sp, #12
 8005954:	bd30      	pop	{r4, r5, pc}
 8005956:	bf00      	nop
 8005958:	20000010 	.word	0x20000010
 800595c:	200000d8 	.word	0x200000d8

08005960 <time>:
 8005960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005962:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <time+0x30>)
 8005964:	4604      	mov	r4, r0
 8005966:	2200      	movs	r2, #0
 8005968:	4669      	mov	r1, sp
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	f000 f9e0 	bl	8005d30 <_gettimeofday_r>
 8005970:	2800      	cmp	r0, #0
 8005972:	da05      	bge.n	8005980 <time+0x20>
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	e9cd 2300 	strd	r2, r3, [sp]
 8005980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005984:	b10c      	cbz	r4, 800598a <time+0x2a>
 8005986:	e9c4 0100 	strd	r0, r1, [r4]
 800598a:	b004      	add	sp, #16
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	20000010 	.word	0x20000010

08005994 <__tz_lock>:
 8005994:	4770      	bx	lr

08005996 <__tz_unlock>:
 8005996:	4770      	bx	lr

08005998 <_tzset_unlocked>:
 8005998:	4b01      	ldr	r3, [pc, #4]	; (80059a0 <_tzset_unlocked+0x8>)
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	f000 b802 	b.w	80059a4 <_tzset_unlocked_r>
 80059a0:	20000010 	.word	0x20000010

080059a4 <_tzset_unlocked_r>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	b08d      	sub	sp, #52	; 0x34
 80059aa:	4607      	mov	r7, r0
 80059ac:	f000 f9d2 	bl	8005d54 <__gettzinfo>
 80059b0:	49af      	ldr	r1, [pc, #700]	; (8005c70 <_tzset_unlocked_r+0x2cc>)
 80059b2:	4605      	mov	r5, r0
 80059b4:	4638      	mov	r0, r7
 80059b6:	f000 f9b3 	bl	8005d20 <_getenv_r>
 80059ba:	4eae      	ldr	r6, [pc, #696]	; (8005c74 <_tzset_unlocked_r+0x2d0>)
 80059bc:	4604      	mov	r4, r0
 80059be:	b970      	cbnz	r0, 80059de <_tzset_unlocked_r+0x3a>
 80059c0:	4bad      	ldr	r3, [pc, #692]	; (8005c78 <_tzset_unlocked_r+0x2d4>)
 80059c2:	4aae      	ldr	r2, [pc, #696]	; (8005c7c <_tzset_unlocked_r+0x2d8>)
 80059c4:	6018      	str	r0, [r3, #0]
 80059c6:	4bae      	ldr	r3, [pc, #696]	; (8005c80 <_tzset_unlocked_r+0x2dc>)
 80059c8:	6018      	str	r0, [r3, #0]
 80059ca:	4bae      	ldr	r3, [pc, #696]	; (8005c84 <_tzset_unlocked_r+0x2e0>)
 80059cc:	6830      	ldr	r0, [r6, #0]
 80059ce:	e9c3 2200 	strd	r2, r2, [r3]
 80059d2:	f7ff f8e5 	bl	8004ba0 <free>
 80059d6:	6034      	str	r4, [r6, #0]
 80059d8:	b00d      	add	sp, #52	; 0x34
 80059da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059de:	6831      	ldr	r1, [r6, #0]
 80059e0:	2900      	cmp	r1, #0
 80059e2:	d15f      	bne.n	8005aa4 <_tzset_unlocked_r+0x100>
 80059e4:	6830      	ldr	r0, [r6, #0]
 80059e6:	f7ff f8db 	bl	8004ba0 <free>
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7fa fbb0 	bl	8000150 <strlen>
 80059f0:	1c41      	adds	r1, r0, #1
 80059f2:	4638      	mov	r0, r7
 80059f4:	f7ff f930 	bl	8004c58 <_malloc_r>
 80059f8:	6030      	str	r0, [r6, #0]
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d157      	bne.n	8005aae <_tzset_unlocked_r+0x10a>
 80059fe:	7823      	ldrb	r3, [r4, #0]
 8005a00:	ae0a      	add	r6, sp, #40	; 0x28
 8005a02:	2b3a      	cmp	r3, #58	; 0x3a
 8005a04:	bf08      	it	eq
 8005a06:	3401      	addeq	r4, #1
 8005a08:	4633      	mov	r3, r6
 8005a0a:	4a9f      	ldr	r2, [pc, #636]	; (8005c88 <_tzset_unlocked_r+0x2e4>)
 8005a0c:	499f      	ldr	r1, [pc, #636]	; (8005c8c <_tzset_unlocked_r+0x2e8>)
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 fcdc 	bl	80063cc <siscanf>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dddf      	ble.n	80059d8 <_tzset_unlocked_r+0x34>
 8005a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a1a:	18e7      	adds	r7, r4, r3
 8005a1c:	5ce3      	ldrb	r3, [r4, r3]
 8005a1e:	2b2d      	cmp	r3, #45	; 0x2d
 8005a20:	d149      	bne.n	8005ab6 <_tzset_unlocked_r+0x112>
 8005a22:	f04f 34ff 	mov.w	r4, #4294967295
 8005a26:	3701      	adds	r7, #1
 8005a28:	f04f 0800 	mov.w	r8, #0
 8005a2c:	f10d 0a20 	add.w	sl, sp, #32
 8005a30:	f10d 0b1e 	add.w	fp, sp, #30
 8005a34:	9603      	str	r6, [sp, #12]
 8005a36:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8005a3a:	f8cd b000 	str.w	fp, [sp]
 8005a3e:	4633      	mov	r3, r6
 8005a40:	aa07      	add	r2, sp, #28
 8005a42:	4993      	ldr	r1, [pc, #588]	; (8005c90 <_tzset_unlocked_r+0x2ec>)
 8005a44:	4638      	mov	r0, r7
 8005a46:	f8ad 801e 	strh.w	r8, [sp, #30]
 8005a4a:	f8ad 8020 	strh.w	r8, [sp, #32]
 8005a4e:	f000 fcbd 	bl	80063cc <siscanf>
 8005a52:	4540      	cmp	r0, r8
 8005a54:	ddc0      	ble.n	80059d8 <_tzset_unlocked_r+0x34>
 8005a56:	213c      	movs	r1, #60	; 0x3c
 8005a58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005a5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005a60:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8005c9c <_tzset_unlocked_r+0x2f8>
 8005a64:	fb01 2203 	mla	r2, r1, r3, r2
 8005a68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005a6c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005a70:	fb01 2303 	mla	r3, r1, r3, r2
 8005a74:	435c      	muls	r4, r3
 8005a76:	4b84      	ldr	r3, [pc, #528]	; (8005c88 <_tzset_unlocked_r+0x2e4>)
 8005a78:	62ac      	str	r4, [r5, #40]	; 0x28
 8005a7a:	4c82      	ldr	r4, [pc, #520]	; (8005c84 <_tzset_unlocked_r+0x2e0>)
 8005a7c:	464a      	mov	r2, r9
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a82:	4982      	ldr	r1, [pc, #520]	; (8005c8c <_tzset_unlocked_r+0x2e8>)
 8005a84:	441f      	add	r7, r3
 8005a86:	4638      	mov	r0, r7
 8005a88:	4633      	mov	r3, r6
 8005a8a:	f000 fc9f 	bl	80063cc <siscanf>
 8005a8e:	4540      	cmp	r0, r8
 8005a90:	dc16      	bgt.n	8005ac0 <_tzset_unlocked_r+0x11c>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005a96:	6063      	str	r3, [r4, #4]
 8005a98:	4b77      	ldr	r3, [pc, #476]	; (8005c78 <_tzset_unlocked_r+0x2d4>)
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	4b78      	ldr	r3, [pc, #480]	; (8005c80 <_tzset_unlocked_r+0x2dc>)
 8005a9e:	f8c3 8000 	str.w	r8, [r3]
 8005aa2:	e799      	b.n	80059d8 <_tzset_unlocked_r+0x34>
 8005aa4:	f7fa fb5c 	bl	8000160 <strcmp>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d095      	beq.n	80059d8 <_tzset_unlocked_r+0x34>
 8005aac:	e79a      	b.n	80059e4 <_tzset_unlocked_r+0x40>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f000 fcb8 	bl	8006424 <strcpy>
 8005ab4:	e7a3      	b.n	80059fe <_tzset_unlocked_r+0x5a>
 8005ab6:	2b2b      	cmp	r3, #43	; 0x2b
 8005ab8:	bf08      	it	eq
 8005aba:	3701      	addeq	r7, #1
 8005abc:	2401      	movs	r4, #1
 8005abe:	e7b3      	b.n	8005a28 <_tzset_unlocked_r+0x84>
 8005ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac2:	f8c4 9004 	str.w	r9, [r4, #4]
 8005ac6:	18fc      	adds	r4, r7, r3
 8005ac8:	5cfb      	ldrb	r3, [r7, r3]
 8005aca:	2b2d      	cmp	r3, #45	; 0x2d
 8005acc:	f040 808c 	bne.w	8005be8 <_tzset_unlocked_r+0x244>
 8005ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ad4:	3401      	adds	r4, #1
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8005adc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005ae0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005ae4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8005aea:	e9cd b600 	strd	fp, r6, [sp]
 8005aee:	4633      	mov	r3, r6
 8005af0:	aa07      	add	r2, sp, #28
 8005af2:	4967      	ldr	r1, [pc, #412]	; (8005c90 <_tzset_unlocked_r+0x2ec>)
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 fc69 	bl	80063cc <siscanf>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	dc79      	bgt.n	8005bf2 <_tzset_unlocked_r+0x24e>
 8005afe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005b00:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005b04:	652b      	str	r3, [r5, #80]	; 0x50
 8005b06:	462f      	mov	r7, r5
 8005b08:	f04f 0900 	mov.w	r9, #0
 8005b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0e:	441c      	add	r4, r3
 8005b10:	7823      	ldrb	r3, [r4, #0]
 8005b12:	2b2c      	cmp	r3, #44	; 0x2c
 8005b14:	bf08      	it	eq
 8005b16:	3401      	addeq	r4, #1
 8005b18:	f894 8000 	ldrb.w	r8, [r4]
 8005b1c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8005b20:	d17a      	bne.n	8005c18 <_tzset_unlocked_r+0x274>
 8005b22:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8005b26:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8005b2a:	ab09      	add	r3, sp, #36	; 0x24
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	9603      	str	r6, [sp, #12]
 8005b30:	4633      	mov	r3, r6
 8005b32:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8005b36:	4957      	ldr	r1, [pc, #348]	; (8005c94 <_tzset_unlocked_r+0x2f0>)
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 fc47 	bl	80063cc <siscanf>
 8005b3e:	2803      	cmp	r0, #3
 8005b40:	f47f af4a 	bne.w	80059d8 <_tzset_unlocked_r+0x34>
 8005b44:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8005b48:	1e4b      	subs	r3, r1, #1
 8005b4a:	2b0b      	cmp	r3, #11
 8005b4c:	f63f af44 	bhi.w	80059d8 <_tzset_unlocked_r+0x34>
 8005b50:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005b54:	1e53      	subs	r3, r2, #1
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	f63f af3e 	bhi.w	80059d8 <_tzset_unlocked_r+0x34>
 8005b5c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	f63f af39 	bhi.w	80059d8 <_tzset_unlocked_r+0x34>
 8005b66:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8005b6a:	f887 8008 	strb.w	r8, [r7, #8]
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b72:	eb04 0803 	add.w	r8, r4, r3
 8005b76:	2302      	movs	r3, #2
 8005b78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005b82:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005b86:	930a      	str	r3, [sp, #40]	; 0x28
 8005b88:	f898 3000 	ldrb.w	r3, [r8]
 8005b8c:	2b2f      	cmp	r3, #47	; 0x2f
 8005b8e:	d109      	bne.n	8005ba4 <_tzset_unlocked_r+0x200>
 8005b90:	e9cd a602 	strd	sl, r6, [sp, #8]
 8005b94:	e9cd b600 	strd	fp, r6, [sp]
 8005b98:	4633      	mov	r3, r6
 8005b9a:	aa07      	add	r2, sp, #28
 8005b9c:	493e      	ldr	r1, [pc, #248]	; (8005c98 <_tzset_unlocked_r+0x2f4>)
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f000 fc14 	bl	80063cc <siscanf>
 8005ba4:	213c      	movs	r1, #60	; 0x3c
 8005ba6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005baa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005bae:	3728      	adds	r7, #40	; 0x28
 8005bb0:	fb01 2203 	mla	r2, r1, r3, r2
 8005bb4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005bb8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005bbc:	fb01 2303 	mla	r3, r1, r3, r2
 8005bc0:	f847 3c10 	str.w	r3, [r7, #-16]
 8005bc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bc6:	4444      	add	r4, r8
 8005bc8:	f1b9 0f00 	cmp.w	r9, #0
 8005bcc:	d021      	beq.n	8005c12 <_tzset_unlocked_r+0x26e>
 8005bce:	6868      	ldr	r0, [r5, #4]
 8005bd0:	f000 fc42 	bl	8006458 <__tzcalc_limits>
 8005bd4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005bd6:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <_tzset_unlocked_r+0x2d4>)
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	bf18      	it	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <_tzset_unlocked_r+0x2dc>)
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e6f7      	b.n	80059d8 <_tzset_unlocked_r+0x34>
 8005be8:	2b2b      	cmp	r3, #43	; 0x2b
 8005bea:	bf08      	it	eq
 8005bec:	3401      	addeq	r4, #1
 8005bee:	2701      	movs	r7, #1
 8005bf0:	e771      	b.n	8005ad6 <_tzset_unlocked_r+0x132>
 8005bf2:	213c      	movs	r1, #60	; 0x3c
 8005bf4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005bf8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005bfc:	fb01 2203 	mla	r2, r1, r3, r2
 8005c00:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005c04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005c08:	fb01 2303 	mla	r3, r1, r3, r2
 8005c0c:	435f      	muls	r7, r3
 8005c0e:	652f      	str	r7, [r5, #80]	; 0x50
 8005c10:	e779      	b.n	8005b06 <_tzset_unlocked_r+0x162>
 8005c12:	f04f 0901 	mov.w	r9, #1
 8005c16:	e77b      	b.n	8005b10 <_tzset_unlocked_r+0x16c>
 8005c18:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8005c1c:	bf0a      	itet	eq
 8005c1e:	4643      	moveq	r3, r8
 8005c20:	2344      	movne	r3, #68	; 0x44
 8005c22:	3401      	addeq	r4, #1
 8005c24:	220a      	movs	r2, #10
 8005c26:	a90b      	add	r1, sp, #44	; 0x2c
 8005c28:	4620      	mov	r0, r4
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	f7ff fe82 	bl	8005934 <strtoul>
 8005c30:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005c34:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8005c38:	45a0      	cmp	r8, r4
 8005c3a:	9b05      	ldr	r3, [sp, #20]
 8005c3c:	d114      	bne.n	8005c68 <_tzset_unlocked_r+0x2c4>
 8005c3e:	234d      	movs	r3, #77	; 0x4d
 8005c40:	f1b9 0f00 	cmp.w	r9, #0
 8005c44:	d107      	bne.n	8005c56 <_tzset_unlocked_r+0x2b2>
 8005c46:	722b      	strb	r3, [r5, #8]
 8005c48:	2103      	movs	r1, #3
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	f8c5 9014 	str.w	r9, [r5, #20]
 8005c50:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8005c54:	e78f      	b.n	8005b76 <_tzset_unlocked_r+0x1d2>
 8005c56:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8005c5a:	220b      	movs	r2, #11
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8005c62:	2300      	movs	r3, #0
 8005c64:	63eb      	str	r3, [r5, #60]	; 0x3c
 8005c66:	e786      	b.n	8005b76 <_tzset_unlocked_r+0x1d2>
 8005c68:	b280      	uxth	r0, r0
 8005c6a:	723b      	strb	r3, [r7, #8]
 8005c6c:	6178      	str	r0, [r7, #20]
 8005c6e:	e782      	b.n	8005b76 <_tzset_unlocked_r+0x1d2>
 8005c70:	080072bf 	.word	0x080072bf
 8005c74:	2000028c 	.word	0x2000028c
 8005c78:	20000294 	.word	0x20000294
 8005c7c:	080072c2 	.word	0x080072c2
 8005c80:	20000290 	.word	0x20000290
 8005c84:	20000074 	.word	0x20000074
 8005c88:	2000027f 	.word	0x2000027f
 8005c8c:	080072c6 	.word	0x080072c6
 8005c90:	080072e9 	.word	0x080072e9
 8005c94:	080072d5 	.word	0x080072d5
 8005c98:	080072e8 	.word	0x080072e8
 8005c9c:	20000274 	.word	0x20000274

08005ca0 <abs>:
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	bfb8      	it	lt
 8005ca4:	4240      	neglt	r0, r0
 8005ca6:	4770      	bx	lr

08005ca8 <_findenv_r>:
 8005ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	4607      	mov	r7, r0
 8005cae:	468b      	mov	fp, r1
 8005cb0:	4690      	mov	r8, r2
 8005cb2:	f000 fc86 	bl	80065c2 <__env_lock>
 8005cb6:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <_findenv_r+0x74>)
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	469a      	mov	sl, r3
 8005cbc:	b13d      	cbz	r5, 8005cce <_findenv_r+0x26>
 8005cbe:	465c      	mov	r4, fp
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc6:	b32a      	cbz	r2, 8005d14 <_findenv_r+0x6c>
 8005cc8:	2a3d      	cmp	r2, #61	; 0x3d
 8005cca:	461c      	mov	r4, r3
 8005ccc:	d1f8      	bne.n	8005cc0 <_findenv_r+0x18>
 8005cce:	4638      	mov	r0, r7
 8005cd0:	f000 fc78 	bl	80065c4 <__env_unlock>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	464d      	mov	r5, r9
 8005cdc:	46a9      	mov	r9, r5
 8005cde:	f859 0b04 	ldr.w	r0, [r9], #4
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d0f3      	beq.n	8005cce <_findenv_r+0x26>
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	4659      	mov	r1, fp
 8005cea:	f000 fba3 	bl	8006434 <strncmp>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d1f3      	bne.n	8005cda <_findenv_r+0x32>
 8005cf2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8005cf6:	191e      	adds	r6, r3, r4
 8005cf8:	5d1b      	ldrb	r3, [r3, r4]
 8005cfa:	2b3d      	cmp	r3, #61	; 0x3d
 8005cfc:	d1ed      	bne.n	8005cda <_findenv_r+0x32>
 8005cfe:	f8da 3000 	ldr.w	r3, [sl]
 8005d02:	4638      	mov	r0, r7
 8005d04:	1aed      	subs	r5, r5, r3
 8005d06:	10ad      	asrs	r5, r5, #2
 8005d08:	f8c8 5000 	str.w	r5, [r8]
 8005d0c:	f000 fc5a 	bl	80065c4 <__env_unlock>
 8005d10:	1c70      	adds	r0, r6, #1
 8005d12:	e7e0      	b.n	8005cd6 <_findenv_r+0x2e>
 8005d14:	eba4 040b 	sub.w	r4, r4, fp
 8005d18:	e7e0      	b.n	8005cdc <_findenv_r+0x34>
 8005d1a:	bf00      	nop
 8005d1c:	20000000 	.word	0x20000000

08005d20 <_getenv_r>:
 8005d20:	b507      	push	{r0, r1, r2, lr}
 8005d22:	aa01      	add	r2, sp, #4
 8005d24:	f7ff ffc0 	bl	8005ca8 <_findenv_r>
 8005d28:	b003      	add	sp, #12
 8005d2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005d30 <_gettimeofday_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	2300      	movs	r3, #0
 8005d34:	4c06      	ldr	r4, [pc, #24]	; (8005d50 <_gettimeofday_r+0x20>)
 8005d36:	4605      	mov	r5, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	f001 f89b 	bl	8006e78 <_gettimeofday>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d102      	bne.n	8005d4c <_gettimeofday_r+0x1c>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	b103      	cbz	r3, 8005d4c <_gettimeofday_r+0x1c>
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000360 	.word	0x20000360

08005d54 <__gettzinfo>:
 8005d54:	4800      	ldr	r0, [pc, #0]	; (8005d58 <__gettzinfo+0x4>)
 8005d56:	4770      	bx	lr
 8005d58:	20000080 	.word	0x20000080

08005d5c <labs>:
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	bfb8      	it	lt
 8005d60:	4240      	neglt	r0, r0
 8005d62:	4770      	bx	lr

08005d64 <__locale_ctype_ptr_l>:
 8005d64:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005d68:	4770      	bx	lr
	...

08005d6c <__locale_ctype_ptr>:
 8005d6c:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <__locale_ctype_ptr+0x14>)
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <__locale_ctype_ptr+0x18>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bf08      	it	eq
 8005d78:	4613      	moveq	r3, r2
 8005d7a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005d7e:	4770      	bx	lr
 8005d80:	20000010 	.word	0x20000010
 8005d84:	200000d8 	.word	0x200000d8

08005d88 <__ascii_mbtowc>:
 8005d88:	b082      	sub	sp, #8
 8005d8a:	b901      	cbnz	r1, 8005d8e <__ascii_mbtowc+0x6>
 8005d8c:	a901      	add	r1, sp, #4
 8005d8e:	b142      	cbz	r2, 8005da2 <__ascii_mbtowc+0x1a>
 8005d90:	b14b      	cbz	r3, 8005da6 <__ascii_mbtowc+0x1e>
 8005d92:	7813      	ldrb	r3, [r2, #0]
 8005d94:	600b      	str	r3, [r1, #0]
 8005d96:	7812      	ldrb	r2, [r2, #0]
 8005d98:	1c10      	adds	r0, r2, #0
 8005d9a:	bf18      	it	ne
 8005d9c:	2001      	movne	r0, #1
 8005d9e:	b002      	add	sp, #8
 8005da0:	4770      	bx	lr
 8005da2:	4610      	mov	r0, r2
 8005da4:	e7fb      	b.n	8005d9e <__ascii_mbtowc+0x16>
 8005da6:	f06f 0001 	mvn.w	r0, #1
 8005daa:	e7f8      	b.n	8005d9e <__ascii_mbtowc+0x16>

08005dac <__malloc_lock>:
 8005dac:	4770      	bx	lr

08005dae <__malloc_unlock>:
 8005dae:	4770      	bx	lr

08005db0 <__ssputs_r>:
 8005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	688e      	ldr	r6, [r1, #8]
 8005db6:	4682      	mov	sl, r0
 8005db8:	429e      	cmp	r6, r3
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4690      	mov	r8, r2
 8005dbe:	4699      	mov	r9, r3
 8005dc0:	d837      	bhi.n	8005e32 <__ssputs_r+0x82>
 8005dc2:	898a      	ldrh	r2, [r1, #12]
 8005dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dc8:	d031      	beq.n	8005e2e <__ssputs_r+0x7e>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	6825      	ldr	r5, [r4, #0]
 8005dce:	6909      	ldr	r1, [r1, #16]
 8005dd0:	1a6f      	subs	r7, r5, r1
 8005dd2:	6965      	ldr	r5, [r4, #20]
 8005dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ddc:	f109 0301 	add.w	r3, r9, #1
 8005de0:	443b      	add	r3, r7
 8005de2:	429d      	cmp	r5, r3
 8005de4:	bf38      	it	cc
 8005de6:	461d      	movcc	r5, r3
 8005de8:	0553      	lsls	r3, r2, #21
 8005dea:	d530      	bpl.n	8005e4e <__ssputs_r+0x9e>
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7fe ff33 	bl	8004c58 <_malloc_r>
 8005df2:	4606      	mov	r6, r0
 8005df4:	b950      	cbnz	r0, 8005e0c <__ssputs_r+0x5c>
 8005df6:	230c      	movs	r3, #12
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfc:	f8ca 3000 	str.w	r3, [sl]
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	463a      	mov	r2, r7
 8005e0e:	6921      	ldr	r1, [r4, #16]
 8005e10:	f000 fbe7 	bl	80065e2 <memcpy>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	6126      	str	r6, [r4, #16]
 8005e22:	443e      	add	r6, r7
 8005e24:	6026      	str	r6, [r4, #0]
 8005e26:	464e      	mov	r6, r9
 8005e28:	6165      	str	r5, [r4, #20]
 8005e2a:	1bed      	subs	r5, r5, r7
 8005e2c:	60a5      	str	r5, [r4, #8]
 8005e2e:	454e      	cmp	r6, r9
 8005e30:	d900      	bls.n	8005e34 <__ssputs_r+0x84>
 8005e32:	464e      	mov	r6, r9
 8005e34:	4632      	mov	r2, r6
 8005e36:	4641      	mov	r1, r8
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	f000 fbdd 	bl	80065f8 <memmove>
 8005e3e:	68a3      	ldr	r3, [r4, #8]
 8005e40:	2000      	movs	r0, #0
 8005e42:	1b9b      	subs	r3, r3, r6
 8005e44:	60a3      	str	r3, [r4, #8]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	441e      	add	r6, r3
 8005e4a:	6026      	str	r6, [r4, #0]
 8005e4c:	e7dc      	b.n	8005e08 <__ssputs_r+0x58>
 8005e4e:	462a      	mov	r2, r5
 8005e50:	f000 fbeb 	bl	800662a <_realloc_r>
 8005e54:	4606      	mov	r6, r0
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d1e2      	bne.n	8005e20 <__ssputs_r+0x70>
 8005e5a:	6921      	ldr	r1, [r4, #16]
 8005e5c:	4650      	mov	r0, sl
 8005e5e:	f7fe feaf 	bl	8004bc0 <_free_r>
 8005e62:	e7c8      	b.n	8005df6 <__ssputs_r+0x46>

08005e64 <_svfiprintf_r>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	461d      	mov	r5, r3
 8005e6a:	898b      	ldrh	r3, [r1, #12]
 8005e6c:	b09d      	sub	sp, #116	; 0x74
 8005e6e:	061f      	lsls	r7, r3, #24
 8005e70:	4680      	mov	r8, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	4616      	mov	r6, r2
 8005e76:	d50f      	bpl.n	8005e98 <_svfiprintf_r+0x34>
 8005e78:	690b      	ldr	r3, [r1, #16]
 8005e7a:	b96b      	cbnz	r3, 8005e98 <_svfiprintf_r+0x34>
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	f7fe feeb 	bl	8004c58 <_malloc_r>
 8005e82:	6020      	str	r0, [r4, #0]
 8005e84:	6120      	str	r0, [r4, #16]
 8005e86:	b928      	cbnz	r0, 8005e94 <_svfiprintf_r+0x30>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	f8c8 3000 	str.w	r3, [r8]
 8005e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e92:	e0c8      	b.n	8006026 <_svfiprintf_r+0x1c2>
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	6163      	str	r3, [r4, #20]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ea2:	2330      	movs	r3, #48	; 0x30
 8005ea4:	f04f 0b01 	mov.w	fp, #1
 8005ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eac:	9503      	str	r5, [sp, #12]
 8005eae:	4637      	mov	r7, r6
 8005eb0:	463d      	mov	r5, r7
 8005eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005eb6:	b10b      	cbz	r3, 8005ebc <_svfiprintf_r+0x58>
 8005eb8:	2b25      	cmp	r3, #37	; 0x25
 8005eba:	d13e      	bne.n	8005f3a <_svfiprintf_r+0xd6>
 8005ebc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ec0:	d00b      	beq.n	8005eda <_svfiprintf_r+0x76>
 8005ec2:	4653      	mov	r3, sl
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4640      	mov	r0, r8
 8005eca:	f7ff ff71 	bl	8005db0 <__ssputs_r>
 8005ece:	3001      	adds	r0, #1
 8005ed0:	f000 80a4 	beq.w	800601c <_svfiprintf_r+0x1b8>
 8005ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed6:	4453      	add	r3, sl
 8005ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eda:	783b      	ldrb	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 809d 	beq.w	800601c <_svfiprintf_r+0x1b8>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	9307      	str	r3, [sp, #28]
 8005ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8005ef6:	462f      	mov	r7, r5
 8005ef8:	2205      	movs	r2, #5
 8005efa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005efe:	4850      	ldr	r0, [pc, #320]	; (8006040 <_svfiprintf_r+0x1dc>)
 8005f00:	f000 fb61 	bl	80065c6 <memchr>
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	b9d0      	cbnz	r0, 8005f3e <_svfiprintf_r+0xda>
 8005f08:	06d9      	lsls	r1, r3, #27
 8005f0a:	bf44      	itt	mi
 8005f0c:	2220      	movmi	r2, #32
 8005f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f12:	071a      	lsls	r2, r3, #28
 8005f14:	bf44      	itt	mi
 8005f16:	222b      	movmi	r2, #43	; 0x2b
 8005f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f1c:	782a      	ldrb	r2, [r5, #0]
 8005f1e:	2a2a      	cmp	r2, #42	; 0x2a
 8005f20:	d015      	beq.n	8005f4e <_svfiprintf_r+0xea>
 8005f22:	462f      	mov	r7, r5
 8005f24:	2000      	movs	r0, #0
 8005f26:	250a      	movs	r5, #10
 8005f28:	9a07      	ldr	r2, [sp, #28]
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f30:	3b30      	subs	r3, #48	; 0x30
 8005f32:	2b09      	cmp	r3, #9
 8005f34:	d94d      	bls.n	8005fd2 <_svfiprintf_r+0x16e>
 8005f36:	b1b8      	cbz	r0, 8005f68 <_svfiprintf_r+0x104>
 8005f38:	e00f      	b.n	8005f5a <_svfiprintf_r+0xf6>
 8005f3a:	462f      	mov	r7, r5
 8005f3c:	e7b8      	b.n	8005eb0 <_svfiprintf_r+0x4c>
 8005f3e:	4a40      	ldr	r2, [pc, #256]	; (8006040 <_svfiprintf_r+0x1dc>)
 8005f40:	463d      	mov	r5, r7
 8005f42:	1a80      	subs	r0, r0, r2
 8005f44:	fa0b f000 	lsl.w	r0, fp, r0
 8005f48:	4318      	orrs	r0, r3
 8005f4a:	9004      	str	r0, [sp, #16]
 8005f4c:	e7d3      	b.n	8005ef6 <_svfiprintf_r+0x92>
 8005f4e:	9a03      	ldr	r2, [sp, #12]
 8005f50:	1d11      	adds	r1, r2, #4
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	9103      	str	r1, [sp, #12]
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	db01      	blt.n	8005f5e <_svfiprintf_r+0xfa>
 8005f5a:	9207      	str	r2, [sp, #28]
 8005f5c:	e004      	b.n	8005f68 <_svfiprintf_r+0x104>
 8005f5e:	4252      	negs	r2, r2
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	9207      	str	r2, [sp, #28]
 8005f66:	9304      	str	r3, [sp, #16]
 8005f68:	783b      	ldrb	r3, [r7, #0]
 8005f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f6c:	d10c      	bne.n	8005f88 <_svfiprintf_r+0x124>
 8005f6e:	787b      	ldrb	r3, [r7, #1]
 8005f70:	2b2a      	cmp	r3, #42	; 0x2a
 8005f72:	d133      	bne.n	8005fdc <_svfiprintf_r+0x178>
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	3702      	adds	r7, #2
 8005f78:	1d1a      	adds	r2, r3, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	9203      	str	r2, [sp, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfb8      	it	lt
 8005f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	4d2e      	ldr	r5, [pc, #184]	; (8006044 <_svfiprintf_r+0x1e0>)
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	7839      	ldrb	r1, [r7, #0]
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 fb19 	bl	80065c6 <memchr>
 8005f94:	b138      	cbz	r0, 8005fa6 <_svfiprintf_r+0x142>
 8005f96:	2340      	movs	r3, #64	; 0x40
 8005f98:	1b40      	subs	r0, r0, r5
 8005f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f9e:	9b04      	ldr	r3, [sp, #16]
 8005fa0:	3701      	adds	r7, #1
 8005fa2:	4303      	orrs	r3, r0
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	7839      	ldrb	r1, [r7, #0]
 8005fa8:	2206      	movs	r2, #6
 8005faa:	4827      	ldr	r0, [pc, #156]	; (8006048 <_svfiprintf_r+0x1e4>)
 8005fac:	1c7e      	adds	r6, r7, #1
 8005fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fb2:	f000 fb08 	bl	80065c6 <memchr>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d038      	beq.n	800602c <_svfiprintf_r+0x1c8>
 8005fba:	4b24      	ldr	r3, [pc, #144]	; (800604c <_svfiprintf_r+0x1e8>)
 8005fbc:	bb13      	cbnz	r3, 8006004 <_svfiprintf_r+0x1a0>
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	3307      	adds	r3, #7
 8005fc2:	f023 0307 	bic.w	r3, r3, #7
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	9303      	str	r3, [sp, #12]
 8005fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fcc:	444b      	add	r3, r9
 8005fce:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd0:	e76d      	b.n	8005eae <_svfiprintf_r+0x4a>
 8005fd2:	fb05 3202 	mla	r2, r5, r2, r3
 8005fd6:	2001      	movs	r0, #1
 8005fd8:	460f      	mov	r7, r1
 8005fda:	e7a6      	b.n	8005f2a <_svfiprintf_r+0xc6>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	250a      	movs	r5, #10
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	3701      	adds	r7, #1
 8005fe4:	9305      	str	r3, [sp, #20]
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fec:	3a30      	subs	r2, #48	; 0x30
 8005fee:	2a09      	cmp	r2, #9
 8005ff0:	d903      	bls.n	8005ffa <_svfiprintf_r+0x196>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0c8      	beq.n	8005f88 <_svfiprintf_r+0x124>
 8005ff6:	9105      	str	r1, [sp, #20]
 8005ff8:	e7c6      	b.n	8005f88 <_svfiprintf_r+0x124>
 8005ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8005ffe:	2301      	movs	r3, #1
 8006000:	4607      	mov	r7, r0
 8006002:	e7f0      	b.n	8005fe6 <_svfiprintf_r+0x182>
 8006004:	ab03      	add	r3, sp, #12
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4622      	mov	r2, r4
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <_svfiprintf_r+0x1ec>)
 800600c:	a904      	add	r1, sp, #16
 800600e:	4640      	mov	r0, r8
 8006010:	f3af 8000 	nop.w
 8006014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006018:	4681      	mov	r9, r0
 800601a:	d1d6      	bne.n	8005fca <_svfiprintf_r+0x166>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	065b      	lsls	r3, r3, #25
 8006020:	f53f af35 	bmi.w	8005e8e <_svfiprintf_r+0x2a>
 8006024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006026:	b01d      	add	sp, #116	; 0x74
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	ab03      	add	r3, sp, #12
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	4622      	mov	r2, r4
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <_svfiprintf_r+0x1ec>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	4640      	mov	r0, r8
 8006038:	f000 f882 	bl	8006140 <_printf_i>
 800603c:	e7ea      	b.n	8006014 <_svfiprintf_r+0x1b0>
 800603e:	bf00      	nop
 8006040:	08007305 	.word	0x08007305
 8006044:	0800730b 	.word	0x0800730b
 8006048:	0800730f 	.word	0x0800730f
 800604c:	00000000 	.word	0x00000000
 8006050:	08005db1 	.word	0x08005db1

08006054 <_printf_common>:
 8006054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	4691      	mov	r9, r2
 800605a:	461f      	mov	r7, r3
 800605c:	688a      	ldr	r2, [r1, #8]
 800605e:	690b      	ldr	r3, [r1, #16]
 8006060:	4606      	mov	r6, r0
 8006062:	4293      	cmp	r3, r2
 8006064:	bfb8      	it	lt
 8006066:	4613      	movlt	r3, r2
 8006068:	f8c9 3000 	str.w	r3, [r9]
 800606c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006070:	460c      	mov	r4, r1
 8006072:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006076:	b112      	cbz	r2, 800607e <_printf_common+0x2a>
 8006078:	3301      	adds	r3, #1
 800607a:	f8c9 3000 	str.w	r3, [r9]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	0699      	lsls	r1, r3, #26
 8006082:	bf42      	ittt	mi
 8006084:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006088:	3302      	addmi	r3, #2
 800608a:	f8c9 3000 	strmi.w	r3, [r9]
 800608e:	6825      	ldr	r5, [r4, #0]
 8006090:	f015 0506 	ands.w	r5, r5, #6
 8006094:	d107      	bne.n	80060a6 <_printf_common+0x52>
 8006096:	f104 0a19 	add.w	sl, r4, #25
 800609a:	68e3      	ldr	r3, [r4, #12]
 800609c:	f8d9 2000 	ldr.w	r2, [r9]
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	dc29      	bgt.n	80060fa <_printf_common+0xa6>
 80060a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	3300      	adds	r3, #0
 80060ae:	bf18      	it	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	0692      	lsls	r2, r2, #26
 80060b4:	d42e      	bmi.n	8006114 <_printf_common+0xc0>
 80060b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ba:	4639      	mov	r1, r7
 80060bc:	4630      	mov	r0, r6
 80060be:	47c0      	blx	r8
 80060c0:	3001      	adds	r0, #1
 80060c2:	d021      	beq.n	8006108 <_printf_common+0xb4>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	68e5      	ldr	r5, [r4, #12]
 80060c8:	f003 0306 	and.w	r3, r3, #6
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	bf18      	it	ne
 80060d0:	2500      	movne	r5, #0
 80060d2:	f8d9 2000 	ldr.w	r2, [r9]
 80060d6:	f04f 0900 	mov.w	r9, #0
 80060da:	bf08      	it	eq
 80060dc:	1aad      	subeq	r5, r5, r2
 80060de:	68a3      	ldr	r3, [r4, #8]
 80060e0:	6922      	ldr	r2, [r4, #16]
 80060e2:	bf08      	it	eq
 80060e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bfc4      	itt	gt
 80060ec:	1a9b      	subgt	r3, r3, r2
 80060ee:	18ed      	addgt	r5, r5, r3
 80060f0:	341a      	adds	r4, #26
 80060f2:	454d      	cmp	r5, r9
 80060f4:	d11a      	bne.n	800612c <_printf_common+0xd8>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e008      	b.n	800610c <_printf_common+0xb8>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4652      	mov	r2, sl
 80060fe:	4639      	mov	r1, r7
 8006100:	4630      	mov	r0, r6
 8006102:	47c0      	blx	r8
 8006104:	3001      	adds	r0, #1
 8006106:	d103      	bne.n	8006110 <_printf_common+0xbc>
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	3501      	adds	r5, #1
 8006112:	e7c2      	b.n	800609a <_printf_common+0x46>
 8006114:	2030      	movs	r0, #48	; 0x30
 8006116:	18e1      	adds	r1, r4, r3
 8006118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006122:	4422      	add	r2, r4
 8006124:	3302      	adds	r3, #2
 8006126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800612a:	e7c4      	b.n	80060b6 <_printf_common+0x62>
 800612c:	2301      	movs	r3, #1
 800612e:	4622      	mov	r2, r4
 8006130:	4639      	mov	r1, r7
 8006132:	4630      	mov	r0, r6
 8006134:	47c0      	blx	r8
 8006136:	3001      	adds	r0, #1
 8006138:	d0e6      	beq.n	8006108 <_printf_common+0xb4>
 800613a:	f109 0901 	add.w	r9, r9, #1
 800613e:	e7d8      	b.n	80060f2 <_printf_common+0x9e>

08006140 <_printf_i>:
 8006140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006144:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006148:	460c      	mov	r4, r1
 800614a:	7e09      	ldrb	r1, [r1, #24]
 800614c:	b085      	sub	sp, #20
 800614e:	296e      	cmp	r1, #110	; 0x6e
 8006150:	4617      	mov	r7, r2
 8006152:	4606      	mov	r6, r0
 8006154:	4698      	mov	r8, r3
 8006156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006158:	f000 80b3 	beq.w	80062c2 <_printf_i+0x182>
 800615c:	d822      	bhi.n	80061a4 <_printf_i+0x64>
 800615e:	2963      	cmp	r1, #99	; 0x63
 8006160:	d036      	beq.n	80061d0 <_printf_i+0x90>
 8006162:	d80a      	bhi.n	800617a <_printf_i+0x3a>
 8006164:	2900      	cmp	r1, #0
 8006166:	f000 80b9 	beq.w	80062dc <_printf_i+0x19c>
 800616a:	2958      	cmp	r1, #88	; 0x58
 800616c:	f000 8083 	beq.w	8006276 <_printf_i+0x136>
 8006170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006174:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006178:	e032      	b.n	80061e0 <_printf_i+0xa0>
 800617a:	2964      	cmp	r1, #100	; 0x64
 800617c:	d001      	beq.n	8006182 <_printf_i+0x42>
 800617e:	2969      	cmp	r1, #105	; 0x69
 8006180:	d1f6      	bne.n	8006170 <_printf_i+0x30>
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	6813      	ldr	r3, [r2, #0]
 8006186:	0605      	lsls	r5, r0, #24
 8006188:	f103 0104 	add.w	r1, r3, #4
 800618c:	d52a      	bpl.n	80061e4 <_printf_i+0xa4>
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6011      	str	r1, [r2, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da03      	bge.n	800619e <_printf_i+0x5e>
 8006196:	222d      	movs	r2, #45	; 0x2d
 8006198:	425b      	negs	r3, r3
 800619a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800619e:	486f      	ldr	r0, [pc, #444]	; (800635c <_printf_i+0x21c>)
 80061a0:	220a      	movs	r2, #10
 80061a2:	e039      	b.n	8006218 <_printf_i+0xd8>
 80061a4:	2973      	cmp	r1, #115	; 0x73
 80061a6:	f000 809d 	beq.w	80062e4 <_printf_i+0x1a4>
 80061aa:	d808      	bhi.n	80061be <_printf_i+0x7e>
 80061ac:	296f      	cmp	r1, #111	; 0x6f
 80061ae:	d020      	beq.n	80061f2 <_printf_i+0xb2>
 80061b0:	2970      	cmp	r1, #112	; 0x70
 80061b2:	d1dd      	bne.n	8006170 <_printf_i+0x30>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	f043 0320 	orr.w	r3, r3, #32
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	e003      	b.n	80061c6 <_printf_i+0x86>
 80061be:	2975      	cmp	r1, #117	; 0x75
 80061c0:	d017      	beq.n	80061f2 <_printf_i+0xb2>
 80061c2:	2978      	cmp	r1, #120	; 0x78
 80061c4:	d1d4      	bne.n	8006170 <_printf_i+0x30>
 80061c6:	2378      	movs	r3, #120	; 0x78
 80061c8:	4865      	ldr	r0, [pc, #404]	; (8006360 <_printf_i+0x220>)
 80061ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ce:	e055      	b.n	800627c <_printf_i+0x13c>
 80061d0:	6813      	ldr	r3, [r2, #0]
 80061d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d6:	1d19      	adds	r1, r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6011      	str	r1, [r2, #0]
 80061dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e0:	2301      	movs	r3, #1
 80061e2:	e08c      	b.n	80062fe <_printf_i+0x1be>
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061ea:	6011      	str	r1, [r2, #0]
 80061ec:	bf18      	it	ne
 80061ee:	b21b      	sxthne	r3, r3
 80061f0:	e7cf      	b.n	8006192 <_printf_i+0x52>
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	6825      	ldr	r5, [r4, #0]
 80061f6:	1d18      	adds	r0, r3, #4
 80061f8:	6010      	str	r0, [r2, #0]
 80061fa:	0628      	lsls	r0, r5, #24
 80061fc:	d501      	bpl.n	8006202 <_printf_i+0xc2>
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	e002      	b.n	8006208 <_printf_i+0xc8>
 8006202:	0668      	lsls	r0, r5, #25
 8006204:	d5fb      	bpl.n	80061fe <_printf_i+0xbe>
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	296f      	cmp	r1, #111	; 0x6f
 800620a:	bf14      	ite	ne
 800620c:	220a      	movne	r2, #10
 800620e:	2208      	moveq	r2, #8
 8006210:	4852      	ldr	r0, [pc, #328]	; (800635c <_printf_i+0x21c>)
 8006212:	2100      	movs	r1, #0
 8006214:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006218:	6865      	ldr	r5, [r4, #4]
 800621a:	2d00      	cmp	r5, #0
 800621c:	60a5      	str	r5, [r4, #8]
 800621e:	f2c0 8095 	blt.w	800634c <_printf_i+0x20c>
 8006222:	6821      	ldr	r1, [r4, #0]
 8006224:	f021 0104 	bic.w	r1, r1, #4
 8006228:	6021      	str	r1, [r4, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d13d      	bne.n	80062aa <_printf_i+0x16a>
 800622e:	2d00      	cmp	r5, #0
 8006230:	f040 808e 	bne.w	8006350 <_printf_i+0x210>
 8006234:	4665      	mov	r5, ip
 8006236:	2a08      	cmp	r2, #8
 8006238:	d10b      	bne.n	8006252 <_printf_i+0x112>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	07db      	lsls	r3, r3, #31
 800623e:	d508      	bpl.n	8006252 <_printf_i+0x112>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	6862      	ldr	r2, [r4, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	bfde      	ittt	le
 8006248:	2330      	movle	r3, #48	; 0x30
 800624a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800624e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006252:	ebac 0305 	sub.w	r3, ip, r5
 8006256:	6123      	str	r3, [r4, #16]
 8006258:	f8cd 8000 	str.w	r8, [sp]
 800625c:	463b      	mov	r3, r7
 800625e:	aa03      	add	r2, sp, #12
 8006260:	4621      	mov	r1, r4
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff fef6 	bl	8006054 <_printf_common>
 8006268:	3001      	adds	r0, #1
 800626a:	d14d      	bne.n	8006308 <_printf_i+0x1c8>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	b005      	add	sp, #20
 8006272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006276:	4839      	ldr	r0, [pc, #228]	; (800635c <_printf_i+0x21c>)
 8006278:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800627c:	6813      	ldr	r3, [r2, #0]
 800627e:	6821      	ldr	r1, [r4, #0]
 8006280:	1d1d      	adds	r5, r3, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6015      	str	r5, [r2, #0]
 8006286:	060a      	lsls	r2, r1, #24
 8006288:	d50b      	bpl.n	80062a2 <_printf_i+0x162>
 800628a:	07ca      	lsls	r2, r1, #31
 800628c:	bf44      	itt	mi
 800628e:	f041 0120 	orrmi.w	r1, r1, #32
 8006292:	6021      	strmi	r1, [r4, #0]
 8006294:	b91b      	cbnz	r3, 800629e <_printf_i+0x15e>
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	f022 0220 	bic.w	r2, r2, #32
 800629c:	6022      	str	r2, [r4, #0]
 800629e:	2210      	movs	r2, #16
 80062a0:	e7b7      	b.n	8006212 <_printf_i+0xd2>
 80062a2:	064d      	lsls	r5, r1, #25
 80062a4:	bf48      	it	mi
 80062a6:	b29b      	uxthmi	r3, r3
 80062a8:	e7ef      	b.n	800628a <_printf_i+0x14a>
 80062aa:	4665      	mov	r5, ip
 80062ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b0:	fb02 3311 	mls	r3, r2, r1, r3
 80062b4:	5cc3      	ldrb	r3, [r0, r3]
 80062b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062ba:	460b      	mov	r3, r1
 80062bc:	2900      	cmp	r1, #0
 80062be:	d1f5      	bne.n	80062ac <_printf_i+0x16c>
 80062c0:	e7b9      	b.n	8006236 <_printf_i+0xf6>
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	1d18      	adds	r0, r3, #4
 80062c8:	6961      	ldr	r1, [r4, #20]
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	0628      	lsls	r0, r5, #24
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	d501      	bpl.n	80062d6 <_printf_i+0x196>
 80062d2:	6019      	str	r1, [r3, #0]
 80062d4:	e002      	b.n	80062dc <_printf_i+0x19c>
 80062d6:	066a      	lsls	r2, r5, #25
 80062d8:	d5fb      	bpl.n	80062d2 <_printf_i+0x192>
 80062da:	8019      	strh	r1, [r3, #0]
 80062dc:	2300      	movs	r3, #0
 80062de:	4665      	mov	r5, ip
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	e7b9      	b.n	8006258 <_printf_i+0x118>
 80062e4:	6813      	ldr	r3, [r2, #0]
 80062e6:	1d19      	adds	r1, r3, #4
 80062e8:	6011      	str	r1, [r2, #0]
 80062ea:	681d      	ldr	r5, [r3, #0]
 80062ec:	6862      	ldr	r2, [r4, #4]
 80062ee:	2100      	movs	r1, #0
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f968 	bl	80065c6 <memchr>
 80062f6:	b108      	cbz	r0, 80062fc <_printf_i+0x1bc>
 80062f8:	1b40      	subs	r0, r0, r5
 80062fa:	6060      	str	r0, [r4, #4]
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	6123      	str	r3, [r4, #16]
 8006300:	2300      	movs	r3, #0
 8006302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006306:	e7a7      	b.n	8006258 <_printf_i+0x118>
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	462a      	mov	r2, r5
 800630c:	4639      	mov	r1, r7
 800630e:	4630      	mov	r0, r6
 8006310:	47c0      	blx	r8
 8006312:	3001      	adds	r0, #1
 8006314:	d0aa      	beq.n	800626c <_printf_i+0x12c>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	079b      	lsls	r3, r3, #30
 800631a:	d413      	bmi.n	8006344 <_printf_i+0x204>
 800631c:	68e0      	ldr	r0, [r4, #12]
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	4298      	cmp	r0, r3
 8006322:	bfb8      	it	lt
 8006324:	4618      	movlt	r0, r3
 8006326:	e7a3      	b.n	8006270 <_printf_i+0x130>
 8006328:	2301      	movs	r3, #1
 800632a:	464a      	mov	r2, r9
 800632c:	4639      	mov	r1, r7
 800632e:	4630      	mov	r0, r6
 8006330:	47c0      	blx	r8
 8006332:	3001      	adds	r0, #1
 8006334:	d09a      	beq.n	800626c <_printf_i+0x12c>
 8006336:	3501      	adds	r5, #1
 8006338:	68e3      	ldr	r3, [r4, #12]
 800633a:	9a03      	ldr	r2, [sp, #12]
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	42ab      	cmp	r3, r5
 8006340:	dcf2      	bgt.n	8006328 <_printf_i+0x1e8>
 8006342:	e7eb      	b.n	800631c <_printf_i+0x1dc>
 8006344:	2500      	movs	r5, #0
 8006346:	f104 0919 	add.w	r9, r4, #25
 800634a:	e7f5      	b.n	8006338 <_printf_i+0x1f8>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1ac      	bne.n	80062aa <_printf_i+0x16a>
 8006350:	7803      	ldrb	r3, [r0, #0]
 8006352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635a:	e76c      	b.n	8006236 <_printf_i+0xf6>
 800635c:	08007316 	.word	0x08007316
 8006360:	08007327 	.word	0x08007327

08006364 <sniprintf>:
 8006364:	b40c      	push	{r2, r3}
 8006366:	b530      	push	{r4, r5, lr}
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <sniprintf+0x64>)
 800636a:	1e0c      	subs	r4, r1, #0
 800636c:	b09d      	sub	sp, #116	; 0x74
 800636e:	681d      	ldr	r5, [r3, #0]
 8006370:	da08      	bge.n	8006384 <sniprintf+0x20>
 8006372:	238b      	movs	r3, #139	; 0x8b
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	b01d      	add	sp, #116	; 0x74
 800637c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006380:	b002      	add	sp, #8
 8006382:	4770      	bx	lr
 8006384:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006388:	f8ad 3014 	strh.w	r3, [sp, #20]
 800638c:	bf0c      	ite	eq
 800638e:	4623      	moveq	r3, r4
 8006390:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006394:	9304      	str	r3, [sp, #16]
 8006396:	9307      	str	r3, [sp, #28]
 8006398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800639c:	9002      	str	r0, [sp, #8]
 800639e:	9006      	str	r0, [sp, #24]
 80063a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80063a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063a6:	ab21      	add	r3, sp, #132	; 0x84
 80063a8:	a902      	add	r1, sp, #8
 80063aa:	4628      	mov	r0, r5
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	f7ff fd59 	bl	8005e64 <_svfiprintf_r>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	bfbc      	itt	lt
 80063b6:	238b      	movlt	r3, #139	; 0x8b
 80063b8:	602b      	strlt	r3, [r5, #0]
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	d0dd      	beq.n	800637a <sniprintf+0x16>
 80063be:	2200      	movs	r2, #0
 80063c0:	9b02      	ldr	r3, [sp, #8]
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e7d9      	b.n	800637a <sniprintf+0x16>
 80063c6:	bf00      	nop
 80063c8:	20000010 	.word	0x20000010

080063cc <siscanf>:
 80063cc:	b40e      	push	{r1, r2, r3}
 80063ce:	f44f 7201 	mov.w	r2, #516	; 0x204
 80063d2:	b530      	push	{r4, r5, lr}
 80063d4:	b09c      	sub	sp, #112	; 0x70
 80063d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80063d8:	f854 5b04 	ldr.w	r5, [r4], #4
 80063dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80063e0:	9002      	str	r0, [sp, #8]
 80063e2:	9006      	str	r0, [sp, #24]
 80063e4:	f7f9 feb4 	bl	8000150 <strlen>
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <siscanf+0x4c>)
 80063ea:	9003      	str	r0, [sp, #12]
 80063ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ee:	2300      	movs	r3, #0
 80063f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063f2:	9314      	str	r3, [sp, #80]	; 0x50
 80063f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063f8:	9007      	str	r0, [sp, #28]
 80063fa:	4808      	ldr	r0, [pc, #32]	; (800641c <siscanf+0x50>)
 80063fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006400:	462a      	mov	r2, r5
 8006402:	4623      	mov	r3, r4
 8006404:	a902      	add	r1, sp, #8
 8006406:	6800      	ldr	r0, [r0, #0]
 8006408:	9401      	str	r4, [sp, #4]
 800640a:	f000 f98f 	bl	800672c <__ssvfiscanf_r>
 800640e:	b01c      	add	sp, #112	; 0x70
 8006410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006414:	b003      	add	sp, #12
 8006416:	4770      	bx	lr
 8006418:	08006421 	.word	0x08006421
 800641c:	20000010 	.word	0x20000010

08006420 <__seofread>:
 8006420:	2000      	movs	r0, #0
 8006422:	4770      	bx	lr

08006424 <strcpy>:
 8006424:	4603      	mov	r3, r0
 8006426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800642a:	f803 2b01 	strb.w	r2, [r3], #1
 800642e:	2a00      	cmp	r2, #0
 8006430:	d1f9      	bne.n	8006426 <strcpy+0x2>
 8006432:	4770      	bx	lr

08006434 <strncmp>:
 8006434:	b510      	push	{r4, lr}
 8006436:	b16a      	cbz	r2, 8006454 <strncmp+0x20>
 8006438:	3901      	subs	r1, #1
 800643a:	1884      	adds	r4, r0, r2
 800643c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006440:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006444:	4293      	cmp	r3, r2
 8006446:	d103      	bne.n	8006450 <strncmp+0x1c>
 8006448:	42a0      	cmp	r0, r4
 800644a:	d001      	beq.n	8006450 <strncmp+0x1c>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f5      	bne.n	800643c <strncmp+0x8>
 8006450:	1a98      	subs	r0, r3, r2
 8006452:	bd10      	pop	{r4, pc}
 8006454:	4610      	mov	r0, r2
 8006456:	e7fc      	b.n	8006452 <strncmp+0x1e>

08006458 <__tzcalc_limits>:
 8006458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	4680      	mov	r8, r0
 800645e:	f7ff fc79 	bl	8005d54 <__gettzinfo>
 8006462:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8006466:	4598      	cmp	r8, r3
 8006468:	f340 8097 	ble.w	800659a <__tzcalc_limits+0x142>
 800646c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006470:	f240 126d 	movw	r2, #365	; 0x16d
 8006474:	4443      	add	r3, r8
 8006476:	109b      	asrs	r3, r3, #2
 8006478:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800647c:	fb02 3505 	mla	r5, r2, r5, r3
 8006480:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8006484:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8006488:	fb93 f3f2 	sdiv	r3, r3, r2
 800648c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8006490:	441d      	add	r5, r3
 8006492:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006496:	4442      	add	r2, r8
 8006498:	fb92 f2f3 	sdiv	r2, r2, r3
 800649c:	fb98 f7f3 	sdiv	r7, r8, r3
 80064a0:	4415      	add	r5, r2
 80064a2:	2264      	movs	r2, #100	; 0x64
 80064a4:	fb03 8717 	mls	r7, r3, r7, r8
 80064a8:	fb98 f6f2 	sdiv	r6, r8, r2
 80064ac:	fab7 fc87 	clz	ip, r7
 80064b0:	4604      	mov	r4, r0
 80064b2:	f04f 0e07 	mov.w	lr, #7
 80064b6:	fb02 8616 	mls	r6, r2, r6, r8
 80064ba:	f008 0303 	and.w	r3, r8, #3
 80064be:	f8c0 8004 	str.w	r8, [r0, #4]
 80064c2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80064c6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	7a22      	ldrb	r2, [r4, #8]
 80064ce:	6963      	ldr	r3, [r4, #20]
 80064d0:	2a4a      	cmp	r2, #74	; 0x4a
 80064d2:	d128      	bne.n	8006526 <__tzcalc_limits+0xce>
 80064d4:	9900      	ldr	r1, [sp, #0]
 80064d6:	18ea      	adds	r2, r5, r3
 80064d8:	b901      	cbnz	r1, 80064dc <__tzcalc_limits+0x84>
 80064da:	b906      	cbnz	r6, 80064de <__tzcalc_limits+0x86>
 80064dc:	bb0f      	cbnz	r7, 8006522 <__tzcalc_limits+0xca>
 80064de:	2b3b      	cmp	r3, #59	; 0x3b
 80064e0:	bfd4      	ite	le
 80064e2:	2300      	movle	r3, #0
 80064e4:	2301      	movgt	r3, #1
 80064e6:	4413      	add	r3, r2
 80064e8:	1e5a      	subs	r2, r3, #1
 80064ea:	69a3      	ldr	r3, [r4, #24]
 80064ec:	492c      	ldr	r1, [pc, #176]	; (80065a0 <__tzcalc_limits+0x148>)
 80064ee:	3428      	adds	r4, #40	; 0x28
 80064f0:	fb01 3202 	mla	r2, r1, r2, r3
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	4413      	add	r3, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	17db      	asrs	r3, r3, #31
 80064fc:	e944 2302 	strd	r2, r3, [r4, #-8]
 8006500:	45a3      	cmp	fp, r4
 8006502:	d1e3      	bne.n	80064cc <__tzcalc_limits+0x74>
 8006504:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8006508:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800650c:	4294      	cmp	r4, r2
 800650e:	eb75 0303 	sbcs.w	r3, r5, r3
 8006512:	bfb4      	ite	lt
 8006514:	2301      	movlt	r3, #1
 8006516:	2300      	movge	r3, #0
 8006518:	6003      	str	r3, [r0, #0]
 800651a:	2001      	movs	r0, #1
 800651c:	b003      	add	sp, #12
 800651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006522:	2300      	movs	r3, #0
 8006524:	e7df      	b.n	80064e6 <__tzcalc_limits+0x8e>
 8006526:	2a44      	cmp	r2, #68	; 0x44
 8006528:	d101      	bne.n	800652e <__tzcalc_limits+0xd6>
 800652a:	18ea      	adds	r2, r5, r3
 800652c:	e7dd      	b.n	80064ea <__tzcalc_limits+0x92>
 800652e:	9a00      	ldr	r2, [sp, #0]
 8006530:	bb6a      	cbnz	r2, 800658e <__tzcalc_limits+0x136>
 8006532:	2e00      	cmp	r6, #0
 8006534:	bf0c      	ite	eq
 8006536:	46e1      	moveq	r9, ip
 8006538:	f04f 0901 	movne.w	r9, #1
 800653c:	2230      	movs	r2, #48	; 0x30
 800653e:	fb02 f909 	mul.w	r9, r2, r9
 8006542:	68e2      	ldr	r2, [r4, #12]
 8006544:	f04f 0800 	mov.w	r8, #0
 8006548:	9201      	str	r2, [sp, #4]
 800654a:	462a      	mov	r2, r5
 800654c:	f108 0801 	add.w	r8, r8, #1
 8006550:	4914      	ldr	r1, [pc, #80]	; (80065a4 <__tzcalc_limits+0x14c>)
 8006552:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8006556:	448a      	add	sl, r1
 8006558:	9901      	ldr	r1, [sp, #4]
 800655a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800655e:	4541      	cmp	r1, r8
 8006560:	dc17      	bgt.n	8006592 <__tzcalc_limits+0x13a>
 8006562:	f102 0804 	add.w	r8, r2, #4
 8006566:	fb98 f9fe 	sdiv	r9, r8, lr
 800656a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800656e:	eba8 0909 	sub.w	r9, r8, r9
 8006572:	ebb3 0909 	subs.w	r9, r3, r9
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	bf48      	it	mi
 800657a:	f109 0907 	addmi.w	r9, r9, #7
 800657e:	3b01      	subs	r3, #1
 8006580:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006584:	444b      	add	r3, r9
 8006586:	4553      	cmp	r3, sl
 8006588:	da05      	bge.n	8006596 <__tzcalc_limits+0x13e>
 800658a:	441a      	add	r2, r3
 800658c:	e7ad      	b.n	80064ea <__tzcalc_limits+0x92>
 800658e:	46e1      	mov	r9, ip
 8006590:	e7d4      	b.n	800653c <__tzcalc_limits+0xe4>
 8006592:	4452      	add	r2, sl
 8006594:	e7da      	b.n	800654c <__tzcalc_limits+0xf4>
 8006596:	3b07      	subs	r3, #7
 8006598:	e7f5      	b.n	8006586 <__tzcalc_limits+0x12e>
 800659a:	2000      	movs	r0, #0
 800659c:	e7be      	b.n	800651c <__tzcalc_limits+0xc4>
 800659e:	bf00      	nop
 80065a0:	00015180 	.word	0x00015180
 80065a4:	0800743c 	.word	0x0800743c

080065a8 <__ascii_wctomb>:
 80065a8:	b149      	cbz	r1, 80065be <__ascii_wctomb+0x16>
 80065aa:	2aff      	cmp	r2, #255	; 0xff
 80065ac:	bf8b      	itete	hi
 80065ae:	238a      	movhi	r3, #138	; 0x8a
 80065b0:	700a      	strbls	r2, [r1, #0]
 80065b2:	6003      	strhi	r3, [r0, #0]
 80065b4:	2001      	movls	r0, #1
 80065b6:	bf88      	it	hi
 80065b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80065bc:	4770      	bx	lr
 80065be:	4608      	mov	r0, r1
 80065c0:	4770      	bx	lr

080065c2 <__env_lock>:
 80065c2:	4770      	bx	lr

080065c4 <__env_unlock>:
 80065c4:	4770      	bx	lr

080065c6 <memchr>:
 80065c6:	b510      	push	{r4, lr}
 80065c8:	b2c9      	uxtb	r1, r1
 80065ca:	4402      	add	r2, r0
 80065cc:	4290      	cmp	r0, r2
 80065ce:	4603      	mov	r3, r0
 80065d0:	d101      	bne.n	80065d6 <memchr+0x10>
 80065d2:	2300      	movs	r3, #0
 80065d4:	e003      	b.n	80065de <memchr+0x18>
 80065d6:	781c      	ldrb	r4, [r3, #0]
 80065d8:	3001      	adds	r0, #1
 80065da:	428c      	cmp	r4, r1
 80065dc:	d1f6      	bne.n	80065cc <memchr+0x6>
 80065de:	4618      	mov	r0, r3
 80065e0:	bd10      	pop	{r4, pc}

080065e2 <memcpy>:
 80065e2:	b510      	push	{r4, lr}
 80065e4:	1e43      	subs	r3, r0, #1
 80065e6:	440a      	add	r2, r1
 80065e8:	4291      	cmp	r1, r2
 80065ea:	d100      	bne.n	80065ee <memcpy+0xc>
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f6:	e7f7      	b.n	80065e8 <memcpy+0x6>

080065f8 <memmove>:
 80065f8:	4288      	cmp	r0, r1
 80065fa:	b510      	push	{r4, lr}
 80065fc:	eb01 0302 	add.w	r3, r1, r2
 8006600:	d807      	bhi.n	8006612 <memmove+0x1a>
 8006602:	1e42      	subs	r2, r0, #1
 8006604:	4299      	cmp	r1, r3
 8006606:	d00a      	beq.n	800661e <memmove+0x26>
 8006608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006610:	e7f8      	b.n	8006604 <memmove+0xc>
 8006612:	4283      	cmp	r3, r0
 8006614:	d9f5      	bls.n	8006602 <memmove+0xa>
 8006616:	1881      	adds	r1, r0, r2
 8006618:	1ad2      	subs	r2, r2, r3
 800661a:	42d3      	cmn	r3, r2
 800661c:	d100      	bne.n	8006620 <memmove+0x28>
 800661e:	bd10      	pop	{r4, pc}
 8006620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006624:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006628:	e7f7      	b.n	800661a <memmove+0x22>

0800662a <_realloc_r>:
 800662a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662c:	4607      	mov	r7, r0
 800662e:	4614      	mov	r4, r2
 8006630:	460e      	mov	r6, r1
 8006632:	b921      	cbnz	r1, 800663e <_realloc_r+0x14>
 8006634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006638:	4611      	mov	r1, r2
 800663a:	f7fe bb0d 	b.w	8004c58 <_malloc_r>
 800663e:	b922      	cbnz	r2, 800664a <_realloc_r+0x20>
 8006640:	f7fe fabe 	bl	8004bc0 <_free_r>
 8006644:	4625      	mov	r5, r4
 8006646:	4628      	mov	r0, r5
 8006648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800664a:	f000 fc0d 	bl	8006e68 <_malloc_usable_size_r>
 800664e:	42a0      	cmp	r0, r4
 8006650:	d20f      	bcs.n	8006672 <_realloc_r+0x48>
 8006652:	4621      	mov	r1, r4
 8006654:	4638      	mov	r0, r7
 8006656:	f7fe faff 	bl	8004c58 <_malloc_r>
 800665a:	4605      	mov	r5, r0
 800665c:	2800      	cmp	r0, #0
 800665e:	d0f2      	beq.n	8006646 <_realloc_r+0x1c>
 8006660:	4631      	mov	r1, r6
 8006662:	4622      	mov	r2, r4
 8006664:	f7ff ffbd 	bl	80065e2 <memcpy>
 8006668:	4631      	mov	r1, r6
 800666a:	4638      	mov	r0, r7
 800666c:	f7fe faa8 	bl	8004bc0 <_free_r>
 8006670:	e7e9      	b.n	8006646 <_realloc_r+0x1c>
 8006672:	4635      	mov	r5, r6
 8006674:	e7e7      	b.n	8006646 <_realloc_r+0x1c>

08006676 <_sungetc_r>:
 8006676:	b538      	push	{r3, r4, r5, lr}
 8006678:	1c4b      	adds	r3, r1, #1
 800667a:	4614      	mov	r4, r2
 800667c:	d103      	bne.n	8006686 <_sungetc_r+0x10>
 800667e:	f04f 35ff 	mov.w	r5, #4294967295
 8006682:	4628      	mov	r0, r5
 8006684:	bd38      	pop	{r3, r4, r5, pc}
 8006686:	8993      	ldrh	r3, [r2, #12]
 8006688:	b2cd      	uxtb	r5, r1
 800668a:	f023 0320 	bic.w	r3, r3, #32
 800668e:	8193      	strh	r3, [r2, #12]
 8006690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006692:	6852      	ldr	r2, [r2, #4]
 8006694:	b18b      	cbz	r3, 80066ba <_sungetc_r+0x44>
 8006696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006698:	4293      	cmp	r3, r2
 800669a:	dd08      	ble.n	80066ae <_sungetc_r+0x38>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	1e5a      	subs	r2, r3, #1
 80066a0:	6022      	str	r2, [r4, #0]
 80066a2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	3301      	adds	r3, #1
 80066aa:	6063      	str	r3, [r4, #4]
 80066ac:	e7e9      	b.n	8006682 <_sungetc_r+0xc>
 80066ae:	4621      	mov	r1, r4
 80066b0:	f000 fba2 	bl	8006df8 <__submore>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d0f1      	beq.n	800669c <_sungetc_r+0x26>
 80066b8:	e7e1      	b.n	800667e <_sungetc_r+0x8>
 80066ba:	6921      	ldr	r1, [r4, #16]
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	b151      	cbz	r1, 80066d6 <_sungetc_r+0x60>
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d208      	bcs.n	80066d6 <_sungetc_r+0x60>
 80066c4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80066c8:	42a9      	cmp	r1, r5
 80066ca:	d104      	bne.n	80066d6 <_sungetc_r+0x60>
 80066cc:	3b01      	subs	r3, #1
 80066ce:	3201      	adds	r2, #1
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	6062      	str	r2, [r4, #4]
 80066d4:	e7d5      	b.n	8006682 <_sungetc_r+0xc>
 80066d6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80066da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066de:	6363      	str	r3, [r4, #52]	; 0x34
 80066e0:	2303      	movs	r3, #3
 80066e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80066e4:	4623      	mov	r3, r4
 80066e6:	f803 5f46 	strb.w	r5, [r3, #70]!
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	2301      	movs	r3, #1
 80066ee:	e7dc      	b.n	80066aa <_sungetc_r+0x34>

080066f0 <__ssrefill_r>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	460c      	mov	r4, r1
 80066f4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80066f6:	b169      	cbz	r1, 8006714 <__ssrefill_r+0x24>
 80066f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d001      	beq.n	8006704 <__ssrefill_r+0x14>
 8006700:	f7fe fa5e 	bl	8004bc0 <_free_r>
 8006704:	2000      	movs	r0, #0
 8006706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006708:	6360      	str	r0, [r4, #52]	; 0x34
 800670a:	6063      	str	r3, [r4, #4]
 800670c:	b113      	cbz	r3, 8006714 <__ssrefill_r+0x24>
 800670e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd10      	pop	{r4, pc}
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	f04f 30ff 	mov.w	r0, #4294967295
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	2300      	movs	r3, #0
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	f043 0320 	orr.w	r3, r3, #32
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	e7f3      	b.n	8006712 <__ssrefill_r+0x22>
	...

0800672c <__ssvfiscanf_r>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	460c      	mov	r4, r1
 8006732:	2100      	movs	r1, #0
 8006734:	4606      	mov	r6, r0
 8006736:	4692      	mov	sl, r2
 8006738:	270a      	movs	r7, #10
 800673a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800673e:	9144      	str	r1, [sp, #272]	; 0x110
 8006740:	9145      	str	r1, [sp, #276]	; 0x114
 8006742:	499e      	ldr	r1, [pc, #632]	; (80069bc <__ssvfiscanf_r+0x290>)
 8006744:	f10d 0804 	add.w	r8, sp, #4
 8006748:	91a0      	str	r1, [sp, #640]	; 0x280
 800674a:	499d      	ldr	r1, [pc, #628]	; (80069c0 <__ssvfiscanf_r+0x294>)
 800674c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80069c4 <__ssvfiscanf_r+0x298>
 8006750:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006754:	91a1      	str	r1, [sp, #644]	; 0x284
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	f89a 3000 	ldrb.w	r3, [sl]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 812a 	beq.w	80069b6 <__ssvfiscanf_r+0x28a>
 8006762:	4655      	mov	r5, sl
 8006764:	f7ff fb02 	bl	8005d6c <__locale_ctype_ptr>
 8006768:	f815 bb01 	ldrb.w	fp, [r5], #1
 800676c:	4458      	add	r0, fp
 800676e:	7843      	ldrb	r3, [r0, #1]
 8006770:	f013 0308 	ands.w	r3, r3, #8
 8006774:	d01c      	beq.n	80067b0 <__ssvfiscanf_r+0x84>
 8006776:	6863      	ldr	r3, [r4, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	dd12      	ble.n	80067a2 <__ssvfiscanf_r+0x76>
 800677c:	f7ff faf6 	bl	8005d6c <__locale_ctype_ptr>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	781a      	ldrb	r2, [r3, #0]
 8006784:	4410      	add	r0, r2
 8006786:	7842      	ldrb	r2, [r0, #1]
 8006788:	0712      	lsls	r2, r2, #28
 800678a:	d401      	bmi.n	8006790 <__ssvfiscanf_r+0x64>
 800678c:	46aa      	mov	sl, r5
 800678e:	e7e3      	b.n	8006758 <__ssvfiscanf_r+0x2c>
 8006790:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006792:	3301      	adds	r3, #1
 8006794:	3201      	adds	r2, #1
 8006796:	9245      	str	r2, [sp, #276]	; 0x114
 8006798:	6862      	ldr	r2, [r4, #4]
 800679a:	6023      	str	r3, [r4, #0]
 800679c:	3a01      	subs	r2, #1
 800679e:	6062      	str	r2, [r4, #4]
 80067a0:	e7e9      	b.n	8006776 <__ssvfiscanf_r+0x4a>
 80067a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80067a4:	4621      	mov	r1, r4
 80067a6:	4630      	mov	r0, r6
 80067a8:	4798      	blx	r3
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d0e6      	beq.n	800677c <__ssvfiscanf_r+0x50>
 80067ae:	e7ed      	b.n	800678c <__ssvfiscanf_r+0x60>
 80067b0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80067b4:	f040 8082 	bne.w	80068bc <__ssvfiscanf_r+0x190>
 80067b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80067ba:	9341      	str	r3, [sp, #260]	; 0x104
 80067bc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80067c0:	2b2a      	cmp	r3, #42	; 0x2a
 80067c2:	d103      	bne.n	80067cc <__ssvfiscanf_r+0xa0>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f10a 0502 	add.w	r5, sl, #2
 80067ca:	9341      	str	r3, [sp, #260]	; 0x104
 80067cc:	46aa      	mov	sl, r5
 80067ce:	f815 1b01 	ldrb.w	r1, [r5], #1
 80067d2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80067d6:	2a09      	cmp	r2, #9
 80067d8:	d922      	bls.n	8006820 <__ssvfiscanf_r+0xf4>
 80067da:	2203      	movs	r2, #3
 80067dc:	4879      	ldr	r0, [pc, #484]	; (80069c4 <__ssvfiscanf_r+0x298>)
 80067de:	f7ff fef2 	bl	80065c6 <memchr>
 80067e2:	b138      	cbz	r0, 80067f4 <__ssvfiscanf_r+0xc8>
 80067e4:	eba0 0309 	sub.w	r3, r0, r9
 80067e8:	2001      	movs	r0, #1
 80067ea:	46aa      	mov	sl, r5
 80067ec:	4098      	lsls	r0, r3
 80067ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80067f0:	4318      	orrs	r0, r3
 80067f2:	9041      	str	r0, [sp, #260]	; 0x104
 80067f4:	f89a 3000 	ldrb.w	r3, [sl]
 80067f8:	f10a 0501 	add.w	r5, sl, #1
 80067fc:	2b67      	cmp	r3, #103	; 0x67
 80067fe:	d82b      	bhi.n	8006858 <__ssvfiscanf_r+0x12c>
 8006800:	2b65      	cmp	r3, #101	; 0x65
 8006802:	f080 809f 	bcs.w	8006944 <__ssvfiscanf_r+0x218>
 8006806:	2b47      	cmp	r3, #71	; 0x47
 8006808:	d810      	bhi.n	800682c <__ssvfiscanf_r+0x100>
 800680a:	2b45      	cmp	r3, #69	; 0x45
 800680c:	f080 809a 	bcs.w	8006944 <__ssvfiscanf_r+0x218>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d06c      	beq.n	80068ee <__ssvfiscanf_r+0x1c2>
 8006814:	2b25      	cmp	r3, #37	; 0x25
 8006816:	d051      	beq.n	80068bc <__ssvfiscanf_r+0x190>
 8006818:	2303      	movs	r3, #3
 800681a:	9742      	str	r7, [sp, #264]	; 0x108
 800681c:	9347      	str	r3, [sp, #284]	; 0x11c
 800681e:	e027      	b.n	8006870 <__ssvfiscanf_r+0x144>
 8006820:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006822:	fb07 1303 	mla	r3, r7, r3, r1
 8006826:	3b30      	subs	r3, #48	; 0x30
 8006828:	9343      	str	r3, [sp, #268]	; 0x10c
 800682a:	e7cf      	b.n	80067cc <__ssvfiscanf_r+0xa0>
 800682c:	2b5b      	cmp	r3, #91	; 0x5b
 800682e:	d06a      	beq.n	8006906 <__ssvfiscanf_r+0x1da>
 8006830:	d80c      	bhi.n	800684c <__ssvfiscanf_r+0x120>
 8006832:	2b58      	cmp	r3, #88	; 0x58
 8006834:	d1f0      	bne.n	8006818 <__ssvfiscanf_r+0xec>
 8006836:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800683c:	9241      	str	r2, [sp, #260]	; 0x104
 800683e:	2210      	movs	r2, #16
 8006840:	9242      	str	r2, [sp, #264]	; 0x108
 8006842:	2b6e      	cmp	r3, #110	; 0x6e
 8006844:	bf8c      	ite	hi
 8006846:	2304      	movhi	r3, #4
 8006848:	2303      	movls	r3, #3
 800684a:	e010      	b.n	800686e <__ssvfiscanf_r+0x142>
 800684c:	2b63      	cmp	r3, #99	; 0x63
 800684e:	d065      	beq.n	800691c <__ssvfiscanf_r+0x1f0>
 8006850:	2b64      	cmp	r3, #100	; 0x64
 8006852:	d1e1      	bne.n	8006818 <__ssvfiscanf_r+0xec>
 8006854:	9742      	str	r7, [sp, #264]	; 0x108
 8006856:	e7f4      	b.n	8006842 <__ssvfiscanf_r+0x116>
 8006858:	2b70      	cmp	r3, #112	; 0x70
 800685a:	d04b      	beq.n	80068f4 <__ssvfiscanf_r+0x1c8>
 800685c:	d826      	bhi.n	80068ac <__ssvfiscanf_r+0x180>
 800685e:	2b6e      	cmp	r3, #110	; 0x6e
 8006860:	d062      	beq.n	8006928 <__ssvfiscanf_r+0x1fc>
 8006862:	d84c      	bhi.n	80068fe <__ssvfiscanf_r+0x1d2>
 8006864:	2b69      	cmp	r3, #105	; 0x69
 8006866:	d1d7      	bne.n	8006818 <__ssvfiscanf_r+0xec>
 8006868:	2300      	movs	r3, #0
 800686a:	9342      	str	r3, [sp, #264]	; 0x108
 800686c:	2303      	movs	r3, #3
 800686e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006870:	6863      	ldr	r3, [r4, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	dd68      	ble.n	8006948 <__ssvfiscanf_r+0x21c>
 8006876:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006878:	0659      	lsls	r1, r3, #25
 800687a:	d407      	bmi.n	800688c <__ssvfiscanf_r+0x160>
 800687c:	f7ff fa76 	bl	8005d6c <__locale_ctype_ptr>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	4410      	add	r0, r2
 8006886:	7842      	ldrb	r2, [r0, #1]
 8006888:	0712      	lsls	r2, r2, #28
 800688a:	d464      	bmi.n	8006956 <__ssvfiscanf_r+0x22a>
 800688c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800688e:	2b02      	cmp	r3, #2
 8006890:	dc73      	bgt.n	800697a <__ssvfiscanf_r+0x24e>
 8006892:	466b      	mov	r3, sp
 8006894:	4622      	mov	r2, r4
 8006896:	a941      	add	r1, sp, #260	; 0x104
 8006898:	4630      	mov	r0, r6
 800689a:	f000 f897 	bl	80069cc <_scanf_chars>
 800689e:	2801      	cmp	r0, #1
 80068a0:	f000 8089 	beq.w	80069b6 <__ssvfiscanf_r+0x28a>
 80068a4:	2802      	cmp	r0, #2
 80068a6:	f47f af71 	bne.w	800678c <__ssvfiscanf_r+0x60>
 80068aa:	e01d      	b.n	80068e8 <__ssvfiscanf_r+0x1bc>
 80068ac:	2b75      	cmp	r3, #117	; 0x75
 80068ae:	d0d1      	beq.n	8006854 <__ssvfiscanf_r+0x128>
 80068b0:	2b78      	cmp	r3, #120	; 0x78
 80068b2:	d0c0      	beq.n	8006836 <__ssvfiscanf_r+0x10a>
 80068b4:	2b73      	cmp	r3, #115	; 0x73
 80068b6:	d1af      	bne.n	8006818 <__ssvfiscanf_r+0xec>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e7d8      	b.n	800686e <__ssvfiscanf_r+0x142>
 80068bc:	6863      	ldr	r3, [r4, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dd0c      	ble.n	80068dc <__ssvfiscanf_r+0x1b0>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	455a      	cmp	r2, fp
 80068c8:	d175      	bne.n	80069b6 <__ssvfiscanf_r+0x28a>
 80068ca:	3301      	adds	r3, #1
 80068cc:	6862      	ldr	r2, [r4, #4]
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80068d2:	3a01      	subs	r2, #1
 80068d4:	3301      	adds	r3, #1
 80068d6:	6062      	str	r2, [r4, #4]
 80068d8:	9345      	str	r3, [sp, #276]	; 0x114
 80068da:	e757      	b.n	800678c <__ssvfiscanf_r+0x60>
 80068dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80068de:	4621      	mov	r1, r4
 80068e0:	4630      	mov	r0, r6
 80068e2:	4798      	blx	r3
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d0ec      	beq.n	80068c2 <__ssvfiscanf_r+0x196>
 80068e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d159      	bne.n	80069a2 <__ssvfiscanf_r+0x276>
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	e05c      	b.n	80069ae <__ssvfiscanf_r+0x282>
 80068f4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80068f6:	f042 0220 	orr.w	r2, r2, #32
 80068fa:	9241      	str	r2, [sp, #260]	; 0x104
 80068fc:	e79b      	b.n	8006836 <__ssvfiscanf_r+0x10a>
 80068fe:	2308      	movs	r3, #8
 8006900:	9342      	str	r3, [sp, #264]	; 0x108
 8006902:	2304      	movs	r3, #4
 8006904:	e7b3      	b.n	800686e <__ssvfiscanf_r+0x142>
 8006906:	4629      	mov	r1, r5
 8006908:	4640      	mov	r0, r8
 800690a:	f000 f9b7 	bl	8006c7c <__sccl>
 800690e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006910:	4605      	mov	r5, r0
 8006912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006916:	9341      	str	r3, [sp, #260]	; 0x104
 8006918:	2301      	movs	r3, #1
 800691a:	e7a8      	b.n	800686e <__ssvfiscanf_r+0x142>
 800691c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800691e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006922:	9341      	str	r3, [sp, #260]	; 0x104
 8006924:	2300      	movs	r3, #0
 8006926:	e7a2      	b.n	800686e <__ssvfiscanf_r+0x142>
 8006928:	9841      	ldr	r0, [sp, #260]	; 0x104
 800692a:	06c3      	lsls	r3, r0, #27
 800692c:	f53f af2e 	bmi.w	800678c <__ssvfiscanf_r+0x60>
 8006930:	9b00      	ldr	r3, [sp, #0]
 8006932:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006934:	1d19      	adds	r1, r3, #4
 8006936:	9100      	str	r1, [sp, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	07c0      	lsls	r0, r0, #31
 800693c:	bf4c      	ite	mi
 800693e:	801a      	strhmi	r2, [r3, #0]
 8006940:	601a      	strpl	r2, [r3, #0]
 8006942:	e723      	b.n	800678c <__ssvfiscanf_r+0x60>
 8006944:	2305      	movs	r3, #5
 8006946:	e792      	b.n	800686e <__ssvfiscanf_r+0x142>
 8006948:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800694a:	4621      	mov	r1, r4
 800694c:	4630      	mov	r0, r6
 800694e:	4798      	blx	r3
 8006950:	2800      	cmp	r0, #0
 8006952:	d090      	beq.n	8006876 <__ssvfiscanf_r+0x14a>
 8006954:	e7c8      	b.n	80068e8 <__ssvfiscanf_r+0x1bc>
 8006956:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006958:	3201      	adds	r2, #1
 800695a:	9245      	str	r2, [sp, #276]	; 0x114
 800695c:	6862      	ldr	r2, [r4, #4]
 800695e:	3a01      	subs	r2, #1
 8006960:	2a00      	cmp	r2, #0
 8006962:	6062      	str	r2, [r4, #4]
 8006964:	dd02      	ble.n	800696c <__ssvfiscanf_r+0x240>
 8006966:	3301      	adds	r3, #1
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	e787      	b.n	800687c <__ssvfiscanf_r+0x150>
 800696c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800696e:	4621      	mov	r1, r4
 8006970:	4630      	mov	r0, r6
 8006972:	4798      	blx	r3
 8006974:	2800      	cmp	r0, #0
 8006976:	d081      	beq.n	800687c <__ssvfiscanf_r+0x150>
 8006978:	e7b6      	b.n	80068e8 <__ssvfiscanf_r+0x1bc>
 800697a:	2b04      	cmp	r3, #4
 800697c:	dc06      	bgt.n	800698c <__ssvfiscanf_r+0x260>
 800697e:	466b      	mov	r3, sp
 8006980:	4622      	mov	r2, r4
 8006982:	a941      	add	r1, sp, #260	; 0x104
 8006984:	4630      	mov	r0, r6
 8006986:	f000 f883 	bl	8006a90 <_scanf_i>
 800698a:	e788      	b.n	800689e <__ssvfiscanf_r+0x172>
 800698c:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <__ssvfiscanf_r+0x29c>)
 800698e:	2b00      	cmp	r3, #0
 8006990:	f43f aefc 	beq.w	800678c <__ssvfiscanf_r+0x60>
 8006994:	466b      	mov	r3, sp
 8006996:	4622      	mov	r2, r4
 8006998:	a941      	add	r1, sp, #260	; 0x104
 800699a:	4630      	mov	r0, r6
 800699c:	f3af 8000 	nop.w
 80069a0:	e77d      	b.n	800689e <__ssvfiscanf_r+0x172>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069a8:	bf18      	it	ne
 80069aa:	f04f 30ff 	movne.w	r0, #4294967295
 80069ae:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80069b8:	e7f9      	b.n	80069ae <__ssvfiscanf_r+0x282>
 80069ba:	bf00      	nop
 80069bc:	08006677 	.word	0x08006677
 80069c0:	080066f1 	.word	0x080066f1
 80069c4:	0800730b 	.word	0x0800730b
 80069c8:	00000000 	.word	0x00000000

080069cc <_scanf_chars>:
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	4615      	mov	r5, r2
 80069d2:	688a      	ldr	r2, [r1, #8]
 80069d4:	4680      	mov	r8, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	b932      	cbnz	r2, 80069e8 <_scanf_chars+0x1c>
 80069da:	698a      	ldr	r2, [r1, #24]
 80069dc:	2a00      	cmp	r2, #0
 80069de:	bf14      	ite	ne
 80069e0:	f04f 32ff 	movne.w	r2, #4294967295
 80069e4:	2201      	moveq	r2, #1
 80069e6:	608a      	str	r2, [r1, #8]
 80069e8:	2600      	movs	r6, #0
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	06d1      	lsls	r1, r2, #27
 80069ee:	bf5f      	itttt	pl
 80069f0:	681a      	ldrpl	r2, [r3, #0]
 80069f2:	1d11      	addpl	r1, r2, #4
 80069f4:	6019      	strpl	r1, [r3, #0]
 80069f6:	6817      	ldrpl	r7, [r2, #0]
 80069f8:	69a3      	ldr	r3, [r4, #24]
 80069fa:	b1db      	cbz	r3, 8006a34 <_scanf_chars+0x68>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d107      	bne.n	8006a10 <_scanf_chars+0x44>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	6962      	ldr	r2, [r4, #20]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	5cd3      	ldrb	r3, [r2, r3]
 8006a08:	b9a3      	cbnz	r3, 8006a34 <_scanf_chars+0x68>
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d131      	bne.n	8006a72 <_scanf_chars+0xa6>
 8006a0e:	e006      	b.n	8006a1e <_scanf_chars+0x52>
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d007      	beq.n	8006a24 <_scanf_chars+0x58>
 8006a14:	2e00      	cmp	r6, #0
 8006a16:	d12c      	bne.n	8006a72 <_scanf_chars+0xa6>
 8006a18:	69a3      	ldr	r3, [r4, #24]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d129      	bne.n	8006a72 <_scanf_chars+0xa6>
 8006a1e:	2001      	movs	r0, #1
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	f7ff f9a2 	bl	8005d6c <__locale_ctype_ptr>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	4418      	add	r0, r3
 8006a2e:	7843      	ldrb	r3, [r0, #1]
 8006a30:	071b      	lsls	r3, r3, #28
 8006a32:	d4ef      	bmi.n	8006a14 <_scanf_chars+0x48>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	3601      	adds	r6, #1
 8006a38:	06da      	lsls	r2, r3, #27
 8006a3a:	bf5e      	ittt	pl
 8006a3c:	682b      	ldrpl	r3, [r5, #0]
 8006a3e:	781b      	ldrbpl	r3, [r3, #0]
 8006a40:	703b      	strbpl	r3, [r7, #0]
 8006a42:	682a      	ldr	r2, [r5, #0]
 8006a44:	686b      	ldr	r3, [r5, #4]
 8006a46:	f102 0201 	add.w	r2, r2, #1
 8006a4a:	602a      	str	r2, [r5, #0]
 8006a4c:	68a2      	ldr	r2, [r4, #8]
 8006a4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a52:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a56:	606b      	str	r3, [r5, #4]
 8006a58:	bf58      	it	pl
 8006a5a:	3701      	addpl	r7, #1
 8006a5c:	60a2      	str	r2, [r4, #8]
 8006a5e:	b142      	cbz	r2, 8006a72 <_scanf_chars+0xa6>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	dcc9      	bgt.n	80069f8 <_scanf_chars+0x2c>
 8006a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4798      	blx	r3
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d0c2      	beq.n	80069f8 <_scanf_chars+0x2c>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	f013 0310 	ands.w	r3, r3, #16
 8006a78:	d105      	bne.n	8006a86 <_scanf_chars+0xba>
 8006a7a:	68e2      	ldr	r2, [r4, #12]
 8006a7c:	3201      	adds	r2, #1
 8006a7e:	60e2      	str	r2, [r4, #12]
 8006a80:	69a2      	ldr	r2, [r4, #24]
 8006a82:	b102      	cbz	r2, 8006a86 <_scanf_chars+0xba>
 8006a84:	703b      	strb	r3, [r7, #0]
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	441e      	add	r6, r3
 8006a8c:	6126      	str	r6, [r4, #16]
 8006a8e:	e7c7      	b.n	8006a20 <_scanf_chars+0x54>

08006a90 <_scanf_i>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	460c      	mov	r4, r1
 8006a96:	469a      	mov	sl, r3
 8006a98:	4b74      	ldr	r3, [pc, #464]	; (8006c6c <_scanf_i+0x1dc>)
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	4683      	mov	fp, r0
 8006a9e:	4616      	mov	r6, r2
 8006aa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006aa4:	ab03      	add	r3, sp, #12
 8006aa6:	68a7      	ldr	r7, [r4, #8]
 8006aa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006aac:	4b70      	ldr	r3, [pc, #448]	; (8006c70 <_scanf_i+0x1e0>)
 8006aae:	69a1      	ldr	r1, [r4, #24]
 8006ab0:	4a70      	ldr	r2, [pc, #448]	; (8006c74 <_scanf_i+0x1e4>)
 8006ab2:	f104 091c 	add.w	r9, r4, #28
 8006ab6:	2903      	cmp	r1, #3
 8006ab8:	bf08      	it	eq
 8006aba:	461a      	moveq	r2, r3
 8006abc:	1e7b      	subs	r3, r7, #1
 8006abe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006ac2:	bf84      	itt	hi
 8006ac4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ac8:	60a3      	strhi	r3, [r4, #8]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	bf88      	it	hi
 8006ace:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ad2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	bf98      	it	ls
 8006ada:	2700      	movls	r7, #0
 8006adc:	464b      	mov	r3, r9
 8006ade:	f04f 0800 	mov.w	r8, #0
 8006ae2:	9200      	str	r2, [sp, #0]
 8006ae4:	bf88      	it	hi
 8006ae6:	197f      	addhi	r7, r7, r5
 8006ae8:	6831      	ldr	r1, [r6, #0]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	ab03      	add	r3, sp, #12
 8006aee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006af2:	2202      	movs	r2, #2
 8006af4:	7809      	ldrb	r1, [r1, #0]
 8006af6:	f7ff fd66 	bl	80065c6 <memchr>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	b330      	cbz	r0, 8006b4c <_scanf_i+0xbc>
 8006afe:	f1b8 0f01 	cmp.w	r8, #1
 8006b02:	d15a      	bne.n	8006bba <_scanf_i+0x12a>
 8006b04:	6862      	ldr	r2, [r4, #4]
 8006b06:	b92a      	cbnz	r2, 8006b14 <_scanf_i+0x84>
 8006b08:	2108      	movs	r1, #8
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	6061      	str	r1, [r4, #4]
 8006b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b12:	6022      	str	r2, [r4, #0]
 8006b14:	6822      	ldr	r2, [r4, #0]
 8006b16:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006b1a:	6022      	str	r2, [r4, #0]
 8006b1c:	68a2      	ldr	r2, [r4, #8]
 8006b1e:	1e51      	subs	r1, r2, #1
 8006b20:	60a1      	str	r1, [r4, #8]
 8006b22:	b19a      	cbz	r2, 8006b4c <_scanf_i+0xbc>
 8006b24:	6832      	ldr	r2, [r6, #0]
 8006b26:	1c5d      	adds	r5, r3, #1
 8006b28:	1c51      	adds	r1, r2, #1
 8006b2a:	6031      	str	r1, [r6, #0]
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	6873      	ldr	r3, [r6, #4]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	6073      	str	r3, [r6, #4]
 8006b38:	dc07      	bgt.n	8006b4a <_scanf_i+0xba>
 8006b3a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4658      	mov	r0, fp
 8006b42:	4798      	blx	r3
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f040 8087 	bne.w	8006c58 <_scanf_i+0x1c8>
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	f108 0801 	add.w	r8, r8, #1
 8006b50:	f1b8 0f03 	cmp.w	r8, #3
 8006b54:	d1c8      	bne.n	8006ae8 <_scanf_i+0x58>
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	b90a      	cbnz	r2, 8006b5e <_scanf_i+0xce>
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	6062      	str	r2, [r4, #4]
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	4945      	ldr	r1, [pc, #276]	; (8006c78 <_scanf_i+0x1e8>)
 8006b62:	6960      	ldr	r0, [r4, #20]
 8006b64:	1a89      	subs	r1, r1, r2
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	f000 f888 	bl	8006c7c <__sccl>
 8006b6c:	9b01      	ldr	r3, [sp, #4]
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	461d      	mov	r5, r3
 8006b74:	68a3      	ldr	r3, [r4, #8]
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d03b      	beq.n	8006bf4 <_scanf_i+0x164>
 8006b7c:	6831      	ldr	r1, [r6, #0]
 8006b7e:	6960      	ldr	r0, [r4, #20]
 8006b80:	f891 c000 	ldrb.w	ip, [r1]
 8006b84:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d033      	beq.n	8006bf4 <_scanf_i+0x164>
 8006b8c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006b90:	d121      	bne.n	8006bd6 <_scanf_i+0x146>
 8006b92:	0510      	lsls	r0, r2, #20
 8006b94:	d51f      	bpl.n	8006bd6 <_scanf_i+0x146>
 8006b96:	f108 0801 	add.w	r8, r8, #1
 8006b9a:	b117      	cbz	r7, 8006ba2 <_scanf_i+0x112>
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	3f01      	subs	r7, #1
 8006ba0:	60a3      	str	r3, [r4, #8]
 8006ba2:	6873      	ldr	r3, [r6, #4]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	6073      	str	r3, [r6, #4]
 8006baa:	dd1c      	ble.n	8006be6 <_scanf_i+0x156>
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	6033      	str	r3, [r6, #0]
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	60a3      	str	r3, [r4, #8]
 8006bb8:	e7dc      	b.n	8006b74 <_scanf_i+0xe4>
 8006bba:	f1b8 0f02 	cmp.w	r8, #2
 8006bbe:	d1ad      	bne.n	8006b1c <_scanf_i+0x8c>
 8006bc0:	6822      	ldr	r2, [r4, #0]
 8006bc2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006bc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006bca:	d1bf      	bne.n	8006b4c <_scanf_i+0xbc>
 8006bcc:	2110      	movs	r1, #16
 8006bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd2:	6061      	str	r1, [r4, #4]
 8006bd4:	e7a1      	b.n	8006b1a <_scanf_i+0x8a>
 8006bd6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	780b      	ldrb	r3, [r1, #0]
 8006bde:	3501      	adds	r5, #1
 8006be0:	f805 3c01 	strb.w	r3, [r5, #-1]
 8006be4:	e7dd      	b.n	8006ba2 <_scanf_i+0x112>
 8006be6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bea:	4631      	mov	r1, r6
 8006bec:	4658      	mov	r0, fp
 8006bee:	4798      	blx	r3
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0de      	beq.n	8006bb2 <_scanf_i+0x122>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	05d9      	lsls	r1, r3, #23
 8006bf8:	d50c      	bpl.n	8006c14 <_scanf_i+0x184>
 8006bfa:	454d      	cmp	r5, r9
 8006bfc:	d908      	bls.n	8006c10 <_scanf_i+0x180>
 8006bfe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c02:	1e6f      	subs	r7, r5, #1
 8006c04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	4798      	blx	r3
 8006c0e:	463d      	mov	r5, r7
 8006c10:	454d      	cmp	r5, r9
 8006c12:	d029      	beq.n	8006c68 <_scanf_i+0x1d8>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	f012 0210 	ands.w	r2, r2, #16
 8006c1a:	d113      	bne.n	8006c44 <_scanf_i+0x1b4>
 8006c1c:	702a      	strb	r2, [r5, #0]
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	4649      	mov	r1, r9
 8006c22:	4658      	mov	r0, fp
 8006c24:	9e00      	ldr	r6, [sp, #0]
 8006c26:	47b0      	blx	r6
 8006c28:	f8da 3000 	ldr.w	r3, [sl]
 8006c2c:	6821      	ldr	r1, [r4, #0]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	f8ca 2000 	str.w	r2, [sl]
 8006c34:	f011 0f20 	tst.w	r1, #32
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	d010      	beq.n	8006c5e <_scanf_i+0x1ce>
 8006c3c:	6018      	str	r0, [r3, #0]
 8006c3e:	68e3      	ldr	r3, [r4, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60e3      	str	r3, [r4, #12]
 8006c44:	2000      	movs	r0, #0
 8006c46:	eba5 0509 	sub.w	r5, r5, r9
 8006c4a:	44a8      	add	r8, r5
 8006c4c:	6925      	ldr	r5, [r4, #16]
 8006c4e:	4445      	add	r5, r8
 8006c50:	6125      	str	r5, [r4, #16]
 8006c52:	b007      	add	sp, #28
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	f04f 0800 	mov.w	r8, #0
 8006c5c:	e7ca      	b.n	8006bf4 <_scanf_i+0x164>
 8006c5e:	07ca      	lsls	r2, r1, #31
 8006c60:	bf4c      	ite	mi
 8006c62:	8018      	strhmi	r0, [r3, #0]
 8006c64:	6018      	strpl	r0, [r3, #0]
 8006c66:	e7ea      	b.n	8006c3e <_scanf_i+0x1ae>
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e7f2      	b.n	8006c52 <_scanf_i+0x1c2>
 8006c6c:	08007018 	.word	0x08007018
 8006c70:	08006dd5 	.word	0x08006dd5
 8006c74:	08005911 	.word	0x08005911
 8006c78:	080074ac 	.word	0x080074ac

08006c7c <__sccl>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	780b      	ldrb	r3, [r1, #0]
 8006c80:	1e44      	subs	r4, r0, #1
 8006c82:	2b5e      	cmp	r3, #94	; 0x5e
 8006c84:	bf13      	iteet	ne
 8006c86:	1c4a      	addne	r2, r1, #1
 8006c88:	1c8a      	addeq	r2, r1, #2
 8006c8a:	784b      	ldrbeq	r3, [r1, #1]
 8006c8c:	2100      	movne	r1, #0
 8006c8e:	bf08      	it	eq
 8006c90:	2101      	moveq	r1, #1
 8006c92:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006c96:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006c9a:	42ac      	cmp	r4, r5
 8006c9c:	d1fb      	bne.n	8006c96 <__sccl+0x1a>
 8006c9e:	b913      	cbnz	r3, 8006ca6 <__sccl+0x2a>
 8006ca0:	3a01      	subs	r2, #1
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
 8006ca6:	f081 0401 	eor.w	r4, r1, #1
 8006caa:	54c4      	strb	r4, [r0, r3]
 8006cac:	1c51      	adds	r1, r2, #1
 8006cae:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006cb2:	1e4e      	subs	r6, r1, #1
 8006cb4:	2d2d      	cmp	r5, #45	; 0x2d
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	d006      	beq.n	8006cc8 <__sccl+0x4c>
 8006cba:	2d5d      	cmp	r5, #93	; 0x5d
 8006cbc:	d0f1      	beq.n	8006ca2 <__sccl+0x26>
 8006cbe:	b90d      	cbnz	r5, 8006cc4 <__sccl+0x48>
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	e7ee      	b.n	8006ca2 <__sccl+0x26>
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	e7f0      	b.n	8006caa <__sccl+0x2e>
 8006cc8:	780e      	ldrb	r6, [r1, #0]
 8006cca:	2e5d      	cmp	r6, #93	; 0x5d
 8006ccc:	d0fa      	beq.n	8006cc4 <__sccl+0x48>
 8006cce:	42b3      	cmp	r3, r6
 8006cd0:	dcf8      	bgt.n	8006cc4 <__sccl+0x48>
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	429e      	cmp	r6, r3
 8006cd6:	54c4      	strb	r4, [r0, r3]
 8006cd8:	dcfb      	bgt.n	8006cd2 <__sccl+0x56>
 8006cda:	3102      	adds	r1, #2
 8006cdc:	e7e7      	b.n	8006cae <__sccl+0x32>

08006cde <_strtol_l.isra.0>:
 8006cde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4689      	mov	r9, r1
 8006ce6:	4692      	mov	sl, r2
 8006ce8:	461e      	mov	r6, r3
 8006cea:	460f      	mov	r7, r1
 8006cec:	463d      	mov	r5, r7
 8006cee:	9808      	ldr	r0, [sp, #32]
 8006cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cf4:	f7ff f836 	bl	8005d64 <__locale_ctype_ptr_l>
 8006cf8:	4420      	add	r0, r4
 8006cfa:	7843      	ldrb	r3, [r0, #1]
 8006cfc:	f013 0308 	ands.w	r3, r3, #8
 8006d00:	d132      	bne.n	8006d68 <_strtol_l.isra.0+0x8a>
 8006d02:	2c2d      	cmp	r4, #45	; 0x2d
 8006d04:	d132      	bne.n	8006d6c <_strtol_l.isra.0+0x8e>
 8006d06:	2201      	movs	r2, #1
 8006d08:	787c      	ldrb	r4, [r7, #1]
 8006d0a:	1cbd      	adds	r5, r7, #2
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	d05d      	beq.n	8006dcc <_strtol_l.isra.0+0xee>
 8006d10:	2e10      	cmp	r6, #16
 8006d12:	d109      	bne.n	8006d28 <_strtol_l.isra.0+0x4a>
 8006d14:	2c30      	cmp	r4, #48	; 0x30
 8006d16:	d107      	bne.n	8006d28 <_strtol_l.isra.0+0x4a>
 8006d18:	782b      	ldrb	r3, [r5, #0]
 8006d1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d1e:	2b58      	cmp	r3, #88	; 0x58
 8006d20:	d14f      	bne.n	8006dc2 <_strtol_l.isra.0+0xe4>
 8006d22:	2610      	movs	r6, #16
 8006d24:	786c      	ldrb	r4, [r5, #1]
 8006d26:	3502      	adds	r5, #2
 8006d28:	2a00      	cmp	r2, #0
 8006d2a:	bf14      	ite	ne
 8006d2c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006d30:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006d34:	2700      	movs	r7, #0
 8006d36:	fbb1 fcf6 	udiv	ip, r1, r6
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006d40:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d817      	bhi.n	8006d78 <_strtol_l.isra.0+0x9a>
 8006d48:	461c      	mov	r4, r3
 8006d4a:	42a6      	cmp	r6, r4
 8006d4c:	dd23      	ble.n	8006d96 <_strtol_l.isra.0+0xb8>
 8006d4e:	1c7b      	adds	r3, r7, #1
 8006d50:	d007      	beq.n	8006d62 <_strtol_l.isra.0+0x84>
 8006d52:	4584      	cmp	ip, r0
 8006d54:	d31c      	bcc.n	8006d90 <_strtol_l.isra.0+0xb2>
 8006d56:	d101      	bne.n	8006d5c <_strtol_l.isra.0+0x7e>
 8006d58:	45a6      	cmp	lr, r4
 8006d5a:	db19      	blt.n	8006d90 <_strtol_l.isra.0+0xb2>
 8006d5c:	2701      	movs	r7, #1
 8006d5e:	fb00 4006 	mla	r0, r0, r6, r4
 8006d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d66:	e7eb      	b.n	8006d40 <_strtol_l.isra.0+0x62>
 8006d68:	462f      	mov	r7, r5
 8006d6a:	e7bf      	b.n	8006cec <_strtol_l.isra.0+0xe>
 8006d6c:	2c2b      	cmp	r4, #43	; 0x2b
 8006d6e:	bf04      	itt	eq
 8006d70:	1cbd      	addeq	r5, r7, #2
 8006d72:	787c      	ldrbeq	r4, [r7, #1]
 8006d74:	461a      	mov	r2, r3
 8006d76:	e7c9      	b.n	8006d0c <_strtol_l.isra.0+0x2e>
 8006d78:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006d7c:	2b19      	cmp	r3, #25
 8006d7e:	d801      	bhi.n	8006d84 <_strtol_l.isra.0+0xa6>
 8006d80:	3c37      	subs	r4, #55	; 0x37
 8006d82:	e7e2      	b.n	8006d4a <_strtol_l.isra.0+0x6c>
 8006d84:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006d88:	2b19      	cmp	r3, #25
 8006d8a:	d804      	bhi.n	8006d96 <_strtol_l.isra.0+0xb8>
 8006d8c:	3c57      	subs	r4, #87	; 0x57
 8006d8e:	e7dc      	b.n	8006d4a <_strtol_l.isra.0+0x6c>
 8006d90:	f04f 37ff 	mov.w	r7, #4294967295
 8006d94:	e7e5      	b.n	8006d62 <_strtol_l.isra.0+0x84>
 8006d96:	1c7b      	adds	r3, r7, #1
 8006d98:	d108      	bne.n	8006dac <_strtol_l.isra.0+0xce>
 8006d9a:	2322      	movs	r3, #34	; 0x22
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	f8c8 3000 	str.w	r3, [r8]
 8006da2:	f1ba 0f00 	cmp.w	sl, #0
 8006da6:	d107      	bne.n	8006db8 <_strtol_l.isra.0+0xda>
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dac:	b102      	cbz	r2, 8006db0 <_strtol_l.isra.0+0xd2>
 8006dae:	4240      	negs	r0, r0
 8006db0:	f1ba 0f00 	cmp.w	sl, #0
 8006db4:	d0f8      	beq.n	8006da8 <_strtol_l.isra.0+0xca>
 8006db6:	b10f      	cbz	r7, 8006dbc <_strtol_l.isra.0+0xde>
 8006db8:	f105 39ff 	add.w	r9, r5, #4294967295
 8006dbc:	f8ca 9000 	str.w	r9, [sl]
 8006dc0:	e7f2      	b.n	8006da8 <_strtol_l.isra.0+0xca>
 8006dc2:	2430      	movs	r4, #48	; 0x30
 8006dc4:	2e00      	cmp	r6, #0
 8006dc6:	d1af      	bne.n	8006d28 <_strtol_l.isra.0+0x4a>
 8006dc8:	2608      	movs	r6, #8
 8006dca:	e7ad      	b.n	8006d28 <_strtol_l.isra.0+0x4a>
 8006dcc:	2c30      	cmp	r4, #48	; 0x30
 8006dce:	d0a3      	beq.n	8006d18 <_strtol_l.isra.0+0x3a>
 8006dd0:	260a      	movs	r6, #10
 8006dd2:	e7a9      	b.n	8006d28 <_strtol_l.isra.0+0x4a>

08006dd4 <_strtol_r>:
 8006dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd6:	4c06      	ldr	r4, [pc, #24]	; (8006df0 <_strtol_r+0x1c>)
 8006dd8:	4d06      	ldr	r5, [pc, #24]	; (8006df4 <_strtol_r+0x20>)
 8006dda:	6824      	ldr	r4, [r4, #0]
 8006ddc:	6a24      	ldr	r4, [r4, #32]
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	bf08      	it	eq
 8006de2:	462c      	moveq	r4, r5
 8006de4:	9400      	str	r4, [sp, #0]
 8006de6:	f7ff ff7a 	bl	8006cde <_strtol_l.isra.0>
 8006dea:	b003      	add	sp, #12
 8006dec:	bd30      	pop	{r4, r5, pc}
 8006dee:	bf00      	nop
 8006df0:	20000010 	.word	0x20000010
 8006df4:	200000d8 	.word	0x200000d8

08006df8 <__submore>:
 8006df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d11b      	bne.n	8006e40 <__submore+0x48>
 8006e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e0c:	f7fd ff24 	bl	8004c58 <_malloc_r>
 8006e10:	b918      	cbnz	r0, 8006e1a <__submore+0x22>
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295
 8006e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006e24:	6360      	str	r0, [r4, #52]	; 0x34
 8006e26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006e2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006e2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006e32:	7043      	strb	r3, [r0, #1]
 8006e34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e38:	7003      	strb	r3, [r0, #0]
 8006e3a:	6020      	str	r0, [r4, #0]
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	e7ea      	b.n	8006e16 <__submore+0x1e>
 8006e40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006e42:	0077      	lsls	r7, r6, #1
 8006e44:	463a      	mov	r2, r7
 8006e46:	f7ff fbf0 	bl	800662a <_realloc_r>
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d0e0      	beq.n	8006e12 <__submore+0x1a>
 8006e50:	eb00 0806 	add.w	r8, r0, r6
 8006e54:	4601      	mov	r1, r0
 8006e56:	4632      	mov	r2, r6
 8006e58:	4640      	mov	r0, r8
 8006e5a:	f7ff fbc2 	bl	80065e2 <memcpy>
 8006e5e:	f8c4 8000 	str.w	r8, [r4]
 8006e62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006e66:	e7e9      	b.n	8006e3c <__submore+0x44>

08006e68 <_malloc_usable_size_r>:
 8006e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e6c:	1f18      	subs	r0, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfbc      	itt	lt
 8006e72:	580b      	ldrlt	r3, [r1, r0]
 8006e74:	18c0      	addlt	r0, r0, r3
 8006e76:	4770      	bx	lr

08006e78 <_gettimeofday>:
 8006e78:	2258      	movs	r2, #88	; 0x58
 8006e7a:	4b02      	ldr	r3, [pc, #8]	; (8006e84 <_gettimeofday+0xc>)
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	4770      	bx	lr
 8006e84:	20000360 	.word	0x20000360

08006e88 <_init>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr

08006e94 <_fini>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr
