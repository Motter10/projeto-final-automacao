
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007660  08007660  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007668  08007668  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08007670  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000244  080078b4  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080078b4  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d4c  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b00  00000000  00000000  00030fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  00033ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00034868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a4e0  00000000  00000000  00035498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e119  00000000  00000000  0004f978  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f426  00000000  00000000  0005da91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eceb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f0  00000000  00000000  000ecf34  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f1424  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f1448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fa0 	.word	0x08006fa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	08006fa0 	.word	0x08006fa0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <__aeabi_fmul>:
 8000950:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000954:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000958:	bf1e      	ittt	ne
 800095a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800095e:	ea92 0f0c 	teqne	r2, ip
 8000962:	ea93 0f0c 	teqne	r3, ip
 8000966:	d06f      	beq.n	8000a48 <__aeabi_fmul+0xf8>
 8000968:	441a      	add	r2, r3
 800096a:	ea80 0c01 	eor.w	ip, r0, r1
 800096e:	0240      	lsls	r0, r0, #9
 8000970:	bf18      	it	ne
 8000972:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000976:	d01e      	beq.n	80009b6 <__aeabi_fmul+0x66>
 8000978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800097c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000980:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000984:	fba0 3101 	umull	r3, r1, r0, r1
 8000988:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800098c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000990:	bf3e      	ittt	cc
 8000992:	0049      	lslcc	r1, r1, #1
 8000994:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	ea40 0001 	orr.w	r0, r0, r1
 800099e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009a2:	2afd      	cmp	r2, #253	; 0xfd
 80009a4:	d81d      	bhi.n	80009e2 <__aeabi_fmul+0x92>
 80009a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ae:	bf08      	it	eq
 80009b0:	f020 0001 	biceq.w	r0, r0, #1
 80009b4:	4770      	bx	lr
 80009b6:	f090 0f00 	teq	r0, #0
 80009ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009be:	bf08      	it	eq
 80009c0:	0249      	lsleq	r1, r1, #9
 80009c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009ca:	3a7f      	subs	r2, #127	; 0x7f
 80009cc:	bfc2      	ittt	gt
 80009ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009d6:	4770      	bxgt	lr
 80009d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	3a01      	subs	r2, #1
 80009e2:	dc5d      	bgt.n	8000aa0 <__aeabi_fmul+0x150>
 80009e4:	f112 0f19 	cmn.w	r2, #25
 80009e8:	bfdc      	itt	le
 80009ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009ee:	4770      	bxle	lr
 80009f0:	f1c2 0200 	rsb	r2, r2, #0
 80009f4:	0041      	lsls	r1, r0, #1
 80009f6:	fa21 f102 	lsr.w	r1, r1, r2
 80009fa:	f1c2 0220 	rsb	r2, r2, #32
 80009fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a06:	f140 0000 	adc.w	r0, r0, #0
 8000a0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a0e:	bf08      	it	eq
 8000a10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a14:	4770      	bx	lr
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fmul+0xce>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fmul+0xe6>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e78f      	b.n	8000968 <__aeabi_fmul+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	bf18      	it	ne
 8000a52:	ea93 0f0c 	teqne	r3, ip
 8000a56:	d00a      	beq.n	8000a6e <__aeabi_fmul+0x11e>
 8000a58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a5c:	bf18      	it	ne
 8000a5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a62:	d1d8      	bne.n	8000a16 <__aeabi_fmul+0xc6>
 8000a64:	ea80 0001 	eor.w	r0, r0, r1
 8000a68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f090 0f00 	teq	r0, #0
 8000a72:	bf17      	itett	ne
 8000a74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a78:	4608      	moveq	r0, r1
 8000a7a:	f091 0f00 	teqne	r1, #0
 8000a7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a82:	d014      	beq.n	8000aae <__aeabi_fmul+0x15e>
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	d101      	bne.n	8000a8e <__aeabi_fmul+0x13e>
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	d10f      	bne.n	8000aae <__aeabi_fmul+0x15e>
 8000a8e:	ea93 0f0c 	teq	r3, ip
 8000a92:	d103      	bne.n	8000a9c <__aeabi_fmul+0x14c>
 8000a94:	024b      	lsls	r3, r1, #9
 8000a96:	bf18      	it	ne
 8000a98:	4608      	movne	r0, r1
 8000a9a:	d108      	bne.n	8000aae <__aeabi_fmul+0x15e>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aac:	4770      	bx	lr
 8000aae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_fdiv>:
 8000ab8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000abc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ac6:	ea92 0f0c 	teqne	r2, ip
 8000aca:	ea93 0f0c 	teqne	r3, ip
 8000ace:	d069      	beq.n	8000ba4 <__aeabi_fdiv+0xec>
 8000ad0:	eba2 0203 	sub.w	r2, r2, r3
 8000ad4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ad8:	0249      	lsls	r1, r1, #9
 8000ada:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ade:	d037      	beq.n	8000b50 <__aeabi_fdiv+0x98>
 8000ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ae4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ae8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000aec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000af0:	428b      	cmp	r3, r1
 8000af2:	bf38      	it	cc
 8000af4:	005b      	lslcc	r3, r3, #1
 8000af6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000afa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000afe:	428b      	cmp	r3, r1
 8000b00:	bf24      	itt	cs
 8000b02:	1a5b      	subcs	r3, r3, r1
 8000b04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b0c:	bf24      	itt	cs
 8000b0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b1a:	bf24      	itt	cs
 8000b1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b28:	bf24      	itt	cs
 8000b2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	bf18      	it	ne
 8000b36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b3a:	d1e0      	bne.n	8000afe <__aeabi_fdiv+0x46>
 8000b3c:	2afd      	cmp	r2, #253	; 0xfd
 8000b3e:	f63f af50 	bhi.w	80009e2 <__aeabi_fmul+0x92>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b58:	327f      	adds	r2, #127	; 0x7f
 8000b5a:	bfc2      	ittt	gt
 8000b5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b64:	4770      	bxgt	lr
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	3a01      	subs	r2, #1
 8000b70:	e737      	b.n	80009e2 <__aeabi_fmul+0x92>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b7a:	bf02      	ittt	eq
 8000b7c:	0040      	lsleq	r0, r0, #1
 8000b7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b82:	3a01      	subeq	r2, #1
 8000b84:	d0f9      	beq.n	8000b7a <__aeabi_fdiv+0xc2>
 8000b86:	ea40 000c 	orr.w	r0, r0, ip
 8000b8a:	f093 0f00 	teq	r3, #0
 8000b8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b92:	bf02      	ittt	eq
 8000b94:	0049      	lsleq	r1, r1, #1
 8000b96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b9a:	3b01      	subeq	r3, #1
 8000b9c:	d0f9      	beq.n	8000b92 <__aeabi_fdiv+0xda>
 8000b9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ba2:	e795      	b.n	8000ad0 <__aeabi_fdiv+0x18>
 8000ba4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ba8:	ea92 0f0c 	teq	r2, ip
 8000bac:	d108      	bne.n	8000bc0 <__aeabi_fdiv+0x108>
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	f47f af7d 	bne.w	8000aae <__aeabi_fmul+0x15e>
 8000bb4:	ea93 0f0c 	teq	r3, ip
 8000bb8:	f47f af70 	bne.w	8000a9c <__aeabi_fmul+0x14c>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e776      	b.n	8000aae <__aeabi_fmul+0x15e>
 8000bc0:	ea93 0f0c 	teq	r3, ip
 8000bc4:	d104      	bne.n	8000bd0 <__aeabi_fdiv+0x118>
 8000bc6:	024b      	lsls	r3, r1, #9
 8000bc8:	f43f af4c 	beq.w	8000a64 <__aeabi_fmul+0x114>
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e76e      	b.n	8000aae <__aeabi_fmul+0x15e>
 8000bd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bd4:	bf18      	it	ne
 8000bd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bda:	d1ca      	bne.n	8000b72 <__aeabi_fdiv+0xba>
 8000bdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000be0:	f47f af5c 	bne.w	8000a9c <__aeabi_fmul+0x14c>
 8000be4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000be8:	f47f af3c 	bne.w	8000a64 <__aeabi_fmul+0x114>
 8000bec:	e75f      	b.n	8000aae <__aeabi_fmul+0x15e>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_f2uiz>:
 8000bf0:	0042      	lsls	r2, r0, #1
 8000bf2:	d20e      	bcs.n	8000c12 <__aeabi_f2uiz+0x22>
 8000bf4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf8:	d30b      	bcc.n	8000c12 <__aeabi_f2uiz+0x22>
 8000bfa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c02:	d409      	bmi.n	8000c18 <__aeabi_f2uiz+0x28>
 8000c04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr
 8000c18:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c1c:	d101      	bne.n	8000c22 <__aeabi_f2uiz+0x32>
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	d102      	bne.n	8000c28 <__aeabi_f2uiz+0x38>
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_ldivmod>:
 8000c30:	b97b      	cbnz	r3, 8000c52 <__aeabi_ldivmod+0x22>
 8000c32:	b972      	cbnz	r2, 8000c52 <__aeabi_ldivmod+0x22>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bfbe      	ittt	lt
 8000c38:	2000      	movlt	r0, #0
 8000c3a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c3e:	e006      	blt.n	8000c4e <__aeabi_ldivmod+0x1e>
 8000c40:	bf08      	it	eq
 8000c42:	2800      	cmpeq	r0, #0
 8000c44:	bf1c      	itt	ne
 8000c46:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c4a:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4e:	f000 b9a7 	b.w	8000fa0 <__aeabi_idiv0>
 8000c52:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c56:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	db09      	blt.n	8000c72 <__aeabi_ldivmod+0x42>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db1a      	blt.n	8000c98 <__aeabi_ldivmod+0x68>
 8000c62:	f000 f835 	bl	8000cd0 <__udivmoddi4>
 8000c66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6e:	b004      	add	sp, #16
 8000c70:	4770      	bx	lr
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db1b      	blt.n	8000cb4 <__aeabi_ldivmod+0x84>
 8000c7c:	f000 f828 	bl	8000cd0 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr
 8000c98:	4252      	negs	r2, r2
 8000c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9e:	f000 f817 	bl	8000cd0 <__udivmoddi4>
 8000ca2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000caa:	b004      	add	sp, #16
 8000cac:	4240      	negs	r0, r0
 8000cae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f809 	bl	8000cd0 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d14b      	bne.n	8000d76 <__udivmoddi4+0xa6>
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	4615      	mov	r5, r2
 8000ce2:	d967      	bls.n	8000db4 <__udivmoddi4+0xe4>
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	b14a      	cbz	r2, 8000cfe <__udivmoddi4+0x2e>
 8000cea:	f1c2 0720 	rsb	r7, r2, #32
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf6:	4095      	lsls	r5, r2
 8000cf8:	ea47 0c03 	orr.w	ip, r7, r3
 8000cfc:	4094      	lsls	r4, r2
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	fbbc f7fe 	udiv	r7, ip, lr
 8000d06:	fa1f f885 	uxth.w	r8, r5
 8000d0a:	fb0e c317 	mls	r3, lr, r7, ip
 8000d0e:	fb07 f908 	mul.w	r9, r7, r8
 8000d12:	0c21      	lsrs	r1, r4, #16
 8000d14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d18:	4599      	cmp	r9, r3
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x60>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000d22:	f080 811c 	bcs.w	8000f5e <__udivmoddi4+0x28e>
 8000d26:	4599      	cmp	r9, r3
 8000d28:	f240 8119 	bls.w	8000f5e <__udivmoddi4+0x28e>
 8000d2c:	3f02      	subs	r7, #2
 8000d2e:	442b      	add	r3, r5
 8000d30:	eba3 0309 	sub.w	r3, r3, r9
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	fb00 f108 	mul.w	r1, r0, r8
 8000d40:	b2a4      	uxth	r4, r4
 8000d42:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d46:	42a1      	cmp	r1, r4
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0x8e>
 8000d4a:	192c      	adds	r4, r5, r4
 8000d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d50:	f080 8107 	bcs.w	8000f62 <__udivmoddi4+0x292>
 8000d54:	42a1      	cmp	r1, r4
 8000d56:	f240 8104 	bls.w	8000f62 <__udivmoddi4+0x292>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	442c      	add	r4, r5
 8000d5e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d62:	2700      	movs	r7, #0
 8000d64:	1a64      	subs	r4, r4, r1
 8000d66:	b11e      	cbz	r6, 8000d70 <__udivmoddi4+0xa0>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	40d4      	lsrs	r4, r2
 8000d6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0xbe>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	f000 80ec 	beq.w	8000f58 <__udivmoddi4+0x288>
 8000d80:	2700      	movs	r7, #0
 8000d82:	e9c6 0100 	strd	r0, r1, [r6]
 8000d86:	4638      	mov	r0, r7
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f783 	clz	r7, r3
 8000d92:	2f00      	cmp	r7, #0
 8000d94:	d148      	bne.n	8000e28 <__udivmoddi4+0x158>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xd0>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80fb 	bhi.w	8000f96 <__udivmoddi4+0x2c6>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0303 	sbc.w	r3, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	469c      	mov	ip, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d0e0      	beq.n	8000d70 <__udivmoddi4+0xa0>
 8000dae:	e9c6 4c00 	strd	r4, ip, [r6]
 8000db2:	e7dd      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000db4:	b902      	cbnz	r2, 8000db8 <__udivmoddi4+0xe8>
 8000db6:	deff      	udf	#255	; 0xff
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	f040 808f 	bne.w	8000ee0 <__udivmoddi4+0x210>
 8000dc2:	2701      	movs	r7, #1
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000dca:	fa1f f985 	uxth.w	r9, r5
 8000dce:	fbb1 fef8 	udiv	lr, r1, r8
 8000dd2:	fb08 111e 	mls	r1, r8, lr, r1
 8000dd6:	fb09 f00e 	mul.w	r0, r9, lr
 8000dda:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000dde:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x126>
 8000de6:	18eb      	adds	r3, r5, r3
 8000de8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x124>
 8000dee:	4298      	cmp	r0, r3
 8000df0:	f200 80cd 	bhi.w	8000f8e <__udivmoddi4+0x2be>
 8000df4:	468e      	mov	lr, r1
 8000df6:	1a1b      	subs	r3, r3, r0
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000e00:	fb09 f900 	mul.w	r9, r9, r0
 8000e04:	b2a4      	uxth	r4, r4
 8000e06:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0a:	45a1      	cmp	r9, r4
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x14e>
 8000e0e:	192c      	adds	r4, r5, r4
 8000e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x14c>
 8000e16:	45a1      	cmp	r9, r4
 8000e18:	f200 80b6 	bhi.w	8000f88 <__udivmoddi4+0x2b8>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e26:	e79e      	b.n	8000d66 <__udivmoddi4+0x96>
 8000e28:	f1c7 0520 	rsb	r5, r7, #32
 8000e2c:	40bb      	lsls	r3, r7
 8000e2e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa21 f405 	lsr.w	r4, r1, r5
 8000e3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e42:	fa1f f88c 	uxth.w	r8, ip
 8000e46:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e4a:	fa20 f305 	lsr.w	r3, r0, r5
 8000e4e:	40b9      	lsls	r1, r7
 8000e50:	fb09 fa08 	mul.w	sl, r9, r8
 8000e54:	4319      	orrs	r1, r3
 8000e56:	0c0b      	lsrs	r3, r1, #16
 8000e58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000e62:	fa00 f307 	lsl.w	r3, r0, r7
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b0>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2b4>
 8000e74:	45a2      	cmp	sl, r4
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2b4>
 8000e7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7e:	4464      	add	r4, ip
 8000e80:	eba4 040a 	sub.w	r4, r4, sl
 8000e84:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e88:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e8c:	fb00 fa08 	mul.w	sl, r0, r8
 8000e90:	b289      	uxth	r1, r1
 8000e92:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e96:	45a2      	cmp	sl, r4
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x1dc>
 8000e9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	d26b      	bcs.n	8000f7c <__udivmoddi4+0x2ac>
 8000ea4:	45a2      	cmp	sl, r4
 8000ea6:	d969      	bls.n	8000f7c <__udivmoddi4+0x2ac>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4464      	add	r4, ip
 8000eac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb0:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb4:	eba4 040a 	sub.w	r4, r4, sl
 8000eb8:	454c      	cmp	r4, r9
 8000eba:	4641      	mov	r1, r8
 8000ebc:	46ce      	mov	lr, r9
 8000ebe:	d354      	bcc.n	8000f6a <__udivmoddi4+0x29a>
 8000ec0:	d051      	beq.n	8000f66 <__udivmoddi4+0x296>
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d069      	beq.n	8000f9a <__udivmoddi4+0x2ca>
 8000ec6:	1a5a      	subs	r2, r3, r1
 8000ec8:	eb64 040e 	sbc.w	r4, r4, lr
 8000ecc:	fa04 f505 	lsl.w	r5, r4, r5
 8000ed0:	fa22 f307 	lsr.w	r3, r2, r7
 8000ed4:	40fc      	lsrs	r4, r7
 8000ed6:	431d      	orrs	r5, r3
 8000ed8:	e9c6 5400 	strd	r5, r4, [r6]
 8000edc:	2700      	movs	r7, #0
 8000ede:	e747      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	fa21 f003 	lsr.w	r0, r1, r3
 8000eea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000eee:	fbb0 f7f8 	udiv	r7, r0, r8
 8000ef2:	fa1f f985 	uxth.w	r9, r5
 8000ef6:	fb08 0017 	mls	r0, r8, r7, r0
 8000efa:	fa24 f303 	lsr.w	r3, r4, r3
 8000efe:	4091      	lsls	r1, r2
 8000f00:	fb07 fc09 	mul.w	ip, r7, r9
 8000f04:	430b      	orrs	r3, r1
 8000f06:	0c19      	lsrs	r1, r3, #16
 8000f08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f0c:	458c      	cmp	ip, r1
 8000f0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f12:	d907      	bls.n	8000f24 <__udivmoddi4+0x254>
 8000f14:	1869      	adds	r1, r5, r1
 8000f16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f1a:	d231      	bcs.n	8000f80 <__udivmoddi4+0x2b0>
 8000f1c:	458c      	cmp	ip, r1
 8000f1e:	d92f      	bls.n	8000f80 <__udivmoddi4+0x2b0>
 8000f20:	3f02      	subs	r7, #2
 8000f22:	4429      	add	r1, r5
 8000f24:	eba1 010c 	sub.w	r1, r1, ip
 8000f28:	fbb1 f0f8 	udiv	r0, r1, r8
 8000f2c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000f30:	fb00 fe09 	mul.w	lr, r0, r9
 8000f34:	b299      	uxth	r1, r3
 8000f36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f3a:	458e      	cmp	lr, r1
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x27e>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f44:	d218      	bcs.n	8000f78 <__udivmoddi4+0x2a8>
 8000f46:	458e      	cmp	lr, r1
 8000f48:	d916      	bls.n	8000f78 <__udivmoddi4+0x2a8>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f56:	e73a      	b.n	8000dce <__udivmoddi4+0xfe>
 8000f58:	4637      	mov	r7, r6
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e708      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000f5e:	460f      	mov	r7, r1
 8000f60:	e6e6      	b.n	8000d30 <__udivmoddi4+0x60>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6fb      	b.n	8000d5e <__udivmoddi4+0x8e>
 8000f66:	4543      	cmp	r3, r8
 8000f68:	d2ab      	bcs.n	8000ec2 <__udivmoddi4+0x1f2>
 8000f6a:	ebb8 0102 	subs.w	r1, r8, r2
 8000f6e:	eb69 020c 	sbc.w	r2, r9, ip
 8000f72:	3801      	subs	r0, #1
 8000f74:	4696      	mov	lr, r2
 8000f76:	e7a4      	b.n	8000ec2 <__udivmoddi4+0x1f2>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e7e8      	b.n	8000f4e <__udivmoddi4+0x27e>
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	e795      	b.n	8000eac <__udivmoddi4+0x1dc>
 8000f80:	4607      	mov	r7, r0
 8000f82:	e7cf      	b.n	8000f24 <__udivmoddi4+0x254>
 8000f84:	4681      	mov	r9, r0
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	442c      	add	r4, r5
 8000f8c:	e747      	b.n	8000e1e <__udivmoddi4+0x14e>
 8000f8e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f92:	442b      	add	r3, r5
 8000f94:	e72f      	b.n	8000df6 <__udivmoddi4+0x126>
 8000f96:	4638      	mov	r0, r7
 8000f98:	e707      	b.n	8000daa <__udivmoddi4+0xda>
 8000f9a:	4637      	mov	r7, r6
 8000f9c:	e6e8      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <ADC_Init>:

uint32_t adc_data[NUMBER_OF_CONVERSTION];
uint8_t  adc_data_ready = 0;

void ADC_Init(ADC_HandleTypeDef hadc1)
{
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	f107 0c08 	add.w	ip, r7, #8
 8000fae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//calibração do ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000fb2:	f107 0008 	add.w	r0, r7, #8
 8000fb6:	f001 fd19 	bl	80029ec <HAL_ADCEx_Calibration_Start>
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc2:	b004      	add	sp, #16
 8000fc4:	4770      	bx	lr
	...

08000fc8 <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef hadc1, ADC_CHANNEL_Id channel_id)
{
 8000fc8:	b084      	sub	sp, #16
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	f107 0c08 	add.w	ip, r7, #8
 8000fd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	adc_data_ready = 0;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <ADC_GetValue+0x40>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc_data, NUMBER_OF_CONVERSTION);
 8000fdc:	2202      	movs	r2, #2
 8000fde:	490b      	ldr	r1, [pc, #44]	; (800100c <ADC_GetValue+0x44>)
 8000fe0:	f107 0008 	add.w	r0, r7, #8
 8000fe4:	f001 fa28 	bl	8002438 <HAL_ADC_Start_DMA>

	HAL_ADC_Stop(&hadc1);
 8000fe8:	f107 0008 	add.w	r0, r7, #8
 8000fec:	f001 f9f8 	bl	80023e0 <HAL_ADC_Stop>

//	while(!adc_data_ready);

	return adc_data[channel_id];
 8000ff0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <ADC_GetValue+0x44>)
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001002:	b004      	add	sp, #16
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000260 	.word	0x20000260
 800100c:	20000298 	.word	0x20000298

08001010 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	adc_data_ready = 1;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_ADC_ConvCpltCallback+0x18>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	20000260 	.word	0x20000260

0800102c <LCD_Send>:
 *
 * Aciona pino enable, espera 15ms, desaciona pino enable
 *
 * @retval Nenhum
 */
void LCD_Send() {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_PINS, EN, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <LCD_Send+0x28>)
 8001038:	f002 f9e1 	bl	80033fe <HAL_GPIO_WritePin>
	HAL_Delay(15);
 800103c:	200f      	movs	r0, #15
 800103e:	f001 f8d5 	bl	80021ec <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_PINS, EN, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <LCD_Send+0x28>)
 800104a:	f002 f9d8 	bl	80033fe <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010c00 	.word	0x40010c00

08001058 <LCD_Write>:
 *
 * @retval Nenhum
 * @param[in] data byte a ser enviado
 * @param[in] is_data 1 se for dado, 0 se for instrução
 */
void LCD_Write(uint8_t data, bool is_data) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CTRL_PINS, RS, is_data);  //instrução / data
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	461a      	mov	r2, r3
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	4825      	ldr	r0, [pc, #148]	; (8001108 <LCD_Write+0xb0>)
 8001072:	f002 f9c4 	bl	80033fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_PINS, RW, 0);		//escrita
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <LCD_Write+0xb0>)
 800107e:	f002 f9be 	bl	80033fe <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e017      	b.n	80010b8 <LCD_Write+0x60>
			{
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	b299      	uxth	r1, r3
				data & (1 << (i + 4)));
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	3304      	adds	r3, #4
 8001098:	2201      	movs	r2, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <LCD_Write+0xb0>)
 80010ae:	f002 f9a6 	bl	80033fe <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d9e4      	bls.n	8001088 <LCD_Write+0x30>
		//00100111
	}

	LCD_Send();
 80010be:	f7ff ffb5 	bl	800102c <LCD_Send>

	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80010c2:	2300      	movs	r3, #0
 80010c4:	73bb      	strb	r3, [r7, #14]
 80010c6:	e016      	b.n	80010f6 <LCD_Write+0x9e>
			{
		HAL_GPIO_WritePin(DATA_PINS, (uint16_t) FRST_PIN << i, data & (1 << i));
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	b299      	uxth	r1, r3
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	4013      	ands	r3, r2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <LCD_Write+0xb0>)
 80010ec:	f002 f987 	bl	80033fe <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	3301      	adds	r3, #1
 80010f4:	73bb      	strb	r3, [r7, #14]
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d9e5      	bls.n	80010c8 <LCD_Write+0x70>
	}

	LCD_Send();
 80010fc:	f7ff ff96 	bl	800102c <LCD_Send>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010c00 	.word	0x40010c00

0800110c <LCD_Write_Buffer>:
 *
 *
 * @retval Nenhum
 * @param[in] *data string a ser enviado
 */
void LCD_Write_Buffer(uint8_t *data) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e069      	b.n	80011ee <LCD_Write_Buffer+0xe2>
		if(i == 17)
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	2b11      	cmp	r3, #17
 800111e:	d103      	bne.n	8001128 <LCD_Write_Buffer+0x1c>
		{
			LCD_Write(0xC0, 0);
 8001120:	2100      	movs	r1, #0
 8001122:	20c0      	movs	r0, #192	; 0xc0
 8001124:	f7ff ff98 	bl	8001058 <LCD_Write>
		}
		//caracter espciais
		switch (*data) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2bc3      	cmp	r3, #195	; 0xc3
 800112e:	d152      	bne.n	80011d6 <LCD_Write_Buffer+0xca>
			case 195:
				data++;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
				switch (*data) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3ba1      	subs	r3, #161	; 0xa1
 800113c:	2b14      	cmp	r3, #20
 800113e:	d846      	bhi.n	80011ce <LCD_Write_Buffer+0xc2>
 8001140:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <LCD_Write_Buffer+0x3c>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	0800119d 	.word	0x0800119d
 800114c:	080011cf 	.word	0x080011cf
 8001150:	080011bb 	.word	0x080011bb
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011cf 	.word	0x080011cf
 800115c:	080011cf 	.word	0x080011cf
 8001160:	080011b1 	.word	0x080011b1
 8001164:	080011cf 	.word	0x080011cf
 8001168:	080011a7 	.word	0x080011a7
 800116c:	080011cf 	.word	0x080011cf
 8001170:	080011cf 	.word	0x080011cf
 8001174:	080011cf 	.word	0x080011cf
 8001178:	080011cf 	.word	0x080011cf
 800117c:	080011cf 	.word	0x080011cf
 8001180:	080011cf 	.word	0x080011cf
 8001184:	080011cf 	.word	0x080011cf
 8001188:	080011cf 	.word	0x080011cf
 800118c:	080011cf 	.word	0x080011cf
 8001190:	080011cf 	.word	0x080011cf
 8001194:	080011cf 	.word	0x080011cf
 8001198:	080011c5 	.word	0x080011c5
					case 161:
						LCD_Write(0, 1);
 800119c:	2101      	movs	r1, #1
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff ff5a 	bl	8001058 <LCD_Write>
						break;
 80011a4:	e013      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 169:
						LCD_Write(1, 1);
 80011a6:	2101      	movs	r1, #1
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ff55 	bl	8001058 <LCD_Write>
						break;
 80011ae:	e00e      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 167:
						LCD_Write(2, 1);
 80011b0:	2101      	movs	r1, #1
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff ff50 	bl	8001058 <LCD_Write>
						break;
 80011b8:	e009      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 163:
						LCD_Write(3, 1);
 80011ba:	2101      	movs	r1, #1
 80011bc:	2003      	movs	r0, #3
 80011be:	f7ff ff4b 	bl	8001058 <LCD_Write>
						break;
 80011c2:	e004      	b.n	80011ce <LCD_Write_Buffer+0xc2>
					case 181:
						LCD_Write(4, 1);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2004      	movs	r0, #4
 80011c8:	f7ff ff46 	bl	8001058 <LCD_Write>
						break;
 80011cc:	bf00      	nop
				}
				data++;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
				break;
 80011d4:	e008      	b.n	80011e8 <LCD_Write_Buffer+0xdc>
			default:
				LCD_Write(*data++, 1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2101      	movs	r1, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff39 	bl	8001058 <LCD_Write>
				break;
 80011e6:	bf00      	nop
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3301      	adds	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d390      	bcc.n	800111a <LCD_Write_Buffer+0xe>
		}
	}
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LCD_Clear>:
/**
 * @brief limpa display e retorna cursor para primeira linha
 *
 * @retval Nenhum
 */
void LCD_Clear(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	LCD_Write(0x01, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff ff26 	bl	8001058 <LCD_Write>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <LCD_Seccond_Line>:
 * @brief Desloca o cursor para a posição inicial da segunda linha
 *
 * @retval Nenhum
 */
void LCD_Seccond_Line()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	LCD_Write(0xC0, 0);
 8001214:	2100      	movs	r1, #0
 8001216:	20c0      	movs	r0, #192	; 0xc0
 8001218:	f7ff ff1e 	bl	8001058 <LCD_Write>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <LCD_Create_Custom_Char>:
 *
 * @retval Nenhum
 * @param[in] loc localização para escrever o caracter
 * @param[in] *c ponteiro para o vetor de 8 bytes do caracter
 */
void LCD_Create_Custom_Char(uint8_t loc, uint8_t *c) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	if (loc < 8) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d819      	bhi.n	8001266 <LCD_Create_Custom_Char+0x46>
		LCD_Write(0x40 + (loc * 8), 0); /* aponta para 0x40 + loc * 8 */
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3308      	adds	r3, #8
 8001236:	b2db      	uxtb	r3, r3
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff0a 	bl	8001058 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e00a      	b.n	8001260 <LCD_Create_Custom_Char+0x40>
			LCD_Write(c[i], 1);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff feff 	bl	8001058 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b07      	cmp	r3, #7
 8001264:	d9f1      	bls.n	800124a <LCD_Create_Custom_Char+0x2a>
	}
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <LCD_Init_Custom_Characters>:
 *
 *	Define vetor de caracteres customizados e escreve na CGRAM
 *
 * @retval Nenhum
 */
void LCD_Init_Custom_Characters() {
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
	uint8_t character1[8] = { 0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 8001276:	4a21      	ldr	r2, [pc, #132]	; (80012fc <LCD_Init_Custom_Characters+0x8c>)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001280:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character2[8] = { 0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,
 8001284:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <LCD_Init_Custom_Characters+0x90>)
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128e:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character3[8] = { 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x04,
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <LCD_Init_Custom_Characters+0x94>)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character4[8] = { 0x1F, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <LCD_Init_Custom_Characters+0x98>)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012aa:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character5[8] = { 0x1F, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <LCD_Init_Custom_Characters+0x9c>)
 80012b0:	463b      	mov	r3, r7
 80012b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b6:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	LCD_Create_Custom_Char(0, character1);
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4619      	mov	r1, r3
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff ffad 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(1, character2);
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4619      	mov	r1, r3
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ffa7 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(2, character3);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff ffa1 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(3, character4);
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	2003      	movs	r0, #3
 80012e6:	f7ff ff9b 	bl	8001220 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(4, character5);
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	2004      	movs	r0, #4
 80012f0:	f7ff ff96 	bl	8001220 <LCD_Create_Custom_Char>
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08006fbc 	.word	0x08006fbc
 8001300:	08006fc4 	.word	0x08006fc4
 8001304:	08006fcc 	.word	0x08006fcc
 8001308:	08006fd4 	.word	0x08006fd4
 800130c:	08006fdc 	.word	0x08006fdc

08001310 <LCD_Init>:
 *	Escreve deslocando a mensagem para a esquerda
 *	Inicializa caracteres especiais
 *
 * @retval Nenhum
 */
void LCD_Init() {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8001314:	200f      	movs	r0, #15
 8001316:	f000 ff69 	bl	80021ec <HAL_Delay>
	LCD_Write(0x03, 0); // 1
 800131a:	2100      	movs	r1, #0
 800131c:	2003      	movs	r0, #3
 800131e:	f7ff fe9b 	bl	8001058 <LCD_Write>
	LCD_Write(0x03, 0); // 2
 8001322:	2100      	movs	r1, #0
 8001324:	2003      	movs	r0, #3
 8001326:	f7ff fe97 	bl	8001058 <LCD_Write>
	LCD_Write(0x03, 0); // 3
 800132a:	2100      	movs	r1, #0
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fe93 	bl	8001058 <LCD_Write>
	LCD_Write(0x02, 0); // 4
 8001332:	2100      	movs	r1, #0
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fe8f 	bl	8001058 <LCD_Write>
	LCD_Write(0x02, 0); // 5
 800133a:	2100      	movs	r1, #0
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fe8b 	bl	8001058 <LCD_Write>
	LCD_Write(0x08, 0); // 6
 8001342:	2100      	movs	r1, #0
 8001344:	2008      	movs	r0, #8
 8001346:	f7ff fe87 	bl	8001058 <LCD_Write>
	LCD_Write(0x00, 0); // 7
 800134a:	2100      	movs	r1, #0
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fe83 	bl	8001058 <LCD_Write>
	LCD_Write(0x08, 0); // 8
 8001352:	2100      	movs	r1, #0
 8001354:	2008      	movs	r0, #8
 8001356:	f7ff fe7f 	bl	8001058 <LCD_Write>
	LCD_Write(0x00, 0); // 9
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fe7b 	bl	8001058 <LCD_Write>
	LCD_Write(0x01, 0); // 10
 8001362:	2100      	movs	r1, #0
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fe77 	bl	8001058 <LCD_Write>
	LCD_Write(0x00, 0); // 11
 800136a:	2100      	movs	r1, #0
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fe73 	bl	8001058 <LCD_Write>
	LCD_Write(0x01, 0); // 12
 8001372:	2100      	movs	r1, #0
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fe6f 	bl	8001058 <LCD_Write>

	LCD_Write(0x28, 0); //2 linhas 5x7 (4 bits)
 800137a:	2100      	movs	r1, #0
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f7ff fe6b 	bl	8001058 <LCD_Write>
	LCD_Write(0x0E, 0); //Display aceso c/ cursor fixo
 8001382:	2100      	movs	r1, #0
 8001384:	200e      	movs	r0, #14
 8001386:	f7ff fe67 	bl	8001058 <LCD_Write>
	LCD_Write(0x06, 0); //Escreve deslocando a mensagem para a esquerda
 800138a:	2100      	movs	r1, #0
 800138c:	2006      	movs	r0, #6
 800138e:	f7ff fe63 	bl	8001058 <LCD_Write>

	LCD_Init_Custom_Characters();
 8001392:	f7ff ff6d 	bl	8001270 <LCD_Init_Custom_Characters>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}

0800139a <PWM_Init>:
 */

#include "PWM.h"

void PWM_Init(TIM_HandleTypeDef* htim2)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 80013a2:	2100      	movs	r1, #0
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f002 fe7d 	bl	80040a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 80013aa:	2104      	movs	r1, #4
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 fe79 	bl	80040a4 <HAL_TIM_PWM_Start>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <PWM_Increase>:

void PWM_Increase(PWM_TypeDef pwm_data)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	463b      	mov	r3, r7
 80013c4:	e883 0003 	stmia.w	r3, {r0, r1}
	//converte de porcentagem para valor
	uint32_t duty_value = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4914      	ldr	r1, [pc, #80]	; (800141c <PWM_Increase+0x60>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fabf 	bl	8000950 <__aeabi_fmul>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fc0b 	bl	8000bf0 <__aeabi_f2uiz>
 80013da:	4603      	mov	r3, r0
 80013dc:	60fb      	str	r3, [r7, #12]

	while(duty_value < MAX_DUTY_CYCLE_VALUE)
 80013de:	e014      	b.n	800140a <PWM_Increase+0x4e>
	{
		//Como identificar canal?
		if(pwm_data.pwm_channel == 1)
 80013e0:	783b      	ldrb	r3, [r7, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d104      	bne.n	80013f0 <PWM_Increase+0x34>
		{
			TIM2->CCR1 = duty_value;
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6353      	str	r3, [r2, #52]	; 0x34
 80013ee:	e006      	b.n	80013fe <PWM_Increase+0x42>
		}
		else if(pwm_data.pwm_channel == 2)
 80013f0:	783b      	ldrb	r3, [r7, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d103      	bne.n	80013fe <PWM_Increase+0x42>
		{
			TIM2->CCR2 = duty_value;
 80013f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6393      	str	r3, [r2, #56]	; 0x38
		}
		duty_value += 1;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3301      	adds	r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f000 fef1 	bl	80021ec <HAL_Delay>
	while(duty_value < MAX_DUTY_CYCLE_VALUE)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f640 2269 	movw	r2, #2665	; 0xa69
 8001410:	4293      	cmp	r3, r2
 8001412:	d9e5      	bls.n	80013e0 <PWM_Increase+0x24>
	}
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	4526a000 	.word	0x4526a000

08001420 <PWM_Decrease>:


void PWM_Decrease(PWM_TypeDef pwm_data)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	463b      	mov	r3, r7
 8001428:	e883 0003 	stmia.w	r3, {r0, r1}
	//converte de porcentagem para valor
	uint32_t duty_value = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4913      	ldr	r1, [pc, #76]	; (800147c <PWM_Decrease+0x5c>)
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fa8d 	bl	8000950 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fbd9 	bl	8000bf0 <__aeabi_f2uiz>
 800143e:	4603      	mov	r3, r0
 8001440:	60fb      	str	r3, [r7, #12]
	while(duty_value > 0)
 8001442:	e014      	b.n	800146e <PWM_Decrease+0x4e>
	{
		if(pwm_data.pwm_channel == 1)
 8001444:	783b      	ldrb	r3, [r7, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d104      	bne.n	8001454 <PWM_Decrease+0x34>
		{
			TIM2->CCR1 = duty_value;
 800144a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6353      	str	r3, [r2, #52]	; 0x34
 8001452:	e006      	b.n	8001462 <PWM_Decrease+0x42>
		}
		else if(pwm_data.pwm_channel == 2)
 8001454:	783b      	ldrb	r3, [r7, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d103      	bne.n	8001462 <PWM_Decrease+0x42>
		{
			TIM2->CCR2 = duty_value;
 800145a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6393      	str	r3, [r2, #56]	; 0x38
		}
		duty_value -= 1;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3b01      	subs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f000 febf 	bl	80021ec <HAL_Delay>
	while(duty_value > 0)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e7      	bne.n	8001444 <PWM_Decrease+0x24>
	}
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	4526a000 	.word	0x4526a000

08001480 <CAPSULE_Verify_Insertion>:
 */

#include "capsule.h"

CAPSULE_Recipe_TypeDef CAPSULE_Verify_Insertion()
{
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b0bc      	sub	sp, #240	; 0xf0
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	uint8_t bit_0 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_0);
 8001488:	2108      	movs	r1, #8
 800148a:	4861      	ldr	r0, [pc, #388]	; (8001610 <CAPSULE_Verify_Insertion+0x190>)
 800148c:	f001 ffa0 	bl	80033d0 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t bit_1 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_1);
 8001496:	2110      	movs	r1, #16
 8001498:	485d      	ldr	r0, [pc, #372]	; (8001610 <CAPSULE_Verify_Insertion+0x190>)
 800149a:	f001 ff99 	bl	80033d0 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	uint8_t bit_2 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_2);
 80014a4:	2120      	movs	r1, #32
 80014a6:	485a      	ldr	r0, [pc, #360]	; (8001610 <CAPSULE_Verify_Insertion+0x190>)
 80014a8:	f001 ff92 	bl	80033d0 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	//monta número que identifica capsula
	CAPSULE_Type capsule_type = bit_0 | (bit_1 << 1) | (bit_2 << 2);
 80014b2:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	b25a      	sxtb	r2, r3
 80014ba:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 80014be:	4313      	orrs	r3, r2
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

	CAPSULE_Recipe_TypeDef recipe;

	//inicializa receitas
	RECIPE_NONE_CAPSULE_TYPE_DATA(recipe_none);
 80014d2:	4b50      	ldr	r3, [pc, #320]	; (8001614 <CAPSULE_Verify_Insertion+0x194>)
 80014d4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80014d8:	461d      	mov	r5, r3
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_WATER_DATA(recipe_water);
 80014e6:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <CAPSULE_Verify_Insertion+0x198>)
 80014e8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80014ec:	461d      	mov	r5, r3
 80014ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SPARKLINK_WATER_DATA(recipe_sparklink_water);
 80014fa:	4b48      	ldr	r3, [pc, #288]	; (800161c <CAPSULE_Verify_Insertion+0x19c>)
 80014fc:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001500:	461d      	mov	r5, r3
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800150a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_ICE_TEA_DATA(recipe_ice_tea);
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <CAPSULE_Verify_Insertion+0x1a0>)
 8001510:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001514:	461d      	mov	r5, r3
 8001516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800151e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_HOT_TEA_DATA(recipe_hot_tea);
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <CAPSULE_Verify_Insertion+0x1a4>)
 8001524:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001528:	461d      	mov	r5, r3
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SODA_DATA(recipe_soda);
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <CAPSULE_Verify_Insertion+0x1a8>)
 8001538:	f107 040c 	add.w	r4, r7, #12
 800153c:	461d      	mov	r5, r3
 800153e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001542:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001546:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (capsule_type) {
 800154a:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800154e:	2b05      	cmp	r3, #5
 8001550:	d850      	bhi.n	80015f4 <CAPSULE_Verify_Insertion+0x174>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <CAPSULE_Verify_Insertion+0xd8>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	08001571 	.word	0x08001571
 800155c:	08001587 	.word	0x08001587
 8001560:	0800159d 	.word	0x0800159d
 8001564:	080015b3 	.word	0x080015b3
 8001568:	080015c9 	.word	0x080015c9
 800156c:	080015df 	.word	0x080015df
		case NONE_CAPSULE_TYPE:
			return recipe_none;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	461d      	mov	r5, r3
 8001574:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001580:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001584:	e040      	b.n	8001608 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_WATER:
				return recipe_water;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	461d      	mov	r5, r3
 800158a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001596:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800159a:	e035      	b.n	8001608 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SPARKLINK_WATER:
			return recipe_sparklink_water;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	461d      	mov	r5, r3
 80015a0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80015a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015b0:	e02a      	b.n	8001608 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_ICE_TEA:
				return recipe_ice_tea;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	461d      	mov	r5, r3
 80015b6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80015ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015c6:	e01f      	b.n	8001608 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_HOT_TEA:
				return recipe_hot_tea;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	461d      	mov	r5, r3
 80015cc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80015d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015dc:	e014      	b.n	8001608 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SODA:
				return recipe_soda;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	461d      	mov	r5, r3
 80015e2:	f107 040c 	add.w	r4, r7, #12
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015f2:	e009      	b.n	8001608 <CAPSULE_Verify_Insertion+0x188>
				break;
		default:
			return recipe_none;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	461d      	mov	r5, r3
 80015f8:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80015fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001600:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001604:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			break;
	}

}
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	37f0      	adds	r7, #240	; 0xf0
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	40010c00 	.word	0x40010c00
 8001614:	08006fe4 	.word	0x08006fe4
 8001618:	08007004 	.word	0x08007004
 800161c:	08007024 	.word	0x08007024
 8001620:	08007044 	.word	0x08007044
 8001624:	08007064 	.word	0x08007064
 8001628:	08007084 	.word	0x08007084

0800162c <CONTROLLER_Get_IsReady>:
 */

#include "controller.h"

void CONTROLLER_Get_IsReady(ADC_HandleTypeDef hadc, CAPSULE_Recipe_TypeDef capsule)
{
 800162c:	b084      	sub	sp, #16
 800162e:	b5b0      	push	{r4, r5, r7, lr}
 8001630:	b0a0      	sub	sp, #128	; 0x80
 8001632:	af0a      	add	r7, sp, #40	; 0x28
 8001634:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int32_t sensor_signal = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t sensor_temp = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t error_signal = 1;
 8001644:	2301      	movs	r3, #1
 8001646:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t ref_sinal = capsule.water_temp;
 8001648:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
	ADC_CHANNEL_Id sensor_channel_id;

	Controler_TypeDef block;
	LCD_Clear();
 800164e:	f7ff fdd7 	bl	8001200 <LCD_Clear>

	switch (capsule.water_type) {
 8001652:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001656:	2b01      	cmp	r3, #1
 8001658:	d01f      	beq.n	800169a <CONTROLLER_Get_IsReady+0x6e>
 800165a:	2b02      	cmp	r3, #2
 800165c:	d000      	beq.n	8001660 <CONTROLLER_Get_IsReady+0x34>
			//aciona CP1, compressor de refrigeração
			PWM_Increase(block.pwm);
			sensor_channel_id = cooler_block.adc_channel_id;
			break;
		default:
			break;
 800165e:	e037      	b.n	80016d0 <CONTROLLER_Get_IsReady+0xa4>
			LCD_Write_Buffer("Aquecendo a água.");
 8001660:	4845      	ldr	r0, [pc, #276]	; (8001778 <CONTROLLER_Get_IsReady+0x14c>)
 8001662:	f7ff fd53 	bl	800110c <LCD_Write_Buffer>
			CONTROLLER_BLOCK_HEATER_DATA(heater_block);
 8001666:	4b45      	ldr	r3, [pc, #276]	; (800177c <CONTROLLER_Get_IsReady+0x150>)
 8001668:	f107 0414 	add.w	r4, r7, #20
 800166c:	461d      	mov	r5, r3
 800166e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	6023      	str	r3, [r4, #0]
			block = heater_block;
 8001676:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800167a:	f107 0514 	add.w	r5, r7, #20
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	6023      	str	r3, [r4, #0]
			PWM_Increase(block.pwm);
 8001686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800168e:	f7ff fe95 	bl	80013bc <PWM_Increase>
			sensor_channel_id = heater_block.adc_channel_id;
 8001692:	7f3b      	ldrb	r3, [r7, #28]
 8001694:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			break;
 8001698:	e01a      	b.n	80016d0 <CONTROLLER_Get_IsReady+0xa4>
			LCD_Write_Buffer("Refrigerando a água.");
 800169a:	4839      	ldr	r0, [pc, #228]	; (8001780 <CONTROLLER_Get_IsReady+0x154>)
 800169c:	f7ff fd36 	bl	800110c <LCD_Write_Buffer>
			CONTROLLER_BLOCK_COOLER_DATA(cooler_block);
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <CONTROLLER_Get_IsReady+0x158>)
 80016a2:	463c      	mov	r4, r7
 80016a4:	461d      	mov	r5, r3
 80016a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	6023      	str	r3, [r4, #0]
			block = cooler_block;
 80016ae:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80016b2:	463d      	mov	r5, r7
 80016b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	6023      	str	r3, [r4, #0]
			PWM_Increase(block.pwm);
 80016bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016c4:	f7ff fe7a 	bl	80013bc <PWM_Increase>
			sensor_channel_id = cooler_block.adc_channel_id;
 80016c8:	7a3b      	ldrb	r3, [r7, #8]
 80016ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			break;
 80016ce:	bf00      	nop
	}

	//fica no while até chegar na temperatura desejada
	while(error_signal != 0)
 80016d0:	e01d      	b.n	800170e <CONTROLLER_Get_IsReady+0xe2>
	{
		sensor_signal = ADC_GetValue(hadc, sensor_channel_id);
 80016d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016d6:	9308      	str	r3, [sp, #32]
 80016d8:	466d      	mov	r5, sp
 80016da:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f0:	f7ff fc6a 	bl	8000fc8 <ADC_GetValue>
 80016f4:	64b8      	str	r0, [r7, #72]	; 0x48

		sensor_temp = UTILS_To_Temp(sensor_signal);
 80016f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fcc5 	bl	8002088 <UTILS_To_Temp>
 80016fe:	6478      	str	r0, [r7, #68]	; 0x44

		error_signal = ref_sinal - sensor_temp;
 8001700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	657b      	str	r3, [r7, #84]	; 0x54

		HAL_Delay(50);
 8001708:	2032      	movs	r0, #50	; 0x32
 800170a:	f000 fd6f 	bl	80021ec <HAL_Delay>
	while(error_signal != 0)
 800170e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1de      	bne.n	80016d2 <CONTROLLER_Get_IsReady+0xa6>
	}

	PWM_Decrease(block.pwm);
 8001714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001718:	e893 0003 	ldmia.w	r3, {r0, r1}
 800171c:	f7ff fe80 	bl	8001420 <PWM_Decrease>
	LCD_Clear();
 8001720:	f7ff fd6e 	bl	8001200 <LCD_Clear>
	LCD_Write_Buffer("Despejando água.");
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <CONTROLLER_Get_IsReady+0x15c>)
 8001726:	f7ff fcf1 	bl	800110c <LCD_Write_Buffer>

	uint32_t init_time = HAL_GetTick();
 800172a:	f000 fd55 	bl	80021d8 <HAL_GetTick>
 800172e:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint32_t current_time = init_time;
 8001730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c

	HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_SET);
 8001734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001736:	4618      	mov	r0, r3
 8001738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173a:	b29b      	uxth	r3, r3
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	f001 fe5d 	bl	80033fe <HAL_GPIO_WritePin>
	while(current_time < (init_time + capsule.water_time)){
 8001744:	e002      	b.n	800174c <CONTROLLER_Get_IsReady+0x120>
		current_time = HAL_GetTick();
 8001746:	f000 fd47 	bl	80021d8 <HAL_GetTick>
 800174a:	64f8      	str	r0, [r7, #76]	; 0x4c
	while(current_time < (init_time + capsule.water_time)){
 800174c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001752:	4413      	add	r3, r2
 8001754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001756:	429a      	cmp	r2, r3
 8001758:	d3f5      	bcc.n	8001746 <CONTROLLER_Get_IsReady+0x11a>
	}
	HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_RESET);
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	4618      	mov	r0, r3
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	b29b      	uxth	r3, r3
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	f001 fe4a 	bl	80033fe <HAL_GPIO_WritePin>
	return;
 800176a:	bf00      	nop
}
 800176c:	3758      	adds	r7, #88	; 0x58
 800176e:	46bd      	mov	sp, r7
 8001770:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001774:	b004      	add	sp, #16
 8001776:	4770      	bx	lr
 8001778:	080070a4 	.word	0x080070a4
 800177c:	080070e4 	.word	0x080070e4
 8001780:	080070b8 	.word	0x080070b8
 8001784:	080070f8 	.word	0x080070f8
 8001788:	080070d0 	.word	0x080070d0

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b0a3      	sub	sp, #140	; 0x8c
 8001790:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f000 fcc9 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001796:	f000 f877 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f000 f9c5 	bl	8001b28 <MX_GPIO_Init>
  MX_DMA_Init();
 800179e:	f000 f9a5 	bl	8001aec <MX_DMA_Init>
  MX_TIM2_Init();
 80017a2:	f000 f917 	bl	80019d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80017a6:	f000 f8c7 	bl	8001938 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  //inicializa LCD em modo 4 bits
  LCD_Init();
 80017aa:	f7ff fdb1 	bl	8001310 <LCD_Init>
  ADC_Init(hadc1);
 80017ae:	4e33      	ldr	r6, [pc, #204]	; (800187c <main+0xf0>)
 80017b0:	466d      	mov	r5, sp
 80017b2:	f106 0410 	add.w	r4, r6, #16
 80017b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017c6:	f7ff fbed 	bl	8000fa4 <ADC_Init>

  PWM_Init(&htim2);
 80017ca:	482d      	ldr	r0, [pc, #180]	; (8001880 <main+0xf4>)
 80017cc:	f7ff fde5 	bl	800139a <PWM_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  STATE current_state = STATE_SHOWING_CLOCK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (current_state) {
 80017d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <main+0x58>
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d009      	beq.n	80017f6 <main+0x6a>
				current_state = STATE_SHOWING_CLOCK;
			}
			current_state = STATE_SHOWING_CLOCK;
			break;
		default:
			break;
 80017e2:	e040      	b.n	8001866 <main+0xda>
			capsule = STATE_Show_Clock();
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fa21 	bl	8001c30 <STATE_Show_Clock>
			current_state = STATE_STARTING_PROCESS;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80017f4:	e037      	b.n	8001866 <main+0xda>
			capsule = STATE_Starting_Process(capsule);
 80017f6:	463e      	mov	r6, r7
 80017f8:	466d      	mov	r5, sp
 80017fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80017fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	602b      	str	r3, [r5, #0]
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180c:	4630      	mov	r0, r6
 800180e:	f000 fa4d 	bl	8001cac <STATE_Starting_Process>
 8001812:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001816:	463d      	mov	r5, r7
 8001818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(capsule.capsule_type != NONE_CAPSULE_TYPE)
 8001824:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	d018      	beq.n	800185e <main+0xd2>
				STATE_Started_Process(capsule, hadc1);
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <main+0xf0>)
 800182e:	ac04      	add	r4, sp, #16
 8001830:	461d      	mov	r5, r3
 8001832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800183e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001842:	466c      	mov	r4, sp
 8001844:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001854:	f000 fa6e 	bl	8001d34 <STATE_Started_Process>
				current_state = STATE_SHOWING_CLOCK;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			current_state = STATE_SHOWING_CLOCK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001864:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <main+0xf8>)
 800186c:	f001 fddf 	bl	800342e <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8001870:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001874:	f000 fcba 	bl	80021ec <HAL_Delay>
		switch (current_state) {
 8001878:	e7ad      	b.n	80017d6 <main+0x4a>
 800187a:	bf00      	nop
 800187c:	200002a0 	.word	0x200002a0
 8001880:	20000314 	.word	0x20000314
 8001884:	40011000 	.word	0x40011000

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	; 0x50
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	2228      	movs	r2, #40	; 0x28
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fa16 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	2301      	movs	r3, #1
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c0:	2310      	movs	r3, #16
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 fdc2 	bl	8003460 <HAL_RCC_OscConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80018e2:	f000 f99f 	bl	8001c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e6:	230f      	movs	r3, #15
 80018e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2102      	movs	r1, #2
 8001902:	4618      	mov	r0, r3
 8001904:	f002 f82c 	bl	8003960 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800190e:	f000 f989 	bl	8001c24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001912:	2302      	movs	r3, #2
 8001914:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800191a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4618      	mov	r0, r3
 8001920:	f002 f9a6 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800192a:	f000 f97b 	bl	8001c24 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3750      	adds	r7, #80	; 0x50
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <MX_ADC1_Init+0x94>)
 800194a:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <MX_ADC1_Init+0x98>)
 800194c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <MX_ADC1_Init+0x94>)
 8001950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001954:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_ADC1_Init+0x94>)
 8001958:	2201      	movs	r2, #1
 800195a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_ADC1_Init+0x94>)
 800195e:	2200      	movs	r2, #0
 8001960:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_ADC1_Init+0x94>)
 8001964:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001968:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_ADC1_Init+0x94>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_ADC1_Init+0x94>)
 8001972:	2202      	movs	r2, #2
 8001974:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <MX_ADC1_Init+0x94>)
 8001978:	f000 fc5a 	bl	8002230 <HAL_ADC_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001982:	f000 f94f 	bl	8001c24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001986:	2304      	movs	r3, #4
 8001988:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800198a:	2301      	movs	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_ADC1_Init+0x94>)
 8001998:	f000 fe3e 	bl	8002618 <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019a2:	f000 f93f 	bl	8001c24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019a6:	2305      	movs	r3, #5
 80019a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_ADC1_Init+0x94>)
 80019b4:	f000 fe30 	bl	8002618 <HAL_ADC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80019be:	f000 f931 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200002a0 	.word	0x200002a0
 80019d0:	40012400 	.word	0x40012400

080019d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	; 0x38
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2667 - 1;
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a1a:	f640 226a 	movw	r2, #2666	; 0xa6a
 8001a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a2c:	482e      	ldr	r0, [pc, #184]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a2e:	f002 fa91 	bl	8003f54 <HAL_TIM_Base_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a38:	f000 f8f4 	bl	8001c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a4a:	f002 fc8b 	bl	8004364 <HAL_TIM_ConfigClockSource>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a54:	f000 f8e6 	bl	8001c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a58:	4823      	ldr	r0, [pc, #140]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a5a:	f002 faca 	bl	8003ff2 <HAL_TIM_PWM_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a64:	f000 f8de 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4619      	mov	r1, r3
 8001a76:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a78:	f002 ffd0 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a82:	f000 f8cf 	bl	8001c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a86:	2360      	movs	r3, #96	; 0x60
 8001a88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001a9e:	f002 fba3 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001aa8:	f000 f8bc 	bl	8001c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001ab4:	f002 fb98 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001abe:	f000 f8b1 	bl	8001c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001aca:	f002 fb8d 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001ad4:	f000 f8a6 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <MX_TIM2_Init+0x114>)
 8001ada:	f000 fa15 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 8001ade:	bf00      	nop
 8001ae0:	3738      	adds	r7, #56	; 0x38
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000314 	.word	0x20000314

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_DMA_Init+0x38>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <MX_DMA_Init+0x38>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_DMA_Init+0x38>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	200b      	movs	r0, #11
 8001b10:	f001 f8df 	bl	8002cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b14:	200b      	movs	r0, #11
 8001b16:	f001 f8f8 	bl	8002d0a <HAL_NVIC_EnableIRQ>

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3c:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a2e      	ldr	r2, [pc, #184]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b72:	f043 0308 	orr.w	r3, r3, #8
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8a:	4823      	ldr	r0, [pc, #140]	; (8001c18 <MX_GPIO_Init+0xf0>)
 8001b8c:	f001 fc37 	bl	80033fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8001b90:	2200      	movs	r2, #0
 8001b92:	f64f 6103 	movw	r1, #65027	; 0xfe03
 8001b96:	4821      	ldr	r0, [pc, #132]	; (8001c1c <MX_GPIO_Init+0xf4>)
 8001b98:	f001 fc31 	bl	80033fe <HAL_GPIO_WritePin>
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Display_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4818      	ldr	r0, [pc, #96]	; (8001c18 <MX_GPIO_Init+0xf0>)
 8001bb6:	f001 fab1 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : Y1_Pin Y2_Pin Display_RW_Pin Display_EN_Pin
                           Display_D4_Pin Display_D5_Pin Display_D6_Pin Display_D7_Pin
                           Display_RS_Pin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8001bba:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8001bbe:	613b      	str	r3, [r7, #16]
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Display_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4812      	ldr	r0, [pc, #72]	; (8001c1c <MX_GPIO_Init+0xf4>)
 8001bd4:	f001 faa2 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Increase_Pin Button_Confirmar_Pin */
  GPIO_InitStruct.Pin = Button_Increase_Pin|Button_Confirmar_Pin;
 8001bd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_GPIO_Init+0xf8>)
 8001bee:	f001 fa95 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1_Bit_0_Pin BN1_bit_1_Pin BN1_bit_2_Pin Inserir_Capsula_Pin */
  GPIO_InitStruct.Pin = BN1_Bit_0_Pin|BN1_bit_1_Pin|BN1_bit_2_Pin|Inserir_Capsula_Pin;
 8001bf2:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_GPIO_Init+0xf4>)
 8001c08:	f001 fa88 	bl	800311c <HAL_GPIO_Init>

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40011000 	.word	0x40011000
 8001c1c:	40010c00 	.word	0x40010c00
 8001c20:	40010800 	.word	0x40010800

08001c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <STATE_Show_Clock>:

#include "controller.h"
#include "states.h"

CAPSULE_Recipe_TypeDef STATE_Show_Clock()
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b08e      	sub	sp, #56	; 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	char hour[10];
	CAPSULE_Recipe_TypeDef capsule = {
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f841 	bl	8004cc8 <memset>
			.capsule_type = NONE_CAPSULE_TYPE,
	};
	uint8_t insert_button = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while(1)
	{
		UTILS_get_Hour(hour);
 8001c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f9f9 	bl	8002048 <UTILS_get_Hour>
		LCD_Clear();
 8001c56:	f7ff fad3 	bl	8001200 <LCD_Clear>
		LCD_Write_Buffer(hour);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fa54 	bl	800110c <LCD_Write_Buffer>

		capsule = CAPSULE_Verify_Insertion();
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fc09 	bl	8001480 <CAPSULE_Verify_Insertion>

		//se tiver uma cápsula, retorna
		if(capsule.capsule_type != NONE_CAPSULE_TYPE ){
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <STATE_Show_Clock+0x5a>

			return capsule;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	461d      	mov	r5, r3
 8001c78:	f107 040c 	add.w	r4, r7, #12
 8001c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c88:	e009      	b.n	8001c9e <STATE_Show_Clock+0x6e>
		}
		HAL_Delay(300);
 8001c8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c8e:	f000 faad 	bl	80021ec <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <STATE_Show_Clock+0x78>)
 8001c98:	f001 fbc9 	bl	800342e <HAL_GPIO_TogglePin>
		UTILS_get_Hour(hour);
 8001c9c:	e7d6      	b.n	8001c4c <STATE_Show_Clock+0x1c>
	}
}
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	3738      	adds	r7, #56	; 0x38
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40011000 	.word	0x40011000

08001cac <STATE_Starting_Process>:


CAPSULE_Recipe_TypeDef STATE_Starting_Process(CAPSULE_Recipe_TypeDef capsule)
{
 8001cac:	b084      	sub	sp, #16
 8001cae:	b5b0      	push	{r4, r5, r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t confirm_button = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]

	LCD_Clear();
 8001cc2:	f7ff fa9d 	bl	8001200 <LCD_Clear>
	LCD_Write_Buffer(capsule.capsule_name);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	3302      	adds	r3, #2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fa1d 	bl	800110c <LCD_Write_Buffer>
	LCD_Seccond_Line();
 8001cd2:	f7ff fa9d 	bl	8001210 <LCD_Seccond_Line>
	LCD_Write_Buffer("S --> Iniciar.");
 8001cd6:	4814      	ldr	r0, [pc, #80]	; (8001d28 <STATE_Starting_Process+0x7c>)
 8001cd8:	f7ff fa18 	bl	800110c <LCD_Write_Buffer>

	while(1)
	{

		confirm_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8001cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <STATE_Starting_Process+0x80>)
 8001ce2:	f001 fb75 	bl	80033d0 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]

		if(confirm_button)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00a      	beq.n	8001d06 <STATE_Starting_Process+0x5a>
		{
			return capsule;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d04:	e009      	b.n	8001d1a <STATE_Starting_Process+0x6e>
		}

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0a:	4809      	ldr	r0, [pc, #36]	; (8001d30 <STATE_Starting_Process+0x84>)
 8001d0c:	f001 fb8f 	bl	800342e <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001d10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d14:	f000 fa6a 	bl	80021ec <HAL_Delay>
		confirm_button = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_INSERT_BUTTON);
 8001d18:	e7e0      	b.n	8001cdc <STATE_Starting_Process+0x30>
	}
}
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d24:	b004      	add	sp, #16
 8001d26:	4770      	bx	lr
 8001d28:	0800710c 	.word	0x0800710c
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000

08001d34 <STATE_Started_Process>:

void STATE_Started_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 8001d34:	b084      	sub	sp, #16
 8001d36:	b5b0      	push	{r4, r5, r7, lr}
 8001d38:	b092      	sub	sp, #72	; 0x48
 8001d3a:	af10      	add	r7, sp, #64	; 0x40
 8001d3c:	f107 0418 	add.w	r4, r7, #24
 8001d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD_Clear();
 8001d44:	f7ff fa5c 	bl	8001200 <LCD_Clear>
	LCD_Write_Buffer("Iniciando...");
 8001d48:	4813      	ldr	r0, [pc, #76]	; (8001d98 <STATE_Started_Process+0x64>)
 8001d4a:	f7ff f9df 	bl	800110c <LCD_Write_Buffer>
	HAL_Delay(1500);
 8001d4e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d52:	f000 fa4b 	bl	80021ec <HAL_Delay>

	uint8_t confirm_button = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		CONTROLLER_Get_IsReady(hadc, capsule);
 8001d5a:	ac08      	add	r4, sp, #32
 8001d5c:	f107 0518 	add.w	r5, r7, #24
 8001d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d6c:	466d      	mov	r5, sp
 8001d6e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d84:	f7ff fc52 	bl	800162c <CONTROLLER_Get_IsReady>

		return;
 8001d88:	bf00      	nop

	}
}
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d92:	b004      	add	sp, #16
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	0800711c 	.word	0x0800711c

08001d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_MspInit+0x5c>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <HAL_MspInit+0x5c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6193      	str	r3, [r2, #24]
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_MspInit+0x5c>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_MspInit+0x5c>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_MspInit+0x5c>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_MspInit+0x5c>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_MspInit+0x60>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_MspInit+0x60>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010000 	.word	0x40010000

08001e00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <HAL_ADC_MspInit+0xbc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d149      	bne.n	8001eb4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_ADC_MspInit+0xc0>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_ADC_MspInit+0xc0>)
 8001e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_ADC_MspInit+0xc0>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_ADC_MspInit+0xc0>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <HAL_ADC_MspInit+0xc0>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_ADC_MspInit+0xc0>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1_IN4_____T1_Pin|ADC1_IN5_____T2_Pin;
 8001e50:	2330      	movs	r3, #48	; 0x30
 8001e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e54:	2303      	movs	r3, #3
 8001e56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4819      	ldr	r0, [pc, #100]	; (8001ec4 <HAL_ADC_MspInit+0xc4>)
 8001e60:	f001 f95c 	bl	800311c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e66:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_ADC_MspInit+0xcc>)
 8001e68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e98:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001e9a:	f000 ff51 	bl	8002d40 <HAL_DMA_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001ea4:	f7ff febe 	bl	8001c24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001eac:	621a      	str	r2, [r3, #32]
 8001eae:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_ADC_MspInit+0xc8>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40012400 	.word	0x40012400
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	200002d0 	.word	0x200002d0
 8001ecc:	40020008 	.word	0x40020008

08001ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d10b      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_TIM_Base_MspInit+0x34>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_TIM_Base_MspInit+0x34>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_TIM_Base_MspInit+0x34>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d117      	bne.n	8001f58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM2_CH1_____R1_Pin|TIM2_CH2_____CP1_Pin|TIM2_CH3_____B1_Pin;
 8001f40:	2307      	movs	r3, #7
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4804      	ldr	r0, [pc, #16]	; (8001f64 <HAL_TIM_MspPostInit+0x5c>)
 8001f54:	f001 f8e2 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <HardFault_Handler+0x4>

08001f7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <BusFault_Handler+0x4>

08001f86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <UsageFault_Handler+0x4>

08001f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f000 f8fe 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <DMA1_Channel1_IRQHandler+0x10>)
 8001fc2:	f000 ff77 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200002d0 	.word	0x200002d0

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f002 fd6a 	bl	8004ad8 <__errno>
 8002004:	4602      	mov	r2, r0
 8002006:	230c      	movs	r3, #12
 8002008:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20005000 	.word	0x20005000
 8002030:	00000400 	.word	0x00000400
 8002034:	20000268 	.word	0x20000268
 8002038:	20000368 	.word	0x20000368

0800203c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <UTILS_get_Hour>:
 */
#include "utils.h"
#include "ADC.h"

void UTILS_get_Hour(char* hour)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	  struct tm *sTm;

	  time_t now = time (0);
 8002050:	2000      	movs	r0, #0
 8002052:	f003 fd11 	bl	8005a78 <time>
 8002056:	4603      	mov	r3, r0
 8002058:	460c      	mov	r4, r1
 800205a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  sTm = gmtime (&now);
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fd3e 	bl	8004ae4 <gmtime>
 8002068:	6178      	str	r0, [r7, #20]

	  strftime (hour, 9, "%H:%M:%S", sTm);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <UTILS_get_Hour+0x38>)
 800206e:	2109      	movs	r1, #9
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f003 fc4d 	bl	8005910 <strftime>
	  return;
 8002076:	bf00      	nop
}
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop
 8002080:	0800712c 	.word	0x0800712c
 8002084:	00000000 	.word	0x00000000

08002088 <UTILS_To_Temp>:

uint32_t UTILS_To_Temp(uint32_t value_adc)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	//
//	float v25 = 4000;// When V25=1.41V at ref 3V3
//	float avgSlope = 5.0;// When avgSlope=5mV/C at ref 3V3
//	float temperature = ((value_adc - v25)/avgSlope)+25;
//	return (uint32_t)temperature;
	uint32_t temperature = (value_adc * ADC_SCALE) * 25;
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe f9b1 	bl	80003f8 <__aeabi_ui2d>
 8002096:	a30e      	add	r3, pc, #56	; (adr r3, 80020d0 <UTILS_To_Temp+0x48>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fa26 	bl	80004ec <__aeabi_dmul>
 80020a0:	4603      	mov	r3, r0
 80020a2:	460c      	mov	r4, r1
 80020a4:	4618      	mov	r0, r3
 80020a6:	4621      	mov	r1, r4
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <UTILS_To_Temp+0x50>)
 80020ae:	f7fe fa1d 	bl	80004ec <__aeabi_dmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	460c      	mov	r4, r1
 80020b6:	4618      	mov	r0, r3
 80020b8:	4621      	mov	r1, r4
 80020ba:	f7fe fc29 	bl	8000910 <__aeabi_d2uiz>
 80020be:	4603      	mov	r3, r0
 80020c0:	60fb      	str	r3, [r7, #12]
	return temperature;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	f3af 8000 	nop.w
 80020d0:	e734d9b4 	.word	0xe734d9b4
 80020d4:	3f4a680c 	.word	0x3f4a680c
 80020d8:	40390000 	.word	0x40390000

080020dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020de:	e003      	b.n	80020e8 <LoopCopyDataInit>

080020e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80020e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80020e6:	3104      	adds	r1, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80020e8:	480a      	ldr	r0, [pc, #40]	; (8002114 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80020ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80020ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020f0:	d3f6      	bcc.n	80020e0 <CopyDataInit>
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020f4:	e002      	b.n	80020fc <LoopFillZerobss>

080020f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020f8:	f842 3b04 	str.w	r3, [r2], #4

080020fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002100:	d3f9      	bcc.n	80020f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002102:	f7ff ff9b 	bl	800203c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f002 fdab 	bl	8004c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210a:	f7ff fb3f 	bl	800178c <main>
  bx lr
 800210e:	4770      	bx	lr
  ldr r3, =_sidata
 8002110:	08007670 	.word	0x08007670
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002118:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 800211c:	20000244 	.word	0x20000244
  ldr r3, = _ebss
 8002120:	20000364 	.word	0x20000364

08002124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC1_2_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_Init+0x28>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_Init+0x28>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 fdbf 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	2000      	movs	r0, #0
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fe2a 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fdd7 	bl	8002d26 <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 fd9f 	bl	8002cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000004 	.word	0x20000004
 80021ac:	2000000c 	.word	0x2000000c
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_IncTick+0x1c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_IncTick+0x20>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a03      	ldr	r2, [pc, #12]	; (80021d4 <HAL_IncTick+0x20>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	2000000c 	.word	0x2000000c
 80021d4:	2000035c 	.word	0x2000035c

080021d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_GetTick+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	2000035c 	.word	0x2000035c

080021ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_GetTick>
 80021f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d005      	beq.n	8002212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_Delay+0x40>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002212:	bf00      	nop
 8002214:	f7ff ffe0 	bl	80021d8 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d8f7      	bhi.n	8002214 <HAL_Delay+0x28>
  {
  }
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0be      	b.n	80023d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fdc6 	bl	8001e00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fb19 	bl	80028ac <ADC_ConversionStop_Disable>
 800227a:	4603      	mov	r3, r0
 800227c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 8099 	bne.w	80023be <HAL_ADC_Init+0x18e>
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8095 	bne.w	80023be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229c:	f023 0302 	bic.w	r3, r3, #2
 80022a0:	f043 0202 	orr.w	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7b1b      	ldrb	r3, [r3, #12]
 80022b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c8:	d003      	beq.n	80022d2 <HAL_ADC_Init+0xa2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_ADC_Init+0xa8>
 80022d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d6:	e000      	b.n	80022da <HAL_ADC_Init+0xaa>
 80022d8:	2300      	movs	r3, #0
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7d1b      	ldrb	r3, [r3, #20]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d119      	bne.n	800231c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7b1b      	ldrb	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	035a      	lsls	r2, r3, #13
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e00b      	b.n	800231c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_ADC_Init+0x1a8>)
 8002338:	4013      	ands	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	430b      	orrs	r3, r1
 8002342:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234c:	d003      	beq.n	8002356 <HAL_ADC_Init+0x126>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d104      	bne.n	8002360 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	3b01      	subs	r3, #1
 800235c:	051b      	lsls	r3, r3, #20
 800235e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	430a      	orrs	r2, r1
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_ADC_Init+0x1ac>)
 800237c:	4013      	ands	r3, r2
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	d10b      	bne.n	800239c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800239a:	e018      	b.n	80023ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f023 0312 	bic.w	r3, r3, #18
 80023a4:	f043 0210 	orr.w	r2, r3, #16
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023bc:	e007      	b.n	80023ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	f043 0210 	orr.w	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	ffe1f7fd 	.word	0xffe1f7fd
 80023dc:	ff1f0efe 	.word	0xff1f0efe

080023e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Stop+0x1a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e01a      	b.n	8002430 <HAL_ADC_Stop+0x50>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa52 	bl	80028ac <ADC_ConversionStop_Disable>
 8002408:	4603      	mov	r3, r0
 800240a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a64      	ldr	r2, [pc, #400]	; (80025e0 <HAL_ADC_Start_DMA+0x1a8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_ADC_Start_DMA+0x24>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a63      	ldr	r2, [pc, #396]	; (80025e4 <HAL_ADC_Start_DMA+0x1ac>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d106      	bne.n	800246a <HAL_ADC_Start_DMA+0x32>
 800245c:	4b60      	ldr	r3, [pc, #384]	; (80025e0 <HAL_ADC_Start_DMA+0x1a8>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f040 80b3 	bne.w	80025d0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_Start_DMA+0x40>
 8002474:	2302      	movs	r3, #2
 8002476:	e0ae      	b.n	80025d6 <HAL_ADC_Start_DMA+0x19e>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f9c1 	bl	8002808 <ADC_Enable>
 8002486:	4603      	mov	r3, r0
 8002488:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f040 809a 	bne.w	80025c6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_ADC_Start_DMA+0x1ac>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_Start_DMA+0x84>
 80024b0:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <HAL_ADC_Start_DMA+0x1a8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d115      	bne.n	80024e8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d026      	beq.n	8002524 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024e6:	e01d      	b.n	8002524 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_ADC_Start_DMA+0x1a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_Start_DMA+0xd0>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a38      	ldr	r2, [pc, #224]	; (80025e4 <HAL_ADC_Start_DMA+0x1ac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d10d      	bne.n	8002524 <HAL_ADC_Start_DMA+0xec>
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_ADC_Start_DMA+0x1a8>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800251c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	f023 0206 	bic.w	r2, r3, #6
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
 800253c:	e002      	b.n	8002544 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_ADC_Start_DMA+0x1b0>)
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_ADC_Start_DMA+0x1b4>)
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_ADC_Start_DMA+0x1b8>)
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0202 	mvn.w	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a18      	ldr	r0, [r3, #32]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	334c      	adds	r3, #76	; 0x4c
 8002588:	4619      	mov	r1, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f000 fc31 	bl	8002df4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800259c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025a0:	d108      	bne.n	80025b4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025b0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025b2:	e00f      	b.n	80025d4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025c2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025c4:	e006      	b.n	80025d4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80025ce:	e001      	b.n	80025d4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40012400 	.word	0x40012400
 80025e4:	40012800 	.word	0x40012800
 80025e8:	08002921 	.word	0x08002921
 80025ec:	0800299d 	.word	0x0800299d
 80025f0:	080029b9 	.word	0x080029b9

080025f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x20>
 8002634:	2302      	movs	r3, #2
 8002636:	e0dc      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x1da>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d81c      	bhi.n	8002682 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b05      	subs	r3, #5
 800265a:	221f      	movs	r2, #31
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b05      	subs	r3, #5
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
 8002680:	e03c      	b.n	80026fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d81c      	bhi.n	80026c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3b23      	subs	r3, #35	; 0x23
 800269c:	221f      	movs	r2, #31
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4019      	ands	r1, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b23      	subs	r3, #35	; 0x23
 80026b6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
 80026c2:	e01b      	b.n	80026fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	3b41      	subs	r3, #65	; 0x41
 80026d6:	221f      	movs	r2, #31
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	4019      	ands	r1, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	3b41      	subs	r3, #65	; 0x41
 80026f0:	fa00 f203 	lsl.w	r2, r0, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b09      	cmp	r3, #9
 8002702:	d91c      	bls.n	800273e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68d9      	ldr	r1, [r3, #12]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	2207      	movs	r2, #7
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4019      	ands	r1, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6898      	ldr	r0, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	3b1e      	subs	r3, #30
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	e019      	b.n	8002772 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	2207      	movs	r2, #7
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	4019      	ands	r1, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6898      	ldr	r0, [r3, #8]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	fa00 f203 	lsl.w	r2, r0, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b10      	cmp	r3, #16
 8002778:	d003      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800277e:	2b11      	cmp	r3, #17
 8002780:	d132      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d125      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d126      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027a8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d11a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_ADC_ConfigChannel+0x1e8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_ADC_ConfigChannel+0x1ec>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	0c9a      	lsrs	r2, r3, #18
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027c8:	e002      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f9      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x1b2>
 80027d6:	e007      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40012400 	.word	0x40012400
 8002800:	20000004 	.word	0x20000004
 8002804:	431bde83 	.word	0x431bde83

08002808 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d039      	beq.n	800289a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <ADC_Enable+0x9c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <ADC_Enable+0xa0>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002844:	e002      	b.n	800284c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f9      	bne.n	8002846 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002852:	f7ff fcc1 	bl	80021d8 <HAL_GetTick>
 8002856:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002858:	e018      	b.n	800288c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800285a:	f7ff fcbd 	bl	80021d8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d911      	bls.n	800288c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f043 0210 	orr.w	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e007      	b.n	800289c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d1df      	bne.n	800285a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000004 	.word	0x20000004
 80028a8:	431bde83 	.word	0x431bde83

080028ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d127      	bne.n	8002916 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028d6:	f7ff fc7f 	bl	80021d8 <HAL_GetTick>
 80028da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028dc:	e014      	b.n	8002908 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028de:	f7ff fc7b 	bl	80021d8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d90d      	bls.n	8002908 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e007      	b.n	8002918 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d0e3      	beq.n	80028de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002936:	2b00      	cmp	r3, #0
 8002938:	d127      	bne.n	800298a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002950:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002954:	d115      	bne.n	8002982 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800295a:	2b00      	cmp	r3, #0
 800295c:	d111      	bne.n	8002982 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7fe fb44 	bl	8001010 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002988:	e004      	b.n	8002994 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff fe22 	bl	80025f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff fe11 	bl	8002606 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e086      	b.n	8002b18 <HAL_ADCEx_Calibration_Start+0x12c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ff4a 	bl	80028ac <ADC_ConversionStop_Disable>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d175      	bne.n	8002b0e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a2a:	f023 0302 	bic.w	r3, r3, #2
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_ADCEx_Calibration_Start+0x134>)
 8002a38:	681c      	ldr	r4, [r3, #0]
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f001 f9ce 	bl	8003ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8002a40:	4603      	mov	r3, r0
 8002a42:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002a46:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002a48:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002a4a:	e002      	b.n	8002a52 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fed5 	bl	8002808 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0208 	orr.w	r2, r2, #8
 8002a6c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a6e:	f7ff fbb3 	bl	80021d8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a74:	e014      	b.n	8002aa0 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a76:	f7ff fbaf 	bl	80021d8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b0a      	cmp	r3, #10
 8002a82:	d90d      	bls.n	8002aa0 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f023 0312 	bic.w	r3, r3, #18
 8002a8c:	f043 0210 	orr.w	r2, r3, #16
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e03b      	b.n	8002b18 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e3      	bne.n	8002a76 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0204 	orr.w	r2, r2, #4
 8002abc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002abe:	f7ff fb8b 	bl	80021d8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ac4:	e014      	b.n	8002af0 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ac6:	f7ff fb87 	bl	80021d8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b0a      	cmp	r3, #10
 8002ad2:	d90d      	bls.n	8002af0 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f023 0312 	bic.w	r3, r3, #18
 8002adc:	f043 0210 	orr.w	r2, r3, #16
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e013      	b.n	8002b18 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e3      	bne.n	8002ac6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd90      	pop	{r4, r7, pc}
 8002b20:	20000004 	.word	0x20000004

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4906      	ldr	r1, [pc, #24]	; (8002bbc <__NVIC_EnableIRQ+0x34>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c88:	d301      	bcc.n	8002c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00f      	b.n	8002cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <SysTick_Config+0x40>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c96:	210f      	movs	r1, #15
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f7ff ff90 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff2d 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce4:	f7ff ff42 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff90 	bl	8002c14 <NVIC_EncodePriority>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff5f 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff35 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffa2 	bl	8002c78 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e043      	b.n	8002dde <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_DMA_Init+0xa8>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_DMA_Init+0xac>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	009a      	lsls	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_DMA_Init+0xb0>)
 8002d72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	bffdfff8 	.word	0xbffdfff8
 8002dec:	cccccccd 	.word	0xcccccccd
 8002df0:	40020000 	.word	0x40020000

08002df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_DMA_Start_IT+0x20>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e04a      	b.n	8002eaa <HAL_DMA_Start_IT+0xb6>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d13a      	bne.n	8002e9c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f938 	bl	80030c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 020e 	orr.w	r2, r2, #14
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e00f      	b.n	8002e8a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0204 	bic.w	r2, r2, #4
 8002e78:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 020a 	orr.w	r2, r2, #10
 8002e88:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e005      	b.n	8002ea8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d04f      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xc8>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04a      	beq.n	8002f7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a66      	ldr	r2, [pc, #408]	; (80030a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d029      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xae>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xaa>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a63      	ldr	r2, [pc, #396]	; (80030ac <HAL_DMA_IRQHandler+0x1f8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xa4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a62      	ldr	r2, [pc, #392]	; (80030b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d012      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x9e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a60      	ldr	r2, [pc, #384]	; (80030b4 <HAL_DMA_IRQHandler+0x200>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00a      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x98>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5f      	ldr	r2, [pc, #380]	; (80030b8 <HAL_DMA_IRQHandler+0x204>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d102      	bne.n	8002f46 <HAL_DMA_IRQHandler+0x92>
 8002f40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f44:	e00e      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f4a:	e00b      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f50:	e008      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f56:	e005      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f5c:	e002      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f5e:	2340      	movs	r3, #64	; 0x40
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_IRQHandler+0xb0>
 8002f62:	2304      	movs	r3, #4
 8002f64:	4a55      	ldr	r2, [pc, #340]	; (80030bc <HAL_DMA_IRQHandler+0x208>)
 8002f66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8094 	beq.w	800309a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f7a:	e08e      	b.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2202      	movs	r2, #2
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d056      	beq.n	800303a <HAL_DMA_IRQHandler+0x186>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d051      	beq.n	800303a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020a 	bic.w	r2, r2, #10
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a38      	ldr	r2, [pc, #224]	; (80030a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d029      	beq.n	800301a <HAL_DMA_IRQHandler+0x166>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <HAL_DMA_IRQHandler+0x162>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a35      	ldr	r2, [pc, #212]	; (80030ac <HAL_DMA_IRQHandler+0x1f8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01a      	beq.n	8003010 <HAL_DMA_IRQHandler+0x15c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d012      	beq.n	800300a <HAL_DMA_IRQHandler+0x156>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <HAL_DMA_IRQHandler+0x200>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x150>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a31      	ldr	r2, [pc, #196]	; (80030b8 <HAL_DMA_IRQHandler+0x204>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d102      	bne.n	8002ffe <HAL_DMA_IRQHandler+0x14a>
 8002ff8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ffc:	e00e      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003002:	e00b      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003008:	e008      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 800300a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800300e:	e005      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003014:	e002      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 8003016:	2320      	movs	r3, #32
 8003018:	e000      	b.n	800301c <HAL_DMA_IRQHandler+0x168>
 800301a:	2302      	movs	r3, #2
 800301c:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_DMA_IRQHandler+0x208>)
 800301e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d034      	beq.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003038:	e02f      	b.n	800309a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2208      	movs	r2, #8
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d028      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 020e 	bic.w	r2, r2, #14
 8003062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
    }
  }
  return;
 800309a:	bf00      	nop
 800309c:	bf00      	nop
}
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40020008 	.word	0x40020008
 80030a8:	4002001c 	.word	0x4002001c
 80030ac:	40020030 	.word	0x40020030
 80030b0:	40020044 	.word	0x40020044
 80030b4:	40020058 	.word	0x40020058
 80030b8:	4002006c 	.word	0x4002006c
 80030bc:	40020000 	.word	0x40020000

080030c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f202 	lsl.w	r2, r1, r2
 80030dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d108      	bne.n	8003100 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030fe:	e007      	b.n	8003110 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
	...

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b08b      	sub	sp, #44	; 0x2c
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	e127      	b.n	8003380 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003130:	2201      	movs	r2, #1
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	429a      	cmp	r2, r3
 800314a:	f040 8116 	bne.w	800337a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b12      	cmp	r3, #18
 8003154:	d034      	beq.n	80031c0 <HAL_GPIO_Init+0xa4>
 8003156:	2b12      	cmp	r3, #18
 8003158:	d80d      	bhi.n	8003176 <HAL_GPIO_Init+0x5a>
 800315a:	2b02      	cmp	r3, #2
 800315c:	d02b      	beq.n	80031b6 <HAL_GPIO_Init+0x9a>
 800315e:	2b02      	cmp	r3, #2
 8003160:	d804      	bhi.n	800316c <HAL_GPIO_Init+0x50>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d031      	beq.n	80031ca <HAL_GPIO_Init+0xae>
 8003166:	2b01      	cmp	r3, #1
 8003168:	d01c      	beq.n	80031a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800316a:	e048      	b.n	80031fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800316c:	2b03      	cmp	r3, #3
 800316e:	d043      	beq.n	80031f8 <HAL_GPIO_Init+0xdc>
 8003170:	2b11      	cmp	r3, #17
 8003172:	d01b      	beq.n	80031ac <HAL_GPIO_Init+0x90>
          break;
 8003174:	e043      	b.n	80031fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003176:	4a89      	ldr	r2, [pc, #548]	; (800339c <HAL_GPIO_Init+0x280>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d026      	beq.n	80031ca <HAL_GPIO_Init+0xae>
 800317c:	4a87      	ldr	r2, [pc, #540]	; (800339c <HAL_GPIO_Init+0x280>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d806      	bhi.n	8003190 <HAL_GPIO_Init+0x74>
 8003182:	4a87      	ldr	r2, [pc, #540]	; (80033a0 <HAL_GPIO_Init+0x284>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d020      	beq.n	80031ca <HAL_GPIO_Init+0xae>
 8003188:	4a86      	ldr	r2, [pc, #536]	; (80033a4 <HAL_GPIO_Init+0x288>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01d      	beq.n	80031ca <HAL_GPIO_Init+0xae>
          break;
 800318e:	e036      	b.n	80031fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003190:	4a85      	ldr	r2, [pc, #532]	; (80033a8 <HAL_GPIO_Init+0x28c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_GPIO_Init+0xae>
 8003196:	4a85      	ldr	r2, [pc, #532]	; (80033ac <HAL_GPIO_Init+0x290>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d016      	beq.n	80031ca <HAL_GPIO_Init+0xae>
 800319c:	4a84      	ldr	r2, [pc, #528]	; (80033b0 <HAL_GPIO_Init+0x294>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0xae>
          break;
 80031a2:	e02c      	b.n	80031fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	623b      	str	r3, [r7, #32]
          break;
 80031aa:	e028      	b.n	80031fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	3304      	adds	r3, #4
 80031b2:	623b      	str	r3, [r7, #32]
          break;
 80031b4:	e023      	b.n	80031fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	3308      	adds	r3, #8
 80031bc:	623b      	str	r3, [r7, #32]
          break;
 80031be:	e01e      	b.n	80031fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	330c      	adds	r3, #12
 80031c6:	623b      	str	r3, [r7, #32]
          break;
 80031c8:	e019      	b.n	80031fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031d2:	2304      	movs	r3, #4
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e012      	b.n	80031fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e0:	2308      	movs	r3, #8
 80031e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	611a      	str	r2, [r3, #16]
          break;
 80031ea:	e008      	b.n	80031fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ec:	2308      	movs	r3, #8
 80031ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	615a      	str	r2, [r3, #20]
          break;
 80031f6:	e002      	b.n	80031fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
          break;
 80031fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2bff      	cmp	r3, #255	; 0xff
 8003202:	d801      	bhi.n	8003208 <HAL_GPIO_Init+0xec>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	e001      	b.n	800320c <HAL_GPIO_Init+0xf0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2bff      	cmp	r3, #255	; 0xff
 8003212:	d802      	bhi.n	800321a <HAL_GPIO_Init+0xfe>
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	e002      	b.n	8003220 <HAL_GPIO_Init+0x104>
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	3b08      	subs	r3, #8
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	210f      	movs	r1, #15
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	401a      	ands	r2, r3
 8003232:	6a39      	ldr	r1, [r7, #32]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	431a      	orrs	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8096 	beq.w	800337a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800324e:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_GPIO_Init+0x298>)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_GPIO_Init+0x298>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6193      	str	r3, [r2, #24]
 800325a:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <HAL_GPIO_Init+0x298>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003266:	4a54      	ldr	r2, [pc, #336]	; (80033b8 <HAL_GPIO_Init+0x29c>)
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003272:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4013      	ands	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <HAL_GPIO_Init+0x2a0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_GPIO_Init+0x19e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4a      	ldr	r2, [pc, #296]	; (80033c0 <HAL_GPIO_Init+0x2a4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00d      	beq.n	80032b6 <HAL_GPIO_Init+0x19a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <HAL_GPIO_Init+0x2a8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <HAL_GPIO_Init+0x196>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a48      	ldr	r2, [pc, #288]	; (80033c8 <HAL_GPIO_Init+0x2ac>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_GPIO_Init+0x192>
 80032aa:	2303      	movs	r3, #3
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x1a0>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e004      	b.n	80032bc <HAL_GPIO_Init+0x1a0>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e002      	b.n	80032bc <HAL_GPIO_Init+0x1a0>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_GPIO_Init+0x1a0>
 80032ba:	2300      	movs	r3, #0
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	f002 0203 	and.w	r2, r2, #3
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	4093      	lsls	r3, r2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032cc:	493a      	ldr	r1, [pc, #232]	; (80033b8 <HAL_GPIO_Init+0x29c>)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032e6:	4b39      	ldr	r3, [pc, #228]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4938      	ldr	r1, [pc, #224]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
 80032f2:	e006      	b.n	8003302 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032f4:	4b35      	ldr	r3, [pc, #212]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4933      	ldr	r1, [pc, #204]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 80032fe:	4013      	ands	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	492e      	ldr	r1, [pc, #184]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
 800331a:	e006      	b.n	800332a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	43db      	mvns	r3, r3
 8003324:	4929      	ldr	r1, [pc, #164]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003326:	4013      	ands	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003336:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	4924      	ldr	r1, [pc, #144]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
 8003342:	e006      	b.n	8003352 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	43db      	mvns	r3, r3
 800334c:	491f      	ldr	r1, [pc, #124]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 800334e:	4013      	ands	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	491a      	ldr	r1, [pc, #104]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	60cb      	str	r3, [r1, #12]
 800336a:	e006      	b.n	800337a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800336c:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	43db      	mvns	r3, r3
 8003374:	4915      	ldr	r1, [pc, #84]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003376:	4013      	ands	r3, r2
 8003378:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	3301      	adds	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f47f aed0 	bne.w	8003130 <HAL_GPIO_Init+0x14>
  }
}
 8003390:	bf00      	nop
 8003392:	372c      	adds	r7, #44	; 0x2c
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	10210000 	.word	0x10210000
 80033a0:	10110000 	.word	0x10110000
 80033a4:	10120000 	.word	0x10120000
 80033a8:	10310000 	.word	0x10310000
 80033ac:	10320000 	.word	0x10320000
 80033b0:	10220000 	.word	0x10220000
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40010800 	.word	0x40010800
 80033c0:	40010c00 	.word	0x40010c00
 80033c4:	40011000 	.word	0x40011000
 80033c8:	40011400 	.word	0x40011400
 80033cc:	40010400 	.word	0x40010400

080033d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e001      	b.n	80033f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	807b      	strh	r3, [r7, #2]
 800340a:	4613      	mov	r3, r2
 800340c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800340e:	787b      	ldrb	r3, [r7, #1]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003414:	887a      	ldrh	r2, [r7, #2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800341a:	e003      	b.n	8003424 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	041a      	lsls	r2, r3, #16
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	611a      	str	r2, [r3, #16]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003440:	887a      	ldrh	r2, [r7, #2]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	041a      	lsls	r2, r3, #16
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43d9      	mvns	r1, r3
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	400b      	ands	r3, r1
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	611a      	str	r2, [r3, #16]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e26c      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8087 	beq.w	800358e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003480:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b04      	cmp	r3, #4
 800348a:	d00c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800348c:	4b8f      	ldr	r3, [pc, #572]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b08      	cmp	r3, #8
 8003496:	d112      	bne.n	80034be <HAL_RCC_OscConfig+0x5e>
 8003498:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d10b      	bne.n	80034be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a6:	4b89      	ldr	r3, [pc, #548]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d06c      	beq.n	800358c <HAL_RCC_OscConfig+0x12c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d168      	bne.n	800358c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e246      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x76>
 80034c8:	4b80      	ldr	r3, [pc, #512]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7f      	ldr	r2, [pc, #508]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e02e      	b.n	8003534 <HAL_RCC_OscConfig+0xd4>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x98>
 80034de:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a7a      	ldr	r2, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b78      	ldr	r3, [pc, #480]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a77      	ldr	r2, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e01d      	b.n	8003534 <HAL_RCC_OscConfig+0xd4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0xbc>
 8003502:	4b72      	ldr	r3, [pc, #456]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a71      	ldr	r2, [pc, #452]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0xd4>
 800351c:	4b6b      	ldr	r3, [pc, #428]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a67      	ldr	r2, [pc, #412]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 800352e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe fe4c 	bl	80021d8 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7fe fe48 	bl	80021d8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1fa      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b5d      	ldr	r3, [pc, #372]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0xe4>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fe fe38 	bl	80021d8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7fe fe34 	bl	80021d8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	; 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e1e6      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x10c>
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d063      	beq.n	8003662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800359a:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035a6:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d11c      	bne.n	80035ec <HAL_RCC_OscConfig+0x18c>
 80035b2:	4b46      	ldr	r3, [pc, #280]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d116      	bne.n	80035ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_RCC_OscConfig+0x176>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e1ba      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4939      	ldr	r1, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	e03a      	b.n	8003662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f4:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <HAL_RCC_OscConfig+0x270>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fded 	bl	80021d8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003602:	f7fe fde9 	bl	80021d8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e19b      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4927      	ldr	r1, [pc, #156]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]
 8003634:	e015      	b.n	8003662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_RCC_OscConfig+0x270>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fdcc 	bl	80021d8 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003644:	f7fe fdc8 	bl	80021d8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e17a      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03a      	beq.n	80036e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d019      	beq.n	80036aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003676:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7fe fdac 	bl	80021d8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003684:	f7fe fda8 	bl	80021d8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e15a      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036a2:	2001      	movs	r0, #1
 80036a4:	f000 fac6 	bl	8003c34 <RCC_Delay>
 80036a8:	e01c      	b.n	80036e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b0:	f7fe fd92 	bl	80021d8 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b6:	e00f      	b.n	80036d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fe fd8e 	bl	80021d8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d908      	bls.n	80036d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e140      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	42420000 	.word	0x42420000
 80036d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b9e      	ldr	r3, [pc, #632]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e9      	bne.n	80036b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a6 	beq.w	800383e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f6:	4b97      	ldr	r3, [pc, #604]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003702:	4b94      	ldr	r3, [pc, #592]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a93      	ldr	r2, [pc, #588]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370c:	61d3      	str	r3, [r2, #28]
 800370e:	4b91      	ldr	r3, [pc, #580]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b8e      	ldr	r3, [pc, #568]	; (8003958 <HAL_RCC_OscConfig+0x4f8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b8b      	ldr	r3, [pc, #556]	; (8003958 <HAL_RCC_OscConfig+0x4f8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a8a      	ldr	r2, [pc, #552]	; (8003958 <HAL_RCC_OscConfig+0x4f8>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fe fd4f 	bl	80021d8 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fe fd4b 	bl	80021d8 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	; 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0fd      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b81      	ldr	r3, [pc, #516]	; (8003958 <HAL_RCC_OscConfig+0x4f8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x312>
 8003764:	4b7b      	ldr	r3, [pc, #492]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a7a      	ldr	r2, [pc, #488]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6213      	str	r3, [r2, #32]
 8003770:	e02d      	b.n	80037ce <HAL_RCC_OscConfig+0x36e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x334>
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a75      	ldr	r2, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6213      	str	r3, [r2, #32]
 8003786:	4b73      	ldr	r3, [pc, #460]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a72      	ldr	r2, [pc, #456]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	f023 0304 	bic.w	r3, r3, #4
 8003790:	6213      	str	r3, [r2, #32]
 8003792:	e01c      	b.n	80037ce <HAL_RCC_OscConfig+0x36e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b05      	cmp	r3, #5
 800379a:	d10c      	bne.n	80037b6 <HAL_RCC_OscConfig+0x356>
 800379c:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4a6c      	ldr	r2, [pc, #432]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	6213      	str	r3, [r2, #32]
 80037a8:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a69      	ldr	r2, [pc, #420]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6213      	str	r3, [r2, #32]
 80037b4:	e00b      	b.n	80037ce <HAL_RCC_OscConfig+0x36e>
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	4a66      	ldr	r2, [pc, #408]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6213      	str	r3, [r2, #32]
 80037c2:	4b64      	ldr	r3, [pc, #400]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d015      	beq.n	8003802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fe fcff 	bl	80021d8 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fcfb 	bl	80021d8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0ab      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b57      	ldr	r3, [pc, #348]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RCC_OscConfig+0x37e>
 8003800:	e014      	b.n	800382c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7fe fce9 	bl	80021d8 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe fce5 	bl	80021d8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e095      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ee      	bne.n	800380a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003832:	4b48      	ldr	r3, [pc, #288]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4a47      	ldr	r2, [pc, #284]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8081 	beq.w	800394a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003848:	4b42      	ldr	r3, [pc, #264]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d061      	beq.n	8003918 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d146      	bne.n	80038ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b3f      	ldr	r3, [pc, #252]	; (800395c <HAL_RCC_OscConfig+0x4fc>)
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fcb9 	bl	80021d8 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386a:	f7fe fcb5 	bl	80021d8 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e067      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387c:	4b35      	ldr	r3, [pc, #212]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f0      	bne.n	800386a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003890:	d108      	bne.n	80038a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003892:	4b30      	ldr	r3, [pc, #192]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	492d      	ldr	r1, [pc, #180]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a19      	ldr	r1, [r3, #32]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	430b      	orrs	r3, r1
 80038b6:	4927      	ldr	r1, [pc, #156]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_RCC_OscConfig+0x4fc>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fe fc89 	bl	80021d8 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fe fc85 	bl	80021d8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e037      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x46a>
 80038e8:	e02f      	b.n	800394a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <HAL_RCC_OscConfig+0x4fc>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fc72 	bl	80021d8 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe fc6e 	bl	80021d8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e020      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x498>
 8003916:	e018      	b.n	800394a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e013      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_OscConfig+0x4f4>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	429a      	cmp	r2, r3
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	40007000 	.word	0x40007000
 800395c:	42420060 	.word	0x42420060

08003960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0d0      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b6a      	ldr	r3, [pc, #424]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d910      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b67      	ldr	r3, [pc, #412]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	4965      	ldr	r1, [pc, #404]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0b8      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039bc:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d4:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b50      	ldr	r3, [pc, #320]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	494d      	ldr	r1, [pc, #308]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d040      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d115      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e07f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1e:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e073      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e06b      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4936      	ldr	r1, [pc, #216]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fbc2 	bl	80021d8 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fe fbbe 	bl	80021d8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e053      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a80:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d210      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 0207 	bic.w	r2, r3, #7
 8003a96:	4922      	ldr	r1, [pc, #136]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e032      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4916      	ldr	r1, [pc, #88]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	490e      	ldr	r1, [pc, #56]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aee:	f000 f821 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003af2:	4601      	mov	r1, r0
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
 8003b02:	fa21 f303 	lsr.w	r3, r1, r3
 8003b06:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1cc>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1d0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fb20 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	0800716c 	.word	0x0800716c
 8003b2c:	20000004 	.word	0x20000004
 8003b30:	20000008 	.word	0x20000008

08003b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	b490      	push	{r4, r7}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b3c:	1d3c      	adds	r4, r7, #4
 8003b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b44:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d002      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x40>
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x46>
 8003b72:	e02d      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b74:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b76:	623b      	str	r3, [r7, #32]
      break;
 8003b78:	e02d      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	0c9b      	lsrs	r3, r3, #18
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b86:	4413      	add	r3, r2
 8003b88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	0c5b      	lsrs	r3, r3, #17
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bb2:	fb02 f203 	mul.w	r2, r2, r3
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbe:	e004      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	623b      	str	r3, [r7, #32]
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd2:	623b      	str	r3, [r7, #32]
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc90      	pop	{r4, r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	08007138 	.word	0x08007138
 8003be8:	08007148 	.word	0x08007148
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	007a1200 	.word	0x007a1200
 8003bf4:	003d0900 	.word	0x003d0900

08003bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c10:	f7ff fff2 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c14:	4601      	mov	r1, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	0adb      	lsrs	r3, r3, #11
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c22:	5cd3      	ldrb	r3, [r2, r3]
 8003c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	0800717c 	.word	0x0800717c

08003c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <RCC_Delay+0x34>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <RCC_Delay+0x38>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a5b      	lsrs	r3, r3, #9
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c50:	bf00      	nop
  }
  while (Delay --);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	60fa      	str	r2, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <RCC_Delay+0x1c>
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000004 	.word	0x20000004
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d07d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c90:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
 8003ca8:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d118      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc4:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a42      	ldr	r2, [pc, #264]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fa82 	bl	80021d8 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fe fa7e 	bl	80021d8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e06d      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02e      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d027      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d2a:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fa4d 	bl	80021d8 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fe fa49 	bl	80021d8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e036      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ee      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4917      	ldr	r1, [pc, #92]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	490b      	ldr	r1, [pc, #44]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4904      	ldr	r1, [pc, #16]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42420440 	.word	0x42420440

08003ddc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b08d      	sub	sp, #52	; 0x34
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003de4:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003de6:	f107 040c 	add.w	r4, r7, #12
 8003dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003df0:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	2300      	movs	r3, #0
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d07f      	beq.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d002      	beq.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d048      	beq.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e18:	e08b      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e20:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d07f      	beq.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	0c9b      	lsrs	r3, r3, #18
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e38:	4413      	add	r3, r2
 8003e3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e3e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d018      	beq.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e4a:	4b3e      	ldr	r3, [pc, #248]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	0c5b      	lsrs	r3, r3, #17
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e58:	4413      	add	r3, r2
 8003e5a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e6a:	4a37      	ldr	r2, [pc, #220]	; (8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7a:	e004      	b.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	4a33      	ldr	r2, [pc, #204]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e92:	d102      	bne.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e98:	e048      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4a2c      	ldr	r2, [pc, #176]	; (8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ea8:	e040      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003eaa:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d108      	bne.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ecc:	e01f      	b.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d109      	bne.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003eda:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003ee6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eec:	e00f      	b.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef8:	d11a      	bne.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d014      	beq.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003f06:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f0c:	e010      	b.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003f0e:	e00f      	b.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f10:	f7ff fe7c 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	0b9b      	lsrs	r3, r3, #14
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	3301      	adds	r3, #1
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003f30:	bf00      	nop
    }
  }
  return (frequency);
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3734      	adds	r7, #52	; 0x34
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd90      	pop	{r4, r7, pc}
 8003f3c:	0800714c 	.word	0x0800714c
 8003f40:	0800715c 	.word	0x0800715c
 8003f44:	40021000 	.word	0x40021000
 8003f48:	007a1200 	.word	0x007a1200
 8003f4c:	003d0900 	.word	0x003d0900
 8003f50:	aaaaaaab 	.word	0xaaaaaaab

08003f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e041      	b.n	8003fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd ffa8 	bl	8001ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 fa9e 	bl	80044d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e041      	b.n	8004088 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f839 	bl	8004090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f000 fa4f 	bl	80044d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x24>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e022      	b.n	800410e <HAL_TIM_PWM_Start+0x6a>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d109      	bne.n	80040e2 <HAL_TIM_PWM_Start+0x3e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	e015      	b.n	800410e <HAL_TIM_PWM_Start+0x6a>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d109      	bne.n	80040fc <HAL_TIM_PWM_Start+0x58>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e008      	b.n	800410e <HAL_TIM_PWM_Start+0x6a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e05e      	b.n	80041d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <HAL_TIM_PWM_Start+0x82>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004124:	e013      	b.n	800414e <HAL_TIM_PWM_Start+0xaa>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d104      	bne.n	8004136 <HAL_TIM_PWM_Start+0x92>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004134:	e00b      	b.n	800414e <HAL_TIM_PWM_Start+0xaa>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d104      	bne.n	8004146 <HAL_TIM_PWM_Start+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004144:	e003      	b.n	800414e <HAL_TIM_PWM_Start+0xaa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	6839      	ldr	r1, [r7, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fc3c 	bl	80049d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <HAL_TIM_PWM_Start+0x138>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d107      	bne.n	8004176 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <HAL_TIM_PWM_Start+0x138>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00e      	beq.n	800419e <HAL_TIM_PWM_Start+0xfa>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d009      	beq.n	800419e <HAL_TIM_PWM_Start+0xfa>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <HAL_TIM_PWM_Start+0x13c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_TIM_PWM_Start+0xfa>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <HAL_TIM_PWM_Start+0x140>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d111      	bne.n	80041c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b06      	cmp	r3, #6
 80041ae:	d010      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c0:	e007      	b.n	80041d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800

080041e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041fe:	2302      	movs	r3, #2
 8004200:	e0ac      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	f200 809f 	bhi.w	8004350 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800424d 	.word	0x0800424d
 800421c:	08004351 	.word	0x08004351
 8004220:	08004351 	.word	0x08004351
 8004224:	08004351 	.word	0x08004351
 8004228:	0800428d 	.word	0x0800428d
 800422c:	08004351 	.word	0x08004351
 8004230:	08004351 	.word	0x08004351
 8004234:	08004351 	.word	0x08004351
 8004238:	080042cf 	.word	0x080042cf
 800423c:	08004351 	.word	0x08004351
 8004240:	08004351 	.word	0x08004351
 8004244:	08004351 	.word	0x08004351
 8004248:	0800430f 	.word	0x0800430f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f9a0 	bl	8004598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0204 	bic.w	r2, r2, #4
 8004276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6999      	ldr	r1, [r3, #24]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	619a      	str	r2, [r3, #24]
      break;
 800428a:	e062      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f9e6 	bl	8004664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	619a      	str	r2, [r3, #24]
      break;
 80042cc:	e041      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fa2f 	bl	8004738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0208 	orr.w	r2, r2, #8
 80042e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0204 	bic.w	r2, r2, #4
 80042f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69d9      	ldr	r1, [r3, #28]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	61da      	str	r2, [r3, #28]
      break;
 800430c:	e021      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fa79 	bl	800480c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	021a      	lsls	r2, r3, #8
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	61da      	str	r2, [r3, #28]
      break;
 800434e:	e000      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIM_ConfigClockSource+0x18>
 8004378:	2302      	movs	r3, #2
 800437a:	e0a6      	b.n	80044ca <HAL_TIM_ConfigClockSource+0x166>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800439a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d067      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x120>
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d80b      	bhi.n	80043d0 <HAL_TIM_ConfigClockSource+0x6c>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d073      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0x140>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d802      	bhi.n	80043c6 <HAL_TIM_ConfigClockSource+0x62>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d06f      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043c4:	e078      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d06c      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0x140>
 80043ca:	2b30      	cmp	r3, #48	; 0x30
 80043cc:	d06a      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043ce:	e073      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043d0:	2b70      	cmp	r3, #112	; 0x70
 80043d2:	d00d      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x8c>
 80043d4:	2b70      	cmp	r3, #112	; 0x70
 80043d6:	d804      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x7e>
 80043d8:	2b50      	cmp	r3, #80	; 0x50
 80043da:	d033      	beq.n	8004444 <HAL_TIM_ConfigClockSource+0xe0>
 80043dc:	2b60      	cmp	r3, #96	; 0x60
 80043de:	d041      	beq.n	8004464 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043e0:	e06a      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	d066      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x152>
 80043e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ec:	d017      	beq.n	800441e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043ee:	e063      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f000 fac9 	bl	8004996 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004412:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	609a      	str	r2, [r3, #8]
      break;
 800441c:	e04c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6899      	ldr	r1, [r3, #8]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f000 fab2 	bl	8004996 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004440:	609a      	str	r2, [r3, #8]
      break;
 8004442:	e039      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6859      	ldr	r1, [r3, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	461a      	mov	r2, r3
 8004452:	f000 fa29 	bl	80048a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2150      	movs	r1, #80	; 0x50
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fa80 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004462:	e029      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	461a      	mov	r2, r3
 8004472:	f000 fa47 	bl	8004904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2160      	movs	r1, #96	; 0x60
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fa70 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004482:	e019      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	461a      	mov	r2, r3
 8004492:	f000 fa09 	bl	80048a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2140      	movs	r1, #64	; 0x40
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fa60 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 80044a2:	e009      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 fa57 	bl	8004962 <TIM_ITRx_SetConfig>
        break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a29      	ldr	r2, [pc, #164]	; (800458c <TIM_Base_SetConfig+0xb8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_Base_SetConfig+0x30>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d007      	beq.n	8004504 <TIM_Base_SetConfig+0x30>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a26      	ldr	r2, [pc, #152]	; (8004590 <TIM_Base_SetConfig+0xbc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_Base_SetConfig+0x30>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a25      	ldr	r2, [pc, #148]	; (8004594 <TIM_Base_SetConfig+0xc0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1c      	ldr	r2, [pc, #112]	; (800458c <TIM_Base_SetConfig+0xb8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0x62>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0x62>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a19      	ldr	r2, [pc, #100]	; (8004590 <TIM_Base_SetConfig+0xbc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0x62>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a18      	ldr	r2, [pc, #96]	; (8004594 <TIM_Base_SetConfig+0xc0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a07      	ldr	r2, [pc, #28]	; (800458c <TIM_Base_SetConfig+0xb8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	615a      	str	r2, [r3, #20]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800

08004598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f023 0201 	bic.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 0302 	bic.w	r3, r3, #2
 80045e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <TIM_OC1_SetConfig+0xc8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10c      	bne.n	800460e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0308 	bic.w	r3, r3, #8
 80045fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a13      	ldr	r2, [pc, #76]	; (8004660 <TIM_OC1_SetConfig+0xc8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d111      	bne.n	800463a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40012c00 	.word	0x40012c00

08004664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0210 	bic.w	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0320 	bic.w	r3, r3, #32
 80046ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <TIM_OC2_SetConfig+0xd0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10d      	bne.n	80046e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a14      	ldr	r2, [pc, #80]	; (8004734 <TIM_OC2_SetConfig+0xd0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d113      	bne.n	8004710 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	621a      	str	r2, [r3, #32]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40012c00 	.word	0x40012c00

08004738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <TIM_OC3_SetConfig+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10d      	bne.n	80047b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a14      	ldr	r2, [pc, #80]	; (8004808 <TIM_OC3_SetConfig+0xd0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d113      	bne.n	80047e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00

0800480c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <TIM_OC4_SetConfig+0x98>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d109      	bne.n	8004880 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 030a 	bic.w	r3, r3, #10
 80048e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f023 0210 	bic.w	r2, r3, #16
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800492e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	031b      	lsls	r3, r3, #12
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	f043 0307 	orr.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	021a      	lsls	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4313      	orrs	r3, r2
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	609a      	str	r2, [r3, #8]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2201      	movs	r2, #1
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1a      	ldr	r2, [r3, #32]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	401a      	ands	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e046      	b.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a80:	d009      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10c      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800

08004ad8 <__errno>:
 8004ad8:	4b01      	ldr	r3, [pc, #4]	; (8004ae0 <__errno+0x8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000010 	.word	0x20000010

08004ae4 <gmtime>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <gmtime+0x20>)
 8004ae8:	4605      	mov	r5, r0
 8004aea:	681c      	ldr	r4, [r3, #0]
 8004aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aee:	b91b      	cbnz	r3, 8004af8 <gmtime+0x14>
 8004af0:	2024      	movs	r0, #36	; 0x24
 8004af2:	f000 f8d9 	bl	8004ca8 <malloc>
 8004af6:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004af8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004afa:	4628      	mov	r0, r5
 8004afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b00:	f000 b802 	b.w	8004b08 <gmtime_r>
 8004b04:	20000010 	.word	0x20000010

08004b08 <gmtime_r>:
 8004b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b0c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8004b10:	460c      	mov	r4, r1
 8004b12:	4a4f      	ldr	r2, [pc, #316]	; (8004c50 <gmtime_r+0x148>)
 8004b14:	2300      	movs	r3, #0
 8004b16:	4640      	mov	r0, r8
 8004b18:	4649      	mov	r1, r9
 8004b1a:	f7fc f889 	bl	8000c30 <__aeabi_ldivmod>
 8004b1e:	4a4c      	ldr	r2, [pc, #304]	; (8004c50 <gmtime_r+0x148>)
 8004b20:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8004b24:	2300      	movs	r3, #0
 8004b26:	4640      	mov	r0, r8
 8004b28:	4649      	mov	r1, r9
 8004b2a:	f7fc f881 	bl	8000c30 <__aeabi_ldivmod>
 8004b2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	bfbc      	itt	lt
 8004b36:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8004b3a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8004b3e:	fb92 f3f1 	sdiv	r3, r2, r1
 8004b42:	fb01 2213 	mls	r2, r1, r3, r2
 8004b46:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	fb92 f3f1 	sdiv	r3, r2, r1
 8004b50:	fb01 2213 	mls	r2, r1, r3, r2
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	f04f 0207 	mov.w	r2, #7
 8004b5a:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 8004b5e:	bfb8      	it	lt
 8004b60:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	1ceb      	adds	r3, r5, #3
 8004b68:	fb93 f2f2 	sdiv	r2, r3, r2
 8004b6c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	bf48      	it	mi
 8004b74:	3307      	addmi	r3, #7
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	4836      	ldr	r0, [pc, #216]	; (8004c54 <gmtime_r+0x14c>)
 8004b7a:	61a3      	str	r3, [r4, #24]
 8004b7c:	bfbd      	ittte	lt
 8004b7e:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 8004b82:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8004b86:	fb93 f0f0 	sdivlt	r0, r3, r0
 8004b8a:	fb95 f0f0 	sdivge	r0, r5, r0
 8004b8e:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8004b92:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8004b96:	4b30      	ldr	r3, [pc, #192]	; (8004c58 <gmtime_r+0x150>)
 8004b98:	f240 166d 	movw	r6, #365	; 0x16d
 8004b9c:	fb03 5300 	mla	r3, r3, r0, r5
 8004ba0:	fbb3 f1f1 	udiv	r1, r3, r1
 8004ba4:	fbb3 f2f7 	udiv	r2, r3, r7
 8004ba8:	4419      	add	r1, r3
 8004baa:	1a89      	subs	r1, r1, r2
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <gmtime_r+0x154>)
 8004bae:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bb2:	1a8a      	subs	r2, r1, r2
 8004bb4:	f648 6194 	movw	r1, #36500	; 0x8e94
 8004bb8:	fbb2 f1f1 	udiv	r1, r2, r1
 8004bbc:	fbb2 f5f6 	udiv	r5, r2, r6
 8004bc0:	fbb2 f2f7 	udiv	r2, r2, r7
 8004bc4:	440b      	add	r3, r1
 8004bc6:	2199      	movs	r1, #153	; 0x99
 8004bc8:	1a9a      	subs	r2, r3, r2
 8004bca:	fb06 2315 	mls	r3, r6, r5, r2
 8004bce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004bd2:	3202      	adds	r2, #2
 8004bd4:	fbb2 f2f1 	udiv	r2, r2, r1
 8004bd8:	2705      	movs	r7, #5
 8004bda:	4351      	muls	r1, r2
 8004bdc:	3102      	adds	r1, #2
 8004bde:	fbb1 f1f7 	udiv	r1, r1, r7
 8004be2:	2a0a      	cmp	r2, #10
 8004be4:	f103 0601 	add.w	r6, r3, #1
 8004be8:	eba6 0101 	sub.w	r1, r6, r1
 8004bec:	bf34      	ite	cc
 8004bee:	2602      	movcc	r6, #2
 8004bf0:	f06f 0609 	mvncs.w	r6, #9
 8004bf4:	4416      	add	r6, r2
 8004bf6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004bfa:	fb02 5000 	mla	r0, r2, r0, r5
 8004bfe:	2e01      	cmp	r6, #1
 8004c00:	bf98      	it	ls
 8004c02:	3001      	addls	r0, #1
 8004c04:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8004c08:	d30c      	bcc.n	8004c24 <gmtime_r+0x11c>
 8004c0a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004c0e:	61e3      	str	r3, [r4, #28]
 8004c10:	2300      	movs	r3, #0
 8004c12:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8004c16:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8004c1a:	60e1      	str	r1, [r4, #12]
 8004c1c:	6223      	str	r3, [r4, #32]
 8004c1e:	4620      	mov	r0, r4
 8004c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c24:	07aa      	lsls	r2, r5, #30
 8004c26:	d105      	bne.n	8004c34 <gmtime_r+0x12c>
 8004c28:	2764      	movs	r7, #100	; 0x64
 8004c2a:	fbb5 f2f7 	udiv	r2, r5, r7
 8004c2e:	fb07 5212 	mls	r2, r7, r2, r5
 8004c32:	b95a      	cbnz	r2, 8004c4c <gmtime_r+0x144>
 8004c34:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8004c38:	fbb5 f2f7 	udiv	r2, r5, r7
 8004c3c:	fb07 5212 	mls	r2, r7, r2, r5
 8004c40:	fab2 f282 	clz	r2, r2
 8004c44:	0952      	lsrs	r2, r2, #5
 8004c46:	333b      	adds	r3, #59	; 0x3b
 8004c48:	4413      	add	r3, r2
 8004c4a:	e7e0      	b.n	8004c0e <gmtime_r+0x106>
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	e7fa      	b.n	8004c46 <gmtime_r+0x13e>
 8004c50:	00015180 	.word	0x00015180
 8004c54:	00023ab1 	.word	0x00023ab1
 8004c58:	fffdc54f 	.word	0xfffdc54f
 8004c5c:	00023ab0 	.word	0x00023ab0

08004c60 <__libc_init_array>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	2500      	movs	r5, #0
 8004c64:	4e0c      	ldr	r6, [pc, #48]	; (8004c98 <__libc_init_array+0x38>)
 8004c66:	4c0d      	ldr	r4, [pc, #52]	; (8004c9c <__libc_init_array+0x3c>)
 8004c68:	1ba4      	subs	r4, r4, r6
 8004c6a:	10a4      	asrs	r4, r4, #2
 8004c6c:	42a5      	cmp	r5, r4
 8004c6e:	d109      	bne.n	8004c84 <__libc_init_array+0x24>
 8004c70:	f002 f996 	bl	8006fa0 <_init>
 8004c74:	2500      	movs	r5, #0
 8004c76:	4e0a      	ldr	r6, [pc, #40]	; (8004ca0 <__libc_init_array+0x40>)
 8004c78:	4c0a      	ldr	r4, [pc, #40]	; (8004ca4 <__libc_init_array+0x44>)
 8004c7a:	1ba4      	subs	r4, r4, r6
 8004c7c:	10a4      	asrs	r4, r4, #2
 8004c7e:	42a5      	cmp	r5, r4
 8004c80:	d105      	bne.n	8004c8e <__libc_init_array+0x2e>
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c88:	4798      	blx	r3
 8004c8a:	3501      	adds	r5, #1
 8004c8c:	e7ee      	b.n	8004c6c <__libc_init_array+0xc>
 8004c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c92:	4798      	blx	r3
 8004c94:	3501      	adds	r5, #1
 8004c96:	e7f2      	b.n	8004c7e <__libc_init_array+0x1e>
 8004c98:	08007668 	.word	0x08007668
 8004c9c:	08007668 	.word	0x08007668
 8004ca0:	08007668 	.word	0x08007668
 8004ca4:	0800766c 	.word	0x0800766c

08004ca8 <malloc>:
 8004ca8:	4b02      	ldr	r3, [pc, #8]	; (8004cb4 <malloc+0xc>)
 8004caa:	4601      	mov	r1, r0
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	f000 b85f 	b.w	8004d70 <_malloc_r>
 8004cb2:	bf00      	nop
 8004cb4:	20000010 	.word	0x20000010

08004cb8 <free>:
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <free+0xc>)
 8004cba:	4601      	mov	r1, r0
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	f000 b80b 	b.w	8004cd8 <_free_r>
 8004cc2:	bf00      	nop
 8004cc4:	20000010 	.word	0x20000010

08004cc8 <memset>:
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4402      	add	r2, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <_free_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4605      	mov	r5, r0
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	d043      	beq.n	8004d68 <_free_r+0x90>
 8004ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce4:	1f0c      	subs	r4, r1, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bfb8      	it	lt
 8004cea:	18e4      	addlt	r4, r4, r3
 8004cec:	f001 f8ea 	bl	8005ec4 <__malloc_lock>
 8004cf0:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <_free_r+0x94>)
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	b933      	cbnz	r3, 8004d06 <_free_r+0x2e>
 8004cf8:	6063      	str	r3, [r4, #4]
 8004cfa:	6014      	str	r4, [r2, #0]
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d02:	f001 b8e0 	b.w	8005ec6 <__malloc_unlock>
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	d90b      	bls.n	8004d22 <_free_r+0x4a>
 8004d0a:	6821      	ldr	r1, [r4, #0]
 8004d0c:	1862      	adds	r2, r4, r1
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	bf01      	itttt	eq
 8004d12:	681a      	ldreq	r2, [r3, #0]
 8004d14:	685b      	ldreq	r3, [r3, #4]
 8004d16:	1852      	addeq	r2, r2, r1
 8004d18:	6022      	streq	r2, [r4, #0]
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	6004      	str	r4, [r0, #0]
 8004d1e:	e7ed      	b.n	8004cfc <_free_r+0x24>
 8004d20:	4613      	mov	r3, r2
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	b10a      	cbz	r2, 8004d2a <_free_r+0x52>
 8004d26:	42a2      	cmp	r2, r4
 8004d28:	d9fa      	bls.n	8004d20 <_free_r+0x48>
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	1858      	adds	r0, r3, r1
 8004d2e:	42a0      	cmp	r0, r4
 8004d30:	d10b      	bne.n	8004d4a <_free_r+0x72>
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	4401      	add	r1, r0
 8004d36:	1858      	adds	r0, r3, r1
 8004d38:	4282      	cmp	r2, r0
 8004d3a:	6019      	str	r1, [r3, #0]
 8004d3c:	d1de      	bne.n	8004cfc <_free_r+0x24>
 8004d3e:	6810      	ldr	r0, [r2, #0]
 8004d40:	6852      	ldr	r2, [r2, #4]
 8004d42:	4401      	add	r1, r0
 8004d44:	6019      	str	r1, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	e7d8      	b.n	8004cfc <_free_r+0x24>
 8004d4a:	d902      	bls.n	8004d52 <_free_r+0x7a>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	e7d4      	b.n	8004cfc <_free_r+0x24>
 8004d52:	6820      	ldr	r0, [r4, #0]
 8004d54:	1821      	adds	r1, r4, r0
 8004d56:	428a      	cmp	r2, r1
 8004d58:	bf01      	itttt	eq
 8004d5a:	6811      	ldreq	r1, [r2, #0]
 8004d5c:	6852      	ldreq	r2, [r2, #4]
 8004d5e:	1809      	addeq	r1, r1, r0
 8004d60:	6021      	streq	r1, [r4, #0]
 8004d62:	6062      	str	r2, [r4, #4]
 8004d64:	605c      	str	r4, [r3, #4]
 8004d66:	e7c9      	b.n	8004cfc <_free_r+0x24>
 8004d68:	bd38      	pop	{r3, r4, r5, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000026c 	.word	0x2000026c

08004d70 <_malloc_r>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	1ccd      	adds	r5, r1, #3
 8004d74:	f025 0503 	bic.w	r5, r5, #3
 8004d78:	3508      	adds	r5, #8
 8004d7a:	2d0c      	cmp	r5, #12
 8004d7c:	bf38      	it	cc
 8004d7e:	250c      	movcc	r5, #12
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	4606      	mov	r6, r0
 8004d84:	db01      	blt.n	8004d8a <_malloc_r+0x1a>
 8004d86:	42a9      	cmp	r1, r5
 8004d88:	d903      	bls.n	8004d92 <_malloc_r+0x22>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	2000      	movs	r0, #0
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
 8004d92:	f001 f897 	bl	8005ec4 <__malloc_lock>
 8004d96:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <_malloc_r+0xac>)
 8004d98:	6814      	ldr	r4, [r2, #0]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	b991      	cbnz	r1, 8004dc4 <_malloc_r+0x54>
 8004d9e:	4c20      	ldr	r4, [pc, #128]	; (8004e20 <_malloc_r+0xb0>)
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	b91b      	cbnz	r3, 8004dac <_malloc_r+0x3c>
 8004da4:	4630      	mov	r0, r6
 8004da6:	f000 f83d 	bl	8004e24 <_sbrk_r>
 8004daa:	6020      	str	r0, [r4, #0]
 8004dac:	4629      	mov	r1, r5
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f838 	bl	8004e24 <_sbrk_r>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d124      	bne.n	8004e02 <_malloc_r+0x92>
 8004db8:	230c      	movs	r3, #12
 8004dba:	4630      	mov	r0, r6
 8004dbc:	6033      	str	r3, [r6, #0]
 8004dbe:	f001 f882 	bl	8005ec6 <__malloc_unlock>
 8004dc2:	e7e4      	b.n	8004d8e <_malloc_r+0x1e>
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	1b5b      	subs	r3, r3, r5
 8004dc8:	d418      	bmi.n	8004dfc <_malloc_r+0x8c>
 8004dca:	2b0b      	cmp	r3, #11
 8004dcc:	d90f      	bls.n	8004dee <_malloc_r+0x7e>
 8004dce:	600b      	str	r3, [r1, #0]
 8004dd0:	18cc      	adds	r4, r1, r3
 8004dd2:	50cd      	str	r5, [r1, r3]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f001 f876 	bl	8005ec6 <__malloc_unlock>
 8004dda:	f104 000b 	add.w	r0, r4, #11
 8004dde:	1d23      	adds	r3, r4, #4
 8004de0:	f020 0007 	bic.w	r0, r0, #7
 8004de4:	1ac3      	subs	r3, r0, r3
 8004de6:	d0d3      	beq.n	8004d90 <_malloc_r+0x20>
 8004de8:	425a      	negs	r2, r3
 8004dea:	50e2      	str	r2, [r4, r3]
 8004dec:	e7d0      	b.n	8004d90 <_malloc_r+0x20>
 8004dee:	684b      	ldr	r3, [r1, #4]
 8004df0:	428c      	cmp	r4, r1
 8004df2:	bf16      	itet	ne
 8004df4:	6063      	strne	r3, [r4, #4]
 8004df6:	6013      	streq	r3, [r2, #0]
 8004df8:	460c      	movne	r4, r1
 8004dfa:	e7eb      	b.n	8004dd4 <_malloc_r+0x64>
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	6849      	ldr	r1, [r1, #4]
 8004e00:	e7cc      	b.n	8004d9c <_malloc_r+0x2c>
 8004e02:	1cc4      	adds	r4, r0, #3
 8004e04:	f024 0403 	bic.w	r4, r4, #3
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d005      	beq.n	8004e18 <_malloc_r+0xa8>
 8004e0c:	1a21      	subs	r1, r4, r0
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f000 f808 	bl	8004e24 <_sbrk_r>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d0cf      	beq.n	8004db8 <_malloc_r+0x48>
 8004e18:	6025      	str	r5, [r4, #0]
 8004e1a:	e7db      	b.n	8004dd4 <_malloc_r+0x64>
 8004e1c:	2000026c 	.word	0x2000026c
 8004e20:	20000270 	.word	0x20000270

08004e24 <_sbrk_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	2300      	movs	r3, #0
 8004e28:	4c05      	ldr	r4, [pc, #20]	; (8004e40 <_sbrk_r+0x1c>)
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	f7fd f8ce 	bl	8001fd0 <_sbrk>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_sbrk_r+0x1a>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_sbrk_r+0x1a>
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000360 	.word	0x20000360

08004e44 <iso_year_adjust>:
 8004e44:	6942      	ldr	r2, [r0, #20]
 8004e46:	f240 736c 	movw	r3, #1900	; 0x76c
 8004e4a:	2a00      	cmp	r2, #0
 8004e4c:	bfa8      	it	ge
 8004e4e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8004e52:	441a      	add	r2, r3
 8004e54:	0793      	lsls	r3, r2, #30
 8004e56:	d105      	bne.n	8004e64 <iso_year_adjust+0x20>
 8004e58:	2164      	movs	r1, #100	; 0x64
 8004e5a:	fb92 f3f1 	sdiv	r3, r2, r1
 8004e5e:	fb01 2313 	mls	r3, r1, r3, r2
 8004e62:	b9d3      	cbnz	r3, 8004e9a <iso_year_adjust+0x56>
 8004e64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004e68:	fb92 f3f1 	sdiv	r3, r2, r1
 8004e6c:	fb01 2313 	mls	r3, r1, r3, r2
 8004e70:	fab3 f283 	clz	r2, r3
 8004e74:	0952      	lsrs	r2, r2, #5
 8004e76:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004e80:	4413      	add	r3, r2
 8004e82:	2b21      	cmp	r3, #33	; 0x21
 8004e84:	dc11      	bgt.n	8004eaa <iso_year_adjust+0x66>
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	da30      	bge.n	8004eec <iso_year_adjust+0xa8>
 8004e8a:	2b0d      	cmp	r3, #13
 8004e8c:	dc07      	bgt.n	8004e9e <iso_year_adjust+0x5a>
 8004e8e:	2b0a      	cmp	r3, #10
 8004e90:	da2c      	bge.n	8004eec <iso_year_adjust+0xa8>
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d92a      	bls.n	8004eec <iso_year_adjust+0xa8>
 8004e96:	2000      	movs	r0, #0
 8004e98:	4770      	bx	lr
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	e7eb      	b.n	8004e76 <iso_year_adjust+0x32>
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	dbf9      	blt.n	8004e96 <iso_year_adjust+0x52>
 8004ea2:	2b11      	cmp	r3, #17
 8004ea4:	dd22      	ble.n	8004eec <iso_year_adjust+0xa8>
 8004ea6:	3b1c      	subs	r3, #28
 8004ea8:	e7f3      	b.n	8004e92 <iso_year_adjust+0x4e>
 8004eaa:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	dc0f      	bgt.n	8004ed2 <iso_year_adjust+0x8e>
 8004eb2:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	da09      	bge.n	8004ece <iso_year_adjust+0x8a>
 8004eba:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d005      	beq.n	8004ece <iso_year_adjust+0x8a>
 8004ec2:	dbe8      	blt.n	8004e96 <iso_year_adjust+0x52>
 8004ec4:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8004ec8:	3b12      	subs	r3, #18
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d8e3      	bhi.n	8004e96 <iso_year_adjust+0x52>
 8004ece:	2001      	movs	r0, #1
 8004ed0:	4770      	bx	lr
 8004ed2:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d0f9      	beq.n	8004ece <iso_year_adjust+0x8a>
 8004eda:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d0f5      	beq.n	8004ece <iso_year_adjust+0x8a>
 8004ee2:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d1d5      	bne.n	8004e96 <iso_year_adjust+0x52>
 8004eea:	e7f0      	b.n	8004ece <iso_year_adjust+0x8a>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	4770      	bx	lr
	...

08004ef4 <__strftime>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	461d      	mov	r5, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	4607      	mov	r7, r0
 8004efe:	460e      	mov	r6, r1
 8004f00:	461c      	mov	r4, r3
 8004f02:	b091      	sub	sp, #68	; 0x44
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	f101 3bff 	add.w	fp, r1, #4294967295
 8004f0a:	7813      	ldrb	r3, [r2, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 84e2 	beq.w	80058d6 <__strftime+0x9e2>
 8004f12:	2b25      	cmp	r3, #37	; 0x25
 8004f14:	d11f      	bne.n	8004f56 <__strftime+0x62>
 8004f16:	f892 a001 	ldrb.w	sl, [r2, #1]
 8004f1a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8004f1e:	d023      	beq.n	8004f68 <__strftime+0x74>
 8004f20:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8004f24:	d020      	beq.n	8004f68 <__strftime+0x74>
 8004f26:	f04f 0a00 	mov.w	sl, #0
 8004f2a:	f102 0801 	add.w	r8, r2, #1
 8004f2e:	f898 3000 	ldrb.w	r3, [r8]
 8004f32:	3b31      	subs	r3, #49	; 0x31
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d81a      	bhi.n	8004f6e <__strftime+0x7a>
 8004f38:	4640      	mov	r0, r8
 8004f3a:	220a      	movs	r2, #10
 8004f3c:	a908      	add	r1, sp, #32
 8004f3e:	f000 fd85 	bl	8005a4c <strtoul>
 8004f42:	4681      	mov	r9, r0
 8004f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f48:	f898 3000 	ldrb.w	r3, [r8]
 8004f4c:	2b45      	cmp	r3, #69	; 0x45
 8004f4e:	d111      	bne.n	8004f74 <__strftime+0x80>
 8004f50:	f108 0801 	add.w	r8, r8, #1
 8004f54:	e010      	b.n	8004f78 <__strftime+0x84>
 8004f56:	45a3      	cmp	fp, r4
 8004f58:	d802      	bhi.n	8004f60 <__strftime+0x6c>
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	f000 bcbe 	b.w	80058dc <__strftime+0x9e8>
 8004f60:	553b      	strb	r3, [r7, r4]
 8004f62:	3201      	adds	r2, #1
 8004f64:	3401      	adds	r4, #1
 8004f66:	e7d0      	b.n	8004f0a <__strftime+0x16>
 8004f68:	f102 0802 	add.w	r8, r2, #2
 8004f6c:	e7df      	b.n	8004f2e <__strftime+0x3a>
 8004f6e:	f04f 0900 	mov.w	r9, #0
 8004f72:	e7e9      	b.n	8004f48 <__strftime+0x54>
 8004f74:	2b4f      	cmp	r3, #79	; 0x4f
 8004f76:	d0eb      	beq.n	8004f50 <__strftime+0x5c>
 8004f78:	f898 1000 	ldrb.w	r1, [r8]
 8004f7c:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8004f80:	2b55      	cmp	r3, #85	; 0x55
 8004f82:	d8ea      	bhi.n	8004f5a <__strftime+0x66>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <__strftime+0x98>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	080058cd 	.word	0x080058cd
 8004f90:	08004f5b 	.word	0x08004f5b
 8004f94:	08004f5b 	.word	0x08004f5b
 8004f98:	08004f5b 	.word	0x08004f5b
 8004f9c:	08004f5b 	.word	0x08004f5b
 8004fa0:	08004f5b 	.word	0x08004f5b
 8004fa4:	08004f5b 	.word	0x08004f5b
 8004fa8:	08004f5b 	.word	0x08004f5b
 8004fac:	08004f5b 	.word	0x08004f5b
 8004fb0:	08004f5b 	.word	0x08004f5b
 8004fb4:	08004f5b 	.word	0x08004f5b
 8004fb8:	08004f5b 	.word	0x08004f5b
 8004fbc:	08004f5b 	.word	0x08004f5b
 8004fc0:	08004f5b 	.word	0x08004f5b
 8004fc4:	08004f5b 	.word	0x08004f5b
 8004fc8:	08004f5b 	.word	0x08004f5b
 8004fcc:	08004f5b 	.word	0x08004f5b
 8004fd0:	08004f5b 	.word	0x08004f5b
 8004fd4:	08004f5b 	.word	0x08004f5b
 8004fd8:	08004f5b 	.word	0x08004f5b
 8004fdc:	08004f5b 	.word	0x08004f5b
 8004fe0:	08004f5b 	.word	0x08004f5b
 8004fe4:	08004f5b 	.word	0x08004f5b
 8004fe8:	08004f5b 	.word	0x08004f5b
 8004fec:	08004f5b 	.word	0x08004f5b
 8004ff0:	08004f5b 	.word	0x08004f5b
 8004ff4:	08004f5b 	.word	0x08004f5b
 8004ff8:	08004f5b 	.word	0x08004f5b
 8004ffc:	08005121 	.word	0x08005121
 8005000:	08005175 	.word	0x08005175
 8005004:	080051e5 	.word	0x080051e5
 8005008:	0800527f 	.word	0x0800527f
 800500c:	08004f5b 	.word	0x08004f5b
 8005010:	080052cd 	.word	0x080052cd
 8005014:	080053bd 	.word	0x080053bd
 8005018:	080054d5 	.word	0x080054d5
 800501c:	080054e3 	.word	0x080054e3
 8005020:	08004f5b 	.word	0x08004f5b
 8005024:	08004f5b 	.word	0x08004f5b
 8005028:	08004f5b 	.word	0x08004f5b
 800502c:	08005513 	.word	0x08005513
 8005030:	08004f5b 	.word	0x08004f5b
 8005034:	08004f5b 	.word	0x08004f5b
 8005038:	08005525 	.word	0x08005525
 800503c:	08004f5b 	.word	0x08004f5b
 8005040:	08005583 	.word	0x08005583
 8005044:	0800569b 	.word	0x0800569b
 8005048:	080056a9 	.word	0x080056a9
 800504c:	080056f9 	.word	0x080056f9
 8005050:	08005709 	.word	0x08005709
 8005054:	08005779 	.word	0x08005779
 8005058:	080051dd 	.word	0x080051dd
 800505c:	080057b3 	.word	0x080057b3
 8005060:	08005879 	.word	0x08005879
 8005064:	08004f5b 	.word	0x08004f5b
 8005068:	08004f5b 	.word	0x08004f5b
 800506c:	08004f5b 	.word	0x08004f5b
 8005070:	08004f5b 	.word	0x08004f5b
 8005074:	08004f5b 	.word	0x08004f5b
 8005078:	08004f5b 	.word	0x08004f5b
 800507c:	080050e5 	.word	0x080050e5
 8005080:	0800514d 	.word	0x0800514d
 8005084:	0800519f 	.word	0x0800519f
 8005088:	0800525b 	.word	0x0800525b
 800508c:	0800525b 	.word	0x0800525b
 8005090:	08004f5b 	.word	0x08004f5b
 8005094:	08005325 	.word	0x08005325
 8005098:	0800514d 	.word	0x0800514d
 800509c:	08004f5b 	.word	0x08004f5b
 80050a0:	08005505 	.word	0x08005505
 80050a4:	080054d5 	.word	0x080054d5
 80050a8:	080054e3 	.word	0x080054e3
 80050ac:	0800550d 	.word	0x0800550d
 80050b0:	08005517 	.word	0x08005517
 80050b4:	08004f5b 	.word	0x08004f5b
 80050b8:	08005525 	.word	0x08005525
 80050bc:	08004f5b 	.word	0x08004f5b
 80050c0:	080051cd 	.word	0x080051cd
 80050c4:	08005595 	.word	0x08005595
 80050c8:	0800569f 	.word	0x0800569f
 80050cc:	080056e1 	.word	0x080056e1
 80050d0:	08004f5b 	.word	0x08004f5b
 80050d4:	0800576d 	.word	0x0800576d
 80050d8:	080051d5 	.word	0x080051d5
 80050dc:	08005791 	.word	0x08005791
 80050e0:	08005807 	.word	0x08005807
 80050e4:	69ab      	ldr	r3, [r5, #24]
 80050e6:	4aa8      	ldr	r2, [pc, #672]	; (8005388 <__strftime+0x494>)
 80050e8:	3318      	adds	r3, #24
 80050ea:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80050ee:	4648      	mov	r0, r9
 80050f0:	f7fb f82e 	bl	8000150 <strlen>
 80050f4:	eba9 0904 	sub.w	r9, r9, r4
 80050f8:	4420      	add	r0, r4
 80050fa:	42a0      	cmp	r0, r4
 80050fc:	d108      	bne.n	8005110 <__strftime+0x21c>
 80050fe:	4604      	mov	r4, r0
 8005100:	f898 3000 	ldrb.w	r3, [r8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 83e6 	beq.w	80058d6 <__strftime+0x9e2>
 800510a:	f108 0201 	add.w	r2, r8, #1
 800510e:	e6fc      	b.n	8004f0a <__strftime+0x16>
 8005110:	45a3      	cmp	fp, r4
 8005112:	f67f af22 	bls.w	8004f5a <__strftime+0x66>
 8005116:	f819 3004 	ldrb.w	r3, [r9, r4]
 800511a:	553b      	strb	r3, [r7, r4]
 800511c:	3401      	adds	r4, #1
 800511e:	e7ec      	b.n	80050fa <__strftime+0x206>
 8005120:	69aa      	ldr	r2, [r5, #24]
 8005122:	4b99      	ldr	r3, [pc, #612]	; (8005388 <__strftime+0x494>)
 8005124:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005128:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800512c:	4648      	mov	r0, r9
 800512e:	f7fb f80f 	bl	8000150 <strlen>
 8005132:	eba9 0904 	sub.w	r9, r9, r4
 8005136:	4420      	add	r0, r4
 8005138:	42a0      	cmp	r0, r4
 800513a:	d0e0      	beq.n	80050fe <__strftime+0x20a>
 800513c:	45a3      	cmp	fp, r4
 800513e:	f67f af0c 	bls.w	8004f5a <__strftime+0x66>
 8005142:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005146:	553b      	strb	r3, [r7, r4]
 8005148:	3401      	adds	r4, #1
 800514a:	e7f5      	b.n	8005138 <__strftime+0x244>
 800514c:	692a      	ldr	r2, [r5, #16]
 800514e:	4b8e      	ldr	r3, [pc, #568]	; (8005388 <__strftime+0x494>)
 8005150:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8005154:	4648      	mov	r0, r9
 8005156:	f7fa fffb 	bl	8000150 <strlen>
 800515a:	eba9 0904 	sub.w	r9, r9, r4
 800515e:	4420      	add	r0, r4
 8005160:	42a0      	cmp	r0, r4
 8005162:	d0cc      	beq.n	80050fe <__strftime+0x20a>
 8005164:	45a3      	cmp	fp, r4
 8005166:	f67f aef8 	bls.w	8004f5a <__strftime+0x66>
 800516a:	f819 3004 	ldrb.w	r3, [r9, r4]
 800516e:	553b      	strb	r3, [r7, r4]
 8005170:	3401      	adds	r4, #1
 8005172:	e7f5      	b.n	8005160 <__strftime+0x26c>
 8005174:	692b      	ldr	r3, [r5, #16]
 8005176:	4a84      	ldr	r2, [pc, #528]	; (8005388 <__strftime+0x494>)
 8005178:	330c      	adds	r3, #12
 800517a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800517e:	4648      	mov	r0, r9
 8005180:	f7fa ffe6 	bl	8000150 <strlen>
 8005184:	eba9 0904 	sub.w	r9, r9, r4
 8005188:	4420      	add	r0, r4
 800518a:	42a0      	cmp	r0, r4
 800518c:	d0b7      	beq.n	80050fe <__strftime+0x20a>
 800518e:	45a3      	cmp	fp, r4
 8005190:	f67f aee3 	bls.w	8004f5a <__strftime+0x66>
 8005194:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005198:	553b      	strb	r3, [r7, r4]
 800519a:	3401      	adds	r4, #1
 800519c:	e7f5      	b.n	800518a <__strftime+0x296>
 800519e:	4b7a      	ldr	r3, [pc, #488]	; (8005388 <__strftime+0x494>)
 80051a0:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80051a4:	4648      	mov	r0, r9
 80051a6:	f7fa ffd3 	bl	8000150 <strlen>
 80051aa:	f899 3000 	ldrb.w	r3, [r9]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0a6      	beq.n	8005100 <__strftime+0x20c>
 80051b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80051b4:	464a      	mov	r2, r9
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	462b      	mov	r3, r5
 80051ba:	1b31      	subs	r1, r6, r4
 80051bc:	1938      	adds	r0, r7, r4
 80051be:	f7ff fe99 	bl	8004ef4 <__strftime>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f77f aec9 	ble.w	8004f5a <__strftime+0x66>
 80051c8:	4404      	add	r4, r0
 80051ca:	e799      	b.n	8005100 <__strftime+0x20c>
 80051cc:	4b6e      	ldr	r3, [pc, #440]	; (8005388 <__strftime+0x494>)
 80051ce:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80051d2:	e7e7      	b.n	80051a4 <__strftime+0x2b0>
 80051d4:	4b6c      	ldr	r3, [pc, #432]	; (8005388 <__strftime+0x494>)
 80051d6:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80051da:	e7e3      	b.n	80051a4 <__strftime+0x2b0>
 80051dc:	4b6a      	ldr	r3, [pc, #424]	; (8005388 <__strftime+0x494>)
 80051de:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80051e2:	e7df      	b.n	80051a4 <__strftime+0x2b0>
 80051e4:	4b69      	ldr	r3, [pc, #420]	; (800538c <__strftime+0x498>)
 80051e6:	6969      	ldr	r1, [r5, #20]
 80051e8:	4299      	cmp	r1, r3
 80051ea:	bfac      	ite	ge
 80051ec:	2300      	movge	r3, #0
 80051ee:	2301      	movlt	r3, #1
 80051f0:	2900      	cmp	r1, #0
 80051f2:	9304      	str	r3, [sp, #16]
 80051f4:	db10      	blt.n	8005218 <__strftime+0x324>
 80051f6:	2064      	movs	r0, #100	; 0x64
 80051f8:	fb91 f0f0 	sdiv	r0, r1, r0
 80051fc:	3013      	adds	r0, #19
 80051fe:	f1ba 0f00 	cmp.w	sl, #0
 8005202:	d013      	beq.n	800522c <__strftime+0x338>
 8005204:	2863      	cmp	r0, #99	; 0x63
 8005206:	dd26      	ble.n	8005256 <__strftime+0x362>
 8005208:	4a61      	ldr	r2, [pc, #388]	; (8005390 <__strftime+0x49c>)
 800520a:	4b62      	ldr	r3, [pc, #392]	; (8005394 <__strftime+0x4a0>)
 800520c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005210:	bf18      	it	ne
 8005212:	4613      	movne	r3, r2
 8005214:	4a60      	ldr	r2, [pc, #384]	; (8005398 <__strftime+0x4a4>)
 8005216:	e00b      	b.n	8005230 <__strftime+0x33c>
 8005218:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800521c:	9105      	str	r1, [sp, #20]
 800521e:	f000 fdcb 	bl	8005db8 <abs>
 8005222:	2364      	movs	r3, #100	; 0x64
 8005224:	9905      	ldr	r1, [sp, #20]
 8005226:	fb90 f0f3 	sdiv	r0, r0, r3
 800522a:	e7e8      	b.n	80051fe <__strftime+0x30a>
 800522c:	4b58      	ldr	r3, [pc, #352]	; (8005390 <__strftime+0x49c>)
 800522e:	4a5b      	ldr	r2, [pc, #364]	; (800539c <__strftime+0x4a8>)
 8005230:	9001      	str	r0, [sp, #4]
 8005232:	9804      	ldr	r0, [sp, #16]
 8005234:	f8df c154 	ldr.w	ip, [pc, #340]	; 800538c <__strftime+0x498>
 8005238:	f1b9 0f02 	cmp.w	r9, #2
 800523c:	bf2c      	ite	cs
 800523e:	ebc0 0009 	rsbcs	r0, r0, r9
 8005242:	f1c0 0002 	rsbcc	r0, r0, #2
 8005246:	9000      	str	r0, [sp, #0]
 8005248:	4855      	ldr	r0, [pc, #340]	; (80053a0 <__strftime+0x4ac>)
 800524a:	4561      	cmp	r1, ip
 800524c:	bfb8      	it	lt
 800524e:	4603      	movlt	r3, r0
 8005250:	1b31      	subs	r1, r6, r4
 8005252:	1938      	adds	r0, r7, r4
 8005254:	e029      	b.n	80052aa <__strftime+0x3b6>
 8005256:	4b4e      	ldr	r3, [pc, #312]	; (8005390 <__strftime+0x49c>)
 8005258:	e7dc      	b.n	8005214 <__strftime+0x320>
 800525a:	4852      	ldr	r0, [pc, #328]	; (80053a4 <__strftime+0x4b0>)
 800525c:	4a52      	ldr	r2, [pc, #328]	; (80053a8 <__strftime+0x4b4>)
 800525e:	68eb      	ldr	r3, [r5, #12]
 8005260:	2964      	cmp	r1, #100	; 0x64
 8005262:	bf18      	it	ne
 8005264:	4602      	movne	r2, r0
 8005266:	1b31      	subs	r1, r6, r4
 8005268:	1938      	adds	r0, r7, r4
 800526a:	f001 f907 	bl	800647c <sniprintf>
 800526e:	2800      	cmp	r0, #0
 8005270:	f6ff ae73 	blt.w	8004f5a <__strftime+0x66>
 8005274:	4404      	add	r4, r0
 8005276:	42a6      	cmp	r6, r4
 8005278:	f63f af42 	bhi.w	8005100 <__strftime+0x20c>
 800527c:	e66d      	b.n	8004f5a <__strftime+0x66>
 800527e:	6968      	ldr	r0, [r5, #20]
 8005280:	692b      	ldr	r3, [r5, #16]
 8005282:	2800      	cmp	r0, #0
 8005284:	eb07 0904 	add.w	r9, r7, r4
 8005288:	eba6 0a04 	sub.w	sl, r6, r4
 800528c:	f103 0301 	add.w	r3, r3, #1
 8005290:	68ea      	ldr	r2, [r5, #12]
 8005292:	db0d      	blt.n	80052b0 <__strftime+0x3bc>
 8005294:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005298:	fb90 f1fc 	sdiv	r1, r0, ip
 800529c:	fb0c 0011 	mls	r0, ip, r1, r0
 80052a0:	e9cd 2000 	strd	r2, r0, [sp]
 80052a4:	4651      	mov	r1, sl
 80052a6:	4648      	mov	r0, r9
 80052a8:	4a40      	ldr	r2, [pc, #256]	; (80053ac <__strftime+0x4b8>)
 80052aa:	f001 f8e7 	bl	800647c <sniprintf>
 80052ae:	e7de      	b.n	800526e <__strftime+0x37a>
 80052b0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80052b4:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80052b8:	f000 fd7e 	bl	8005db8 <abs>
 80052bc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80052c0:	2164      	movs	r1, #100	; 0x64
 80052c2:	fb90 fcf1 	sdiv	ip, r0, r1
 80052c6:	fb0c 0011 	mls	r0, ip, r1, r0
 80052ca:	e7e9      	b.n	80052a0 <__strftime+0x3ac>
 80052cc:	2325      	movs	r3, #37	; 0x25
 80052ce:	f88d 3020 	strb.w	r3, [sp, #32]
 80052d2:	f1ba 0f00 	cmp.w	sl, #0
 80052d6:	d013      	beq.n	8005300 <__strftime+0x40c>
 80052d8:	f1b9 0f06 	cmp.w	r9, #6
 80052dc:	bf38      	it	cc
 80052de:	f04f 0906 	movcc.w	r9, #6
 80052e2:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 80052e6:	f1b9 0306 	subs.w	r3, r9, #6
 80052ea:	d10f      	bne.n	800530c <__strftime+0x418>
 80052ec:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80052f0:	492f      	ldr	r1, [pc, #188]	; (80053b0 <__strftime+0x4bc>)
 80052f2:	f001 f923 	bl	800653c <strcpy>
 80052f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80052f8:	aa08      	add	r2, sp, #32
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	462b      	mov	r3, r5
 80052fe:	e75c      	b.n	80051ba <__strftime+0x2c6>
 8005300:	232b      	movs	r3, #43	; 0x2b
 8005302:	f04f 090a 	mov.w	r9, #10
 8005306:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800530a:	e7ec      	b.n	80052e6 <__strftime+0x3f2>
 800530c:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <__strftime+0x4c0>)
 800530e:	211e      	movs	r1, #30
 8005310:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8005314:	f001 f8b2 	bl	800647c <sniprintf>
 8005318:	2800      	cmp	r0, #0
 800531a:	dde7      	ble.n	80052ec <__strftime+0x3f8>
 800531c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8005320:	4418      	add	r0, r3
 8005322:	e7e5      	b.n	80052f0 <__strftime+0x3fc>
 8005324:	4628      	mov	r0, r5
 8005326:	f7ff fd8d 	bl	8004e44 <iso_year_adjust>
 800532a:	4681      	mov	r9, r0
 800532c:	6968      	ldr	r0, [r5, #20]
 800532e:	2800      	cmp	r0, #0
 8005330:	db1a      	blt.n	8005368 <__strftime+0x474>
 8005332:	2264      	movs	r2, #100	; 0x64
 8005334:	fb90 f3f2 	sdiv	r3, r0, r2
 8005338:	f1b9 0f00 	cmp.w	r9, #0
 800533c:	fb02 0013 	mls	r0, r2, r3, r0
 8005340:	da1a      	bge.n	8005378 <__strftime+0x484>
 8005342:	696a      	ldr	r2, [r5, #20]
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <__strftime+0x4c4>)
 8005346:	429a      	cmp	r2, r3
 8005348:	bfb8      	it	lt
 800534a:	f04f 0901 	movlt.w	r9, #1
 800534e:	2364      	movs	r3, #100	; 0x64
 8005350:	4481      	add	r9, r0
 8005352:	fb99 f0f3 	sdiv	r0, r9, r3
 8005356:	fb03 9910 	mls	r9, r3, r0, r9
 800535a:	4499      	add	r9, r3
 800535c:	fb99 f2f3 	sdiv	r2, r9, r3
 8005360:	fb03 9312 	mls	r3, r3, r2, r9
 8005364:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <__strftime+0x4b4>)
 8005366:	e77e      	b.n	8005266 <__strftime+0x372>
 8005368:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800536c:	f000 fd24 	bl	8005db8 <abs>
 8005370:	2364      	movs	r3, #100	; 0x64
 8005372:	fb90 f2f3 	sdiv	r2, r0, r3
 8005376:	e7df      	b.n	8005338 <__strftime+0x444>
 8005378:	d0e9      	beq.n	800534e <__strftime+0x45a>
 800537a:	696a      	ldr	r2, [r5, #20]
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <__strftime+0x498>)
 800537e:	429a      	cmp	r2, r3
 8005380:	bfb8      	it	lt
 8005382:	f04f 39ff 	movlt.w	r9, #4294967295
 8005386:	e7e2      	b.n	800534e <__strftime+0x45a>
 8005388:	080071e0 	.word	0x080071e0
 800538c:	fffff894 	.word	0xfffff894
 8005390:	08007452 	.word	0x08007452
 8005394:	08007193 	.word	0x08007193
 8005398:	0800718b 	.word	0x0800718b
 800539c:	08007184 	.word	0x08007184
 80053a0:	080075f7 	.word	0x080075f7
 80053a4:	08007195 	.word	0x08007195
 80053a8:	080071a3 	.word	0x080071a3
 80053ac:	08007199 	.word	0x08007199
 80053b0:	080071ac 	.word	0x080071ac
 80053b4:	080071a8 	.word	0x080071a8
 80053b8:	fffff895 	.word	0xfffff895
 80053bc:	696b      	ldr	r3, [r5, #20]
 80053be:	4628      	mov	r0, r5
 80053c0:	9304      	str	r3, [sp, #16]
 80053c2:	9a04      	ldr	r2, [sp, #16]
 80053c4:	4bbc      	ldr	r3, [pc, #752]	; (80056b8 <__strftime+0x7c4>)
 80053c6:	429a      	cmp	r2, r3
 80053c8:	bfac      	ite	ge
 80053ca:	2300      	movge	r3, #0
 80053cc:	2301      	movlt	r3, #1
 80053ce:	9305      	str	r3, [sp, #20]
 80053d0:	f7ff fd38 	bl	8004e44 <iso_year_adjust>
 80053d4:	9a04      	ldr	r2, [sp, #16]
 80053d6:	4603      	mov	r3, r0
 80053d8:	2a00      	cmp	r2, #0
 80053da:	db3a      	blt.n	8005452 <__strftime+0x55e>
 80053dc:	2264      	movs	r2, #100	; 0x64
 80053de:	9904      	ldr	r1, [sp, #16]
 80053e0:	fb91 f2f2 	sdiv	r2, r1, r2
 80053e4:	3213      	adds	r2, #19
 80053e6:	6968      	ldr	r0, [r5, #20]
 80053e8:	2800      	cmp	r0, #0
 80053ea:	db3d      	blt.n	8005468 <__strftime+0x574>
 80053ec:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80053f0:	fb90 fefc 	sdiv	lr, r0, ip
 80053f4:	fb0c 001e 	mls	r0, ip, lr, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da44      	bge.n	8005486 <__strftime+0x592>
 80053fc:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80056dc <__strftime+0x7e8>
 8005400:	6969      	ldr	r1, [r5, #20]
 8005402:	4561      	cmp	r1, ip
 8005404:	da01      	bge.n	800540a <__strftime+0x516>
 8005406:	2301      	movs	r3, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	4403      	add	r3, r0
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	d146      	bne.n	800549e <__strftime+0x5aa>
 8005410:	2363      	movs	r3, #99	; 0x63
 8005412:	3a01      	subs	r2, #1
 8005414:	2064      	movs	r0, #100	; 0x64
 8005416:	fb00 3202 	mla	r2, r0, r2, r3
 800541a:	9b05      	ldr	r3, [sp, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d043      	beq.n	80054a8 <__strftime+0x5b4>
 8005420:	232d      	movs	r3, #45	; 0x2d
 8005422:	f88d 3020 	strb.w	r3, [sp, #32]
 8005426:	f1b9 0f00 	cmp.w	r9, #0
 800542a:	d001      	beq.n	8005430 <__strftime+0x53c>
 800542c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005430:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8005434:	2125      	movs	r1, #37	; 0x25
 8005436:	7019      	strb	r1, [r3, #0]
 8005438:	f1ba 0f00 	cmp.w	sl, #0
 800543c:	d144      	bne.n	80054c8 <__strftime+0x5d4>
 800543e:	1c58      	adds	r0, r3, #1
 8005440:	499e      	ldr	r1, [pc, #632]	; (80056bc <__strftime+0x7c8>)
 8005442:	9204      	str	r2, [sp, #16]
 8005444:	f001 f87a 	bl	800653c <strcpy>
 8005448:	9a04      	ldr	r2, [sp, #16]
 800544a:	9200      	str	r2, [sp, #0]
 800544c:	464b      	mov	r3, r9
 800544e:	aa08      	add	r2, sp, #32
 8005450:	e09b      	b.n	800558a <__strftime+0x696>
 8005452:	9b04      	ldr	r3, [sp, #16]
 8005454:	9006      	str	r0, [sp, #24]
 8005456:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 800545a:	f000 fcad 	bl	8005db8 <abs>
 800545e:	2264      	movs	r2, #100	; 0x64
 8005460:	9b06      	ldr	r3, [sp, #24]
 8005462:	fb90 f2f2 	sdiv	r2, r0, r2
 8005466:	e7be      	b.n	80053e6 <__strftime+0x4f2>
 8005468:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800546c:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8005470:	f000 fca2 	bl	8005db8 <abs>
 8005474:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005478:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800547c:	fb90 fefc 	sdiv	lr, r0, ip
 8005480:	fb0e 001c 	mls	r0, lr, ip, r0
 8005484:	e7b8      	b.n	80053f8 <__strftime+0x504>
 8005486:	d0c0      	beq.n	800540a <__strftime+0x516>
 8005488:	9904      	ldr	r1, [sp, #16]
 800548a:	f8df c22c 	ldr.w	ip, [pc, #556]	; 80056b8 <__strftime+0x7c4>
 800548e:	4561      	cmp	r1, ip
 8005490:	bfae      	itee	ge
 8005492:	2100      	movge	r1, #0
 8005494:	2101      	movlt	r1, #1
 8005496:	f04f 33ff 	movlt.w	r3, #4294967295
 800549a:	9105      	str	r1, [sp, #20]
 800549c:	e7b5      	b.n	800540a <__strftime+0x516>
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	bf04      	itt	eq
 80054a2:	3201      	addeq	r2, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	e7b5      	b.n	8005414 <__strftime+0x520>
 80054a8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80054ac:	d110      	bne.n	80054d0 <__strftime+0x5dc>
 80054ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d90c      	bls.n	80054d0 <__strftime+0x5dc>
 80054b6:	f88d a020 	strb.w	sl, [sp, #32]
 80054ba:	f1b9 0f00 	cmp.w	r9, #0
 80054be:	d1b5      	bne.n	800542c <__strftime+0x538>
 80054c0:	2125      	movs	r1, #37	; 0x25
 80054c2:	ab10      	add	r3, sp, #64	; 0x40
 80054c4:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 80054c8:	2130      	movs	r1, #48	; 0x30
 80054ca:	1c98      	adds	r0, r3, #2
 80054cc:	7059      	strb	r1, [r3, #1]
 80054ce:	e7b7      	b.n	8005440 <__strftime+0x54c>
 80054d0:	ab08      	add	r3, sp, #32
 80054d2:	e7af      	b.n	8005434 <__strftime+0x540>
 80054d4:	487a      	ldr	r0, [pc, #488]	; (80056c0 <__strftime+0x7cc>)
 80054d6:	4a7b      	ldr	r2, [pc, #492]	; (80056c4 <__strftime+0x7d0>)
 80054d8:	68ab      	ldr	r3, [r5, #8]
 80054da:	296b      	cmp	r1, #107	; 0x6b
 80054dc:	bf18      	it	ne
 80054de:	4602      	movne	r2, r0
 80054e0:	e6c1      	b.n	8005266 <__strftime+0x372>
 80054e2:	68ab      	ldr	r3, [r5, #8]
 80054e4:	220c      	movs	r2, #12
 80054e6:	b15b      	cbz	r3, 8005500 <__strftime+0x60c>
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <__strftime+0x600>
 80054ec:	fb93 f0f2 	sdiv	r0, r3, r2
 80054f0:	fb02 3310 	mls	r3, r2, r0, r3
 80054f4:	4873      	ldr	r0, [pc, #460]	; (80056c4 <__strftime+0x7d0>)
 80054f6:	4a72      	ldr	r2, [pc, #456]	; (80056c0 <__strftime+0x7cc>)
 80054f8:	2949      	cmp	r1, #73	; 0x49
 80054fa:	bf18      	it	ne
 80054fc:	4602      	movne	r2, r0
 80054fe:	e6b2      	b.n	8005266 <__strftime+0x372>
 8005500:	4613      	mov	r3, r2
 8005502:	e7f7      	b.n	80054f4 <__strftime+0x600>
 8005504:	69eb      	ldr	r3, [r5, #28]
 8005506:	4a70      	ldr	r2, [pc, #448]	; (80056c8 <__strftime+0x7d4>)
 8005508:	3301      	adds	r3, #1
 800550a:	e6ac      	b.n	8005266 <__strftime+0x372>
 800550c:	692b      	ldr	r3, [r5, #16]
 800550e:	3301      	adds	r3, #1
 8005510:	e728      	b.n	8005364 <__strftime+0x470>
 8005512:	686b      	ldr	r3, [r5, #4]
 8005514:	e726      	b.n	8005364 <__strftime+0x470>
 8005516:	45a3      	cmp	fp, r4
 8005518:	f67f ad1f 	bls.w	8004f5a <__strftime+0x66>
 800551c:	230a      	movs	r3, #10
 800551e:	553b      	strb	r3, [r7, r4]
 8005520:	3401      	adds	r4, #1
 8005522:	e5ed      	b.n	8005100 <__strftime+0x20c>
 8005524:	68ab      	ldr	r3, [r5, #8]
 8005526:	2b0b      	cmp	r3, #11
 8005528:	bfcc      	ite	gt
 800552a:	22a4      	movgt	r2, #164	; 0xa4
 800552c:	22a0      	movle	r2, #160	; 0xa0
 800552e:	4b67      	ldr	r3, [pc, #412]	; (80056cc <__strftime+0x7d8>)
 8005530:	4413      	add	r3, r2
 8005532:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005536:	4648      	mov	r0, r9
 8005538:	f7fa fe0a 	bl	8000150 <strlen>
 800553c:	eba9 0304 	sub.w	r3, r9, r4
 8005540:	eb04 0a00 	add.w	sl, r4, r0
 8005544:	45a2      	cmp	sl, r4
 8005546:	d101      	bne.n	800554c <__strftime+0x658>
 8005548:	4654      	mov	r4, sl
 800554a:	e5d9      	b.n	8005100 <__strftime+0x20c>
 800554c:	45a3      	cmp	fp, r4
 800554e:	f67f ad04 	bls.w	8004f5a <__strftime+0x66>
 8005552:	f898 2000 	ldrb.w	r2, [r8]
 8005556:	f813 9004 	ldrb.w	r9, [r3, r4]
 800555a:	2a50      	cmp	r2, #80	; 0x50
 800555c:	d10d      	bne.n	800557a <__strftime+0x686>
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	f000 fc90 	bl	8005e84 <__locale_ctype_ptr>
 8005564:	4448      	add	r0, r9
 8005566:	7842      	ldrb	r2, [r0, #1]
 8005568:	9b04      	ldr	r3, [sp, #16]
 800556a:	f002 0203 	and.w	r2, r2, #3
 800556e:	2a01      	cmp	r2, #1
 8005570:	bf08      	it	eq
 8005572:	f109 0920 	addeq.w	r9, r9, #32
 8005576:	fa5f f989 	uxtb.w	r9, r9
 800557a:	f807 9004 	strb.w	r9, [r7, r4]
 800557e:	3401      	adds	r4, #1
 8005580:	e7e0      	b.n	8005544 <__strftime+0x650>
 8005582:	686b      	ldr	r3, [r5, #4]
 8005584:	4a52      	ldr	r2, [pc, #328]	; (80056d0 <__strftime+0x7dc>)
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	68ab      	ldr	r3, [r5, #8]
 800558a:	1b31      	subs	r1, r6, r4
 800558c:	1938      	adds	r0, r7, r4
 800558e:	f000 ff75 	bl	800647c <sniprintf>
 8005592:	e66c      	b.n	800526e <__strftime+0x37a>
 8005594:	6a2b      	ldr	r3, [r5, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	db7c      	blt.n	8005694 <__strftime+0x7a0>
 800559a:	f000 fa87 	bl	8005aac <__tz_lock>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	b90b      	cbnz	r3, 80055a6 <__strftime+0x6b2>
 80055a2:	f000 fa85 	bl	8005ab0 <_tzset_unlocked>
 80055a6:	f000 fc61 	bl	8005e6c <__gettzinfo>
 80055aa:	6a2b      	ldr	r3, [r5, #32]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bfcc      	ite	gt
 80055b0:	2350      	movgt	r3, #80	; 0x50
 80055b2:	2328      	movle	r3, #40	; 0x28
 80055b4:	58c3      	ldr	r3, [r0, r3]
 80055b6:	425b      	negs	r3, r3
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	f000 fa78 	bl	8005aae <__tz_unlock>
 80055be:	2301      	movs	r3, #1
 80055c0:	9303      	str	r3, [sp, #12]
 80055c2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80055c6:	193b      	adds	r3, r7, r4
 80055c8:	4662      	mov	r2, ip
 80055ca:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 80055ce:	9305      	str	r3, [sp, #20]
 80055d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80055d4:	f143 31ff 	adc.w	r1, r3, #4294967295
 80055d8:	2800      	cmp	r0, #0
 80055da:	f171 0e00 	sbcs.w	lr, r1, #0
 80055de:	da03      	bge.n	80055e8 <__strftime+0x6f4>
 80055e0:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 80055e4:	f143 31ff 	adc.w	r1, r3, #4294967295
 80055e8:	0883      	lsrs	r3, r0, #2
 80055ea:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80055ee:	4699      	mov	r9, r3
 80055f0:	108b      	asrs	r3, r1, #2
 80055f2:	2164      	movs	r1, #100	; 0x64
 80055f4:	f10c 30ff 	add.w	r0, ip, #4294967295
 80055f8:	fb90 f1f1 	sdiv	r1, r0, r1
 80055fc:	ebb9 0201 	subs.w	r2, r9, r1
 8005600:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8005604:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005608:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 800560c:	fb90 f1f1 	sdiv	r1, r0, r1
 8005610:	eb12 0901 	adds.w	r9, r2, r1
 8005614:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8005618:	f240 116d 	movw	r1, #365	; 0x16d
 800561c:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8005620:	fb01 fc0c 	mul.w	ip, r1, ip
 8005624:	eb19 020c 	adds.w	r2, r9, ip
 8005628:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 800562c:	f04f 0c18 	mov.w	ip, #24
 8005630:	69e9      	ldr	r1, [r5, #28]
 8005632:	eb12 0901 	adds.w	r9, r2, r1
 8005636:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 800563a:	fba9 230c 	umull	r2, r3, r9, ip
 800563e:	4619      	mov	r1, r3
 8005640:	fb0c 130a 	mla	r3, ip, sl, r1
 8005644:	4610      	mov	r0, r2
 8005646:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800564a:	4619      	mov	r1, r3
 800564c:	68ab      	ldr	r3, [r5, #8]
 800564e:	18c0      	adds	r0, r0, r3
 8005650:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8005654:	fba0 230c 	umull	r2, r3, r0, ip
 8005658:	4691      	mov	r9, r2
 800565a:	fb0c 3301 	mla	r3, ip, r1, r3
 800565e:	6869      	ldr	r1, [r5, #4]
 8005660:	eb19 0201 	adds.w	r2, r9, r1
 8005664:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8005668:	fba2 010c 	umull	r0, r1, r2, ip
 800566c:	fb0c 1103 	mla	r1, ip, r3, r1
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <__strftime+0x7e0>)
 8005674:	eb10 0903 	adds.w	r9, r0, r3
 8005678:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 800567c:	9b04      	ldr	r3, [sp, #16]
 800567e:	ebb9 0003 	subs.w	r0, r9, r3
 8005682:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 8005686:	e9cd 0100 	strd	r0, r1, [sp]
 800568a:	1b31      	subs	r1, r6, r4
 800568c:	1938      	adds	r0, r7, r4
 800568e:	f000 fef5 	bl	800647c <sniprintf>
 8005692:	e5ec      	b.n	800526e <__strftime+0x37a>
 8005694:	2300      	movs	r3, #0
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	e793      	b.n	80055c2 <__strftime+0x6ce>
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	e662      	b.n	8005364 <__strftime+0x470>
 800569e:	45a3      	cmp	fp, r4
 80056a0:	f67f ac5b 	bls.w	8004f5a <__strftime+0x66>
 80056a4:	2309      	movs	r3, #9
 80056a6:	e73a      	b.n	800551e <__strftime+0x62a>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <__strftime+0x7e4>)
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	686b      	ldr	r3, [r5, #4]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	68ab      	ldr	r3, [r5, #8]
 80056b4:	e5cc      	b.n	8005250 <__strftime+0x35c>
 80056b6:	bf00      	nop
 80056b8:	fffff894 	.word	0xfffff894
 80056bc:	080071b4 	.word	0x080071b4
 80056c0:	080071a3 	.word	0x080071a3
 80056c4:	08007195 	.word	0x08007195
 80056c8:	080071b8 	.word	0x080071b8
 80056cc:	080071e0 	.word	0x080071e0
 80056d0:	080071c7 	.word	0x080071c7
 80056d4:	080071bd 	.word	0x080071bd
 80056d8:	080071c2 	.word	0x080071c2
 80056dc:	fffff895 	.word	0xfffff895
 80056e0:	45a3      	cmp	fp, r4
 80056e2:	f67f ac3a 	bls.w	8004f5a <__strftime+0x66>
 80056e6:	69ab      	ldr	r3, [r5, #24]
 80056e8:	193a      	adds	r2, r7, r4
 80056ea:	3401      	adds	r4, #1
 80056ec:	b913      	cbnz	r3, 80056f4 <__strftime+0x800>
 80056ee:	2337      	movs	r3, #55	; 0x37
 80056f0:	7013      	strb	r3, [r2, #0]
 80056f2:	e505      	b.n	8005100 <__strftime+0x20c>
 80056f4:	3330      	adds	r3, #48	; 0x30
 80056f6:	e7fb      	b.n	80056f0 <__strftime+0x7fc>
 80056f8:	69eb      	ldr	r3, [r5, #28]
 80056fa:	69aa      	ldr	r2, [r5, #24]
 80056fc:	3307      	adds	r3, #7
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	2207      	movs	r2, #7
 8005702:	fb93 f3f2 	sdiv	r3, r3, r2
 8005706:	e62d      	b.n	8005364 <__strftime+0x470>
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff fb9b 	bl	8004e44 <iso_year_adjust>
 800570e:	69aa      	ldr	r2, [r5, #24]
 8005710:	b132      	cbz	r2, 8005720 <__strftime+0x82c>
 8005712:	3a01      	subs	r2, #1
 8005714:	2800      	cmp	r0, #0
 8005716:	dc27      	bgt.n	8005768 <__strftime+0x874>
 8005718:	69eb      	ldr	r3, [r5, #28]
 800571a:	d103      	bne.n	8005724 <__strftime+0x830>
 800571c:	330a      	adds	r3, #10
 800571e:	e7ee      	b.n	80056fe <__strftime+0x80a>
 8005720:	2206      	movs	r2, #6
 8005722:	e7f7      	b.n	8005714 <__strftime+0x820>
 8005724:	6968      	ldr	r0, [r5, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2800      	cmp	r0, #0
 800572a:	f240 726b 	movw	r2, #1899	; 0x76b
 800572e:	bfa8      	it	ge
 8005730:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8005734:	4410      	add	r0, r2
 8005736:	0782      	lsls	r2, r0, #30
 8005738:	d105      	bne.n	8005746 <__strftime+0x852>
 800573a:	2264      	movs	r2, #100	; 0x64
 800573c:	fb90 f1f2 	sdiv	r1, r0, r2
 8005740:	fb02 0111 	mls	r1, r2, r1, r0
 8005744:	b971      	cbnz	r1, 8005764 <__strftime+0x870>
 8005746:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800574a:	fb90 f2f1 	sdiv	r2, r0, r1
 800574e:	fb01 0212 	mls	r2, r1, r2, r0
 8005752:	fab2 f282 	clz	r2, r2
 8005756:	0952      	lsrs	r2, r2, #5
 8005758:	1a9a      	subs	r2, r3, r2
 800575a:	2a04      	cmp	r2, #4
 800575c:	bfcc      	ite	gt
 800575e:	2334      	movgt	r3, #52	; 0x34
 8005760:	2335      	movle	r3, #53	; 0x35
 8005762:	e5ff      	b.n	8005364 <__strftime+0x470>
 8005764:	2201      	movs	r2, #1
 8005766:	e7f7      	b.n	8005758 <__strftime+0x864>
 8005768:	2301      	movs	r3, #1
 800576a:	e5fb      	b.n	8005364 <__strftime+0x470>
 800576c:	45a3      	cmp	fp, r4
 800576e:	f67f abf4 	bls.w	8004f5a <__strftime+0x66>
 8005772:	69ab      	ldr	r3, [r5, #24]
 8005774:	3330      	adds	r3, #48	; 0x30
 8005776:	e6d2      	b.n	800551e <__strftime+0x62a>
 8005778:	69ab      	ldr	r3, [r5, #24]
 800577a:	b13b      	cbz	r3, 800578c <__strftime+0x898>
 800577c:	3b01      	subs	r3, #1
 800577e:	69ea      	ldr	r2, [r5, #28]
 8005780:	3207      	adds	r2, #7
 8005782:	1ad2      	subs	r2, r2, r3
 8005784:	2307      	movs	r3, #7
 8005786:	fb92 f3f3 	sdiv	r3, r2, r3
 800578a:	e5eb      	b.n	8005364 <__strftime+0x470>
 800578c:	2306      	movs	r3, #6
 800578e:	e7f6      	b.n	800577e <__strftime+0x88a>
 8005790:	6968      	ldr	r0, [r5, #20]
 8005792:	2800      	cmp	r0, #0
 8005794:	db05      	blt.n	80057a2 <__strftime+0x8ae>
 8005796:	2264      	movs	r2, #100	; 0x64
 8005798:	fb90 f3f2 	sdiv	r3, r0, r2
 800579c:	fb02 0313 	mls	r3, r2, r3, r0
 80057a0:	e5e0      	b.n	8005364 <__strftime+0x470>
 80057a2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80057a6:	f000 fb07 	bl	8005db8 <abs>
 80057aa:	2364      	movs	r3, #100	; 0x64
 80057ac:	fb90 f2f3 	sdiv	r2, r0, r3
 80057b0:	e7f4      	b.n	800579c <__strftime+0x8a8>
 80057b2:	696b      	ldr	r3, [r5, #20]
 80057b4:	4a52      	ldr	r2, [pc, #328]	; (8005900 <__strftime+0xa0c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	da18      	bge.n	80057ec <__strftime+0x8f8>
 80057ba:	212d      	movs	r1, #45	; 0x2d
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f88d 1020 	strb.w	r1, [sp, #32]
 80057c2:	f1b9 0f00 	cmp.w	r9, #0
 80057c6:	d001      	beq.n	80057cc <__strftime+0x8d8>
 80057c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80057cc:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 80057d0:	2125      	movs	r1, #37	; 0x25
 80057d2:	7011      	strb	r1, [r2, #0]
 80057d4:	f1ba 0f00 	cmp.w	sl, #0
 80057d8:	f040 8088 	bne.w	80058ec <__strftime+0x9f8>
 80057dc:	1c50      	adds	r0, r2, #1
 80057de:	4949      	ldr	r1, [pc, #292]	; (8005904 <__strftime+0xa10>)
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	f000 feab 	bl	800653c <strcpy>
 80057e6:	9b04      	ldr	r3, [sp, #16]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	e62f      	b.n	800544c <__strftime+0x558>
 80057ec:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80057f0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80057f4:	f040 8081 	bne.w	80058fa <__strftime+0xa06>
 80057f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d979      	bls.n	80058f4 <__strftime+0xa00>
 8005800:	f88d a020 	strb.w	sl, [sp, #32]
 8005804:	e7dd      	b.n	80057c2 <__strftime+0x8ce>
 8005806:	6a2b      	ldr	r3, [r5, #32]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f6ff ac79 	blt.w	8005100 <__strftime+0x20c>
 800580e:	f000 f94d 	bl	8005aac <__tz_lock>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	b90b      	cbnz	r3, 800581a <__strftime+0x926>
 8005816:	f000 f94b 	bl	8005ab0 <_tzset_unlocked>
 800581a:	f000 fb27 	bl	8005e6c <__gettzinfo>
 800581e:	6a2b      	ldr	r3, [r5, #32]
 8005820:	eb07 0a04 	add.w	sl, r7, r4
 8005824:	2b00      	cmp	r3, #0
 8005826:	bfcc      	ite	gt
 8005828:	2350      	movgt	r3, #80	; 0x50
 800582a:	2328      	movle	r3, #40	; 0x28
 800582c:	58c3      	ldr	r3, [r0, r3]
 800582e:	f1c3 0900 	rsb	r9, r3, #0
 8005832:	f000 f93c 	bl	8005aae <__tz_unlock>
 8005836:	233c      	movs	r3, #60	; 0x3c
 8005838:	1b31      	subs	r1, r6, r4
 800583a:	fb99 f0f3 	sdiv	r0, r9, r3
 800583e:	9104      	str	r1, [sp, #16]
 8005840:	9303      	str	r3, [sp, #12]
 8005842:	f000 fb17 	bl	8005e74 <labs>
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	9904      	ldr	r1, [sp, #16]
 800584a:	fb90 f2f3 	sdiv	r2, r0, r3
 800584e:	fb02 0013 	mls	r0, r2, r3, r0
 8005852:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005856:	9000      	str	r0, [sp, #0]
 8005858:	fb99 f3f3 	sdiv	r3, r9, r3
 800585c:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <__strftime+0xa14>)
 800585e:	4650      	mov	r0, sl
 8005860:	f000 fe0c 	bl	800647c <sniprintf>
 8005864:	2800      	cmp	r0, #0
 8005866:	f6ff ab78 	blt.w	8004f5a <__strftime+0x66>
 800586a:	4404      	add	r4, r0
 800586c:	42a6      	cmp	r6, r4
 800586e:	f67f ab74 	bls.w	8004f5a <__strftime+0x66>
 8005872:	2301      	movs	r3, #1
 8005874:	9303      	str	r3, [sp, #12]
 8005876:	e443      	b.n	8005100 <__strftime+0x20c>
 8005878:	6a2b      	ldr	r3, [r5, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f6ff ac40 	blt.w	8005100 <__strftime+0x20c>
 8005880:	f000 f914 	bl	8005aac <__tz_lock>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	b90b      	cbnz	r3, 800588c <__strftime+0x998>
 8005888:	f000 f912 	bl	8005ab0 <_tzset_unlocked>
 800588c:	6a2b      	ldr	r3, [r5, #32]
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <__strftime+0xa18>)
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfd4      	ite	le
 8005894:	2300      	movle	r3, #0
 8005896:	2301      	movgt	r3, #1
 8005898:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800589c:	4648      	mov	r0, r9
 800589e:	f7fa fc57 	bl	8000150 <strlen>
 80058a2:	eba9 0904 	sub.w	r9, r9, r4
 80058a6:	eb04 0a00 	add.w	sl, r4, r0
 80058aa:	45a2      	cmp	sl, r4
 80058ac:	d103      	bne.n	80058b6 <__strftime+0x9c2>
 80058ae:	f000 f8fe 	bl	8005aae <__tz_unlock>
 80058b2:	4654      	mov	r4, sl
 80058b4:	e7dd      	b.n	8005872 <__strftime+0x97e>
 80058b6:	45a3      	cmp	fp, r4
 80058b8:	d904      	bls.n	80058c4 <__strftime+0x9d0>
 80058ba:	f819 3004 	ldrb.w	r3, [r9, r4]
 80058be:	553b      	strb	r3, [r7, r4]
 80058c0:	3401      	adds	r4, #1
 80058c2:	e7f2      	b.n	80058aa <__strftime+0x9b6>
 80058c4:	f000 f8f3 	bl	8005aae <__tz_unlock>
 80058c8:	f7ff bb47 	b.w	8004f5a <__strftime+0x66>
 80058cc:	45a3      	cmp	fp, r4
 80058ce:	f67f ab44 	bls.w	8004f5a <__strftime+0x66>
 80058d2:	2325      	movs	r3, #37	; 0x25
 80058d4:	e623      	b.n	800551e <__strftime+0x62a>
 80058d6:	b10e      	cbz	r6, 80058dc <__strftime+0x9e8>
 80058d8:	2300      	movs	r3, #0
 80058da:	553b      	strb	r3, [r7, r4]
 80058dc:	4620      	mov	r0, r4
 80058de:	b011      	add	sp, #68	; 0x44
 80058e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e4:	2225      	movs	r2, #37	; 0x25
 80058e6:	f88d 2020 	strb.w	r2, [sp, #32]
 80058ea:	aa08      	add	r2, sp, #32
 80058ec:	2130      	movs	r1, #48	; 0x30
 80058ee:	1c90      	adds	r0, r2, #2
 80058f0:	7051      	strb	r1, [r2, #1]
 80058f2:	e774      	b.n	80057de <__strftime+0x8ea>
 80058f4:	f1b9 0f00 	cmp.w	r9, #0
 80058f8:	d1f4      	bne.n	80058e4 <__strftime+0x9f0>
 80058fa:	aa08      	add	r2, sp, #32
 80058fc:	e768      	b.n	80057d0 <__strftime+0x8dc>
 80058fe:	bf00      	nop
 8005900:	fffff894 	.word	0xfffff894
 8005904:	080071b4 	.word	0x080071b4
 8005908:	080071d1 	.word	0x080071d1
 800590c:	20000074 	.word	0x20000074

08005910 <strftime>:
 8005910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005912:	4c06      	ldr	r4, [pc, #24]	; (800592c <strftime+0x1c>)
 8005914:	4d06      	ldr	r5, [pc, #24]	; (8005930 <strftime+0x20>)
 8005916:	6824      	ldr	r4, [r4, #0]
 8005918:	6a24      	ldr	r4, [r4, #32]
 800591a:	2c00      	cmp	r4, #0
 800591c:	bf08      	it	eq
 800591e:	462c      	moveq	r4, r5
 8005920:	9400      	str	r4, [sp, #0]
 8005922:	f7ff fae7 	bl	8004ef4 <__strftime>
 8005926:	b003      	add	sp, #12
 8005928:	bd30      	pop	{r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	20000010 	.word	0x20000010
 8005930:	200000d8 	.word	0x200000d8

08005934 <_strtoul_l.isra.0>:
 8005934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	4680      	mov	r8, r0
 800593a:	4689      	mov	r9, r1
 800593c:	4692      	mov	sl, r2
 800593e:	461e      	mov	r6, r3
 8005940:	460f      	mov	r7, r1
 8005942:	463d      	mov	r5, r7
 8005944:	9808      	ldr	r0, [sp, #32]
 8005946:	f815 4b01 	ldrb.w	r4, [r5], #1
 800594a:	f000 fa97 	bl	8005e7c <__locale_ctype_ptr_l>
 800594e:	4420      	add	r0, r4
 8005950:	7843      	ldrb	r3, [r0, #1]
 8005952:	f013 0308 	ands.w	r3, r3, #8
 8005956:	d130      	bne.n	80059ba <_strtoul_l.isra.0+0x86>
 8005958:	2c2d      	cmp	r4, #45	; 0x2d
 800595a:	d130      	bne.n	80059be <_strtoul_l.isra.0+0x8a>
 800595c:	2101      	movs	r1, #1
 800595e:	787c      	ldrb	r4, [r7, #1]
 8005960:	1cbd      	adds	r5, r7, #2
 8005962:	2e00      	cmp	r6, #0
 8005964:	d05c      	beq.n	8005a20 <_strtoul_l.isra.0+0xec>
 8005966:	2e10      	cmp	r6, #16
 8005968:	d109      	bne.n	800597e <_strtoul_l.isra.0+0x4a>
 800596a:	2c30      	cmp	r4, #48	; 0x30
 800596c:	d107      	bne.n	800597e <_strtoul_l.isra.0+0x4a>
 800596e:	782b      	ldrb	r3, [r5, #0]
 8005970:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005974:	2b58      	cmp	r3, #88	; 0x58
 8005976:	d14e      	bne.n	8005a16 <_strtoul_l.isra.0+0xe2>
 8005978:	2610      	movs	r6, #16
 800597a:	786c      	ldrb	r4, [r5, #1]
 800597c:	3502      	adds	r5, #2
 800597e:	f04f 32ff 	mov.w	r2, #4294967295
 8005982:	fbb2 f2f6 	udiv	r2, r2, r6
 8005986:	2300      	movs	r3, #0
 8005988:	fb06 fc02 	mul.w	ip, r6, r2
 800598c:	4618      	mov	r0, r3
 800598e:	ea6f 0c0c 	mvn.w	ip, ip
 8005992:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005996:	2f09      	cmp	r7, #9
 8005998:	d817      	bhi.n	80059ca <_strtoul_l.isra.0+0x96>
 800599a:	463c      	mov	r4, r7
 800599c:	42a6      	cmp	r6, r4
 800599e:	dd23      	ble.n	80059e8 <_strtoul_l.isra.0+0xb4>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db1e      	blt.n	80059e2 <_strtoul_l.isra.0+0xae>
 80059a4:	4282      	cmp	r2, r0
 80059a6:	d31c      	bcc.n	80059e2 <_strtoul_l.isra.0+0xae>
 80059a8:	d101      	bne.n	80059ae <_strtoul_l.isra.0+0x7a>
 80059aa:	45a4      	cmp	ip, r4
 80059ac:	db19      	blt.n	80059e2 <_strtoul_l.isra.0+0xae>
 80059ae:	2301      	movs	r3, #1
 80059b0:	fb00 4006 	mla	r0, r0, r6, r4
 80059b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059b8:	e7eb      	b.n	8005992 <_strtoul_l.isra.0+0x5e>
 80059ba:	462f      	mov	r7, r5
 80059bc:	e7c1      	b.n	8005942 <_strtoul_l.isra.0+0xe>
 80059be:	2c2b      	cmp	r4, #43	; 0x2b
 80059c0:	bf04      	itt	eq
 80059c2:	1cbd      	addeq	r5, r7, #2
 80059c4:	787c      	ldrbeq	r4, [r7, #1]
 80059c6:	4619      	mov	r1, r3
 80059c8:	e7cb      	b.n	8005962 <_strtoul_l.isra.0+0x2e>
 80059ca:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80059ce:	2f19      	cmp	r7, #25
 80059d0:	d801      	bhi.n	80059d6 <_strtoul_l.isra.0+0xa2>
 80059d2:	3c37      	subs	r4, #55	; 0x37
 80059d4:	e7e2      	b.n	800599c <_strtoul_l.isra.0+0x68>
 80059d6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80059da:	2f19      	cmp	r7, #25
 80059dc:	d804      	bhi.n	80059e8 <_strtoul_l.isra.0+0xb4>
 80059de:	3c57      	subs	r4, #87	; 0x57
 80059e0:	e7dc      	b.n	800599c <_strtoul_l.isra.0+0x68>
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	e7e5      	b.n	80059b4 <_strtoul_l.isra.0+0x80>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da09      	bge.n	8005a00 <_strtoul_l.isra.0+0xcc>
 80059ec:	2322      	movs	r3, #34	; 0x22
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	f8c8 3000 	str.w	r3, [r8]
 80059f6:	f1ba 0f00 	cmp.w	sl, #0
 80059fa:	d107      	bne.n	8005a0c <_strtoul_l.isra.0+0xd8>
 80059fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a00:	b101      	cbz	r1, 8005a04 <_strtoul_l.isra.0+0xd0>
 8005a02:	4240      	negs	r0, r0
 8005a04:	f1ba 0f00 	cmp.w	sl, #0
 8005a08:	d0f8      	beq.n	80059fc <_strtoul_l.isra.0+0xc8>
 8005a0a:	b10b      	cbz	r3, 8005a10 <_strtoul_l.isra.0+0xdc>
 8005a0c:	f105 39ff 	add.w	r9, r5, #4294967295
 8005a10:	f8ca 9000 	str.w	r9, [sl]
 8005a14:	e7f2      	b.n	80059fc <_strtoul_l.isra.0+0xc8>
 8005a16:	2430      	movs	r4, #48	; 0x30
 8005a18:	2e00      	cmp	r6, #0
 8005a1a:	d1b0      	bne.n	800597e <_strtoul_l.isra.0+0x4a>
 8005a1c:	2608      	movs	r6, #8
 8005a1e:	e7ae      	b.n	800597e <_strtoul_l.isra.0+0x4a>
 8005a20:	2c30      	cmp	r4, #48	; 0x30
 8005a22:	d0a4      	beq.n	800596e <_strtoul_l.isra.0+0x3a>
 8005a24:	260a      	movs	r6, #10
 8005a26:	e7aa      	b.n	800597e <_strtoul_l.isra.0+0x4a>

08005a28 <_strtoul_r>:
 8005a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a2a:	4c06      	ldr	r4, [pc, #24]	; (8005a44 <_strtoul_r+0x1c>)
 8005a2c:	4d06      	ldr	r5, [pc, #24]	; (8005a48 <_strtoul_r+0x20>)
 8005a2e:	6824      	ldr	r4, [r4, #0]
 8005a30:	6a24      	ldr	r4, [r4, #32]
 8005a32:	2c00      	cmp	r4, #0
 8005a34:	bf08      	it	eq
 8005a36:	462c      	moveq	r4, r5
 8005a38:	9400      	str	r4, [sp, #0]
 8005a3a:	f7ff ff7b 	bl	8005934 <_strtoul_l.isra.0>
 8005a3e:	b003      	add	sp, #12
 8005a40:	bd30      	pop	{r4, r5, pc}
 8005a42:	bf00      	nop
 8005a44:	20000010 	.word	0x20000010
 8005a48:	200000d8 	.word	0x200000d8

08005a4c <strtoul>:
 8005a4c:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <strtoul+0x24>)
 8005a4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a50:	681c      	ldr	r4, [r3, #0]
 8005a52:	4d08      	ldr	r5, [pc, #32]	; (8005a74 <strtoul+0x28>)
 8005a54:	6a23      	ldr	r3, [r4, #32]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf08      	it	eq
 8005a5a:	462b      	moveq	r3, r5
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	460a      	mov	r2, r1
 8005a62:	4601      	mov	r1, r0
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff ff65 	bl	8005934 <_strtoul_l.isra.0>
 8005a6a:	b003      	add	sp, #12
 8005a6c:	bd30      	pop	{r4, r5, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000010 	.word	0x20000010
 8005a74:	200000d8 	.word	0x200000d8

08005a78 <time>:
 8005a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <time+0x30>)
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4669      	mov	r1, sp
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	f000 f9e0 	bl	8005e48 <_gettimeofday_r>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	da05      	bge.n	8005a98 <time+0x20>
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	e9cd 2300 	strd	r2, r3, [sp]
 8005a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a9c:	b10c      	cbz	r4, 8005aa2 <time+0x2a>
 8005a9e:	e9c4 0100 	strd	r0, r1, [r4]
 8005aa2:	b004      	add	sp, #16
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000010 	.word	0x20000010

08005aac <__tz_lock>:
 8005aac:	4770      	bx	lr

08005aae <__tz_unlock>:
 8005aae:	4770      	bx	lr

08005ab0 <_tzset_unlocked>:
 8005ab0:	4b01      	ldr	r3, [pc, #4]	; (8005ab8 <_tzset_unlocked+0x8>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	f000 b802 	b.w	8005abc <_tzset_unlocked_r>
 8005ab8:	20000010 	.word	0x20000010

08005abc <_tzset_unlocked_r>:
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	b08d      	sub	sp, #52	; 0x34
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	f000 f9d2 	bl	8005e6c <__gettzinfo>
 8005ac8:	49af      	ldr	r1, [pc, #700]	; (8005d88 <_tzset_unlocked_r+0x2cc>)
 8005aca:	4605      	mov	r5, r0
 8005acc:	4638      	mov	r0, r7
 8005ace:	f000 f9b3 	bl	8005e38 <_getenv_r>
 8005ad2:	4eae      	ldr	r6, [pc, #696]	; (8005d8c <_tzset_unlocked_r+0x2d0>)
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	b970      	cbnz	r0, 8005af6 <_tzset_unlocked_r+0x3a>
 8005ad8:	4bad      	ldr	r3, [pc, #692]	; (8005d90 <_tzset_unlocked_r+0x2d4>)
 8005ada:	4aae      	ldr	r2, [pc, #696]	; (8005d94 <_tzset_unlocked_r+0x2d8>)
 8005adc:	6018      	str	r0, [r3, #0]
 8005ade:	4bae      	ldr	r3, [pc, #696]	; (8005d98 <_tzset_unlocked_r+0x2dc>)
 8005ae0:	6018      	str	r0, [r3, #0]
 8005ae2:	4bae      	ldr	r3, [pc, #696]	; (8005d9c <_tzset_unlocked_r+0x2e0>)
 8005ae4:	6830      	ldr	r0, [r6, #0]
 8005ae6:	e9c3 2200 	strd	r2, r2, [r3]
 8005aea:	f7ff f8e5 	bl	8004cb8 <free>
 8005aee:	6034      	str	r4, [r6, #0]
 8005af0:	b00d      	add	sp, #52	; 0x34
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af6:	6831      	ldr	r1, [r6, #0]
 8005af8:	2900      	cmp	r1, #0
 8005afa:	d15f      	bne.n	8005bbc <_tzset_unlocked_r+0x100>
 8005afc:	6830      	ldr	r0, [r6, #0]
 8005afe:	f7ff f8db 	bl	8004cb8 <free>
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7fa fb24 	bl	8000150 <strlen>
 8005b08:	1c41      	adds	r1, r0, #1
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f7ff f930 	bl	8004d70 <_malloc_r>
 8005b10:	6030      	str	r0, [r6, #0]
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d157      	bne.n	8005bc6 <_tzset_unlocked_r+0x10a>
 8005b16:	7823      	ldrb	r3, [r4, #0]
 8005b18:	ae0a      	add	r6, sp, #40	; 0x28
 8005b1a:	2b3a      	cmp	r3, #58	; 0x3a
 8005b1c:	bf08      	it	eq
 8005b1e:	3401      	addeq	r4, #1
 8005b20:	4633      	mov	r3, r6
 8005b22:	4a9f      	ldr	r2, [pc, #636]	; (8005da0 <_tzset_unlocked_r+0x2e4>)
 8005b24:	499f      	ldr	r1, [pc, #636]	; (8005da4 <_tzset_unlocked_r+0x2e8>)
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fcdc 	bl	80064e4 <siscanf>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	dddf      	ble.n	8005af0 <_tzset_unlocked_r+0x34>
 8005b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b32:	18e7      	adds	r7, r4, r3
 8005b34:	5ce3      	ldrb	r3, [r4, r3]
 8005b36:	2b2d      	cmp	r3, #45	; 0x2d
 8005b38:	d149      	bne.n	8005bce <_tzset_unlocked_r+0x112>
 8005b3a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b3e:	3701      	adds	r7, #1
 8005b40:	f04f 0800 	mov.w	r8, #0
 8005b44:	f10d 0a20 	add.w	sl, sp, #32
 8005b48:	f10d 0b1e 	add.w	fp, sp, #30
 8005b4c:	9603      	str	r6, [sp, #12]
 8005b4e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8005b52:	f8cd b000 	str.w	fp, [sp]
 8005b56:	4633      	mov	r3, r6
 8005b58:	aa07      	add	r2, sp, #28
 8005b5a:	4993      	ldr	r1, [pc, #588]	; (8005da8 <_tzset_unlocked_r+0x2ec>)
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8005b62:	f8ad 8020 	strh.w	r8, [sp, #32]
 8005b66:	f000 fcbd 	bl	80064e4 <siscanf>
 8005b6a:	4540      	cmp	r0, r8
 8005b6c:	ddc0      	ble.n	8005af0 <_tzset_unlocked_r+0x34>
 8005b6e:	213c      	movs	r1, #60	; 0x3c
 8005b70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005b74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005b78:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8005db4 <_tzset_unlocked_r+0x2f8>
 8005b7c:	fb01 2203 	mla	r2, r1, r3, r2
 8005b80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005b84:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005b88:	fb01 2303 	mla	r3, r1, r3, r2
 8005b8c:	435c      	muls	r4, r3
 8005b8e:	4b84      	ldr	r3, [pc, #528]	; (8005da0 <_tzset_unlocked_r+0x2e4>)
 8005b90:	62ac      	str	r4, [r5, #40]	; 0x28
 8005b92:	4c82      	ldr	r4, [pc, #520]	; (8005d9c <_tzset_unlocked_r+0x2e0>)
 8005b94:	464a      	mov	r2, r9
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b9a:	4982      	ldr	r1, [pc, #520]	; (8005da4 <_tzset_unlocked_r+0x2e8>)
 8005b9c:	441f      	add	r7, r3
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	4633      	mov	r3, r6
 8005ba2:	f000 fc9f 	bl	80064e4 <siscanf>
 8005ba6:	4540      	cmp	r0, r8
 8005ba8:	dc16      	bgt.n	8005bd8 <_tzset_unlocked_r+0x11c>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	4b77      	ldr	r3, [pc, #476]	; (8005d90 <_tzset_unlocked_r+0x2d4>)
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	4b78      	ldr	r3, [pc, #480]	; (8005d98 <_tzset_unlocked_r+0x2dc>)
 8005bb6:	f8c3 8000 	str.w	r8, [r3]
 8005bba:	e799      	b.n	8005af0 <_tzset_unlocked_r+0x34>
 8005bbc:	f7fa fad0 	bl	8000160 <strcmp>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d095      	beq.n	8005af0 <_tzset_unlocked_r+0x34>
 8005bc4:	e79a      	b.n	8005afc <_tzset_unlocked_r+0x40>
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	f000 fcb8 	bl	800653c <strcpy>
 8005bcc:	e7a3      	b.n	8005b16 <_tzset_unlocked_r+0x5a>
 8005bce:	2b2b      	cmp	r3, #43	; 0x2b
 8005bd0:	bf08      	it	eq
 8005bd2:	3701      	addeq	r7, #1
 8005bd4:	2401      	movs	r4, #1
 8005bd6:	e7b3      	b.n	8005b40 <_tzset_unlocked_r+0x84>
 8005bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bda:	f8c4 9004 	str.w	r9, [r4, #4]
 8005bde:	18fc      	adds	r4, r7, r3
 8005be0:	5cfb      	ldrb	r3, [r7, r3]
 8005be2:	2b2d      	cmp	r3, #45	; 0x2d
 8005be4:	f040 808c 	bne.w	8005d00 <_tzset_unlocked_r+0x244>
 8005be8:	f04f 37ff 	mov.w	r7, #4294967295
 8005bec:	3401      	adds	r4, #1
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e9cd a602 	strd	sl, r6, [sp, #8]
 8005bf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005bf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005bfc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005c00:	930a      	str	r3, [sp, #40]	; 0x28
 8005c02:	e9cd b600 	strd	fp, r6, [sp]
 8005c06:	4633      	mov	r3, r6
 8005c08:	aa07      	add	r2, sp, #28
 8005c0a:	4967      	ldr	r1, [pc, #412]	; (8005da8 <_tzset_unlocked_r+0x2ec>)
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f000 fc69 	bl	80064e4 <siscanf>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dc79      	bgt.n	8005d0a <_tzset_unlocked_r+0x24e>
 8005c16:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005c18:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005c1c:	652b      	str	r3, [r5, #80]	; 0x50
 8005c1e:	462f      	mov	r7, r5
 8005c20:	f04f 0900 	mov.w	r9, #0
 8005c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c26:	441c      	add	r4, r3
 8005c28:	7823      	ldrb	r3, [r4, #0]
 8005c2a:	2b2c      	cmp	r3, #44	; 0x2c
 8005c2c:	bf08      	it	eq
 8005c2e:	3401      	addeq	r4, #1
 8005c30:	f894 8000 	ldrb.w	r8, [r4]
 8005c34:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8005c38:	d17a      	bne.n	8005d30 <_tzset_unlocked_r+0x274>
 8005c3a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8005c3e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8005c42:	ab09      	add	r3, sp, #36	; 0x24
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	9603      	str	r6, [sp, #12]
 8005c48:	4633      	mov	r3, r6
 8005c4a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8005c4e:	4957      	ldr	r1, [pc, #348]	; (8005dac <_tzset_unlocked_r+0x2f0>)
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fc47 	bl	80064e4 <siscanf>
 8005c56:	2803      	cmp	r0, #3
 8005c58:	f47f af4a 	bne.w	8005af0 <_tzset_unlocked_r+0x34>
 8005c5c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8005c60:	1e4b      	subs	r3, r1, #1
 8005c62:	2b0b      	cmp	r3, #11
 8005c64:	f63f af44 	bhi.w	8005af0 <_tzset_unlocked_r+0x34>
 8005c68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005c6c:	1e53      	subs	r3, r2, #1
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	f63f af3e 	bhi.w	8005af0 <_tzset_unlocked_r+0x34>
 8005c74:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	f63f af39 	bhi.w	8005af0 <_tzset_unlocked_r+0x34>
 8005c7e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8005c82:	f887 8008 	strb.w	r8, [r7, #8]
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8a:	eb04 0803 	add.w	r8, r4, r3
 8005c8e:	2302      	movs	r3, #2
 8005c90:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005c94:	2300      	movs	r3, #0
 8005c96:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005c9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca0:	f898 3000 	ldrb.w	r3, [r8]
 8005ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ca6:	d109      	bne.n	8005cbc <_tzset_unlocked_r+0x200>
 8005ca8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8005cac:	e9cd b600 	strd	fp, r6, [sp]
 8005cb0:	4633      	mov	r3, r6
 8005cb2:	aa07      	add	r2, sp, #28
 8005cb4:	493e      	ldr	r1, [pc, #248]	; (8005db0 <_tzset_unlocked_r+0x2f4>)
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	f000 fc14 	bl	80064e4 <siscanf>
 8005cbc:	213c      	movs	r1, #60	; 0x3c
 8005cbe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005cc2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005cc6:	3728      	adds	r7, #40	; 0x28
 8005cc8:	fb01 2203 	mla	r2, r1, r3, r2
 8005ccc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005cd0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005cd4:	fb01 2303 	mla	r3, r1, r3, r2
 8005cd8:	f847 3c10 	str.w	r3, [r7, #-16]
 8005cdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005cde:	4444      	add	r4, r8
 8005ce0:	f1b9 0f00 	cmp.w	r9, #0
 8005ce4:	d021      	beq.n	8005d2a <_tzset_unlocked_r+0x26e>
 8005ce6:	6868      	ldr	r0, [r5, #4]
 8005ce8:	f000 fc42 	bl	8006570 <__tzcalc_limits>
 8005cec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005cee:	4b28      	ldr	r3, [pc, #160]	; (8005d90 <_tzset_unlocked_r+0x2d4>)
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	bf18      	it	ne
 8005cf8:	2301      	movne	r3, #1
 8005cfa:	4a27      	ldr	r2, [pc, #156]	; (8005d98 <_tzset_unlocked_r+0x2dc>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e6f7      	b.n	8005af0 <_tzset_unlocked_r+0x34>
 8005d00:	2b2b      	cmp	r3, #43	; 0x2b
 8005d02:	bf08      	it	eq
 8005d04:	3401      	addeq	r4, #1
 8005d06:	2701      	movs	r7, #1
 8005d08:	e771      	b.n	8005bee <_tzset_unlocked_r+0x132>
 8005d0a:	213c      	movs	r1, #60	; 0x3c
 8005d0c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005d10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005d14:	fb01 2203 	mla	r2, r1, r3, r2
 8005d18:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005d1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005d20:	fb01 2303 	mla	r3, r1, r3, r2
 8005d24:	435f      	muls	r7, r3
 8005d26:	652f      	str	r7, [r5, #80]	; 0x50
 8005d28:	e779      	b.n	8005c1e <_tzset_unlocked_r+0x162>
 8005d2a:	f04f 0901 	mov.w	r9, #1
 8005d2e:	e77b      	b.n	8005c28 <_tzset_unlocked_r+0x16c>
 8005d30:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8005d34:	bf0a      	itet	eq
 8005d36:	4643      	moveq	r3, r8
 8005d38:	2344      	movne	r3, #68	; 0x44
 8005d3a:	3401      	addeq	r4, #1
 8005d3c:	220a      	movs	r2, #10
 8005d3e:	a90b      	add	r1, sp, #44	; 0x2c
 8005d40:	4620      	mov	r0, r4
 8005d42:	9305      	str	r3, [sp, #20]
 8005d44:	f7ff fe82 	bl	8005a4c <strtoul>
 8005d48:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005d4c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8005d50:	45a0      	cmp	r8, r4
 8005d52:	9b05      	ldr	r3, [sp, #20]
 8005d54:	d114      	bne.n	8005d80 <_tzset_unlocked_r+0x2c4>
 8005d56:	234d      	movs	r3, #77	; 0x4d
 8005d58:	f1b9 0f00 	cmp.w	r9, #0
 8005d5c:	d107      	bne.n	8005d6e <_tzset_unlocked_r+0x2b2>
 8005d5e:	722b      	strb	r3, [r5, #8]
 8005d60:	2103      	movs	r1, #3
 8005d62:	2302      	movs	r3, #2
 8005d64:	f8c5 9014 	str.w	r9, [r5, #20]
 8005d68:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8005d6c:	e78f      	b.n	8005c8e <_tzset_unlocked_r+0x1d2>
 8005d6e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8005d72:	220b      	movs	r2, #11
 8005d74:	2301      	movs	r3, #1
 8005d76:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	63eb      	str	r3, [r5, #60]	; 0x3c
 8005d7e:	e786      	b.n	8005c8e <_tzset_unlocked_r+0x1d2>
 8005d80:	b280      	uxth	r0, r0
 8005d82:	723b      	strb	r3, [r7, #8]
 8005d84:	6178      	str	r0, [r7, #20]
 8005d86:	e782      	b.n	8005c8e <_tzset_unlocked_r+0x1d2>
 8005d88:	08007407 	.word	0x08007407
 8005d8c:	2000028c 	.word	0x2000028c
 8005d90:	20000294 	.word	0x20000294
 8005d94:	0800740a 	.word	0x0800740a
 8005d98:	20000290 	.word	0x20000290
 8005d9c:	20000074 	.word	0x20000074
 8005da0:	2000027f 	.word	0x2000027f
 8005da4:	0800740e 	.word	0x0800740e
 8005da8:	08007431 	.word	0x08007431
 8005dac:	0800741d 	.word	0x0800741d
 8005db0:	08007430 	.word	0x08007430
 8005db4:	20000274 	.word	0x20000274

08005db8 <abs>:
 8005db8:	2800      	cmp	r0, #0
 8005dba:	bfb8      	it	lt
 8005dbc:	4240      	neglt	r0, r0
 8005dbe:	4770      	bx	lr

08005dc0 <_findenv_r>:
 8005dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	468b      	mov	fp, r1
 8005dc8:	4690      	mov	r8, r2
 8005dca:	f000 fc86 	bl	80066da <__env_lock>
 8005dce:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <_findenv_r+0x74>)
 8005dd0:	681d      	ldr	r5, [r3, #0]
 8005dd2:	469a      	mov	sl, r3
 8005dd4:	b13d      	cbz	r5, 8005de6 <_findenv_r+0x26>
 8005dd6:	465c      	mov	r4, fp
 8005dd8:	4623      	mov	r3, r4
 8005dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dde:	b32a      	cbz	r2, 8005e2c <_findenv_r+0x6c>
 8005de0:	2a3d      	cmp	r2, #61	; 0x3d
 8005de2:	461c      	mov	r4, r3
 8005de4:	d1f8      	bne.n	8005dd8 <_findenv_r+0x18>
 8005de6:	4638      	mov	r0, r7
 8005de8:	f000 fc78 	bl	80066dc <__env_unlock>
 8005dec:	2000      	movs	r0, #0
 8005dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	464d      	mov	r5, r9
 8005df4:	46a9      	mov	r9, r5
 8005df6:	f859 0b04 	ldr.w	r0, [r9], #4
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d0f3      	beq.n	8005de6 <_findenv_r+0x26>
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4659      	mov	r1, fp
 8005e02:	f000 fba3 	bl	800654c <strncmp>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d1f3      	bne.n	8005df2 <_findenv_r+0x32>
 8005e0a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8005e0e:	191e      	adds	r6, r3, r4
 8005e10:	5d1b      	ldrb	r3, [r3, r4]
 8005e12:	2b3d      	cmp	r3, #61	; 0x3d
 8005e14:	d1ed      	bne.n	8005df2 <_findenv_r+0x32>
 8005e16:	f8da 3000 	ldr.w	r3, [sl]
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	1aed      	subs	r5, r5, r3
 8005e1e:	10ad      	asrs	r5, r5, #2
 8005e20:	f8c8 5000 	str.w	r5, [r8]
 8005e24:	f000 fc5a 	bl	80066dc <__env_unlock>
 8005e28:	1c70      	adds	r0, r6, #1
 8005e2a:	e7e0      	b.n	8005dee <_findenv_r+0x2e>
 8005e2c:	eba4 040b 	sub.w	r4, r4, fp
 8005e30:	e7e0      	b.n	8005df4 <_findenv_r+0x34>
 8005e32:	bf00      	nop
 8005e34:	20000000 	.word	0x20000000

08005e38 <_getenv_r>:
 8005e38:	b507      	push	{r0, r1, r2, lr}
 8005e3a:	aa01      	add	r2, sp, #4
 8005e3c:	f7ff ffc0 	bl	8005dc0 <_findenv_r>
 8005e40:	b003      	add	sp, #12
 8005e42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005e48 <_gettimeofday_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4c06      	ldr	r4, [pc, #24]	; (8005e68 <_gettimeofday_r+0x20>)
 8005e4e:	4605      	mov	r5, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	4611      	mov	r1, r2
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	f001 f89b 	bl	8006f90 <_gettimeofday>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	d102      	bne.n	8005e64 <_gettimeofday_r+0x1c>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	b103      	cbz	r3, 8005e64 <_gettimeofday_r+0x1c>
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
 8005e66:	bf00      	nop
 8005e68:	20000360 	.word	0x20000360

08005e6c <__gettzinfo>:
 8005e6c:	4800      	ldr	r0, [pc, #0]	; (8005e70 <__gettzinfo+0x4>)
 8005e6e:	4770      	bx	lr
 8005e70:	20000080 	.word	0x20000080

08005e74 <labs>:
 8005e74:	2800      	cmp	r0, #0
 8005e76:	bfb8      	it	lt
 8005e78:	4240      	neglt	r0, r0
 8005e7a:	4770      	bx	lr

08005e7c <__locale_ctype_ptr_l>:
 8005e7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005e80:	4770      	bx	lr
	...

08005e84 <__locale_ctype_ptr>:
 8005e84:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <__locale_ctype_ptr+0x14>)
 8005e86:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <__locale_ctype_ptr+0x18>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bf08      	it	eq
 8005e90:	4613      	moveq	r3, r2
 8005e92:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005e96:	4770      	bx	lr
 8005e98:	20000010 	.word	0x20000010
 8005e9c:	200000d8 	.word	0x200000d8

08005ea0 <__ascii_mbtowc>:
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	b901      	cbnz	r1, 8005ea6 <__ascii_mbtowc+0x6>
 8005ea4:	a901      	add	r1, sp, #4
 8005ea6:	b142      	cbz	r2, 8005eba <__ascii_mbtowc+0x1a>
 8005ea8:	b14b      	cbz	r3, 8005ebe <__ascii_mbtowc+0x1e>
 8005eaa:	7813      	ldrb	r3, [r2, #0]
 8005eac:	600b      	str	r3, [r1, #0]
 8005eae:	7812      	ldrb	r2, [r2, #0]
 8005eb0:	1c10      	adds	r0, r2, #0
 8005eb2:	bf18      	it	ne
 8005eb4:	2001      	movne	r0, #1
 8005eb6:	b002      	add	sp, #8
 8005eb8:	4770      	bx	lr
 8005eba:	4610      	mov	r0, r2
 8005ebc:	e7fb      	b.n	8005eb6 <__ascii_mbtowc+0x16>
 8005ebe:	f06f 0001 	mvn.w	r0, #1
 8005ec2:	e7f8      	b.n	8005eb6 <__ascii_mbtowc+0x16>

08005ec4 <__malloc_lock>:
 8005ec4:	4770      	bx	lr

08005ec6 <__malloc_unlock>:
 8005ec6:	4770      	bx	lr

08005ec8 <__ssputs_r>:
 8005ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	688e      	ldr	r6, [r1, #8]
 8005ece:	4682      	mov	sl, r0
 8005ed0:	429e      	cmp	r6, r3
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4690      	mov	r8, r2
 8005ed6:	4699      	mov	r9, r3
 8005ed8:	d837      	bhi.n	8005f4a <__ssputs_r+0x82>
 8005eda:	898a      	ldrh	r2, [r1, #12]
 8005edc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ee0:	d031      	beq.n	8005f46 <__ssputs_r+0x7e>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	6825      	ldr	r5, [r4, #0]
 8005ee6:	6909      	ldr	r1, [r1, #16]
 8005ee8:	1a6f      	subs	r7, r5, r1
 8005eea:	6965      	ldr	r5, [r4, #20]
 8005eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ef0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ef4:	f109 0301 	add.w	r3, r9, #1
 8005ef8:	443b      	add	r3, r7
 8005efa:	429d      	cmp	r5, r3
 8005efc:	bf38      	it	cc
 8005efe:	461d      	movcc	r5, r3
 8005f00:	0553      	lsls	r3, r2, #21
 8005f02:	d530      	bpl.n	8005f66 <__ssputs_r+0x9e>
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fe ff33 	bl	8004d70 <_malloc_r>
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	b950      	cbnz	r0, 8005f24 <__ssputs_r+0x5c>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	f8ca 3000 	str.w	r3, [sl]
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1e:	81a3      	strh	r3, [r4, #12]
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	463a      	mov	r2, r7
 8005f26:	6921      	ldr	r1, [r4, #16]
 8005f28:	f000 fbe7 	bl	80066fa <memcpy>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	6126      	str	r6, [r4, #16]
 8005f3a:	443e      	add	r6, r7
 8005f3c:	6026      	str	r6, [r4, #0]
 8005f3e:	464e      	mov	r6, r9
 8005f40:	6165      	str	r5, [r4, #20]
 8005f42:	1bed      	subs	r5, r5, r7
 8005f44:	60a5      	str	r5, [r4, #8]
 8005f46:	454e      	cmp	r6, r9
 8005f48:	d900      	bls.n	8005f4c <__ssputs_r+0x84>
 8005f4a:	464e      	mov	r6, r9
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4641      	mov	r1, r8
 8005f50:	6820      	ldr	r0, [r4, #0]
 8005f52:	f000 fbdd 	bl	8006710 <memmove>
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	2000      	movs	r0, #0
 8005f5a:	1b9b      	subs	r3, r3, r6
 8005f5c:	60a3      	str	r3, [r4, #8]
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	441e      	add	r6, r3
 8005f62:	6026      	str	r6, [r4, #0]
 8005f64:	e7dc      	b.n	8005f20 <__ssputs_r+0x58>
 8005f66:	462a      	mov	r2, r5
 8005f68:	f000 fbeb 	bl	8006742 <_realloc_r>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d1e2      	bne.n	8005f38 <__ssputs_r+0x70>
 8005f72:	6921      	ldr	r1, [r4, #16]
 8005f74:	4650      	mov	r0, sl
 8005f76:	f7fe feaf 	bl	8004cd8 <_free_r>
 8005f7a:	e7c8      	b.n	8005f0e <__ssputs_r+0x46>

08005f7c <_svfiprintf_r>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	461d      	mov	r5, r3
 8005f82:	898b      	ldrh	r3, [r1, #12]
 8005f84:	b09d      	sub	sp, #116	; 0x74
 8005f86:	061f      	lsls	r7, r3, #24
 8005f88:	4680      	mov	r8, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	d50f      	bpl.n	8005fb0 <_svfiprintf_r+0x34>
 8005f90:	690b      	ldr	r3, [r1, #16]
 8005f92:	b96b      	cbnz	r3, 8005fb0 <_svfiprintf_r+0x34>
 8005f94:	2140      	movs	r1, #64	; 0x40
 8005f96:	f7fe feeb 	bl	8004d70 <_malloc_r>
 8005f9a:	6020      	str	r0, [r4, #0]
 8005f9c:	6120      	str	r0, [r4, #16]
 8005f9e:	b928      	cbnz	r0, 8005fac <_svfiprintf_r+0x30>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	f8c8 3000 	str.w	r3, [r8]
 8005fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005faa:	e0c8      	b.n	800613e <_svfiprintf_r+0x1c2>
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	6163      	str	r3, [r4, #20]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fba:	2330      	movs	r3, #48	; 0x30
 8005fbc:	f04f 0b01 	mov.w	fp, #1
 8005fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc4:	9503      	str	r5, [sp, #12]
 8005fc6:	4637      	mov	r7, r6
 8005fc8:	463d      	mov	r5, r7
 8005fca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005fce:	b10b      	cbz	r3, 8005fd4 <_svfiprintf_r+0x58>
 8005fd0:	2b25      	cmp	r3, #37	; 0x25
 8005fd2:	d13e      	bne.n	8006052 <_svfiprintf_r+0xd6>
 8005fd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005fd8:	d00b      	beq.n	8005ff2 <_svfiprintf_r+0x76>
 8005fda:	4653      	mov	r3, sl
 8005fdc:	4632      	mov	r2, r6
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	f7ff ff71 	bl	8005ec8 <__ssputs_r>
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f000 80a4 	beq.w	8006134 <_svfiprintf_r+0x1b8>
 8005fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fee:	4453      	add	r3, sl
 8005ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff2:	783b      	ldrb	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 809d 	beq.w	8006134 <_svfiprintf_r+0x1b8>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	9307      	str	r3, [sp, #28]
 8006008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800600c:	931a      	str	r3, [sp, #104]	; 0x68
 800600e:	462f      	mov	r7, r5
 8006010:	2205      	movs	r2, #5
 8006012:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006016:	4850      	ldr	r0, [pc, #320]	; (8006158 <_svfiprintf_r+0x1dc>)
 8006018:	f000 fb61 	bl	80066de <memchr>
 800601c:	9b04      	ldr	r3, [sp, #16]
 800601e:	b9d0      	cbnz	r0, 8006056 <_svfiprintf_r+0xda>
 8006020:	06d9      	lsls	r1, r3, #27
 8006022:	bf44      	itt	mi
 8006024:	2220      	movmi	r2, #32
 8006026:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800602a:	071a      	lsls	r2, r3, #28
 800602c:	bf44      	itt	mi
 800602e:	222b      	movmi	r2, #43	; 0x2b
 8006030:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006034:	782a      	ldrb	r2, [r5, #0]
 8006036:	2a2a      	cmp	r2, #42	; 0x2a
 8006038:	d015      	beq.n	8006066 <_svfiprintf_r+0xea>
 800603a:	462f      	mov	r7, r5
 800603c:	2000      	movs	r0, #0
 800603e:	250a      	movs	r5, #10
 8006040:	9a07      	ldr	r2, [sp, #28]
 8006042:	4639      	mov	r1, r7
 8006044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006048:	3b30      	subs	r3, #48	; 0x30
 800604a:	2b09      	cmp	r3, #9
 800604c:	d94d      	bls.n	80060ea <_svfiprintf_r+0x16e>
 800604e:	b1b8      	cbz	r0, 8006080 <_svfiprintf_r+0x104>
 8006050:	e00f      	b.n	8006072 <_svfiprintf_r+0xf6>
 8006052:	462f      	mov	r7, r5
 8006054:	e7b8      	b.n	8005fc8 <_svfiprintf_r+0x4c>
 8006056:	4a40      	ldr	r2, [pc, #256]	; (8006158 <_svfiprintf_r+0x1dc>)
 8006058:	463d      	mov	r5, r7
 800605a:	1a80      	subs	r0, r0, r2
 800605c:	fa0b f000 	lsl.w	r0, fp, r0
 8006060:	4318      	orrs	r0, r3
 8006062:	9004      	str	r0, [sp, #16]
 8006064:	e7d3      	b.n	800600e <_svfiprintf_r+0x92>
 8006066:	9a03      	ldr	r2, [sp, #12]
 8006068:	1d11      	adds	r1, r2, #4
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	9103      	str	r1, [sp, #12]
 800606e:	2a00      	cmp	r2, #0
 8006070:	db01      	blt.n	8006076 <_svfiprintf_r+0xfa>
 8006072:	9207      	str	r2, [sp, #28]
 8006074:	e004      	b.n	8006080 <_svfiprintf_r+0x104>
 8006076:	4252      	negs	r2, r2
 8006078:	f043 0302 	orr.w	r3, r3, #2
 800607c:	9207      	str	r2, [sp, #28]
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	783b      	ldrb	r3, [r7, #0]
 8006082:	2b2e      	cmp	r3, #46	; 0x2e
 8006084:	d10c      	bne.n	80060a0 <_svfiprintf_r+0x124>
 8006086:	787b      	ldrb	r3, [r7, #1]
 8006088:	2b2a      	cmp	r3, #42	; 0x2a
 800608a:	d133      	bne.n	80060f4 <_svfiprintf_r+0x178>
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	3702      	adds	r7, #2
 8006090:	1d1a      	adds	r2, r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	9203      	str	r2, [sp, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfb8      	it	lt
 800609a:	f04f 33ff 	movlt.w	r3, #4294967295
 800609e:	9305      	str	r3, [sp, #20]
 80060a0:	4d2e      	ldr	r5, [pc, #184]	; (800615c <_svfiprintf_r+0x1e0>)
 80060a2:	2203      	movs	r2, #3
 80060a4:	7839      	ldrb	r1, [r7, #0]
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 fb19 	bl	80066de <memchr>
 80060ac:	b138      	cbz	r0, 80060be <_svfiprintf_r+0x142>
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	1b40      	subs	r0, r0, r5
 80060b2:	fa03 f000 	lsl.w	r0, r3, r0
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	3701      	adds	r7, #1
 80060ba:	4303      	orrs	r3, r0
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	7839      	ldrb	r1, [r7, #0]
 80060c0:	2206      	movs	r2, #6
 80060c2:	4827      	ldr	r0, [pc, #156]	; (8006160 <_svfiprintf_r+0x1e4>)
 80060c4:	1c7e      	adds	r6, r7, #1
 80060c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ca:	f000 fb08 	bl	80066de <memchr>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d038      	beq.n	8006144 <_svfiprintf_r+0x1c8>
 80060d2:	4b24      	ldr	r3, [pc, #144]	; (8006164 <_svfiprintf_r+0x1e8>)
 80060d4:	bb13      	cbnz	r3, 800611c <_svfiprintf_r+0x1a0>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3307      	adds	r3, #7
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	3308      	adds	r3, #8
 80060e0:	9303      	str	r3, [sp, #12]
 80060e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e4:	444b      	add	r3, r9
 80060e6:	9309      	str	r3, [sp, #36]	; 0x24
 80060e8:	e76d      	b.n	8005fc6 <_svfiprintf_r+0x4a>
 80060ea:	fb05 3202 	mla	r2, r5, r2, r3
 80060ee:	2001      	movs	r0, #1
 80060f0:	460f      	mov	r7, r1
 80060f2:	e7a6      	b.n	8006042 <_svfiprintf_r+0xc6>
 80060f4:	2300      	movs	r3, #0
 80060f6:	250a      	movs	r5, #10
 80060f8:	4619      	mov	r1, r3
 80060fa:	3701      	adds	r7, #1
 80060fc:	9305      	str	r3, [sp, #20]
 80060fe:	4638      	mov	r0, r7
 8006100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006104:	3a30      	subs	r2, #48	; 0x30
 8006106:	2a09      	cmp	r2, #9
 8006108:	d903      	bls.n	8006112 <_svfiprintf_r+0x196>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0c8      	beq.n	80060a0 <_svfiprintf_r+0x124>
 800610e:	9105      	str	r1, [sp, #20]
 8006110:	e7c6      	b.n	80060a0 <_svfiprintf_r+0x124>
 8006112:	fb05 2101 	mla	r1, r5, r1, r2
 8006116:	2301      	movs	r3, #1
 8006118:	4607      	mov	r7, r0
 800611a:	e7f0      	b.n	80060fe <_svfiprintf_r+0x182>
 800611c:	ab03      	add	r3, sp, #12
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	4622      	mov	r2, r4
 8006122:	4b11      	ldr	r3, [pc, #68]	; (8006168 <_svfiprintf_r+0x1ec>)
 8006124:	a904      	add	r1, sp, #16
 8006126:	4640      	mov	r0, r8
 8006128:	f3af 8000 	nop.w
 800612c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006130:	4681      	mov	r9, r0
 8006132:	d1d6      	bne.n	80060e2 <_svfiprintf_r+0x166>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	065b      	lsls	r3, r3, #25
 8006138:	f53f af35 	bmi.w	8005fa6 <_svfiprintf_r+0x2a>
 800613c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800613e:	b01d      	add	sp, #116	; 0x74
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	ab03      	add	r3, sp, #12
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4622      	mov	r2, r4
 800614a:	4b07      	ldr	r3, [pc, #28]	; (8006168 <_svfiprintf_r+0x1ec>)
 800614c:	a904      	add	r1, sp, #16
 800614e:	4640      	mov	r0, r8
 8006150:	f000 f882 	bl	8006258 <_printf_i>
 8006154:	e7ea      	b.n	800612c <_svfiprintf_r+0x1b0>
 8006156:	bf00      	nop
 8006158:	0800744d 	.word	0x0800744d
 800615c:	08007453 	.word	0x08007453
 8006160:	08007457 	.word	0x08007457
 8006164:	00000000 	.word	0x00000000
 8006168:	08005ec9 	.word	0x08005ec9

0800616c <_printf_common>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	4691      	mov	r9, r2
 8006172:	461f      	mov	r7, r3
 8006174:	688a      	ldr	r2, [r1, #8]
 8006176:	690b      	ldr	r3, [r1, #16]
 8006178:	4606      	mov	r6, r0
 800617a:	4293      	cmp	r3, r2
 800617c:	bfb8      	it	lt
 800617e:	4613      	movlt	r3, r2
 8006180:	f8c9 3000 	str.w	r3, [r9]
 8006184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006188:	460c      	mov	r4, r1
 800618a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800618e:	b112      	cbz	r2, 8006196 <_printf_common+0x2a>
 8006190:	3301      	adds	r3, #1
 8006192:	f8c9 3000 	str.w	r3, [r9]
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0699      	lsls	r1, r3, #26
 800619a:	bf42      	ittt	mi
 800619c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80061a0:	3302      	addmi	r3, #2
 80061a2:	f8c9 3000 	strmi.w	r3, [r9]
 80061a6:	6825      	ldr	r5, [r4, #0]
 80061a8:	f015 0506 	ands.w	r5, r5, #6
 80061ac:	d107      	bne.n	80061be <_printf_common+0x52>
 80061ae:	f104 0a19 	add.w	sl, r4, #25
 80061b2:	68e3      	ldr	r3, [r4, #12]
 80061b4:	f8d9 2000 	ldr.w	r2, [r9]
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	42ab      	cmp	r3, r5
 80061bc:	dc29      	bgt.n	8006212 <_printf_common+0xa6>
 80061be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	3300      	adds	r3, #0
 80061c6:	bf18      	it	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	0692      	lsls	r2, r2, #26
 80061cc:	d42e      	bmi.n	800622c <_printf_common+0xc0>
 80061ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061d2:	4639      	mov	r1, r7
 80061d4:	4630      	mov	r0, r6
 80061d6:	47c0      	blx	r8
 80061d8:	3001      	adds	r0, #1
 80061da:	d021      	beq.n	8006220 <_printf_common+0xb4>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	68e5      	ldr	r5, [r4, #12]
 80061e0:	f003 0306 	and.w	r3, r3, #6
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	bf18      	it	ne
 80061e8:	2500      	movne	r5, #0
 80061ea:	f8d9 2000 	ldr.w	r2, [r9]
 80061ee:	f04f 0900 	mov.w	r9, #0
 80061f2:	bf08      	it	eq
 80061f4:	1aad      	subeq	r5, r5, r2
 80061f6:	68a3      	ldr	r3, [r4, #8]
 80061f8:	6922      	ldr	r2, [r4, #16]
 80061fa:	bf08      	it	eq
 80061fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006200:	4293      	cmp	r3, r2
 8006202:	bfc4      	itt	gt
 8006204:	1a9b      	subgt	r3, r3, r2
 8006206:	18ed      	addgt	r5, r5, r3
 8006208:	341a      	adds	r4, #26
 800620a:	454d      	cmp	r5, r9
 800620c:	d11a      	bne.n	8006244 <_printf_common+0xd8>
 800620e:	2000      	movs	r0, #0
 8006210:	e008      	b.n	8006224 <_printf_common+0xb8>
 8006212:	2301      	movs	r3, #1
 8006214:	4652      	mov	r2, sl
 8006216:	4639      	mov	r1, r7
 8006218:	4630      	mov	r0, r6
 800621a:	47c0      	blx	r8
 800621c:	3001      	adds	r0, #1
 800621e:	d103      	bne.n	8006228 <_printf_common+0xbc>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006228:	3501      	adds	r5, #1
 800622a:	e7c2      	b.n	80061b2 <_printf_common+0x46>
 800622c:	2030      	movs	r0, #48	; 0x30
 800622e:	18e1      	adds	r1, r4, r3
 8006230:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800623a:	4422      	add	r2, r4
 800623c:	3302      	adds	r3, #2
 800623e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006242:	e7c4      	b.n	80061ce <_printf_common+0x62>
 8006244:	2301      	movs	r3, #1
 8006246:	4622      	mov	r2, r4
 8006248:	4639      	mov	r1, r7
 800624a:	4630      	mov	r0, r6
 800624c:	47c0      	blx	r8
 800624e:	3001      	adds	r0, #1
 8006250:	d0e6      	beq.n	8006220 <_printf_common+0xb4>
 8006252:	f109 0901 	add.w	r9, r9, #1
 8006256:	e7d8      	b.n	800620a <_printf_common+0x9e>

08006258 <_printf_i>:
 8006258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800625c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006260:	460c      	mov	r4, r1
 8006262:	7e09      	ldrb	r1, [r1, #24]
 8006264:	b085      	sub	sp, #20
 8006266:	296e      	cmp	r1, #110	; 0x6e
 8006268:	4617      	mov	r7, r2
 800626a:	4606      	mov	r6, r0
 800626c:	4698      	mov	r8, r3
 800626e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006270:	f000 80b3 	beq.w	80063da <_printf_i+0x182>
 8006274:	d822      	bhi.n	80062bc <_printf_i+0x64>
 8006276:	2963      	cmp	r1, #99	; 0x63
 8006278:	d036      	beq.n	80062e8 <_printf_i+0x90>
 800627a:	d80a      	bhi.n	8006292 <_printf_i+0x3a>
 800627c:	2900      	cmp	r1, #0
 800627e:	f000 80b9 	beq.w	80063f4 <_printf_i+0x19c>
 8006282:	2958      	cmp	r1, #88	; 0x58
 8006284:	f000 8083 	beq.w	800638e <_printf_i+0x136>
 8006288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800628c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006290:	e032      	b.n	80062f8 <_printf_i+0xa0>
 8006292:	2964      	cmp	r1, #100	; 0x64
 8006294:	d001      	beq.n	800629a <_printf_i+0x42>
 8006296:	2969      	cmp	r1, #105	; 0x69
 8006298:	d1f6      	bne.n	8006288 <_printf_i+0x30>
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	6813      	ldr	r3, [r2, #0]
 800629e:	0605      	lsls	r5, r0, #24
 80062a0:	f103 0104 	add.w	r1, r3, #4
 80062a4:	d52a      	bpl.n	80062fc <_printf_i+0xa4>
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6011      	str	r1, [r2, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	da03      	bge.n	80062b6 <_printf_i+0x5e>
 80062ae:	222d      	movs	r2, #45	; 0x2d
 80062b0:	425b      	negs	r3, r3
 80062b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062b6:	486f      	ldr	r0, [pc, #444]	; (8006474 <_printf_i+0x21c>)
 80062b8:	220a      	movs	r2, #10
 80062ba:	e039      	b.n	8006330 <_printf_i+0xd8>
 80062bc:	2973      	cmp	r1, #115	; 0x73
 80062be:	f000 809d 	beq.w	80063fc <_printf_i+0x1a4>
 80062c2:	d808      	bhi.n	80062d6 <_printf_i+0x7e>
 80062c4:	296f      	cmp	r1, #111	; 0x6f
 80062c6:	d020      	beq.n	800630a <_printf_i+0xb2>
 80062c8:	2970      	cmp	r1, #112	; 0x70
 80062ca:	d1dd      	bne.n	8006288 <_printf_i+0x30>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	f043 0320 	orr.w	r3, r3, #32
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	e003      	b.n	80062de <_printf_i+0x86>
 80062d6:	2975      	cmp	r1, #117	; 0x75
 80062d8:	d017      	beq.n	800630a <_printf_i+0xb2>
 80062da:	2978      	cmp	r1, #120	; 0x78
 80062dc:	d1d4      	bne.n	8006288 <_printf_i+0x30>
 80062de:	2378      	movs	r3, #120	; 0x78
 80062e0:	4865      	ldr	r0, [pc, #404]	; (8006478 <_printf_i+0x220>)
 80062e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062e6:	e055      	b.n	8006394 <_printf_i+0x13c>
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062ee:	1d19      	adds	r1, r3, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6011      	str	r1, [r2, #0]
 80062f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062f8:	2301      	movs	r3, #1
 80062fa:	e08c      	b.n	8006416 <_printf_i+0x1be>
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006302:	6011      	str	r1, [r2, #0]
 8006304:	bf18      	it	ne
 8006306:	b21b      	sxthne	r3, r3
 8006308:	e7cf      	b.n	80062aa <_printf_i+0x52>
 800630a:	6813      	ldr	r3, [r2, #0]
 800630c:	6825      	ldr	r5, [r4, #0]
 800630e:	1d18      	adds	r0, r3, #4
 8006310:	6010      	str	r0, [r2, #0]
 8006312:	0628      	lsls	r0, r5, #24
 8006314:	d501      	bpl.n	800631a <_printf_i+0xc2>
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	e002      	b.n	8006320 <_printf_i+0xc8>
 800631a:	0668      	lsls	r0, r5, #25
 800631c:	d5fb      	bpl.n	8006316 <_printf_i+0xbe>
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	296f      	cmp	r1, #111	; 0x6f
 8006322:	bf14      	ite	ne
 8006324:	220a      	movne	r2, #10
 8006326:	2208      	moveq	r2, #8
 8006328:	4852      	ldr	r0, [pc, #328]	; (8006474 <_printf_i+0x21c>)
 800632a:	2100      	movs	r1, #0
 800632c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006330:	6865      	ldr	r5, [r4, #4]
 8006332:	2d00      	cmp	r5, #0
 8006334:	60a5      	str	r5, [r4, #8]
 8006336:	f2c0 8095 	blt.w	8006464 <_printf_i+0x20c>
 800633a:	6821      	ldr	r1, [r4, #0]
 800633c:	f021 0104 	bic.w	r1, r1, #4
 8006340:	6021      	str	r1, [r4, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d13d      	bne.n	80063c2 <_printf_i+0x16a>
 8006346:	2d00      	cmp	r5, #0
 8006348:	f040 808e 	bne.w	8006468 <_printf_i+0x210>
 800634c:	4665      	mov	r5, ip
 800634e:	2a08      	cmp	r2, #8
 8006350:	d10b      	bne.n	800636a <_printf_i+0x112>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	07db      	lsls	r3, r3, #31
 8006356:	d508      	bpl.n	800636a <_printf_i+0x112>
 8006358:	6923      	ldr	r3, [r4, #16]
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	bfde      	ittt	le
 8006360:	2330      	movle	r3, #48	; 0x30
 8006362:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006366:	f105 35ff 	addle.w	r5, r5, #4294967295
 800636a:	ebac 0305 	sub.w	r3, ip, r5
 800636e:	6123      	str	r3, [r4, #16]
 8006370:	f8cd 8000 	str.w	r8, [sp]
 8006374:	463b      	mov	r3, r7
 8006376:	aa03      	add	r2, sp, #12
 8006378:	4621      	mov	r1, r4
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff fef6 	bl	800616c <_printf_common>
 8006380:	3001      	adds	r0, #1
 8006382:	d14d      	bne.n	8006420 <_printf_i+0x1c8>
 8006384:	f04f 30ff 	mov.w	r0, #4294967295
 8006388:	b005      	add	sp, #20
 800638a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800638e:	4839      	ldr	r0, [pc, #228]	; (8006474 <_printf_i+0x21c>)
 8006390:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006394:	6813      	ldr	r3, [r2, #0]
 8006396:	6821      	ldr	r1, [r4, #0]
 8006398:	1d1d      	adds	r5, r3, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6015      	str	r5, [r2, #0]
 800639e:	060a      	lsls	r2, r1, #24
 80063a0:	d50b      	bpl.n	80063ba <_printf_i+0x162>
 80063a2:	07ca      	lsls	r2, r1, #31
 80063a4:	bf44      	itt	mi
 80063a6:	f041 0120 	orrmi.w	r1, r1, #32
 80063aa:	6021      	strmi	r1, [r4, #0]
 80063ac:	b91b      	cbnz	r3, 80063b6 <_printf_i+0x15e>
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	f022 0220 	bic.w	r2, r2, #32
 80063b4:	6022      	str	r2, [r4, #0]
 80063b6:	2210      	movs	r2, #16
 80063b8:	e7b7      	b.n	800632a <_printf_i+0xd2>
 80063ba:	064d      	lsls	r5, r1, #25
 80063bc:	bf48      	it	mi
 80063be:	b29b      	uxthmi	r3, r3
 80063c0:	e7ef      	b.n	80063a2 <_printf_i+0x14a>
 80063c2:	4665      	mov	r5, ip
 80063c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80063c8:	fb02 3311 	mls	r3, r2, r1, r3
 80063cc:	5cc3      	ldrb	r3, [r0, r3]
 80063ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063d2:	460b      	mov	r3, r1
 80063d4:	2900      	cmp	r1, #0
 80063d6:	d1f5      	bne.n	80063c4 <_printf_i+0x16c>
 80063d8:	e7b9      	b.n	800634e <_printf_i+0xf6>
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	6825      	ldr	r5, [r4, #0]
 80063de:	1d18      	adds	r0, r3, #4
 80063e0:	6961      	ldr	r1, [r4, #20]
 80063e2:	6010      	str	r0, [r2, #0]
 80063e4:	0628      	lsls	r0, r5, #24
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	d501      	bpl.n	80063ee <_printf_i+0x196>
 80063ea:	6019      	str	r1, [r3, #0]
 80063ec:	e002      	b.n	80063f4 <_printf_i+0x19c>
 80063ee:	066a      	lsls	r2, r5, #25
 80063f0:	d5fb      	bpl.n	80063ea <_printf_i+0x192>
 80063f2:	8019      	strh	r1, [r3, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	4665      	mov	r5, ip
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	e7b9      	b.n	8006370 <_printf_i+0x118>
 80063fc:	6813      	ldr	r3, [r2, #0]
 80063fe:	1d19      	adds	r1, r3, #4
 8006400:	6011      	str	r1, [r2, #0]
 8006402:	681d      	ldr	r5, [r3, #0]
 8006404:	6862      	ldr	r2, [r4, #4]
 8006406:	2100      	movs	r1, #0
 8006408:	4628      	mov	r0, r5
 800640a:	f000 f968 	bl	80066de <memchr>
 800640e:	b108      	cbz	r0, 8006414 <_printf_i+0x1bc>
 8006410:	1b40      	subs	r0, r0, r5
 8006412:	6060      	str	r0, [r4, #4]
 8006414:	6863      	ldr	r3, [r4, #4]
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2300      	movs	r3, #0
 800641a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641e:	e7a7      	b.n	8006370 <_printf_i+0x118>
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	462a      	mov	r2, r5
 8006424:	4639      	mov	r1, r7
 8006426:	4630      	mov	r0, r6
 8006428:	47c0      	blx	r8
 800642a:	3001      	adds	r0, #1
 800642c:	d0aa      	beq.n	8006384 <_printf_i+0x12c>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	079b      	lsls	r3, r3, #30
 8006432:	d413      	bmi.n	800645c <_printf_i+0x204>
 8006434:	68e0      	ldr	r0, [r4, #12]
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	4298      	cmp	r0, r3
 800643a:	bfb8      	it	lt
 800643c:	4618      	movlt	r0, r3
 800643e:	e7a3      	b.n	8006388 <_printf_i+0x130>
 8006440:	2301      	movs	r3, #1
 8006442:	464a      	mov	r2, r9
 8006444:	4639      	mov	r1, r7
 8006446:	4630      	mov	r0, r6
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d09a      	beq.n	8006384 <_printf_i+0x12c>
 800644e:	3501      	adds	r5, #1
 8006450:	68e3      	ldr	r3, [r4, #12]
 8006452:	9a03      	ldr	r2, [sp, #12]
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	42ab      	cmp	r3, r5
 8006458:	dcf2      	bgt.n	8006440 <_printf_i+0x1e8>
 800645a:	e7eb      	b.n	8006434 <_printf_i+0x1dc>
 800645c:	2500      	movs	r5, #0
 800645e:	f104 0919 	add.w	r9, r4, #25
 8006462:	e7f5      	b.n	8006450 <_printf_i+0x1f8>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1ac      	bne.n	80063c2 <_printf_i+0x16a>
 8006468:	7803      	ldrb	r3, [r0, #0]
 800646a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800646e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006472:	e76c      	b.n	800634e <_printf_i+0xf6>
 8006474:	0800745e 	.word	0x0800745e
 8006478:	0800746f 	.word	0x0800746f

0800647c <sniprintf>:
 800647c:	b40c      	push	{r2, r3}
 800647e:	b530      	push	{r4, r5, lr}
 8006480:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <sniprintf+0x64>)
 8006482:	1e0c      	subs	r4, r1, #0
 8006484:	b09d      	sub	sp, #116	; 0x74
 8006486:	681d      	ldr	r5, [r3, #0]
 8006488:	da08      	bge.n	800649c <sniprintf+0x20>
 800648a:	238b      	movs	r3, #139	; 0x8b
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	b01d      	add	sp, #116	; 0x74
 8006494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006498:	b002      	add	sp, #8
 800649a:	4770      	bx	lr
 800649c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80064a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064a4:	bf0c      	ite	eq
 80064a6:	4623      	moveq	r3, r4
 80064a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	9307      	str	r3, [sp, #28]
 80064b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	9006      	str	r0, [sp, #24]
 80064b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064be:	ab21      	add	r3, sp, #132	; 0x84
 80064c0:	a902      	add	r1, sp, #8
 80064c2:	4628      	mov	r0, r5
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	f7ff fd59 	bl	8005f7c <_svfiprintf_r>
 80064ca:	1c43      	adds	r3, r0, #1
 80064cc:	bfbc      	itt	lt
 80064ce:	238b      	movlt	r3, #139	; 0x8b
 80064d0:	602b      	strlt	r3, [r5, #0]
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	d0dd      	beq.n	8006492 <sniprintf+0x16>
 80064d6:	2200      	movs	r2, #0
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e7d9      	b.n	8006492 <sniprintf+0x16>
 80064de:	bf00      	nop
 80064e0:	20000010 	.word	0x20000010

080064e4 <siscanf>:
 80064e4:	b40e      	push	{r1, r2, r3}
 80064e6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80064ea:	b530      	push	{r4, r5, lr}
 80064ec:	b09c      	sub	sp, #112	; 0x70
 80064ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80064f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80064f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80064f8:	9002      	str	r0, [sp, #8]
 80064fa:	9006      	str	r0, [sp, #24]
 80064fc:	f7f9 fe28 	bl	8000150 <strlen>
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <siscanf+0x4c>)
 8006502:	9003      	str	r0, [sp, #12]
 8006504:	930b      	str	r3, [sp, #44]	; 0x2c
 8006506:	2300      	movs	r3, #0
 8006508:	930f      	str	r3, [sp, #60]	; 0x3c
 800650a:	9314      	str	r3, [sp, #80]	; 0x50
 800650c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006510:	9007      	str	r0, [sp, #28]
 8006512:	4808      	ldr	r0, [pc, #32]	; (8006534 <siscanf+0x50>)
 8006514:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006518:	462a      	mov	r2, r5
 800651a:	4623      	mov	r3, r4
 800651c:	a902      	add	r1, sp, #8
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	9401      	str	r4, [sp, #4]
 8006522:	f000 f98f 	bl	8006844 <__ssvfiscanf_r>
 8006526:	b01c      	add	sp, #112	; 0x70
 8006528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800652c:	b003      	add	sp, #12
 800652e:	4770      	bx	lr
 8006530:	08006539 	.word	0x08006539
 8006534:	20000010 	.word	0x20000010

08006538 <__seofread>:
 8006538:	2000      	movs	r0, #0
 800653a:	4770      	bx	lr

0800653c <strcpy>:
 800653c:	4603      	mov	r3, r0
 800653e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006542:	f803 2b01 	strb.w	r2, [r3], #1
 8006546:	2a00      	cmp	r2, #0
 8006548:	d1f9      	bne.n	800653e <strcpy+0x2>
 800654a:	4770      	bx	lr

0800654c <strncmp>:
 800654c:	b510      	push	{r4, lr}
 800654e:	b16a      	cbz	r2, 800656c <strncmp+0x20>
 8006550:	3901      	subs	r1, #1
 8006552:	1884      	adds	r4, r0, r2
 8006554:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006558:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800655c:	4293      	cmp	r3, r2
 800655e:	d103      	bne.n	8006568 <strncmp+0x1c>
 8006560:	42a0      	cmp	r0, r4
 8006562:	d001      	beq.n	8006568 <strncmp+0x1c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f5      	bne.n	8006554 <strncmp+0x8>
 8006568:	1a98      	subs	r0, r3, r2
 800656a:	bd10      	pop	{r4, pc}
 800656c:	4610      	mov	r0, r2
 800656e:	e7fc      	b.n	800656a <strncmp+0x1e>

08006570 <__tzcalc_limits>:
 8006570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	4680      	mov	r8, r0
 8006576:	f7ff fc79 	bl	8005e6c <__gettzinfo>
 800657a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800657e:	4598      	cmp	r8, r3
 8006580:	f340 8097 	ble.w	80066b2 <__tzcalc_limits+0x142>
 8006584:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006588:	f240 126d 	movw	r2, #365	; 0x16d
 800658c:	4443      	add	r3, r8
 800658e:	109b      	asrs	r3, r3, #2
 8006590:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8006594:	fb02 3505 	mla	r5, r2, r5, r3
 8006598:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800659c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80065a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065a4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80065a8:	441d      	add	r5, r3
 80065aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80065ae:	4442      	add	r2, r8
 80065b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80065b4:	fb98 f7f3 	sdiv	r7, r8, r3
 80065b8:	4415      	add	r5, r2
 80065ba:	2264      	movs	r2, #100	; 0x64
 80065bc:	fb03 8717 	mls	r7, r3, r7, r8
 80065c0:	fb98 f6f2 	sdiv	r6, r8, r2
 80065c4:	fab7 fc87 	clz	ip, r7
 80065c8:	4604      	mov	r4, r0
 80065ca:	f04f 0e07 	mov.w	lr, #7
 80065ce:	fb02 8616 	mls	r6, r2, r6, r8
 80065d2:	f008 0303 	and.w	r3, r8, #3
 80065d6:	f8c0 8004 	str.w	r8, [r0, #4]
 80065da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80065de:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	7a22      	ldrb	r2, [r4, #8]
 80065e6:	6963      	ldr	r3, [r4, #20]
 80065e8:	2a4a      	cmp	r2, #74	; 0x4a
 80065ea:	d128      	bne.n	800663e <__tzcalc_limits+0xce>
 80065ec:	9900      	ldr	r1, [sp, #0]
 80065ee:	18ea      	adds	r2, r5, r3
 80065f0:	b901      	cbnz	r1, 80065f4 <__tzcalc_limits+0x84>
 80065f2:	b906      	cbnz	r6, 80065f6 <__tzcalc_limits+0x86>
 80065f4:	bb0f      	cbnz	r7, 800663a <__tzcalc_limits+0xca>
 80065f6:	2b3b      	cmp	r3, #59	; 0x3b
 80065f8:	bfd4      	ite	le
 80065fa:	2300      	movle	r3, #0
 80065fc:	2301      	movgt	r3, #1
 80065fe:	4413      	add	r3, r2
 8006600:	1e5a      	subs	r2, r3, #1
 8006602:	69a3      	ldr	r3, [r4, #24]
 8006604:	492c      	ldr	r1, [pc, #176]	; (80066b8 <__tzcalc_limits+0x148>)
 8006606:	3428      	adds	r4, #40	; 0x28
 8006608:	fb01 3202 	mla	r2, r1, r2, r3
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	4413      	add	r3, r2
 8006610:	461a      	mov	r2, r3
 8006612:	17db      	asrs	r3, r3, #31
 8006614:	e944 2302 	strd	r2, r3, [r4, #-8]
 8006618:	45a3      	cmp	fp, r4
 800661a:	d1e3      	bne.n	80065e4 <__tzcalc_limits+0x74>
 800661c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8006620:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8006624:	4294      	cmp	r4, r2
 8006626:	eb75 0303 	sbcs.w	r3, r5, r3
 800662a:	bfb4      	ite	lt
 800662c:	2301      	movlt	r3, #1
 800662e:	2300      	movge	r3, #0
 8006630:	6003      	str	r3, [r0, #0]
 8006632:	2001      	movs	r0, #1
 8006634:	b003      	add	sp, #12
 8006636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663a:	2300      	movs	r3, #0
 800663c:	e7df      	b.n	80065fe <__tzcalc_limits+0x8e>
 800663e:	2a44      	cmp	r2, #68	; 0x44
 8006640:	d101      	bne.n	8006646 <__tzcalc_limits+0xd6>
 8006642:	18ea      	adds	r2, r5, r3
 8006644:	e7dd      	b.n	8006602 <__tzcalc_limits+0x92>
 8006646:	9a00      	ldr	r2, [sp, #0]
 8006648:	bb6a      	cbnz	r2, 80066a6 <__tzcalc_limits+0x136>
 800664a:	2e00      	cmp	r6, #0
 800664c:	bf0c      	ite	eq
 800664e:	46e1      	moveq	r9, ip
 8006650:	f04f 0901 	movne.w	r9, #1
 8006654:	2230      	movs	r2, #48	; 0x30
 8006656:	fb02 f909 	mul.w	r9, r2, r9
 800665a:	68e2      	ldr	r2, [r4, #12]
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	9201      	str	r2, [sp, #4]
 8006662:	462a      	mov	r2, r5
 8006664:	f108 0801 	add.w	r8, r8, #1
 8006668:	4914      	ldr	r1, [pc, #80]	; (80066bc <__tzcalc_limits+0x14c>)
 800666a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800666e:	448a      	add	sl, r1
 8006670:	9901      	ldr	r1, [sp, #4]
 8006672:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8006676:	4541      	cmp	r1, r8
 8006678:	dc17      	bgt.n	80066aa <__tzcalc_limits+0x13a>
 800667a:	f102 0804 	add.w	r8, r2, #4
 800667e:	fb98 f9fe 	sdiv	r9, r8, lr
 8006682:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8006686:	eba8 0909 	sub.w	r9, r8, r9
 800668a:	ebb3 0909 	subs.w	r9, r3, r9
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	bf48      	it	mi
 8006692:	f109 0907 	addmi.w	r9, r9, #7
 8006696:	3b01      	subs	r3, #1
 8006698:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800669c:	444b      	add	r3, r9
 800669e:	4553      	cmp	r3, sl
 80066a0:	da05      	bge.n	80066ae <__tzcalc_limits+0x13e>
 80066a2:	441a      	add	r2, r3
 80066a4:	e7ad      	b.n	8006602 <__tzcalc_limits+0x92>
 80066a6:	46e1      	mov	r9, ip
 80066a8:	e7d4      	b.n	8006654 <__tzcalc_limits+0xe4>
 80066aa:	4452      	add	r2, sl
 80066ac:	e7da      	b.n	8006664 <__tzcalc_limits+0xf4>
 80066ae:	3b07      	subs	r3, #7
 80066b0:	e7f5      	b.n	800669e <__tzcalc_limits+0x12e>
 80066b2:	2000      	movs	r0, #0
 80066b4:	e7be      	b.n	8006634 <__tzcalc_limits+0xc4>
 80066b6:	bf00      	nop
 80066b8:	00015180 	.word	0x00015180
 80066bc:	08007584 	.word	0x08007584

080066c0 <__ascii_wctomb>:
 80066c0:	b149      	cbz	r1, 80066d6 <__ascii_wctomb+0x16>
 80066c2:	2aff      	cmp	r2, #255	; 0xff
 80066c4:	bf8b      	itete	hi
 80066c6:	238a      	movhi	r3, #138	; 0x8a
 80066c8:	700a      	strbls	r2, [r1, #0]
 80066ca:	6003      	strhi	r3, [r0, #0]
 80066cc:	2001      	movls	r0, #1
 80066ce:	bf88      	it	hi
 80066d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80066d4:	4770      	bx	lr
 80066d6:	4608      	mov	r0, r1
 80066d8:	4770      	bx	lr

080066da <__env_lock>:
 80066da:	4770      	bx	lr

080066dc <__env_unlock>:
 80066dc:	4770      	bx	lr

080066de <memchr>:
 80066de:	b510      	push	{r4, lr}
 80066e0:	b2c9      	uxtb	r1, r1
 80066e2:	4402      	add	r2, r0
 80066e4:	4290      	cmp	r0, r2
 80066e6:	4603      	mov	r3, r0
 80066e8:	d101      	bne.n	80066ee <memchr+0x10>
 80066ea:	2300      	movs	r3, #0
 80066ec:	e003      	b.n	80066f6 <memchr+0x18>
 80066ee:	781c      	ldrb	r4, [r3, #0]
 80066f0:	3001      	adds	r0, #1
 80066f2:	428c      	cmp	r4, r1
 80066f4:	d1f6      	bne.n	80066e4 <memchr+0x6>
 80066f6:	4618      	mov	r0, r3
 80066f8:	bd10      	pop	{r4, pc}

080066fa <memcpy>:
 80066fa:	b510      	push	{r4, lr}
 80066fc:	1e43      	subs	r3, r0, #1
 80066fe:	440a      	add	r2, r1
 8006700:	4291      	cmp	r1, r2
 8006702:	d100      	bne.n	8006706 <memcpy+0xc>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800670a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800670e:	e7f7      	b.n	8006700 <memcpy+0x6>

08006710 <memmove>:
 8006710:	4288      	cmp	r0, r1
 8006712:	b510      	push	{r4, lr}
 8006714:	eb01 0302 	add.w	r3, r1, r2
 8006718:	d807      	bhi.n	800672a <memmove+0x1a>
 800671a:	1e42      	subs	r2, r0, #1
 800671c:	4299      	cmp	r1, r3
 800671e:	d00a      	beq.n	8006736 <memmove+0x26>
 8006720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006724:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006728:	e7f8      	b.n	800671c <memmove+0xc>
 800672a:	4283      	cmp	r3, r0
 800672c:	d9f5      	bls.n	800671a <memmove+0xa>
 800672e:	1881      	adds	r1, r0, r2
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	42d3      	cmn	r3, r2
 8006734:	d100      	bne.n	8006738 <memmove+0x28>
 8006736:	bd10      	pop	{r4, pc}
 8006738:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800673c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006740:	e7f7      	b.n	8006732 <memmove+0x22>

08006742 <_realloc_r>:
 8006742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006744:	4607      	mov	r7, r0
 8006746:	4614      	mov	r4, r2
 8006748:	460e      	mov	r6, r1
 800674a:	b921      	cbnz	r1, 8006756 <_realloc_r+0x14>
 800674c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006750:	4611      	mov	r1, r2
 8006752:	f7fe bb0d 	b.w	8004d70 <_malloc_r>
 8006756:	b922      	cbnz	r2, 8006762 <_realloc_r+0x20>
 8006758:	f7fe fabe 	bl	8004cd8 <_free_r>
 800675c:	4625      	mov	r5, r4
 800675e:	4628      	mov	r0, r5
 8006760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006762:	f000 fc0d 	bl	8006f80 <_malloc_usable_size_r>
 8006766:	42a0      	cmp	r0, r4
 8006768:	d20f      	bcs.n	800678a <_realloc_r+0x48>
 800676a:	4621      	mov	r1, r4
 800676c:	4638      	mov	r0, r7
 800676e:	f7fe faff 	bl	8004d70 <_malloc_r>
 8006772:	4605      	mov	r5, r0
 8006774:	2800      	cmp	r0, #0
 8006776:	d0f2      	beq.n	800675e <_realloc_r+0x1c>
 8006778:	4631      	mov	r1, r6
 800677a:	4622      	mov	r2, r4
 800677c:	f7ff ffbd 	bl	80066fa <memcpy>
 8006780:	4631      	mov	r1, r6
 8006782:	4638      	mov	r0, r7
 8006784:	f7fe faa8 	bl	8004cd8 <_free_r>
 8006788:	e7e9      	b.n	800675e <_realloc_r+0x1c>
 800678a:	4635      	mov	r5, r6
 800678c:	e7e7      	b.n	800675e <_realloc_r+0x1c>

0800678e <_sungetc_r>:
 800678e:	b538      	push	{r3, r4, r5, lr}
 8006790:	1c4b      	adds	r3, r1, #1
 8006792:	4614      	mov	r4, r2
 8006794:	d103      	bne.n	800679e <_sungetc_r+0x10>
 8006796:	f04f 35ff 	mov.w	r5, #4294967295
 800679a:	4628      	mov	r0, r5
 800679c:	bd38      	pop	{r3, r4, r5, pc}
 800679e:	8993      	ldrh	r3, [r2, #12]
 80067a0:	b2cd      	uxtb	r5, r1
 80067a2:	f023 0320 	bic.w	r3, r3, #32
 80067a6:	8193      	strh	r3, [r2, #12]
 80067a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067aa:	6852      	ldr	r2, [r2, #4]
 80067ac:	b18b      	cbz	r3, 80067d2 <_sungetc_r+0x44>
 80067ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067b0:	4293      	cmp	r3, r2
 80067b2:	dd08      	ble.n	80067c6 <_sungetc_r+0x38>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	1e5a      	subs	r2, r3, #1
 80067b8:	6022      	str	r2, [r4, #0]
 80067ba:	f803 5c01 	strb.w	r5, [r3, #-1]
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	3301      	adds	r3, #1
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	e7e9      	b.n	800679a <_sungetc_r+0xc>
 80067c6:	4621      	mov	r1, r4
 80067c8:	f000 fba2 	bl	8006f10 <__submore>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d0f1      	beq.n	80067b4 <_sungetc_r+0x26>
 80067d0:	e7e1      	b.n	8006796 <_sungetc_r+0x8>
 80067d2:	6921      	ldr	r1, [r4, #16]
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	b151      	cbz	r1, 80067ee <_sungetc_r+0x60>
 80067d8:	4299      	cmp	r1, r3
 80067da:	d208      	bcs.n	80067ee <_sungetc_r+0x60>
 80067dc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80067e0:	42a9      	cmp	r1, r5
 80067e2:	d104      	bne.n	80067ee <_sungetc_r+0x60>
 80067e4:	3b01      	subs	r3, #1
 80067e6:	3201      	adds	r2, #1
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	6062      	str	r2, [r4, #4]
 80067ec:	e7d5      	b.n	800679a <_sungetc_r+0xc>
 80067ee:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80067f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067f6:	6363      	str	r3, [r4, #52]	; 0x34
 80067f8:	2303      	movs	r3, #3
 80067fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80067fc:	4623      	mov	r3, r4
 80067fe:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	2301      	movs	r3, #1
 8006806:	e7dc      	b.n	80067c2 <_sungetc_r+0x34>

08006808 <__ssrefill_r>:
 8006808:	b510      	push	{r4, lr}
 800680a:	460c      	mov	r4, r1
 800680c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800680e:	b169      	cbz	r1, 800682c <__ssrefill_r+0x24>
 8006810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006814:	4299      	cmp	r1, r3
 8006816:	d001      	beq.n	800681c <__ssrefill_r+0x14>
 8006818:	f7fe fa5e 	bl	8004cd8 <_free_r>
 800681c:	2000      	movs	r0, #0
 800681e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006820:	6360      	str	r0, [r4, #52]	; 0x34
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	b113      	cbz	r3, 800682c <__ssrefill_r+0x24>
 8006826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd10      	pop	{r4, pc}
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	6063      	str	r3, [r4, #4]
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f043 0320 	orr.w	r3, r3, #32
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	e7f3      	b.n	800682a <__ssrefill_r+0x22>
	...

08006844 <__ssvfiscanf_r>:
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	2100      	movs	r1, #0
 800684c:	4606      	mov	r6, r0
 800684e:	4692      	mov	sl, r2
 8006850:	270a      	movs	r7, #10
 8006852:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006856:	9144      	str	r1, [sp, #272]	; 0x110
 8006858:	9145      	str	r1, [sp, #276]	; 0x114
 800685a:	499e      	ldr	r1, [pc, #632]	; (8006ad4 <__ssvfiscanf_r+0x290>)
 800685c:	f10d 0804 	add.w	r8, sp, #4
 8006860:	91a0      	str	r1, [sp, #640]	; 0x280
 8006862:	499d      	ldr	r1, [pc, #628]	; (8006ad8 <__ssvfiscanf_r+0x294>)
 8006864:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8006adc <__ssvfiscanf_r+0x298>
 8006868:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800686c:	91a1      	str	r1, [sp, #644]	; 0x284
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	f89a 3000 	ldrb.w	r3, [sl]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 812a 	beq.w	8006ace <__ssvfiscanf_r+0x28a>
 800687a:	4655      	mov	r5, sl
 800687c:	f7ff fb02 	bl	8005e84 <__locale_ctype_ptr>
 8006880:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006884:	4458      	add	r0, fp
 8006886:	7843      	ldrb	r3, [r0, #1]
 8006888:	f013 0308 	ands.w	r3, r3, #8
 800688c:	d01c      	beq.n	80068c8 <__ssvfiscanf_r+0x84>
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	dd12      	ble.n	80068ba <__ssvfiscanf_r+0x76>
 8006894:	f7ff faf6 	bl	8005e84 <__locale_ctype_ptr>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	4410      	add	r0, r2
 800689e:	7842      	ldrb	r2, [r0, #1]
 80068a0:	0712      	lsls	r2, r2, #28
 80068a2:	d401      	bmi.n	80068a8 <__ssvfiscanf_r+0x64>
 80068a4:	46aa      	mov	sl, r5
 80068a6:	e7e3      	b.n	8006870 <__ssvfiscanf_r+0x2c>
 80068a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80068aa:	3301      	adds	r3, #1
 80068ac:	3201      	adds	r2, #1
 80068ae:	9245      	str	r2, [sp, #276]	; 0x114
 80068b0:	6862      	ldr	r2, [r4, #4]
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	3a01      	subs	r2, #1
 80068b6:	6062      	str	r2, [r4, #4]
 80068b8:	e7e9      	b.n	800688e <__ssvfiscanf_r+0x4a>
 80068ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80068bc:	4621      	mov	r1, r4
 80068be:	4630      	mov	r0, r6
 80068c0:	4798      	blx	r3
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d0e6      	beq.n	8006894 <__ssvfiscanf_r+0x50>
 80068c6:	e7ed      	b.n	80068a4 <__ssvfiscanf_r+0x60>
 80068c8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80068cc:	f040 8082 	bne.w	80069d4 <__ssvfiscanf_r+0x190>
 80068d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80068d2:	9341      	str	r3, [sp, #260]	; 0x104
 80068d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80068d8:	2b2a      	cmp	r3, #42	; 0x2a
 80068da:	d103      	bne.n	80068e4 <__ssvfiscanf_r+0xa0>
 80068dc:	2310      	movs	r3, #16
 80068de:	f10a 0502 	add.w	r5, sl, #2
 80068e2:	9341      	str	r3, [sp, #260]	; 0x104
 80068e4:	46aa      	mov	sl, r5
 80068e6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80068ea:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80068ee:	2a09      	cmp	r2, #9
 80068f0:	d922      	bls.n	8006938 <__ssvfiscanf_r+0xf4>
 80068f2:	2203      	movs	r2, #3
 80068f4:	4879      	ldr	r0, [pc, #484]	; (8006adc <__ssvfiscanf_r+0x298>)
 80068f6:	f7ff fef2 	bl	80066de <memchr>
 80068fa:	b138      	cbz	r0, 800690c <__ssvfiscanf_r+0xc8>
 80068fc:	eba0 0309 	sub.w	r3, r0, r9
 8006900:	2001      	movs	r0, #1
 8006902:	46aa      	mov	sl, r5
 8006904:	4098      	lsls	r0, r3
 8006906:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006908:	4318      	orrs	r0, r3
 800690a:	9041      	str	r0, [sp, #260]	; 0x104
 800690c:	f89a 3000 	ldrb.w	r3, [sl]
 8006910:	f10a 0501 	add.w	r5, sl, #1
 8006914:	2b67      	cmp	r3, #103	; 0x67
 8006916:	d82b      	bhi.n	8006970 <__ssvfiscanf_r+0x12c>
 8006918:	2b65      	cmp	r3, #101	; 0x65
 800691a:	f080 809f 	bcs.w	8006a5c <__ssvfiscanf_r+0x218>
 800691e:	2b47      	cmp	r3, #71	; 0x47
 8006920:	d810      	bhi.n	8006944 <__ssvfiscanf_r+0x100>
 8006922:	2b45      	cmp	r3, #69	; 0x45
 8006924:	f080 809a 	bcs.w	8006a5c <__ssvfiscanf_r+0x218>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d06c      	beq.n	8006a06 <__ssvfiscanf_r+0x1c2>
 800692c:	2b25      	cmp	r3, #37	; 0x25
 800692e:	d051      	beq.n	80069d4 <__ssvfiscanf_r+0x190>
 8006930:	2303      	movs	r3, #3
 8006932:	9742      	str	r7, [sp, #264]	; 0x108
 8006934:	9347      	str	r3, [sp, #284]	; 0x11c
 8006936:	e027      	b.n	8006988 <__ssvfiscanf_r+0x144>
 8006938:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800693a:	fb07 1303 	mla	r3, r7, r3, r1
 800693e:	3b30      	subs	r3, #48	; 0x30
 8006940:	9343      	str	r3, [sp, #268]	; 0x10c
 8006942:	e7cf      	b.n	80068e4 <__ssvfiscanf_r+0xa0>
 8006944:	2b5b      	cmp	r3, #91	; 0x5b
 8006946:	d06a      	beq.n	8006a1e <__ssvfiscanf_r+0x1da>
 8006948:	d80c      	bhi.n	8006964 <__ssvfiscanf_r+0x120>
 800694a:	2b58      	cmp	r3, #88	; 0x58
 800694c:	d1f0      	bne.n	8006930 <__ssvfiscanf_r+0xec>
 800694e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006954:	9241      	str	r2, [sp, #260]	; 0x104
 8006956:	2210      	movs	r2, #16
 8006958:	9242      	str	r2, [sp, #264]	; 0x108
 800695a:	2b6e      	cmp	r3, #110	; 0x6e
 800695c:	bf8c      	ite	hi
 800695e:	2304      	movhi	r3, #4
 8006960:	2303      	movls	r3, #3
 8006962:	e010      	b.n	8006986 <__ssvfiscanf_r+0x142>
 8006964:	2b63      	cmp	r3, #99	; 0x63
 8006966:	d065      	beq.n	8006a34 <__ssvfiscanf_r+0x1f0>
 8006968:	2b64      	cmp	r3, #100	; 0x64
 800696a:	d1e1      	bne.n	8006930 <__ssvfiscanf_r+0xec>
 800696c:	9742      	str	r7, [sp, #264]	; 0x108
 800696e:	e7f4      	b.n	800695a <__ssvfiscanf_r+0x116>
 8006970:	2b70      	cmp	r3, #112	; 0x70
 8006972:	d04b      	beq.n	8006a0c <__ssvfiscanf_r+0x1c8>
 8006974:	d826      	bhi.n	80069c4 <__ssvfiscanf_r+0x180>
 8006976:	2b6e      	cmp	r3, #110	; 0x6e
 8006978:	d062      	beq.n	8006a40 <__ssvfiscanf_r+0x1fc>
 800697a:	d84c      	bhi.n	8006a16 <__ssvfiscanf_r+0x1d2>
 800697c:	2b69      	cmp	r3, #105	; 0x69
 800697e:	d1d7      	bne.n	8006930 <__ssvfiscanf_r+0xec>
 8006980:	2300      	movs	r3, #0
 8006982:	9342      	str	r3, [sp, #264]	; 0x108
 8006984:	2303      	movs	r3, #3
 8006986:	9347      	str	r3, [sp, #284]	; 0x11c
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dd68      	ble.n	8006a60 <__ssvfiscanf_r+0x21c>
 800698e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006990:	0659      	lsls	r1, r3, #25
 8006992:	d407      	bmi.n	80069a4 <__ssvfiscanf_r+0x160>
 8006994:	f7ff fa76 	bl	8005e84 <__locale_ctype_ptr>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	4410      	add	r0, r2
 800699e:	7842      	ldrb	r2, [r0, #1]
 80069a0:	0712      	lsls	r2, r2, #28
 80069a2:	d464      	bmi.n	8006a6e <__ssvfiscanf_r+0x22a>
 80069a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	dc73      	bgt.n	8006a92 <__ssvfiscanf_r+0x24e>
 80069aa:	466b      	mov	r3, sp
 80069ac:	4622      	mov	r2, r4
 80069ae:	a941      	add	r1, sp, #260	; 0x104
 80069b0:	4630      	mov	r0, r6
 80069b2:	f000 f897 	bl	8006ae4 <_scanf_chars>
 80069b6:	2801      	cmp	r0, #1
 80069b8:	f000 8089 	beq.w	8006ace <__ssvfiscanf_r+0x28a>
 80069bc:	2802      	cmp	r0, #2
 80069be:	f47f af71 	bne.w	80068a4 <__ssvfiscanf_r+0x60>
 80069c2:	e01d      	b.n	8006a00 <__ssvfiscanf_r+0x1bc>
 80069c4:	2b75      	cmp	r3, #117	; 0x75
 80069c6:	d0d1      	beq.n	800696c <__ssvfiscanf_r+0x128>
 80069c8:	2b78      	cmp	r3, #120	; 0x78
 80069ca:	d0c0      	beq.n	800694e <__ssvfiscanf_r+0x10a>
 80069cc:	2b73      	cmp	r3, #115	; 0x73
 80069ce:	d1af      	bne.n	8006930 <__ssvfiscanf_r+0xec>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e7d8      	b.n	8006986 <__ssvfiscanf_r+0x142>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd0c      	ble.n	80069f4 <__ssvfiscanf_r+0x1b0>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	455a      	cmp	r2, fp
 80069e0:	d175      	bne.n	8006ace <__ssvfiscanf_r+0x28a>
 80069e2:	3301      	adds	r3, #1
 80069e4:	6862      	ldr	r2, [r4, #4]
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80069ea:	3a01      	subs	r2, #1
 80069ec:	3301      	adds	r3, #1
 80069ee:	6062      	str	r2, [r4, #4]
 80069f0:	9345      	str	r3, [sp, #276]	; 0x114
 80069f2:	e757      	b.n	80068a4 <__ssvfiscanf_r+0x60>
 80069f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80069f6:	4621      	mov	r1, r4
 80069f8:	4630      	mov	r0, r6
 80069fa:	4798      	blx	r3
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d0ec      	beq.n	80069da <__ssvfiscanf_r+0x196>
 8006a00:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d159      	bne.n	8006aba <__ssvfiscanf_r+0x276>
 8006a06:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0a:	e05c      	b.n	8006ac6 <__ssvfiscanf_r+0x282>
 8006a0c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006a0e:	f042 0220 	orr.w	r2, r2, #32
 8006a12:	9241      	str	r2, [sp, #260]	; 0x104
 8006a14:	e79b      	b.n	800694e <__ssvfiscanf_r+0x10a>
 8006a16:	2308      	movs	r3, #8
 8006a18:	9342      	str	r3, [sp, #264]	; 0x108
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	e7b3      	b.n	8006986 <__ssvfiscanf_r+0x142>
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4640      	mov	r0, r8
 8006a22:	f000 f9b7 	bl	8006d94 <__sccl>
 8006a26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a28:	4605      	mov	r5, r0
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2e:	9341      	str	r3, [sp, #260]	; 0x104
 8006a30:	2301      	movs	r3, #1
 8006a32:	e7a8      	b.n	8006986 <__ssvfiscanf_r+0x142>
 8006a34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	9341      	str	r3, [sp, #260]	; 0x104
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e7a2      	b.n	8006986 <__ssvfiscanf_r+0x142>
 8006a40:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006a42:	06c3      	lsls	r3, r0, #27
 8006a44:	f53f af2e 	bmi.w	80068a4 <__ssvfiscanf_r+0x60>
 8006a48:	9b00      	ldr	r3, [sp, #0]
 8006a4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a4c:	1d19      	adds	r1, r3, #4
 8006a4e:	9100      	str	r1, [sp, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	07c0      	lsls	r0, r0, #31
 8006a54:	bf4c      	ite	mi
 8006a56:	801a      	strhmi	r2, [r3, #0]
 8006a58:	601a      	strpl	r2, [r3, #0]
 8006a5a:	e723      	b.n	80068a4 <__ssvfiscanf_r+0x60>
 8006a5c:	2305      	movs	r3, #5
 8006a5e:	e792      	b.n	8006986 <__ssvfiscanf_r+0x142>
 8006a60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a62:	4621      	mov	r1, r4
 8006a64:	4630      	mov	r0, r6
 8006a66:	4798      	blx	r3
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d090      	beq.n	800698e <__ssvfiscanf_r+0x14a>
 8006a6c:	e7c8      	b.n	8006a00 <__ssvfiscanf_r+0x1bc>
 8006a6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a70:	3201      	adds	r2, #1
 8006a72:	9245      	str	r2, [sp, #276]	; 0x114
 8006a74:	6862      	ldr	r2, [r4, #4]
 8006a76:	3a01      	subs	r2, #1
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	6062      	str	r2, [r4, #4]
 8006a7c:	dd02      	ble.n	8006a84 <__ssvfiscanf_r+0x240>
 8006a7e:	3301      	adds	r3, #1
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	e787      	b.n	8006994 <__ssvfiscanf_r+0x150>
 8006a84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a86:	4621      	mov	r1, r4
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4798      	blx	r3
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d081      	beq.n	8006994 <__ssvfiscanf_r+0x150>
 8006a90:	e7b6      	b.n	8006a00 <__ssvfiscanf_r+0x1bc>
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	dc06      	bgt.n	8006aa4 <__ssvfiscanf_r+0x260>
 8006a96:	466b      	mov	r3, sp
 8006a98:	4622      	mov	r2, r4
 8006a9a:	a941      	add	r1, sp, #260	; 0x104
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f883 	bl	8006ba8 <_scanf_i>
 8006aa2:	e788      	b.n	80069b6 <__ssvfiscanf_r+0x172>
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <__ssvfiscanf_r+0x29c>)
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f43f aefc 	beq.w	80068a4 <__ssvfiscanf_r+0x60>
 8006aac:	466b      	mov	r3, sp
 8006aae:	4622      	mov	r2, r4
 8006ab0:	a941      	add	r1, sp, #260	; 0x104
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	e77d      	b.n	80069b6 <__ssvfiscanf_r+0x172>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ac0:	bf18      	it	ne
 8006ac2:	f04f 30ff 	movne.w	r0, #4294967295
 8006ac6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006ad0:	e7f9      	b.n	8006ac6 <__ssvfiscanf_r+0x282>
 8006ad2:	bf00      	nop
 8006ad4:	0800678f 	.word	0x0800678f
 8006ad8:	08006809 	.word	0x08006809
 8006adc:	08007453 	.word	0x08007453
 8006ae0:	00000000 	.word	0x00000000

08006ae4 <_scanf_chars>:
 8006ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae8:	4615      	mov	r5, r2
 8006aea:	688a      	ldr	r2, [r1, #8]
 8006aec:	4680      	mov	r8, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	b932      	cbnz	r2, 8006b00 <_scanf_chars+0x1c>
 8006af2:	698a      	ldr	r2, [r1, #24]
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	bf14      	ite	ne
 8006af8:	f04f 32ff 	movne.w	r2, #4294967295
 8006afc:	2201      	moveq	r2, #1
 8006afe:	608a      	str	r2, [r1, #8]
 8006b00:	2600      	movs	r6, #0
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	06d1      	lsls	r1, r2, #27
 8006b06:	bf5f      	itttt	pl
 8006b08:	681a      	ldrpl	r2, [r3, #0]
 8006b0a:	1d11      	addpl	r1, r2, #4
 8006b0c:	6019      	strpl	r1, [r3, #0]
 8006b0e:	6817      	ldrpl	r7, [r2, #0]
 8006b10:	69a3      	ldr	r3, [r4, #24]
 8006b12:	b1db      	cbz	r3, 8006b4c <_scanf_chars+0x68>
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d107      	bne.n	8006b28 <_scanf_chars+0x44>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	6962      	ldr	r2, [r4, #20]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	5cd3      	ldrb	r3, [r2, r3]
 8006b20:	b9a3      	cbnz	r3, 8006b4c <_scanf_chars+0x68>
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	d131      	bne.n	8006b8a <_scanf_chars+0xa6>
 8006b26:	e006      	b.n	8006b36 <_scanf_chars+0x52>
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d007      	beq.n	8006b3c <_scanf_chars+0x58>
 8006b2c:	2e00      	cmp	r6, #0
 8006b2e:	d12c      	bne.n	8006b8a <_scanf_chars+0xa6>
 8006b30:	69a3      	ldr	r3, [r4, #24]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d129      	bne.n	8006b8a <_scanf_chars+0xa6>
 8006b36:	2001      	movs	r0, #1
 8006b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b3c:	f7ff f9a2 	bl	8005e84 <__locale_ctype_ptr>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	4418      	add	r0, r3
 8006b46:	7843      	ldrb	r3, [r0, #1]
 8006b48:	071b      	lsls	r3, r3, #28
 8006b4a:	d4ef      	bmi.n	8006b2c <_scanf_chars+0x48>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	3601      	adds	r6, #1
 8006b50:	06da      	lsls	r2, r3, #27
 8006b52:	bf5e      	ittt	pl
 8006b54:	682b      	ldrpl	r3, [r5, #0]
 8006b56:	781b      	ldrbpl	r3, [r3, #0]
 8006b58:	703b      	strbpl	r3, [r7, #0]
 8006b5a:	682a      	ldr	r2, [r5, #0]
 8006b5c:	686b      	ldr	r3, [r5, #4]
 8006b5e:	f102 0201 	add.w	r2, r2, #1
 8006b62:	602a      	str	r2, [r5, #0]
 8006b64:	68a2      	ldr	r2, [r4, #8]
 8006b66:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b6a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b6e:	606b      	str	r3, [r5, #4]
 8006b70:	bf58      	it	pl
 8006b72:	3701      	addpl	r7, #1
 8006b74:	60a2      	str	r2, [r4, #8]
 8006b76:	b142      	cbz	r2, 8006b8a <_scanf_chars+0xa6>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dcc9      	bgt.n	8006b10 <_scanf_chars+0x2c>
 8006b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b80:	4629      	mov	r1, r5
 8006b82:	4640      	mov	r0, r8
 8006b84:	4798      	blx	r3
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d0c2      	beq.n	8006b10 <_scanf_chars+0x2c>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	f013 0310 	ands.w	r3, r3, #16
 8006b90:	d105      	bne.n	8006b9e <_scanf_chars+0xba>
 8006b92:	68e2      	ldr	r2, [r4, #12]
 8006b94:	3201      	adds	r2, #1
 8006b96:	60e2      	str	r2, [r4, #12]
 8006b98:	69a2      	ldr	r2, [r4, #24]
 8006b9a:	b102      	cbz	r2, 8006b9e <_scanf_chars+0xba>
 8006b9c:	703b      	strb	r3, [r7, #0]
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	441e      	add	r6, r3
 8006ba4:	6126      	str	r6, [r4, #16]
 8006ba6:	e7c7      	b.n	8006b38 <_scanf_chars+0x54>

08006ba8 <_scanf_i>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	469a      	mov	sl, r3
 8006bb0:	4b74      	ldr	r3, [pc, #464]	; (8006d84 <_scanf_i+0x1dc>)
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	4683      	mov	fp, r0
 8006bb6:	4616      	mov	r6, r2
 8006bb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bbc:	ab03      	add	r3, sp, #12
 8006bbe:	68a7      	ldr	r7, [r4, #8]
 8006bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006bc4:	4b70      	ldr	r3, [pc, #448]	; (8006d88 <_scanf_i+0x1e0>)
 8006bc6:	69a1      	ldr	r1, [r4, #24]
 8006bc8:	4a70      	ldr	r2, [pc, #448]	; (8006d8c <_scanf_i+0x1e4>)
 8006bca:	f104 091c 	add.w	r9, r4, #28
 8006bce:	2903      	cmp	r1, #3
 8006bd0:	bf08      	it	eq
 8006bd2:	461a      	moveq	r2, r3
 8006bd4:	1e7b      	subs	r3, r7, #1
 8006bd6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006bda:	bf84      	itt	hi
 8006bdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006be0:	60a3      	strhi	r3, [r4, #8]
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	bf88      	it	hi
 8006be6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006bea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	bf98      	it	ls
 8006bf2:	2700      	movls	r7, #0
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	9200      	str	r2, [sp, #0]
 8006bfc:	bf88      	it	hi
 8006bfe:	197f      	addhi	r7, r7, r5
 8006c00:	6831      	ldr	r1, [r6, #0]
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	ab03      	add	r3, sp, #12
 8006c06:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	7809      	ldrb	r1, [r1, #0]
 8006c0e:	f7ff fd66 	bl	80066de <memchr>
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	b330      	cbz	r0, 8006c64 <_scanf_i+0xbc>
 8006c16:	f1b8 0f01 	cmp.w	r8, #1
 8006c1a:	d15a      	bne.n	8006cd2 <_scanf_i+0x12a>
 8006c1c:	6862      	ldr	r2, [r4, #4]
 8006c1e:	b92a      	cbnz	r2, 8006c2c <_scanf_i+0x84>
 8006c20:	2108      	movs	r1, #8
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	6061      	str	r1, [r4, #4]
 8006c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2a:	6022      	str	r2, [r4, #0]
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	68a2      	ldr	r2, [r4, #8]
 8006c36:	1e51      	subs	r1, r2, #1
 8006c38:	60a1      	str	r1, [r4, #8]
 8006c3a:	b19a      	cbz	r2, 8006c64 <_scanf_i+0xbc>
 8006c3c:	6832      	ldr	r2, [r6, #0]
 8006c3e:	1c5d      	adds	r5, r3, #1
 8006c40:	1c51      	adds	r1, r2, #1
 8006c42:	6031      	str	r1, [r6, #0]
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	6873      	ldr	r3, [r6, #4]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	6073      	str	r3, [r6, #4]
 8006c50:	dc07      	bgt.n	8006c62 <_scanf_i+0xba>
 8006c52:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c56:	4631      	mov	r1, r6
 8006c58:	4658      	mov	r0, fp
 8006c5a:	4798      	blx	r3
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f040 8087 	bne.w	8006d70 <_scanf_i+0x1c8>
 8006c62:	462b      	mov	r3, r5
 8006c64:	f108 0801 	add.w	r8, r8, #1
 8006c68:	f1b8 0f03 	cmp.w	r8, #3
 8006c6c:	d1c8      	bne.n	8006c00 <_scanf_i+0x58>
 8006c6e:	6862      	ldr	r2, [r4, #4]
 8006c70:	b90a      	cbnz	r2, 8006c76 <_scanf_i+0xce>
 8006c72:	220a      	movs	r2, #10
 8006c74:	6062      	str	r2, [r4, #4]
 8006c76:	6862      	ldr	r2, [r4, #4]
 8006c78:	4945      	ldr	r1, [pc, #276]	; (8006d90 <_scanf_i+0x1e8>)
 8006c7a:	6960      	ldr	r0, [r4, #20]
 8006c7c:	1a89      	subs	r1, r1, r2
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	f000 f888 	bl	8006d94 <__sccl>
 8006c84:	9b01      	ldr	r3, [sp, #4]
 8006c86:	f04f 0800 	mov.w	r8, #0
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	68a3      	ldr	r3, [r4, #8]
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d03b      	beq.n	8006d0c <_scanf_i+0x164>
 8006c94:	6831      	ldr	r1, [r6, #0]
 8006c96:	6960      	ldr	r0, [r4, #20]
 8006c98:	f891 c000 	ldrb.w	ip, [r1]
 8006c9c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d033      	beq.n	8006d0c <_scanf_i+0x164>
 8006ca4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006ca8:	d121      	bne.n	8006cee <_scanf_i+0x146>
 8006caa:	0510      	lsls	r0, r2, #20
 8006cac:	d51f      	bpl.n	8006cee <_scanf_i+0x146>
 8006cae:	f108 0801 	add.w	r8, r8, #1
 8006cb2:	b117      	cbz	r7, 8006cba <_scanf_i+0x112>
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	3f01      	subs	r7, #1
 8006cb8:	60a3      	str	r3, [r4, #8]
 8006cba:	6873      	ldr	r3, [r6, #4]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	6073      	str	r3, [r6, #4]
 8006cc2:	dd1c      	ble.n	8006cfe <_scanf_i+0x156>
 8006cc4:	6833      	ldr	r3, [r6, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	60a3      	str	r3, [r4, #8]
 8006cd0:	e7dc      	b.n	8006c8c <_scanf_i+0xe4>
 8006cd2:	f1b8 0f02 	cmp.w	r8, #2
 8006cd6:	d1ad      	bne.n	8006c34 <_scanf_i+0x8c>
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006cde:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006ce2:	d1bf      	bne.n	8006c64 <_scanf_i+0xbc>
 8006ce4:	2110      	movs	r1, #16
 8006ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cea:	6061      	str	r1, [r4, #4]
 8006cec:	e7a1      	b.n	8006c32 <_scanf_i+0x8a>
 8006cee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	780b      	ldrb	r3, [r1, #0]
 8006cf6:	3501      	adds	r5, #1
 8006cf8:	f805 3c01 	strb.w	r3, [r5, #-1]
 8006cfc:	e7dd      	b.n	8006cba <_scanf_i+0x112>
 8006cfe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d02:	4631      	mov	r1, r6
 8006d04:	4658      	mov	r0, fp
 8006d06:	4798      	blx	r3
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0de      	beq.n	8006cca <_scanf_i+0x122>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	05d9      	lsls	r1, r3, #23
 8006d10:	d50c      	bpl.n	8006d2c <_scanf_i+0x184>
 8006d12:	454d      	cmp	r5, r9
 8006d14:	d908      	bls.n	8006d28 <_scanf_i+0x180>
 8006d16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006d1a:	1e6f      	subs	r7, r5, #1
 8006d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d20:	4632      	mov	r2, r6
 8006d22:	4658      	mov	r0, fp
 8006d24:	4798      	blx	r3
 8006d26:	463d      	mov	r5, r7
 8006d28:	454d      	cmp	r5, r9
 8006d2a:	d029      	beq.n	8006d80 <_scanf_i+0x1d8>
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	f012 0210 	ands.w	r2, r2, #16
 8006d32:	d113      	bne.n	8006d5c <_scanf_i+0x1b4>
 8006d34:	702a      	strb	r2, [r5, #0]
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	4649      	mov	r1, r9
 8006d3a:	4658      	mov	r0, fp
 8006d3c:	9e00      	ldr	r6, [sp, #0]
 8006d3e:	47b0      	blx	r6
 8006d40:	f8da 3000 	ldr.w	r3, [sl]
 8006d44:	6821      	ldr	r1, [r4, #0]
 8006d46:	1d1a      	adds	r2, r3, #4
 8006d48:	f8ca 2000 	str.w	r2, [sl]
 8006d4c:	f011 0f20 	tst.w	r1, #32
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	d010      	beq.n	8006d76 <_scanf_i+0x1ce>
 8006d54:	6018      	str	r0, [r3, #0]
 8006d56:	68e3      	ldr	r3, [r4, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60e3      	str	r3, [r4, #12]
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	eba5 0509 	sub.w	r5, r5, r9
 8006d62:	44a8      	add	r8, r5
 8006d64:	6925      	ldr	r5, [r4, #16]
 8006d66:	4445      	add	r5, r8
 8006d68:	6125      	str	r5, [r4, #16]
 8006d6a:	b007      	add	sp, #28
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d70:	f04f 0800 	mov.w	r8, #0
 8006d74:	e7ca      	b.n	8006d0c <_scanf_i+0x164>
 8006d76:	07ca      	lsls	r2, r1, #31
 8006d78:	bf4c      	ite	mi
 8006d7a:	8018      	strhmi	r0, [r3, #0]
 8006d7c:	6018      	strpl	r0, [r3, #0]
 8006d7e:	e7ea      	b.n	8006d56 <_scanf_i+0x1ae>
 8006d80:	2001      	movs	r0, #1
 8006d82:	e7f2      	b.n	8006d6a <_scanf_i+0x1c2>
 8006d84:	08007160 	.word	0x08007160
 8006d88:	08006eed 	.word	0x08006eed
 8006d8c:	08005a29 	.word	0x08005a29
 8006d90:	080075f4 	.word	0x080075f4

08006d94 <__sccl>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	780b      	ldrb	r3, [r1, #0]
 8006d98:	1e44      	subs	r4, r0, #1
 8006d9a:	2b5e      	cmp	r3, #94	; 0x5e
 8006d9c:	bf13      	iteet	ne
 8006d9e:	1c4a      	addne	r2, r1, #1
 8006da0:	1c8a      	addeq	r2, r1, #2
 8006da2:	784b      	ldrbeq	r3, [r1, #1]
 8006da4:	2100      	movne	r1, #0
 8006da6:	bf08      	it	eq
 8006da8:	2101      	moveq	r1, #1
 8006daa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006dae:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006db2:	42ac      	cmp	r4, r5
 8006db4:	d1fb      	bne.n	8006dae <__sccl+0x1a>
 8006db6:	b913      	cbnz	r3, 8006dbe <__sccl+0x2a>
 8006db8:	3a01      	subs	r2, #1
 8006dba:	4610      	mov	r0, r2
 8006dbc:	bd70      	pop	{r4, r5, r6, pc}
 8006dbe:	f081 0401 	eor.w	r4, r1, #1
 8006dc2:	54c4      	strb	r4, [r0, r3]
 8006dc4:	1c51      	adds	r1, r2, #1
 8006dc6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006dca:	1e4e      	subs	r6, r1, #1
 8006dcc:	2d2d      	cmp	r5, #45	; 0x2d
 8006dce:	460a      	mov	r2, r1
 8006dd0:	d006      	beq.n	8006de0 <__sccl+0x4c>
 8006dd2:	2d5d      	cmp	r5, #93	; 0x5d
 8006dd4:	d0f1      	beq.n	8006dba <__sccl+0x26>
 8006dd6:	b90d      	cbnz	r5, 8006ddc <__sccl+0x48>
 8006dd8:	4632      	mov	r2, r6
 8006dda:	e7ee      	b.n	8006dba <__sccl+0x26>
 8006ddc:	462b      	mov	r3, r5
 8006dde:	e7f0      	b.n	8006dc2 <__sccl+0x2e>
 8006de0:	780e      	ldrb	r6, [r1, #0]
 8006de2:	2e5d      	cmp	r6, #93	; 0x5d
 8006de4:	d0fa      	beq.n	8006ddc <__sccl+0x48>
 8006de6:	42b3      	cmp	r3, r6
 8006de8:	dcf8      	bgt.n	8006ddc <__sccl+0x48>
 8006dea:	3301      	adds	r3, #1
 8006dec:	429e      	cmp	r6, r3
 8006dee:	54c4      	strb	r4, [r0, r3]
 8006df0:	dcfb      	bgt.n	8006dea <__sccl+0x56>
 8006df2:	3102      	adds	r1, #2
 8006df4:	e7e7      	b.n	8006dc6 <__sccl+0x32>

08006df6 <_strtol_l.isra.0>:
 8006df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4689      	mov	r9, r1
 8006dfe:	4692      	mov	sl, r2
 8006e00:	461e      	mov	r6, r3
 8006e02:	460f      	mov	r7, r1
 8006e04:	463d      	mov	r5, r7
 8006e06:	9808      	ldr	r0, [sp, #32]
 8006e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e0c:	f7ff f836 	bl	8005e7c <__locale_ctype_ptr_l>
 8006e10:	4420      	add	r0, r4
 8006e12:	7843      	ldrb	r3, [r0, #1]
 8006e14:	f013 0308 	ands.w	r3, r3, #8
 8006e18:	d132      	bne.n	8006e80 <_strtol_l.isra.0+0x8a>
 8006e1a:	2c2d      	cmp	r4, #45	; 0x2d
 8006e1c:	d132      	bne.n	8006e84 <_strtol_l.isra.0+0x8e>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	787c      	ldrb	r4, [r7, #1]
 8006e22:	1cbd      	adds	r5, r7, #2
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	d05d      	beq.n	8006ee4 <_strtol_l.isra.0+0xee>
 8006e28:	2e10      	cmp	r6, #16
 8006e2a:	d109      	bne.n	8006e40 <_strtol_l.isra.0+0x4a>
 8006e2c:	2c30      	cmp	r4, #48	; 0x30
 8006e2e:	d107      	bne.n	8006e40 <_strtol_l.isra.0+0x4a>
 8006e30:	782b      	ldrb	r3, [r5, #0]
 8006e32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e36:	2b58      	cmp	r3, #88	; 0x58
 8006e38:	d14f      	bne.n	8006eda <_strtol_l.isra.0+0xe4>
 8006e3a:	2610      	movs	r6, #16
 8006e3c:	786c      	ldrb	r4, [r5, #1]
 8006e3e:	3502      	adds	r5, #2
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	bf14      	ite	ne
 8006e44:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006e48:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006e4c:	2700      	movs	r7, #0
 8006e4e:	fbb1 fcf6 	udiv	ip, r1, r6
 8006e52:	4638      	mov	r0, r7
 8006e54:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006e58:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006e5c:	2b09      	cmp	r3, #9
 8006e5e:	d817      	bhi.n	8006e90 <_strtol_l.isra.0+0x9a>
 8006e60:	461c      	mov	r4, r3
 8006e62:	42a6      	cmp	r6, r4
 8006e64:	dd23      	ble.n	8006eae <_strtol_l.isra.0+0xb8>
 8006e66:	1c7b      	adds	r3, r7, #1
 8006e68:	d007      	beq.n	8006e7a <_strtol_l.isra.0+0x84>
 8006e6a:	4584      	cmp	ip, r0
 8006e6c:	d31c      	bcc.n	8006ea8 <_strtol_l.isra.0+0xb2>
 8006e6e:	d101      	bne.n	8006e74 <_strtol_l.isra.0+0x7e>
 8006e70:	45a6      	cmp	lr, r4
 8006e72:	db19      	blt.n	8006ea8 <_strtol_l.isra.0+0xb2>
 8006e74:	2701      	movs	r7, #1
 8006e76:	fb00 4006 	mla	r0, r0, r6, r4
 8006e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e7e:	e7eb      	b.n	8006e58 <_strtol_l.isra.0+0x62>
 8006e80:	462f      	mov	r7, r5
 8006e82:	e7bf      	b.n	8006e04 <_strtol_l.isra.0+0xe>
 8006e84:	2c2b      	cmp	r4, #43	; 0x2b
 8006e86:	bf04      	itt	eq
 8006e88:	1cbd      	addeq	r5, r7, #2
 8006e8a:	787c      	ldrbeq	r4, [r7, #1]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	e7c9      	b.n	8006e24 <_strtol_l.isra.0+0x2e>
 8006e90:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006e94:	2b19      	cmp	r3, #25
 8006e96:	d801      	bhi.n	8006e9c <_strtol_l.isra.0+0xa6>
 8006e98:	3c37      	subs	r4, #55	; 0x37
 8006e9a:	e7e2      	b.n	8006e62 <_strtol_l.isra.0+0x6c>
 8006e9c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006ea0:	2b19      	cmp	r3, #25
 8006ea2:	d804      	bhi.n	8006eae <_strtol_l.isra.0+0xb8>
 8006ea4:	3c57      	subs	r4, #87	; 0x57
 8006ea6:	e7dc      	b.n	8006e62 <_strtol_l.isra.0+0x6c>
 8006ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8006eac:	e7e5      	b.n	8006e7a <_strtol_l.isra.0+0x84>
 8006eae:	1c7b      	adds	r3, r7, #1
 8006eb0:	d108      	bne.n	8006ec4 <_strtol_l.isra.0+0xce>
 8006eb2:	2322      	movs	r3, #34	; 0x22
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	f8c8 3000 	str.w	r3, [r8]
 8006eba:	f1ba 0f00 	cmp.w	sl, #0
 8006ebe:	d107      	bne.n	8006ed0 <_strtol_l.isra.0+0xda>
 8006ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec4:	b102      	cbz	r2, 8006ec8 <_strtol_l.isra.0+0xd2>
 8006ec6:	4240      	negs	r0, r0
 8006ec8:	f1ba 0f00 	cmp.w	sl, #0
 8006ecc:	d0f8      	beq.n	8006ec0 <_strtol_l.isra.0+0xca>
 8006ece:	b10f      	cbz	r7, 8006ed4 <_strtol_l.isra.0+0xde>
 8006ed0:	f105 39ff 	add.w	r9, r5, #4294967295
 8006ed4:	f8ca 9000 	str.w	r9, [sl]
 8006ed8:	e7f2      	b.n	8006ec0 <_strtol_l.isra.0+0xca>
 8006eda:	2430      	movs	r4, #48	; 0x30
 8006edc:	2e00      	cmp	r6, #0
 8006ede:	d1af      	bne.n	8006e40 <_strtol_l.isra.0+0x4a>
 8006ee0:	2608      	movs	r6, #8
 8006ee2:	e7ad      	b.n	8006e40 <_strtol_l.isra.0+0x4a>
 8006ee4:	2c30      	cmp	r4, #48	; 0x30
 8006ee6:	d0a3      	beq.n	8006e30 <_strtol_l.isra.0+0x3a>
 8006ee8:	260a      	movs	r6, #10
 8006eea:	e7a9      	b.n	8006e40 <_strtol_l.isra.0+0x4a>

08006eec <_strtol_r>:
 8006eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eee:	4c06      	ldr	r4, [pc, #24]	; (8006f08 <_strtol_r+0x1c>)
 8006ef0:	4d06      	ldr	r5, [pc, #24]	; (8006f0c <_strtol_r+0x20>)
 8006ef2:	6824      	ldr	r4, [r4, #0]
 8006ef4:	6a24      	ldr	r4, [r4, #32]
 8006ef6:	2c00      	cmp	r4, #0
 8006ef8:	bf08      	it	eq
 8006efa:	462c      	moveq	r4, r5
 8006efc:	9400      	str	r4, [sp, #0]
 8006efe:	f7ff ff7a 	bl	8006df6 <_strtol_l.isra.0>
 8006f02:	b003      	add	sp, #12
 8006f04:	bd30      	pop	{r4, r5, pc}
 8006f06:	bf00      	nop
 8006f08:	20000010 	.word	0x20000010
 8006f0c:	200000d8 	.word	0x200000d8

08006f10 <__submore>:
 8006f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f1c:	4299      	cmp	r1, r3
 8006f1e:	d11b      	bne.n	8006f58 <__submore+0x48>
 8006f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f24:	f7fd ff24 	bl	8004d70 <_malloc_r>
 8006f28:	b918      	cbnz	r0, 8006f32 <__submore+0x22>
 8006f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f36:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8006f3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006f42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006f46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006f4a:	7043      	strb	r3, [r0, #1]
 8006f4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006f50:	7003      	strb	r3, [r0, #0]
 8006f52:	6020      	str	r0, [r4, #0]
 8006f54:	2000      	movs	r0, #0
 8006f56:	e7ea      	b.n	8006f2e <__submore+0x1e>
 8006f58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006f5a:	0077      	lsls	r7, r6, #1
 8006f5c:	463a      	mov	r2, r7
 8006f5e:	f7ff fbf0 	bl	8006742 <_realloc_r>
 8006f62:	4605      	mov	r5, r0
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d0e0      	beq.n	8006f2a <__submore+0x1a>
 8006f68:	eb00 0806 	add.w	r8, r0, r6
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	4632      	mov	r2, r6
 8006f70:	4640      	mov	r0, r8
 8006f72:	f7ff fbc2 	bl	80066fa <memcpy>
 8006f76:	f8c4 8000 	str.w	r8, [r4]
 8006f7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006f7e:	e7e9      	b.n	8006f54 <__submore+0x44>

08006f80 <_malloc_usable_size_r>:
 8006f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f84:	1f18      	subs	r0, r3, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bfbc      	itt	lt
 8006f8a:	580b      	ldrlt	r3, [r1, r0]
 8006f8c:	18c0      	addlt	r0, r0, r3
 8006f8e:	4770      	bx	lr

08006f90 <_gettimeofday>:
 8006f90:	2258      	movs	r2, #88	; 0x58
 8006f92:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <_gettimeofday+0xc>)
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	4770      	bx	lr
 8006f9c:	20000360 	.word	0x20000360

08006fa0 <_init>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	bf00      	nop
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr

08006fac <_fini>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr
