
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e0  080066e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080066e0  080066e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066e0  080066e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08006758  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08006758  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001233c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eff  00000000  00000000  000323d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f08  00000000  00000000  000352d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  000361e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a3b4  00000000  00000000  00036f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001009f  00000000  00000000  000512f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090bb8  00000000  00000000  00061393  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004144  00000000  00000000  000f1fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080063b4 	.word	0x080063b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080063b4 	.word	0x080063b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	d1ed      	bne.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <__gesf2>:
 8000de8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dec:	e006      	b.n	8000dfc <__cmpsf2+0x4>
 8000dee:	bf00      	nop

08000df0 <__lesf2>:
 8000df0:	f04f 0c01 	mov.w	ip, #1
 8000df4:	e002      	b.n	8000dfc <__cmpsf2+0x4>
 8000df6:	bf00      	nop

08000df8 <__cmpsf2>:
 8000df8:	f04f 0c01 	mov.w	ip, #1
 8000dfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e0c:	bf18      	it	ne
 8000e0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e12:	d011      	beq.n	8000e38 <__cmpsf2+0x40>
 8000e14:	b001      	add	sp, #4
 8000e16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e1a:	bf18      	it	ne
 8000e1c:	ea90 0f01 	teqne	r0, r1
 8000e20:	bf58      	it	pl
 8000e22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e26:	bf88      	it	hi
 8000e28:	17c8      	asrhi	r0, r1, #31
 8000e2a:	bf38      	it	cc
 8000e2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e30:	bf18      	it	ne
 8000e32:	f040 0001 	orrne.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e3c:	d102      	bne.n	8000e44 <__cmpsf2+0x4c>
 8000e3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e42:	d105      	bne.n	8000e50 <__cmpsf2+0x58>
 8000e44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e48:	d1e4      	bne.n	8000e14 <__cmpsf2+0x1c>
 8000e4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e4e:	d0e1      	beq.n	8000e14 <__cmpsf2+0x1c>
 8000e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <__aeabi_cfrcmple>:
 8000e58:	4684      	mov	ip, r0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	4661      	mov	r1, ip
 8000e5e:	e7ff      	b.n	8000e60 <__aeabi_cfcmpeq>

08000e60 <__aeabi_cfcmpeq>:
 8000e60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e62:	f7ff ffc9 	bl	8000df8 <__cmpsf2>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	bf48      	it	mi
 8000e6a:	f110 0f00 	cmnmi.w	r0, #0
 8000e6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e70 <__aeabi_fcmpeq>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff fff4 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e78:	bf0c      	ite	eq
 8000e7a:	2001      	moveq	r0, #1
 8000e7c:	2000      	movne	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_fcmplt>:
 8000e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e88:	f7ff ffea 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e8c:	bf34      	ite	cc
 8000e8e:	2001      	movcc	r0, #1
 8000e90:	2000      	movcs	r0, #0
 8000e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e96:	bf00      	nop

08000e98 <__aeabi_fcmple>:
 8000e98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e9c:	f7ff ffe0 	bl	8000e60 <__aeabi_cfcmpeq>
 8000ea0:	bf94      	ite	ls
 8000ea2:	2001      	movls	r0, #1
 8000ea4:	2000      	movhi	r0, #0
 8000ea6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eaa:	bf00      	nop

08000eac <__aeabi_fcmpge>:
 8000eac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb0:	f7ff ffd2 	bl	8000e58 <__aeabi_cfrcmple>
 8000eb4:	bf94      	ite	ls
 8000eb6:	2001      	movls	r0, #1
 8000eb8:	2000      	movhi	r0, #0
 8000eba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_fcmpgt>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff ffc8 	bl	8000e58 <__aeabi_cfrcmple>
 8000ec8:	bf34      	ite	cc
 8000eca:	2001      	movcc	r0, #1
 8000ecc:	2000      	movcs	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_f2uiz>:
 8000ed4:	0042      	lsls	r2, r0, #1
 8000ed6:	d20e      	bcs.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ed8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000edc:	d30b      	bcc.n	8000ef6 <__aeabi_f2uiz+0x22>
 8000ede:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ee2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee6:	d409      	bmi.n	8000efc <__aeabi_f2uiz+0x28>
 8000ee8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef4:	4770      	bx	lr
 8000ef6:	f04f 0000 	mov.w	r0, #0
 8000efa:	4770      	bx	lr
 8000efc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f00:	d101      	bne.n	8000f06 <__aeabi_f2uiz+0x32>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d102      	bne.n	8000f0c <__aeabi_f2uiz+0x38>
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	4770      	bx	lr
 8000f0c:	f04f 0000 	mov.w	r0, #0
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <ADC_Init>:
 * @retval none
 * @param hadc1 objeto do ADC_1
 *
 */
void ADC_Init(ADC_HandleTypeDef hadc1)
{
 8000f14:	b084      	sub	sp, #16
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	f107 0c08 	add.w	ip, r7, #8
 8000f1e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//calibração do ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000f22:	f107 0008 	add.w	r0, r7, #8
 8000f26:	f002 f98d 	bl	8003244 <HAL_ADCEx_Calibration_Start>
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f32:	b004      	add	sp, #16
 8000f34:	4770      	bx	lr
	...

08000f38 <ADC_GetValue>:
 * @param hadc1 objeto do ADC_1
 * @param cahannel_id id do canal a ser lido
 *
 */
uint32_t ADC_GetValue(ADC_HandleTypeDef hadc1, ADC_CHANNEL_Id channel_id)
{
 8000f38:	b084      	sub	sp, #16
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	f107 0c08 	add.w	ip, r7, #8
 8000f42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	adc_data_ready = 0;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <ADC_GetValue+0x40>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc_data, NUMBER_OF_CONVERSTION);
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	490b      	ldr	r1, [pc, #44]	; (8000f7c <ADC_GetValue+0x44>)
 8000f50:	f107 0008 	add.w	r0, r7, #8
 8000f54:	f001 fe9c 	bl	8002c90 <HAL_ADC_Start_DMA>

	HAL_ADC_Stop(&hadc1);
 8000f58:	f107 0008 	add.w	r0, r7, #8
 8000f5c:	f001 fe6c 	bl	8002c38 <HAL_ADC_Stop>

	return adc_data[channel_id];
 8000f60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <ADC_GetValue+0x44>)
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f72:	b004      	add	sp, #16
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000008c 	.word	0x2000008c
 8000f7c:	2000009c 	.word	0x2000009c

08000f80 <HAL_ADC_ConvCpltCallback>:
 *
 * Avisa que a leitura completa do adc foi realizada
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	adc_data_ready = 1;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x18>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	2000008c 	.word	0x2000008c

08000f9c <DWT_Delay_Init>:
 */

#include "DWT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <DWT_Delay_Init+0x58>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <DWT_Delay_Init+0x58>)
 8000fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000faa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <DWT_Delay_Init+0x58>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <DWT_Delay_Init+0x58>)
 8000fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <DWT_Delay_Init+0x5c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <DWT_Delay_Init+0x5c>)
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <DWT_Delay_Init+0x5c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <DWT_Delay_Init+0x5c>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <DWT_Delay_Init+0x5c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000fd6:	bf00      	nop
    __ASM volatile ("NOP");
 8000fd8:	bf00      	nop
    __ASM volatile ("NOP");
 8000fda:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <DWT_Delay_Init+0x5c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e000      	b.n	8000fea <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000fe8:	2301      	movs	r3, #1
    }
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000edf0 	.word	0xe000edf0
 8000ff8:	e0001000 	.word	0xe0001000

08000ffc <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <DWT_Delay_us+0x44>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800100a:	f003 fa2d 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 800100e:	4602      	mov	r2, r0
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <DWT_Delay_us+0x48>)
 8001012:	fba3 2302 	umull	r2, r3, r3, r2
 8001016:	0c9b      	lsrs	r3, r3, #18
 8001018:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	fb02 f303 	mul.w	r3, r2, r3
 8001022:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001024:	bf00      	nop
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <DWT_Delay_us+0x44>)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad2      	subs	r2, r2, r3
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1acb      	subs	r3, r1, r3
 8001034:	429a      	cmp	r2, r3
 8001036:	d3f6      	bcc.n	8001026 <DWT_Delay_us+0x2a>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	e0001000 	.word	0xe0001000
 8001044:	431bde83 	.word	0x431bde83

08001048 <LCD_Send>:
 *
 * Aciona pino enable, espera 15ms, desaciona pino enable
 *
 * @retval Nenhum
 */
void LCD_Send() {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_PINS, EN, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <LCD_Send+0x28>)
 8001054:	f002 fdff 	bl	8003c56 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001058:	200f      	movs	r0, #15
 800105a:	f001 fcf3 	bl	8002a44 <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_PINS, EN, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <LCD_Send+0x28>)
 8001066:	f002 fdf6 	bl	8003c56 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40010c00 	.word	0x40010c00

08001074 <LCD_Write>:
 *
 * @retval Nenhum
 * @param[in] data byte a ser enviado
 * @param[in] is_data 1 se for dado, 0 se for instrução
 */
void LCD_Write(uint8_t data, bool is_data) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CTRL_PINS, RS, is_data);  //instrução / data
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	461a      	mov	r2, r3
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	4825      	ldr	r0, [pc, #148]	; (8001124 <LCD_Write+0xb0>)
 800108e:	f002 fde2 	bl	8003c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_PINS, RW, 0);		//escrita
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001098:	4822      	ldr	r0, [pc, #136]	; (8001124 <LCD_Write+0xb0>)
 800109a:	f002 fddc 	bl	8003c56 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e017      	b.n	80010d4 <LCD_Write+0x60>
			{
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b299      	uxth	r1, r3
				data & (1 << (i + 4)));
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3304      	adds	r3, #4
 80010b4:	2201      	movs	r2, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	b25a      	sxtb	r2, r3
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4013      	ands	r3, r2
 80010c2:	b25b      	sxtb	r3, r3
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <LCD_Write+0xb0>)
 80010ca:	f002 fdc4 	bl	8003c56 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d9e4      	bls.n	80010a4 <LCD_Write+0x30>
		//00100111
	}

	LCD_Send();
 80010da:	f7ff ffb5 	bl	8001048 <LCD_Send>

	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e016      	b.n	8001112 <LCD_Write+0x9e>
			{
		HAL_GPIO_WritePin(DATA_PINS, (uint16_t) FRST_PIN << i, data & (1 << i));
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	b299      	uxth	r1, r3
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	2201      	movs	r2, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	b25a      	sxtb	r2, r3
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	4013      	ands	r3, r2
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <LCD_Write+0xb0>)
 8001108:	f002 fda5 	bl	8003c56 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	3301      	adds	r3, #1
 8001110:	73bb      	strb	r3, [r7, #14]
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d9e5      	bls.n	80010e4 <LCD_Write+0x70>
	}

	LCD_Send();
 8001118:	f7ff ff96 	bl	8001048 <LCD_Send>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40010c00 	.word	0x40010c00

08001128 <LCD_Write_Buffer>:
 *
 *
 * @retval Nenhum
 * @param[in] *data string a ser enviado
 */
void LCD_Write_Buffer(uint8_t *data) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e069      	b.n	800120a <LCD_Write_Buffer+0xe2>
		if(i == 17)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b11      	cmp	r3, #17
 800113a:	d103      	bne.n	8001144 <LCD_Write_Buffer+0x1c>
		{
			LCD_Write(0xC0, 0);
 800113c:	2100      	movs	r1, #0
 800113e:	20c0      	movs	r0, #192	; 0xc0
 8001140:	f7ff ff98 	bl	8001074 <LCD_Write>
		}
		//caracter espciais
		switch (*data) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2bc3      	cmp	r3, #195	; 0xc3
 800114a:	d152      	bne.n	80011f2 <LCD_Write_Buffer+0xca>
			case 195:
				data++;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
				switch (*data) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3ba1      	subs	r3, #161	; 0xa1
 8001158:	2b14      	cmp	r3, #20
 800115a:	d846      	bhi.n	80011ea <LCD_Write_Buffer+0xc2>
 800115c:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <LCD_Write_Buffer+0x3c>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	080011b9 	.word	0x080011b9
 8001168:	080011eb 	.word	0x080011eb
 800116c:	080011d7 	.word	0x080011d7
 8001170:	080011eb 	.word	0x080011eb
 8001174:	080011eb 	.word	0x080011eb
 8001178:	080011eb 	.word	0x080011eb
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011eb 	.word	0x080011eb
 8001184:	080011c3 	.word	0x080011c3
 8001188:	080011eb 	.word	0x080011eb
 800118c:	080011eb 	.word	0x080011eb
 8001190:	080011eb 	.word	0x080011eb
 8001194:	080011eb 	.word	0x080011eb
 8001198:	080011eb 	.word	0x080011eb
 800119c:	080011eb 	.word	0x080011eb
 80011a0:	080011eb 	.word	0x080011eb
 80011a4:	080011eb 	.word	0x080011eb
 80011a8:	080011eb 	.word	0x080011eb
 80011ac:	080011eb 	.word	0x080011eb
 80011b0:	080011eb 	.word	0x080011eb
 80011b4:	080011e1 	.word	0x080011e1
					case 161:
						LCD_Write(0, 1);
 80011b8:	2101      	movs	r1, #1
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ff5a 	bl	8001074 <LCD_Write>
						break;
 80011c0:	e013      	b.n	80011ea <LCD_Write_Buffer+0xc2>
					case 169:
						LCD_Write(1, 1);
 80011c2:	2101      	movs	r1, #1
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff55 	bl	8001074 <LCD_Write>
						break;
 80011ca:	e00e      	b.n	80011ea <LCD_Write_Buffer+0xc2>
					case 167:
						LCD_Write(2, 1);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff ff50 	bl	8001074 <LCD_Write>
						break;
 80011d4:	e009      	b.n	80011ea <LCD_Write_Buffer+0xc2>
					case 163:
						LCD_Write(3, 1);
 80011d6:	2101      	movs	r1, #1
 80011d8:	2003      	movs	r0, #3
 80011da:	f7ff ff4b 	bl	8001074 <LCD_Write>
						break;
 80011de:	e004      	b.n	80011ea <LCD_Write_Buffer+0xc2>
					case 181:
						LCD_Write(4, 1);
 80011e0:	2101      	movs	r1, #1
 80011e2:	2004      	movs	r0, #4
 80011e4:	f7ff ff46 	bl	8001074 <LCD_Write>
						break;
 80011e8:	bf00      	nop
				}
				data++;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
				break;
 80011f0:	e008      	b.n	8001204 <LCD_Write_Buffer+0xdc>
			default:
				LCD_Write(*data++, 1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff39 	bl	8001074 <LCD_Write>
				break;
 8001202:	bf00      	nop
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	3301      	adds	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	429a      	cmp	r2, r3
 8001212:	d390      	bcc.n	8001136 <LCD_Write_Buffer+0xe>
		}
	}
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <LCD_Clear>:
/**
 * @brief limpa display e retorna cursor para primeira linha
 *
 * @retval Nenhum
 */
void LCD_Clear(){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	LCD_Write(0x01, 0);
 8001220:	2100      	movs	r1, #0
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff26 	bl	8001074 <LCD_Write>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <LCD_First_Line>:
 * @brief Desloca o cursor para a posição inicial da primeira linha
 *
 * @retval Nenhum
 */
void LCD_First_Line()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	LCD_Write(0x80, 0);
 8001230:	2100      	movs	r1, #0
 8001232:	2080      	movs	r0, #128	; 0x80
 8001234:	f7ff ff1e 	bl	8001074 <LCD_Write>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <LCD_Seccond_Line>:
 * @brief Desloca o cursor para a posição inicial da segunda linha
 *
 * @retval Nenhum
 */
void LCD_Seccond_Line()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	LCD_Write(0xC0, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	20c0      	movs	r0, #192	; 0xc0
 8001244:	f7ff ff16 	bl	8001074 <LCD_Write>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <LCD_Create_Custom_Char>:
 *
 * @retval Nenhum
 * @param[in] loc localização para escrever o caracter
 * @param[in] *c ponteiro para o vetor de 8 bytes do caracter
 */
void LCD_Create_Custom_Char(uint8_t loc, uint8_t *c) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	if (loc < 8) {
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b07      	cmp	r3, #7
 800125c:	d819      	bhi.n	8001292 <LCD_Create_Custom_Char+0x46>
		LCD_Write(0x40 + (loc * 8), 0); /* aponta para 0x40 + loc * 8 */
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	3308      	adds	r3, #8
 8001262:	b2db      	uxtb	r3, r3
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff02 	bl	8001074 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e00a      	b.n	800128c <LCD_Create_Custom_Char+0x40>
			LCD_Write(c[i], 1);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2101      	movs	r1, #1
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fef7 	bl	8001074 <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b07      	cmp	r3, #7
 8001290:	d9f1      	bls.n	8001276 <LCD_Create_Custom_Char+0x2a>
	}
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <LCD_Init_Custom_Characters>:
 *
 *	Define vetor de caracteres customizados e escreve na CGRAM
 *
 * @retval Nenhum
 */
void LCD_Init_Custom_Characters() {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
	uint8_t character1[8] = { 0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <LCD_Init_Custom_Characters+0x8c>)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ac:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character2[8] = { 0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,
 80012b0:	4a1e      	ldr	r2, [pc, #120]	; (800132c <LCD_Init_Custom_Characters+0x90>)
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ba:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character3[8] = { 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x04,
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <LCD_Init_Custom_Characters+0x94>)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c8:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character4[8] = { 0x1F, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <LCD_Init_Custom_Characters+0x98>)
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d6:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character5[8] = { 0x1F, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <LCD_Init_Custom_Characters+0x9c>)
 80012dc:	463b      	mov	r3, r7
 80012de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e2:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	LCD_Create_Custom_Char(0, character1);
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	4619      	mov	r1, r3
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff ffad 	bl	800124c <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(1, character2);
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	4619      	mov	r1, r3
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff ffa7 	bl	800124c <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(2, character3);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	2002      	movs	r0, #2
 8001306:	f7ff ffa1 	bl	800124c <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(3, character4);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	2003      	movs	r0, #3
 8001312:	f7ff ff9b 	bl	800124c <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(4, character5);
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	2004      	movs	r0, #4
 800131c:	f7ff ff96 	bl	800124c <LCD_Create_Custom_Char>
}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	080063d0 	.word	0x080063d0
 800132c:	080063d8 	.word	0x080063d8
 8001330:	080063e0 	.word	0x080063e0
 8001334:	080063e8 	.word	0x080063e8
 8001338:	080063f0 	.word	0x080063f0

0800133c <LCD_Init>:
 *	Escreve deslocando a mensagem para a esquerda
 *	Inicializa caracteres especiais
 *
 * @retval Nenhum
 */
void LCD_Init() {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8001340:	200f      	movs	r0, #15
 8001342:	f001 fb7f 	bl	8002a44 <HAL_Delay>
	LCD_Write(0x03, 0); // 1
 8001346:	2100      	movs	r1, #0
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff fe93 	bl	8001074 <LCD_Write>
	LCD_Write(0x03, 0); // 2
 800134e:	2100      	movs	r1, #0
 8001350:	2003      	movs	r0, #3
 8001352:	f7ff fe8f 	bl	8001074 <LCD_Write>
	LCD_Write(0x03, 0); // 3
 8001356:	2100      	movs	r1, #0
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fe8b 	bl	8001074 <LCD_Write>
	LCD_Write(0x02, 0); // 4
 800135e:	2100      	movs	r1, #0
 8001360:	2002      	movs	r0, #2
 8001362:	f7ff fe87 	bl	8001074 <LCD_Write>
	LCD_Write(0x02, 0); // 5
 8001366:	2100      	movs	r1, #0
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff fe83 	bl	8001074 <LCD_Write>
	LCD_Write(0x08, 0); // 6
 800136e:	2100      	movs	r1, #0
 8001370:	2008      	movs	r0, #8
 8001372:	f7ff fe7f 	bl	8001074 <LCD_Write>
	LCD_Write(0x00, 0); // 7
 8001376:	2100      	movs	r1, #0
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fe7b 	bl	8001074 <LCD_Write>
	LCD_Write(0x08, 0); // 8
 800137e:	2100      	movs	r1, #0
 8001380:	2008      	movs	r0, #8
 8001382:	f7ff fe77 	bl	8001074 <LCD_Write>
	LCD_Write(0x00, 0); // 9
 8001386:	2100      	movs	r1, #0
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff fe73 	bl	8001074 <LCD_Write>
	LCD_Write(0x01, 0); // 10
 800138e:	2100      	movs	r1, #0
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff fe6f 	bl	8001074 <LCD_Write>
	LCD_Write(0x00, 0); // 11
 8001396:	2100      	movs	r1, #0
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fe6b 	bl	8001074 <LCD_Write>
	LCD_Write(0x01, 0); // 12
 800139e:	2100      	movs	r1, #0
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fe67 	bl	8001074 <LCD_Write>

	LCD_Write(0x28, 0); //2 linhas 5x7 (4 bits)
 80013a6:	2100      	movs	r1, #0
 80013a8:	2028      	movs	r0, #40	; 0x28
 80013aa:	f7ff fe63 	bl	8001074 <LCD_Write>
	LCD_Write(0x0E, 0); //Display aceso c/ cursor fixo
 80013ae:	2100      	movs	r1, #0
 80013b0:	200e      	movs	r0, #14
 80013b2:	f7ff fe5f 	bl	8001074 <LCD_Write>
	LCD_Write(0x06, 0); //Escreve deslocando a mensagem para a esquerda
 80013b6:	2100      	movs	r1, #0
 80013b8:	2006      	movs	r0, #6
 80013ba:	f7ff fe5b 	bl	8001074 <LCD_Write>

	LCD_Init_Custom_Characters();
 80013be:	f7ff ff6d 	bl	800129c <LCD_Init_Custom_Characters>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <PWM_Init>:
 * @retval none
 * @param htim2 objeto do Timer2
 *
 */
void PWM_Init(TIM_HandleTypeDef* htim2)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 80013ce:	2100      	movs	r1, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f003 fe91 	bl	80050f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 80013d6:	2104      	movs	r1, #4
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f003 fe8d 	bl	80050f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 80013de:	2108      	movs	r1, #8
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f003 fe89 	bl	80050f8 <HAL_TIM_PWM_Start>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <PWM_Increase>:
 * @retval none
 * @param pwm_data objeto que contém faixa de pwm e o canal do mesmo
 *
 */
void PWM_Increase(PWM_TypeDef pwm_data)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b08d      	sub	sp, #52	; 0x34
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//converte de porcentagem para valor
	uint32_t duty_value_max = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4932      	ldr	r1, [pc, #200]	; (80014c8 <PWM_Increase+0xd8>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fba1 	bl	8000b48 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fd63 	bl	8000ed4 <__aeabi_f2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t duty_value = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t init_time = HAL_GetTick();
 8001416:	f001 fb0b 	bl	8002a30 <HAL_GetTick>
 800141a:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t current_time = init_time;
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	623b      	str	r3, [r7, #32]

	//pega qual o delay necessário para atingir o tempo de subida;
	//multiplica por mil para transformar em microssegundos
	uint32_t delay = ((float)pwm_data.speed_time / duty_value_max) * 1000;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fb38 	bl	8000a98 <__aeabi_ui2f>
 8001428:	4604      	mov	r4, r0
 800142a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800142c:	f7ff fb34 	bl	8000a98 <__aeabi_ui2f>
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff fc3b 	bl	8000cb0 <__aeabi_fdiv>
 800143a:	4603      	mov	r3, r0
 800143c:	4923      	ldr	r1, [pc, #140]	; (80014cc <PWM_Increase+0xdc>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fb82 	bl	8000b48 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fd44 	bl	8000ed4 <__aeabi_f2uiz>
 800144c:	4603      	mov	r3, r0
 800144e:	61fb      	str	r3, [r7, #28]

	uint32_t first_time = HAL_GetTick();
 8001450:	f001 faee 	bl	8002a30 <HAL_GetTick>
 8001454:	61b8      	str	r0, [r7, #24]
	while(duty_value < duty_value_max)
 8001456:	e02c      	b.n	80014b2 <PWM_Increase+0xc2>
	{
		//Como identificar canal?
		if(pwm_data.pwm_channel == 1)
 8001458:	793b      	ldrb	r3, [r7, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <PWM_Increase+0x78>
		{
			TIM2->CCR1 = duty_value;
 800145e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001464:	6353      	str	r3, [r2, #52]	; 0x34
 8001466:	e00e      	b.n	8001486 <PWM_Increase+0x96>
		}
		else if(pwm_data.pwm_channel == 2)
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d104      	bne.n	8001478 <PWM_Increase+0x88>
		{
			TIM2->CCR2 = duty_value;
 800146e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	6393      	str	r3, [r2, #56]	; 0x38
 8001476:	e006      	b.n	8001486 <PWM_Increase+0x96>
		}
		else if(pwm_data.pwm_channel == 3)
 8001478:	793b      	ldrb	r3, [r7, #4]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d103      	bne.n	8001486 <PWM_Increase+0x96>
		{
			TIM2->CCR3 = duty_value;
 800147e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001484:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
		duty_value += 1;
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	3301      	adds	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
		DWT_Delay_us(delay);
 800148c:	69f8      	ldr	r0, [r7, #28]
 800148e:	f7ff fdb5 	bl	8000ffc <DWT_Delay_us>

		//pisca led
		current_time = HAL_GetTick();
 8001492:	f001 facd 	bl	8002a30 <HAL_GetTick>
 8001496:	6238      	str	r0, [r7, #32]
		if(current_time > (init_time + 300)){
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800149e:	6a3a      	ldr	r2, [r7, #32]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d906      	bls.n	80014b2 <PWM_Increase+0xc2>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80014a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <PWM_Increase+0xe0>)
 80014aa:	f002 fbec 	bl	8003c86 <HAL_GPIO_TogglePin>
			init_time = current_time;
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
	while(duty_value < duty_value_max)
 80014b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3ce      	bcc.n	8001458 <PWM_Increase+0x68>
		}
	}
	uint32_t last_time = HAL_GetTick();
 80014ba:	f001 fab9 	bl	8002a30 <HAL_GetTick>
 80014be:	6178      	str	r0, [r7, #20]
	return;
 80014c0:	bf00      	nop
}
 80014c2:	3734      	adds	r7, #52	; 0x34
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	4526a000 	.word	0x4526a000
 80014cc:	447a0000 	.word	0x447a0000
 80014d0:	40010800 	.word	0x40010800

080014d4 <PWM_Decrease>:
 * @retval none
 * @param pwm_data objeto que contém faixa de pwm e o canal do mesmo.
 *
 */
void PWM_Decrease(PWM_TypeDef pwm_data)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//converte de porcentagem para valor
	uint32_t duty_value_max = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4931      	ldr	r1, [pc, #196]	; (80015a8 <PWM_Decrease+0xd4>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb2f 	bl	8000b48 <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fcf1 	bl	8000ed4 <__aeabi_f2uiz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t init_time = HAL_GetTick();
 80014f6:	f001 fa9b 	bl	8002a30 <HAL_GetTick>
 80014fa:	6238      	str	r0, [r7, #32]
	uint32_t current_time = init_time;
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	61fb      	str	r3, [r7, #28]

	//pega qual o delay necessário para atingir o tempo de descida;
	//multiplica por mil para transformar em microssegundos
	uint32_t delay = ((float)pwm_data.speed_time / duty_value_max) * 1000;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fac8 	bl	8000a98 <__aeabi_ui2f>
 8001508:	4604      	mov	r4, r0
 800150a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800150c:	f7ff fac4 	bl	8000a98 <__aeabi_ui2f>
 8001510:	4603      	mov	r3, r0
 8001512:	4619      	mov	r1, r3
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff fbcb 	bl	8000cb0 <__aeabi_fdiv>
 800151a:	4603      	mov	r3, r0
 800151c:	4923      	ldr	r1, [pc, #140]	; (80015ac <PWM_Decrease+0xd8>)
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb12 	bl	8000b48 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fcd4 	bl	8000ed4 <__aeabi_f2uiz>
 800152c:	4603      	mov	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]

	uint32_t first_time = HAL_GetTick();
 8001530:	f001 fa7e 	bl	8002a30 <HAL_GetTick>
 8001534:	6178      	str	r0, [r7, #20]
	while(duty_value_max > 0)
 8001536:	e02c      	b.n	8001592 <PWM_Decrease+0xbe>
	{
		if(pwm_data.pwm_channel == 1)
 8001538:	793b      	ldrb	r3, [r7, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <PWM_Decrease+0x74>
		{
			TIM2->CCR1 = duty_value_max;
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	6353      	str	r3, [r2, #52]	; 0x34
 8001546:	e00e      	b.n	8001566 <PWM_Decrease+0x92>
		}
		else if(pwm_data.pwm_channel == 2)
 8001548:	793b      	ldrb	r3, [r7, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d104      	bne.n	8001558 <PWM_Decrease+0x84>
		{
			TIM2->CCR2 = duty_value_max;
 800154e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	6393      	str	r3, [r2, #56]	; 0x38
 8001556:	e006      	b.n	8001566 <PWM_Decrease+0x92>
		}
		else if(pwm_data.pwm_channel == 3)
 8001558:	793b      	ldrb	r3, [r7, #4]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d103      	bne.n	8001566 <PWM_Decrease+0x92>
		{
			TIM2->CCR3 = duty_value_max;
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
		duty_value_max -= 1;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	3b01      	subs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
		DWT_Delay_us(delay);
 800156c:	69b8      	ldr	r0, [r7, #24]
 800156e:	f7ff fd45 	bl	8000ffc <DWT_Delay_us>

		//pisca led
		current_time = HAL_GetTick();
 8001572:	f001 fa5d 	bl	8002a30 <HAL_GetTick>
 8001576:	61f8      	str	r0, [r7, #28]
		if(current_time > (init_time + 300)){
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	429a      	cmp	r2, r3
 8001582:	d906      	bls.n	8001592 <PWM_Decrease+0xbe>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <PWM_Decrease+0xdc>)
 800158a:	f002 fb7c 	bl	8003c86 <HAL_GPIO_TogglePin>
			init_time = current_time;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	623b      	str	r3, [r7, #32]
	while(duty_value_max > 0)
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1cf      	bne.n	8001538 <PWM_Decrease+0x64>
		}
	}
	uint32_t last_time = HAL_GetTick();
 8001598:	f001 fa4a 	bl	8002a30 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]
	return;
 800159e:	bf00      	nop
}
 80015a0:	372c      	adds	r7, #44	; 0x2c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	4526a000 	.word	0x4526a000
 80015ac:	447a0000 	.word	0x447a0000
 80015b0:	40010800 	.word	0x40010800

080015b4 <CAPSULE_Verify_Insertion>:
 *
 * @retval CAPSULE_Recipe_TypeDef
 *
 */
CAPSULE_Recipe_TypeDef CAPSULE_Verify_Insertion()
{
 80015b4:	b5b0      	push	{r4, r5, r7, lr}
 80015b6:	b0bc      	sub	sp, #240	; 0xf0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	uint8_t bit_0 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_0);
 80015bc:	2108      	movs	r1, #8
 80015be:	4861      	ldr	r0, [pc, #388]	; (8001744 <CAPSULE_Verify_Insertion+0x190>)
 80015c0:	f002 fb32 	bl	8003c28 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t bit_1 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_1);
 80015ca:	2110      	movs	r1, #16
 80015cc:	485d      	ldr	r0, [pc, #372]	; (8001744 <CAPSULE_Verify_Insertion+0x190>)
 80015ce:	f002 fb2b 	bl	8003c28 <HAL_GPIO_ReadPin>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	uint8_t bit_2 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_2);
 80015d8:	2120      	movs	r1, #32
 80015da:	485a      	ldr	r0, [pc, #360]	; (8001744 <CAPSULE_Verify_Insertion+0x190>)
 80015dc:	f002 fb24 	bl	8003c28 <HAL_GPIO_ReadPin>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	//monta número que identifica capsula
	CAPSULE_Type capsule_type = bit_0 | (bit_1 << 1) | (bit_2 << 2);
 80015e6:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b25b      	sxtb	r3, r3
 8001602:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

	CAPSULE_Recipe_TypeDef recipe;

	//inicializa receitas
	RECIPE_NONE_CAPSULE_TYPE_DATA(recipe_none);
 8001606:	4b50      	ldr	r3, [pc, #320]	; (8001748 <CAPSULE_Verify_Insertion+0x194>)
 8001608:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800160c:	461d      	mov	r5, r3
 800160e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001612:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_WATER_DATA(recipe_water);
 800161a:	4b4c      	ldr	r3, [pc, #304]	; (800174c <CAPSULE_Verify_Insertion+0x198>)
 800161c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001620:	461d      	mov	r5, r3
 8001622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001626:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800162a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SPARKLINK_WATER_DATA(recipe_sparklink_water);
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <CAPSULE_Verify_Insertion+0x19c>)
 8001630:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001634:	461d      	mov	r5, r3
 8001636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800163e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_ICE_TEA_DATA(recipe_ice_tea);
 8001642:	4b44      	ldr	r3, [pc, #272]	; (8001754 <CAPSULE_Verify_Insertion+0x1a0>)
 8001644:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001648:	461d      	mov	r5, r3
 800164a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_HOT_TEA_DATA(recipe_hot_tea);
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <CAPSULE_Verify_Insertion+0x1a4>)
 8001658:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800165c:	461d      	mov	r5, r3
 800165e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001662:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SODA_DATA(recipe_soda);
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <CAPSULE_Verify_Insertion+0x1a8>)
 800166c:	f107 040c 	add.w	r4, r7, #12
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800167a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (capsule_type) {
 800167e:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8001682:	2b05      	cmp	r3, #5
 8001684:	d850      	bhi.n	8001728 <CAPSULE_Verify_Insertion+0x174>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <CAPSULE_Verify_Insertion+0xd8>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	080016a5 	.word	0x080016a5
 8001690:	080016bb 	.word	0x080016bb
 8001694:	080016d1 	.word	0x080016d1
 8001698:	080016e7 	.word	0x080016e7
 800169c:	080016fd 	.word	0x080016fd
 80016a0:	08001713 	.word	0x08001713
		case NONE_CAPSULE_TYPE:
			return recipe_none;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	461d      	mov	r5, r3
 80016a8:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80016ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016b8:	e040      	b.n	800173c <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_WATER:
				return recipe_water;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	461d      	mov	r5, r3
 80016be:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80016c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016ce:	e035      	b.n	800173c <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SPARKLINK_WATER:
			return recipe_sparklink_water;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	461d      	mov	r5, r3
 80016d4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80016d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016e4:	e02a      	b.n	800173c <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_ICE_TEA:
				return recipe_ice_tea;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	461d      	mov	r5, r3
 80016ea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016fa:	e01f      	b.n	800173c <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_HOT_TEA:
				return recipe_hot_tea;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	461d      	mov	r5, r3
 8001700:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800170c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001710:	e014      	b.n	800173c <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SODA:
				return recipe_soda;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	461d      	mov	r5, r3
 8001716:	f107 040c 	add.w	r4, r7, #12
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001722:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001726:	e009      	b.n	800173c <CAPSULE_Verify_Insertion+0x188>
				break;
		default:
			return recipe_none;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	461d      	mov	r5, r3
 800172c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001738:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			break;
	}

}
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	37f0      	adds	r7, #240	; 0xf0
 8001740:	46bd      	mov	sp, r7
 8001742:	bdb0      	pop	{r4, r5, r7, pc}
 8001744:	40010c00 	.word	0x40010c00
 8001748:	080063f8 	.word	0x080063f8
 800174c:	08006418 	.word	0x08006418
 8001750:	08006438 	.word	0x08006438
 8001754:	08006458 	.word	0x08006458
 8001758:	08006478 	.word	0x08006478
 800175c:	08006498 	.word	0x08006498

08001760 <CONTROLLER_Execute>:
 * @param hadc objeto do ADC_1
 * @param capsule capsula que determina se precisará aquecer ou resfriar a água.
 *
 */
void CONTROLLER_Execute(ADC_HandleTypeDef hadc, CAPSULE_Recipe_TypeDef capsule)
{
 8001760:	b084      	sub	sp, #16
 8001762:	b5b0      	push	{r4, r5, r7, lr}
 8001764:	b0aa      	sub	sp, #168	; 0xa8
 8001766:	af0a      	add	r7, sp, #40	; 0x28
 8001768:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800176c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int32_t sensor_signal = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t sensor_temp = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	66bb      	str	r3, [r7, #104]	; 0x68
	int32_t error_signal = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t ref_sinal = capsule.water_temp;
 800177c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001780:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CHANNEL_Id sensor_channel_id;
	uint32_t init_time = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t current_time = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	673b      	str	r3, [r7, #112]	; 0x70

	Controler_TypeDef block;
	LCD_Clear();
 800178a:	f7ff fd47 	bl	800121c <LCD_Clear>

	Y3(natural_water_output);
 800178e:	4a8b      	ldr	r2, [pc, #556]	; (80019bc <CONTROLLER_Execute+0x25c>)
 8001790:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001798:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (capsule.water_type) {
 800179c:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d004      	beq.n	80017ae <CONTROLLER_Execute+0x4e>
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d048      	beq.n	800183a <CONTROLLER_Execute+0xda>
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d022      	beq.n	80017f2 <CONTROLLER_Execute+0x92>
		case NATURAL_WATER:
			block.output = natural_water_output;
			goto activate_pump;
			break;
		default:
			break;
 80017ac:	e04e      	b.n	800184c <CONTROLLER_Execute+0xec>
			LCD_Write_Buffer("Aquecendo a água.");
 80017ae:	4884      	ldr	r0, [pc, #528]	; (80019c0 <CONTROLLER_Execute+0x260>)
 80017b0:	f7ff fcba 	bl	8001128 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_HEATER_DATA(heater_block);
 80017b4:	4b83      	ldr	r3, [pc, #524]	; (80019c4 <CONTROLLER_Execute+0x264>)
 80017b6:	f107 0418 	add.w	r4, r7, #24
 80017ba:	461d      	mov	r5, r3
 80017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017c4:	e884 0003 	stmia.w	r4, {r0, r1}
			block = heater_block;
 80017c8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80017cc:	f107 0518 	add.w	r5, r7, #24
 80017d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017d8:	e884 0003 	stmia.w	r4, {r0, r1}
			PWM_Increase(block.pwm);
 80017dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e4:	f7ff fe04 	bl	80013f0 <PWM_Increase>
			sensor_channel_id = heater_block.adc_channel_id;
 80017e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ec:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			break;
 80017f0:	e02c      	b.n	800184c <CONTROLLER_Execute+0xec>
			LCD_Write_Buffer("Refrigerando a ");
 80017f2:	4875      	ldr	r0, [pc, #468]	; (80019c8 <CONTROLLER_Execute+0x268>)
 80017f4:	f7ff fc98 	bl	8001128 <LCD_Write_Buffer>
			LCD_Seccond_Line();
 80017f8:	f7ff fd20 	bl	800123c <LCD_Seccond_Line>
			LCD_Write_Buffer("água");
 80017fc:	4873      	ldr	r0, [pc, #460]	; (80019cc <CONTROLLER_Execute+0x26c>)
 80017fe:	f7ff fc93 	bl	8001128 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_COOLER_DATA(cooler_block);
 8001802:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <CONTROLLER_Execute+0x270>)
 8001804:	463c      	mov	r4, r7
 8001806:	461d      	mov	r5, r3
 8001808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001810:	e884 0003 	stmia.w	r4, {r0, r1}
			block = cooler_block;
 8001814:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001818:	463d      	mov	r5, r7
 800181a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001822:	e884 0003 	stmia.w	r4, {r0, r1}
			PWM_Increase(block.pwm);
 8001826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800182a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800182e:	f7ff fddf 	bl	80013f0 <PWM_Increase>
			sensor_channel_id = cooler_block.adc_channel_id;
 8001832:	7b3b      	ldrb	r3, [r7, #12]
 8001834:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			break;
 8001838:	e008      	b.n	800184c <CONTROLLER_Execute+0xec>
			block.output = natural_water_output;
 800183a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800183e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001842:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001846:	e883 0003 	stmia.w	r3, {r0, r1}
 800184a:	e03d      	b.n	80018c8 <CONTROLLER_Execute+0x168>
	}

	init_time = HAL_GetTick();
 800184c:	f001 f8f0 	bl	8002a30 <HAL_GetTick>
 8001850:	6778      	str	r0, [r7, #116]	; 0x74
	current_time = init_time;
 8001852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
	//fica no while até chegar na temperatura desejada
	while(error_signal != 0)
 8001856:	e02e      	b.n	80018b6 <CONTROLLER_Execute+0x156>
	{
		sensor_signal = ADC_GetValue(hadc, sensor_channel_id);
 8001858:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800185c:	9308      	str	r3, [sp, #32]
 800185e:	466d      	mov	r5, sp
 8001860:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001868:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800186c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001870:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001876:	f7ff fb5f 	bl	8000f38 <ADC_GetValue>
 800187a:	4603      	mov	r3, r0
 800187c:	66fb      	str	r3, [r7, #108]	; 0x6c

		sensor_temp = UTILS_To_Temp(sensor_signal);
 800187e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001880:	4618      	mov	r0, r3
 8001882:	f001 f82d 	bl	80028e0 <UTILS_To_Temp>
 8001886:	66b8      	str	r0, [r7, #104]	; 0x68

		error_signal = ref_sinal - sensor_temp;
 8001888:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800188a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	67fb      	str	r3, [r7, #124]	; 0x7c

		HAL_Delay(50);
 8001890:	2032      	movs	r0, #50	; 0x32
 8001892:	f001 f8d7 	bl	8002a44 <HAL_Delay>
		current_time = HAL_GetTick();
 8001896:	f001 f8cb 	bl	8002a30 <HAL_GetTick>
 800189a:	6738      	str	r0, [r7, #112]	; 0x70
		if(current_time > (init_time + 300)){
 800189c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800189e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80018a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d906      	bls.n	80018b6 <CONTROLLER_Execute+0x156>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80018a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ac:	4849      	ldr	r0, [pc, #292]	; (80019d4 <CONTROLLER_Execute+0x274>)
 80018ae:	f002 f9ea 	bl	8003c86 <HAL_GPIO_TogglePin>
			init_time = current_time;
 80018b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b4:	677b      	str	r3, [r7, #116]	; 0x74
	while(error_signal != 0)
 80018b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1cd      	bne.n	8001858 <CONTROLLER_Execute+0xf8>
		}
	}

	PWM_Decrease(block.pwm);
 80018bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018c4:	f7ff fe06 	bl	80014d4 <PWM_Decrease>

	activate_pump: ;

	LCD_Clear();
 80018c8:	f7ff fca8 	bl	800121c <LCD_Clear>
	LCD_Write_Buffer("Ativando bomba...");
 80018cc:	4842      	ldr	r0, [pc, #264]	; (80019d8 <CONTROLLER_Execute+0x278>)
 80018ce:	f7ff fc2b 	bl	8001128 <LCD_Write_Buffer>

	//ativa bomba de saída
	PWM_TypeDef b1 = {.duty_cycle = 1, .pwm_channel = 3, .speed_time=200};
 80018d2:	4a42      	ldr	r2, [pc, #264]	; (80019dc <CONTROLLER_Execute+0x27c>)
 80018d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PWM_Increase(b1);
 80018de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018e6:	f7ff fd83 	bl	80013f0 <PWM_Increase>

	LCD_Clear();
 80018ea:	f7ff fc97 	bl	800121c <LCD_Clear>
	LCD_Write_Buffer("-Despejando água");
 80018ee:	483c      	ldr	r0, [pc, #240]	; (80019e0 <CONTROLLER_Execute+0x280>)
 80018f0:	f7ff fc1a 	bl	8001128 <LCD_Write_Buffer>

	init_time = HAL_GetTick();
 80018f4:	f001 f89c 	bl	8002a30 <HAL_GetTick>
 80018f8:	6778      	str	r0, [r7, #116]	; 0x74
	current_time = init_time;
 80018fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fc:	673b      	str	r3, [r7, #112]	; 0x70

	//se precisar de CO2, ativa CO2
	Y4(co2_output);
 80018fe:	4a39      	ldr	r2, [pc, #228]	; (80019e4 <CONTROLLER_Execute+0x284>)
 8001900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001908:	e883 0003 	stmia.w	r3, {r0, r1}
	if(capsule.co2_time > 0){
 800190c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00c      	beq.n	800192e <CONTROLLER_Execute+0x1ce>
		LCD_Seccond_Line();
 8001914:	f7ff fc92 	bl	800123c <LCD_Seccond_Line>
		LCD_Write_Buffer("-Despejando CO2");
 8001918:	4833      	ldr	r0, [pc, #204]	; (80019e8 <CONTROLLER_Execute+0x288>)
 800191a:	f7ff fc05 	bl	8001128 <LCD_Write_Buffer>
		HAL_GPIO_WritePin(co2_output.gpio_class, co2_output.gpio_pin, GPIO_PIN_SET);
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	4618      	mov	r0, r3
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	b29b      	uxth	r3, r3
 8001926:	2201      	movs	r2, #1
 8001928:	4619      	mov	r1, r3
 800192a:	f002 f994 	bl	8003c56 <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_SET);
 800192e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001930:	4618      	mov	r0, r3
 8001932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001934:	b29b      	uxth	r3, r3
 8001936:	2201      	movs	r2, #1
 8001938:	4619      	mov	r1, r3
 800193a:	f002 f98c 	bl	8003c56 <HAL_GPIO_WritePin>

	//aguarda até passar o tempo de despejo de água e de CO2.
	while(current_time < (init_time + capsule.water_time) || current_time < (init_time + capsule.co2_time)){
 800193e:	e020      	b.n	8001982 <CONTROLLER_Execute+0x222>
		current_time = HAL_GetTick();
 8001940:	f001 f876 	bl	8002a30 <HAL_GetTick>
 8001944:	6738      	str	r0, [r7, #112]	; 0x70

		//se chegou no tempo desejado de água, desliga.
		if(current_time >=  (init_time + capsule.water_time)){
 8001946:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800194a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800194c:	4413      	add	r3, r2
 800194e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001950:	429a      	cmp	r2, r3
 8001952:	d307      	bcc.n	8001964 <CONTROLLER_Execute+0x204>
			HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_RESET);
 8001954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001956:	4618      	mov	r0, r3
 8001958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195a:	b29b      	uxth	r3, r3
 800195c:	2200      	movs	r2, #0
 800195e:	4619      	mov	r1, r3
 8001960:	f002 f979 	bl	8003c56 <HAL_GPIO_WritePin>
		}

		//se chegou no tempo desejado de co2, desliga.
		if(current_time >= (init_time + capsule.co2_time)){
 8001964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800196a:	4413      	add	r3, r2
 800196c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800196e:	429a      	cmp	r2, r3
 8001970:	d307      	bcc.n	8001982 <CONTROLLER_Execute+0x222>
			HAL_GPIO_WritePin(co2_output.gpio_class, co2_output.gpio_pin, GPIO_PIN_RESET);
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	4618      	mov	r0, r3
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	b29b      	uxth	r3, r3
 800197a:	2200      	movs	r2, #0
 800197c:	4619      	mov	r1, r3
 800197e:	f002 f96a 	bl	8003c56 <HAL_GPIO_WritePin>
	while(current_time < (init_time + capsule.water_time) || current_time < (init_time + capsule.co2_time)){
 8001982:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001988:	4413      	add	r3, r2
 800198a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800198c:	429a      	cmp	r2, r3
 800198e:	d3d7      	bcc.n	8001940 <CONTROLLER_Execute+0x1e0>
 8001990:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001996:	4413      	add	r3, r2
 8001998:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800199a:	429a      	cmp	r2, r3
 800199c:	d3d0      	bcc.n	8001940 <CONTROLLER_Execute+0x1e0>
		}
	}

	//seta tempo para desacelerar
	b1.speed_time = 250;
 800199e:	23fa      	movs	r3, #250	; 0xfa
 80019a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	PWM_Decrease(b1);
 80019a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019aa:	f7ff fd93 	bl	80014d4 <PWM_Decrease>
	return;
 80019ae:	bf00      	nop
}
 80019b0:	3780      	adds	r7, #128	; 0x80
 80019b2:	46bd      	mov	sp, r7
 80019b4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019b8:	b004      	add	sp, #16
 80019ba:	4770      	bx	lr
 80019bc:	0800651c 	.word	0x0800651c
 80019c0:	080064b8 	.word	0x080064b8
 80019c4:	08006524 	.word	0x08006524
 80019c8:	080064cc 	.word	0x080064cc
 80019cc:	080064dc 	.word	0x080064dc
 80019d0:	0800653c 	.word	0x0800653c
 80019d4:	40010800 	.word	0x40010800
 80019d8:	080064e4 	.word	0x080064e4
 80019dc:	08006554 	.word	0x08006554
 80019e0:	080064f8 	.word	0x080064f8
 80019e4:	08006560 	.word	0x08006560
 80019e8:	0800650c 	.word	0x0800650c

080019ec <Get_Button_Pressed>:
 *
 * @retval Pressed_Type Tipo do botão pressionado
 *
 */
Pressed_Type Get_Button_Pressed()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
	BUTTON_CONFIRMAR(confirm_button);
 80019f2:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <Get_Button_Pressed+0xc0>)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019fc:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_CANCELAR(cancel_button);
 8001a00:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <Get_Button_Pressed+0xc4>)
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a0a:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_INCREASE(increase_button);
 8001a0e:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <Get_Button_Pressed+0xc8>)
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a18:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_DECREASE(decrease_button);
 8001a1c:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <Get_Button_Pressed+0xcc>)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a24:	e883 0003 	stmia.w	r3, {r0, r1}

	while(1)
	{
		if(HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin)){
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f002 f8f8 	bl	8003c28 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <Get_Button_Pressed+0x56>
			return CONFIRM_PRESSED;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e030      	b.n	8001aa4 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(cancel_button.gpio_class, cancel_button.gpio_pin)){
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	461a      	mov	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f002 f8eb 	bl	8003c28 <HAL_GPIO_ReadPin>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <Get_Button_Pressed+0x70>
			return CANCEL_PRESSED;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e023      	b.n	8001aa4 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(increase_button.gpio_class, increase_button.gpio_pin)){
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f002 f8de 	bl	8003c28 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <Get_Button_Pressed+0x8a>
			return INCREASE_PRESSED;
 8001a72:	2302      	movs	r3, #2
 8001a74:	e016      	b.n	8001aa4 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(decrease_button.gpio_class, decrease_button.gpio_pin)){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f002 f8d1 	bl	8003c28 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <Get_Button_Pressed+0xa4>
			return DECREASE_PRESSED;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e009      	b.n	8001aa4 <Get_Button_Pressed+0xb8>
		}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <Get_Button_Pressed+0xd0>)
 8001a96:	f002 f8f6 	bl	8003c86 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001a9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a9e:	f000 ffd1 	bl	8002a44 <HAL_Delay>
		if(HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin)){
 8001aa2:	e7c1      	b.n	8001a28 <Get_Button_Pressed+0x3c>
	}
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08006568 	.word	0x08006568
 8001ab0:	08006570 	.word	0x08006570
 8001ab4:	08006578 	.word	0x08006578
 8001ab8:	08006580 	.word	0x08006580
 8001abc:	40010800 	.word	0x40010800

08001ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b0a5      	sub	sp, #148	; 0x94
 8001ac4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac6:	f000 ff5b 	bl	8002980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aca:	f000 f893 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ace:	f000 fa6d 	bl	8001fac <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad2:	f000 fa4d 	bl	8001f70 <MX_DMA_Init>
  MX_TIM2_Init();
 8001ad6:	f000 f9bf 	bl	8001e58 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001ada:	f000 f8e7 	bl	8001cac <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ade:	f000 f96b 	bl	8001db8 <MX_TIM1_Init>
  MX_RTC_Init();
 8001ae2:	f000 f94d 	bl	8001d80 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  //inicializa LCD em modo 4 bits
  LCD_Init();
 8001ae6:	f7ff fc29 	bl	800133c <LCD_Init>
  ADC_Init(hadc1);
 8001aea:	4e3d      	ldr	r6, [pc, #244]	; (8001be0 <main+0x120>)
 8001aec:	466d      	mov	r5, sp
 8001aee:	f106 0410 	add.w	r4, r6, #16
 8001af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001afa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001afe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b02:	f7ff fa07 	bl	8000f14 <ADC_Init>
  PWM_Init(&htim2);
 8001b06:	4837      	ldr	r0, [pc, #220]	; (8001be4 <main+0x124>)
 8001b08:	f7ff fc5d 	bl	80013c6 <PWM_Init>
  DWT_Delay_Init();
 8001b0c:	f7ff fa46 	bl	8000f9c <DWT_Delay_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  STATE current_state = STATE_SHOWING_CLOCK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	switch (current_state) {
 8001b16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <main+0x64>
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d012      	beq.n	8001b48 <main+0x88>
				current_state = STATE_SHOWING_CLOCK;
			}
			current_state = STATE_SHOWING_CLOCK;
			break;
		default:
			break;
 8001b22:	e054      	b.n	8001bce <main+0x10e>
			capsule = STATE_Show_Clock(hrtc);
 8001b24:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <main+0x128>)
 8001b2a:	466d      	mov	r5, sp
 8001b2c:	f103 020c 	add.w	r2, r3, #12
 8001b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f000 faac 	bl	8002098 <STATE_Show_Clock>
			current_state = STATE_STARTING_PROCESS;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001b46:	e042      	b.n	8001bce <main+0x10e>
			capsule = STATE_Starting_Process(capsule, hadc1);
 8001b48:	463e      	mov	r6, r7
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <main+0x120>)
 8001b4c:	ac05      	add	r4, sp, #20
 8001b4e:	461d      	mov	r5, r3
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b60:	466d      	mov	r5, sp
 8001b62:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	602b      	str	r3, [r5, #0]
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b74:	4630      	mov	r0, r6
 8001b76:	f000 faf9 	bl	800216c <STATE_Starting_Process>
 8001b7a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001b7e:	463d      	mov	r5, r7
 8001b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(capsule.capsule_type != NONE_CAPSULE_TYPE)
 8001b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <main+0x106>
				STATE_Started_Process(capsule, hadc1);
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <main+0x120>)
 8001b96:	ac04      	add	r4, sp, #16
 8001b98:	461d      	mov	r5, r3
 8001b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001baa:	466c      	mov	r4, sp
 8001bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bbc:	f000 fc8a 	bl	80024d4 <STATE_Started_Process>
				current_state = STATE_SHOWING_CLOCK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			current_state = STATE_SHOWING_CLOCK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001bcc:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <main+0x12c>)
 8001bd4:	f002 f857 	bl	8003c86 <HAL_GPIO_TogglePin>
	DWT_Delay_us(300000);
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <main+0x130>)
 8001bda:	f7ff fa0f 	bl	8000ffc <DWT_Delay_us>
	switch (current_state) {
 8001bde:	e79a      	b.n	8001b16 <main+0x56>
 8001be0:	200000ac 	.word	0x200000ac
 8001be4:	2000017c 	.word	0x2000017c
 8001be8:	20000120 	.word	0x20000120
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	000493e0 	.word	0x000493e0

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfe:	2228      	movs	r2, #40	; 0x28
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 ffbc 	bl	8005b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c24:	230a      	movs	r3, #10
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c30:	2301      	movs	r3, #1
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c34:	2302      	movs	r3, #2
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001c3c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 f842 	bl	8003cd0 <HAL_RCC_OscConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001c52:	f000 fa1b 	bl	800208c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c56:	230f      	movs	r3, #15
 8001c58:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2102      	movs	r1, #2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 faac 	bl	80041d0 <HAL_RCC_ClockConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c7e:	f000 fa05 	bl	800208c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001c82:	2303      	movs	r3, #3
 8001c84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 fc23 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ca0:	f000 f9f4 	bl	800208c <Error_Handler>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <MX_ADC1_Init+0xd0>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001cd8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cea:	4823      	ldr	r0, [pc, #140]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001cec:	f000 fecc 	bl	8002a88 <HAL_ADC_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001cf6:	f000 f9c9 	bl	800208c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481b      	ldr	r0, [pc, #108]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001d0c:	f001 f8b0 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f000 f9b9 	bl	800208c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4814      	ldr	r0, [pc, #80]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001d28:	f001 f8a2 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d32:	f000 f9ab 	bl	800208c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d36:	2305      	movs	r3, #5
 8001d38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001d44:	f001 f894 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d4e:	f000 f99d 	bl	800208c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d52:	2304      	movs	r3, #4
 8001d54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d56:	2304      	movs	r3, #4
 8001d58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_ADC1_Init+0xcc>)
 8001d60:	f001 f886 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001d6a:	f000 f98f 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200000ac 	.word	0x200000ac
 8001d7c:	40012400 	.word	0x40012400

08001d80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_RTC_Init+0x30>)
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <MX_RTC_Init+0x34>)
 8001d88:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_RTC_Init+0x30>)
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <MX_RTC_Init+0x30>)
 8001d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d98:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_RTC_Init+0x30>)
 8001d9c:	f002 fd12 	bl	80047c4 <HAL_RTC_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001da6:	f000 f971 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000120 	.word	0x20000120
 8001db4:	40002800 	.word	0x40002800

08001db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <MX_TIM1_Init+0x9c>)
 8001dd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 56 - 1;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001ddc:	2237      	movs	r2, #55	; 0x37
 8001dde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001de8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001dec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e00:	4813      	ldr	r0, [pc, #76]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001e02:	f003 f8d1 	bl	8004fa8 <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e0c:	f000 f93e 	bl	800208c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001e1e:	f003 facb 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e28:	f000 f930 	bl	800208c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e34:	463b      	mov	r3, r7
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_TIM1_Init+0x98>)
 8001e3a:	f003 fe19 	bl	8005a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e44:	f000 f922 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000134 	.word	0x20000134
 8001e54:	40012c00 	.word	0x40012c00

08001e58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2667 - 1;
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001e9e:	f640 226a 	movw	r2, #2666	; 0xa6a
 8001ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eb0:	482e      	ldr	r0, [pc, #184]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001eb2:	f003 f879 	bl	8004fa8 <HAL_TIM_Base_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ebc:	f000 f8e6 	bl	800208c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4827      	ldr	r0, [pc, #156]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001ece:	f003 fa73 	bl	80053b8 <HAL_TIM_ConfigClockSource>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ed8:	f000 f8d8 	bl	800208c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001edc:	4823      	ldr	r0, [pc, #140]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001ede:	f003 f8b2 	bl	8005046 <HAL_TIM_PWM_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ee8:	f000 f8d0 	bl	800208c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481c      	ldr	r0, [pc, #112]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001efc:	f003 fdb8 	bl	8005a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f06:	f000 f8c1 	bl	800208c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0a:	2360      	movs	r3, #96	; 0x60
 8001f0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4812      	ldr	r0, [pc, #72]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001f22:	f003 f98b 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f2c:	f000 f8ae 	bl	800208c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2204      	movs	r2, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	480d      	ldr	r0, [pc, #52]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001f38:	f003 f980 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001f42:	f000 f8a3 	bl	800208c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2208      	movs	r2, #8
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001f4e:	f003 f975 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001f58:	f000 f898 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM2_Init+0x114>)
 8001f5e:	f000 fbf7 	bl	8002750 <HAL_TIM_MspPostInit>

}
 8001f62:	bf00      	nop
 8001f64:	3738      	adds	r7, #56	; 0x38
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000017c 	.word	0x2000017c

08001f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_DMA_Init+0x38>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <MX_DMA_Init+0x38>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6153      	str	r3, [r2, #20]
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_DMA_Init+0x38>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	200b      	movs	r0, #11
 8001f94:	f001 fac9 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f98:	200b      	movs	r0, #11
 8001f9a:	f001 fae2 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000

08001fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <MX_GPIO_Init+0xd4>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <MX_GPIO_Init+0xd4>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6193      	str	r3, [r2, #24]
 8001fcc:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <MX_GPIO_Init+0xd4>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <MX_GPIO_Init+0xd4>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a28      	ldr	r2, [pc, #160]	; (8002080 <MX_GPIO_Init+0xd4>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <MX_GPIO_Init+0xd4>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f64f 61c3 	movw	r1, #65219	; 0xfec3
 8001ff6:	4823      	ldr	r0, [pc, #140]	; (8002084 <MX_GPIO_Init+0xd8>)
 8001ff8:	f001 fe2d 	bl	8003c56 <HAL_GPIO_WritePin>
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Y3_Pin|Y4_Pin|Display_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002002:	4821      	ldr	r0, [pc, #132]	; (8002088 <MX_GPIO_Init+0xdc>)
 8002004:	f001 fe27 	bl	8003c56 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y1_Pin Y2_Pin Display_RW_Pin Display_EN_Pin
                           Display_D4_Pin Display_D5_Pin Display_D6_Pin Display_D7_Pin
                           Y3_Pin Y4_Pin Display_RS_Pin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8002008:	f64f 63c3 	movw	r3, #65219	; 0xfec3
 800200c:	60bb      	str	r3, [r7, #8]
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Y3_Pin|Y4_Pin|Display_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2302      	movs	r3, #2
 8002018:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4619      	mov	r1, r3
 8002020:	4818      	ldr	r0, [pc, #96]	; (8002084 <MX_GPIO_Init+0xd8>)
 8002022:	f001 fca7 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Decrease_Pin Button_Increase_Pin Button_Cancelar_Pin Button_Confirmar_Pin */
  GPIO_InitStruct.Pin = Button_Decrease_Pin|Button_Increase_Pin|Button_Cancelar_Pin|Button_Confirmar_Pin;
 8002026:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800202a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0308 	add.w	r3, r7, #8
 8002038:	4619      	mov	r1, r3
 800203a:	4813      	ldr	r0, [pc, #76]	; (8002088 <MX_GPIO_Init+0xdc>)
 800203c:	f001 fc9a 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2302      	movs	r3, #2
 8002050:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	4619      	mov	r1, r3
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <MX_GPIO_Init+0xdc>)
 800205a:	f001 fc8b 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1_Bit_0_Pin BN1_bit_1_Pin BN1_bit_2_Pin Inserir_Capsula_Pin */
  GPIO_InitStruct.Pin = BN1_Bit_0_Pin|BN1_bit_1_Pin|BN1_bit_2_Pin|Inserir_Capsula_Pin;
 800205e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8002062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	4619      	mov	r1, r3
 8002072:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_GPIO_Init+0xd8>)
 8002074:	f001 fc7e 	bl	8003974 <HAL_GPIO_Init>

}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	40010c00 	.word	0x40010c00
 8002088:	40010800 	.word	0x40010800

0800208c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <STATE_Show_Clock>:
 *
 * @retval CAPSULE_Recipe_TypeDef capsula inserida
 *
 */
CAPSULE_Recipe_TypeDef STATE_Show_Clock(RTC_HandleTypeDef hrtc)
{
 8002098:	b084      	sub	sp, #16
 800209a:	b5b0      	push	{r4, r5, r7, lr}
 800209c:	b092      	sub	sp, #72	; 0x48
 800209e:	af02      	add	r7, sp, #8
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80020a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	char hour[10];
	CAPSULE_Recipe_TypeDef capsule = {
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	2220      	movs	r2, #32
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fd64 	bl	8005b80 <memset>
			.capsule_type = NONE_CAPSULE_TYPE,
	};
	uint8_t insert_button = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	LCD_Clear();
 80020be:	f7ff f8ad 	bl	800121c <LCD_Clear>
	while(1)
	{
		UTILS_get_Hour(hour, hrtc);
 80020c2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80020c6:	466a      	mov	r2, sp
 80020c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80020d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020da:	4620      	mov	r0, r4
 80020dc:	f000 fbd8 	bl	8002890 <UTILS_get_Hour>
		LCD_First_Line();
 80020e0:	f7ff f8a4 	bl	800122c <LCD_First_Line>
		LCD_Write_Buffer(hour);
 80020e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f81d 	bl	8001128 <LCD_Write_Buffer>

		BUTTON_CONFIRMAR(confirm_button);
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <STATE_Show_Clock+0xc8>)
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020f8:	e883 0003 	stmia.w	r3, {r0, r1}
		insert_button = HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f001 fd8e 	bl	8003c28 <HAL_GPIO_ReadPin>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		//se botão de inserir capsula for pressionado, verifica  qual é a receita
		if(insert_button)
 8002112:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <STATE_Show_Clock+0x8c>
		{
			capsule = CAPSULE_Verify_Insertion();
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fa48 	bl	80015b4 <CAPSULE_Verify_Insertion>
		}

		//se tiver uma cápsula, retorna
		if(capsule.capsule_type != NONE_CAPSULE_TYPE ){
 8002124:	7d3b      	ldrb	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <STATE_Show_Clock+0xa8>

			return capsule;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	461d      	mov	r5, r3
 800212e:	f107 0414 	add.w	r4, r7, #20
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800213a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800213e:	e008      	b.n	8002152 <STATE_Show_Clock+0xba>
		}
		DWT_Delay_us(300000);
 8002140:	4808      	ldr	r0, [pc, #32]	; (8002164 <STATE_Show_Clock+0xcc>)
 8002142:	f7fe ff5b 	bl	8000ffc <DWT_Delay_us>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8002146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800214a:	4807      	ldr	r0, [pc, #28]	; (8002168 <STATE_Show_Clock+0xd0>)
 800214c:	f001 fd9b 	bl	8003c86 <HAL_GPIO_TogglePin>
	{
 8002150:	e7b7      	b.n	80020c2 <STATE_Show_Clock+0x2a>
	}
}
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	3740      	adds	r7, #64	; 0x40
 8002156:	46bd      	mov	sp, r7
 8002158:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800215c:	b004      	add	sp, #16
 800215e:	4770      	bx	lr
 8002160:	08006588 	.word	0x08006588
 8002164:	000493e0 	.word	0x000493e0
 8002168:	40010800 	.word	0x40010800

0800216c <STATE_Starting_Process>:
 * @retval CAPSULE_Recipe_TypeDef receita da capsula inserida, se cancelar usuário cancelar inicio, retorna vazia
 * @param capsule capsula que foi inserida
 * @param hadc objeto do ADC_1
 */
CAPSULE_Recipe_TypeDef STATE_Starting_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 800216c:	b084      	sub	sp, #16
 800216e:	b5b0      	push	{r4, r5, r7, lr}
 8002170:	b0a6      	sub	sp, #152	; 0x98
 8002172:	af0a      	add	r7, sp, #40	; 0x28
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800217a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t confirm_button = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	LCD_Clear();
 8002184:	f7ff f84a 	bl	800121c <LCD_Clear>
	LCD_Write_Buffer(capsule.capsule_name);
 8002188:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800218c:	3302      	adds	r3, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe ffca 	bl	8001128 <LCD_Write_Buffer>
	LCD_Seccond_Line();
 8002194:	f7ff f852 	bl	800123c <LCD_Seccond_Line>
	LCD_Write_Buffer("Aguarde...");
 8002198:	48be      	ldr	r0, [pc, #760]	; (8002494 <STATE_Starting_Process+0x328>)
 800219a:	f7fe ffc5 	bl	8001128 <LCD_Write_Buffer>

	GPIO_PinState pin_state;

	uint32_t init_time = HAL_GetTick();
 800219e:	f000 fc47 	bl	8002a30 <HAL_GetTick>
 80021a2:	6578      	str	r0, [r7, #84]	; 0x54
	uint32_t current_time = init_time;
 80021a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a6:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t last_time = init_time;
 80021a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021aa:	66bb      	str	r3, [r7, #104]	; 0x68
	while(current_time < (init_time + 2000)){
 80021ac:	e00f      	b.n	80021ce <STATE_Starting_Process+0x62>
		current_time = HAL_GetTick();
 80021ae:	f000 fc3f 	bl	8002a30 <HAL_GetTick>
 80021b2:	66f8      	str	r0, [r7, #108]	; 0x6c
		if(current_time > last_time + 300){
 80021b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80021ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021bc:	429a      	cmp	r2, r3
 80021be:	d906      	bls.n	80021ce <STATE_Starting_Process+0x62>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	48b4      	ldr	r0, [pc, #720]	; (8002498 <STATE_Starting_Process+0x32c>)
 80021c6:	f001 fd5e 	bl	8003c86 <HAL_GPIO_TogglePin>
				last_time = current_time;
 80021ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021cc:	66bb      	str	r3, [r7, #104]	; 0x68
	while(current_time < (init_time + 2000)){
 80021ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80021d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3e9      	bcc.n	80021ae <STATE_Starting_Process+0x42>

			}
	}

	//se for apenas água, escolhe entre quente, natural e gelada.
	if(capsule.capsule_type == RECIPE_WATER)
 80021da:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d178      	bne.n	80022d4 <STATE_Starting_Process+0x168>
	{
		//vetor para mostrar no display
		char choices[CHOICES_NUMBER][16] = {"Natural", "Gelada  ", "Quente  "};
 80021e2:	4bae      	ldr	r3, [pc, #696]	; (800249c <STATE_Starting_Process+0x330>)
 80021e4:	f107 0408 	add.w	r4, r7, #8
 80021e8:	461d      	mov	r5, r3
 80021ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//vetor para obter qual informação foi escolhida
		WATER_Type choices_values[CHOICES_NUMBER] = {NATURAL_WATER, ICE_WATER, HOT_WATER};
 80021fa:	4aa9      	ldr	r2, [pc, #676]	; (80024a0 <STATE_Starting_Process+0x334>)
 80021fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	4611      	mov	r1, r2
 8002204:	8019      	strh	r1, [r3, #0]
 8002206:	3302      	adds	r3, #2
 8002208:	0c12      	lsrs	r2, r2, #16
 800220a:	701a      	strb	r2, [r3, #0]

		//vetor para obter qual temparatura foi escolhida, perguntar para Professor
		uint32_t choices_values_temp[CHOICES_NUMBER] = {0, 20, 60};
 800220c:	4aa5      	ldr	r2, [pc, #660]	; (80024a4 <STATE_Starting_Process+0x338>)
 800220e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002212:	ca07      	ldmia	r2, {r0, r1, r2}
 8002214:	e883 0007 	stmia.w	r3, {r0, r1, r2}


		LCD_Clear();
 8002218:	f7ff f800 	bl	800121c <LCD_Clear>
		uint8_t choice_index = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		LCD_Seccond_Line();
 8002222:	f7ff f80b 	bl	800123c <LCD_Seccond_Line>
		LCD_Write_Buffer("I-D p/ alterar");
 8002226:	48a0      	ldr	r0, [pc, #640]	; (80024a8 <STATE_Starting_Process+0x33c>)
 8002228:	f7fe ff7e 	bl	8001128 <LCD_Write_Buffer>
		while(1){
			LCD_First_Line();
 800222c:	f7fe fffe 	bl	800122c <LCD_First_Line>
			LCD_Write_Buffer(choices[choice_index]);
 8002230:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002234:	f107 0208 	add.w	r2, r7, #8
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4413      	add	r3, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe ff73 	bl	8001128 <LCD_Write_Buffer>

			Pressed_Type pressed_type = Get_Button_Pressed();
 8002242:	f7ff fbd3 	bl	80019ec <Get_Button_Pressed>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			switch (pressed_type) {
 800224c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002250:	2b03      	cmp	r3, #3
 8002252:	d83d      	bhi.n	80022d0 <STATE_Starting_Process+0x164>
 8002254:	a201      	add	r2, pc, #4	; (adr r2, 800225c <STATE_Starting_Process+0xf0>)
 8002256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225a:	bf00      	nop
 800225c:	0800226d 	.word	0x0800226d
 8002260:	08002295 	.word	0x08002295
 8002264:	0800229d 	.word	0x0800229d
 8002268:	080022b7 	.word	0x080022b7
				case CONFIRM_PRESSED:
					capsule.water_type = choices_values[choice_index];
 800226c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002270:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002274:	4413      	add	r3, r2
 8002276:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800227a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
					capsule.water_temp = choices_values_temp[choice_index];
 800227e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002288:	4413      	add	r3, r2
 800228a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800228e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					goto choiced;
 8002292:	e01f      	b.n	80022d4 <STATE_Starting_Process+0x168>
					break;
				case CANCEL_PRESSED:
					capsule.capsule_type = NONE_CAPSULE_TYPE;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
					goto choiced;
 800229a:	e01b      	b.n	80022d4 <STATE_Starting_Process+0x168>
					break;
				case INCREASE_PRESSED:
					choice_index = (choice_index < CHOICES_NUMBER - 1) ? choice_index + 1 : 0;
 800229c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d804      	bhi.n	80022ae <STATE_Starting_Process+0x142>
 80022a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022a8:	3301      	adds	r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	e000      	b.n	80022b0 <STATE_Starting_Process+0x144>
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					break;
 80022b4:	e00d      	b.n	80022d2 <STATE_Starting_Process+0x166>
				case DECREASE_PRESSED:
					choice_index = (choice_index > 0) ? choice_index - 1 : CHOICES_NUMBER - 1;
 80022b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <STATE_Starting_Process+0x15c>
 80022be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e000      	b.n	80022ca <STATE_Starting_Process+0x15e>
 80022c8:	2302      	movs	r3, #2
 80022ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					break;
 80022ce:	e000      	b.n	80022d2 <STATE_Starting_Process+0x166>
				default:
					break;
 80022d0:	bf00      	nop
		while(1){
 80022d2:	e7ab      	b.n	800222c <STATE_Starting_Process+0xc0>
		}
		choiced: ;
	}


	LCD_Clear();
 80022d4:	f7fe ffa2 	bl	800121c <LCD_Clear>
	LCD_Write_Buffer("S --> Iniciar.");
 80022d8:	4874      	ldr	r0, [pc, #464]	; (80024ac <STATE_Starting_Process+0x340>)
 80022da:	f7fe ff25 	bl	8001128 <LCD_Write_Buffer>
	LCD_Seccond_Line();
 80022de:	f7fe ffad 	bl	800123c <LCD_Seccond_Line>
	LCD_Write_Buffer("C --> Cancelar.");
 80022e2:	4873      	ldr	r0, [pc, #460]	; (80024b0 <STATE_Starting_Process+0x344>)
 80022e4:	f7fe ff20 	bl	8001128 <LCD_Write_Buffer>

	int32_t sensor_signal = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	663b      	str	r3, [r7, #96]	; 0x60
	float avg_value_P1 = 0;
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	float avg_value_P2 = 0;
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	64bb      	str	r3, [r7, #72]	; 0x48

	int32_t var = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (var = 0; var < 32; ++var) {
 80022fc:	2300      	movs	r3, #0
 80022fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002300:	e016      	b.n	8002330 <STATE_Starting_Process+0x1c4>
		sensor_signal += ADC_GetValue(hadc, P1);
 8002302:	2300      	movs	r3, #0
 8002304:	9308      	str	r3, [sp, #32]
 8002306:	466d      	mov	r5, sp
 8002308:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800230c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002310:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002314:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002318:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800231c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800231e:	f7fe fe0b 	bl	8000f38 <ADC_GetValue>
 8002322:	4602      	mov	r2, r0
 8002324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002326:	4413      	add	r3, r2
 8002328:	663b      	str	r3, [r7, #96]	; 0x60
	for (var = 0; var < 32; ++var) {
 800232a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232c:	3301      	adds	r3, #1
 800232e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002332:	2b1f      	cmp	r3, #31
 8002334:	dde5      	ble.n	8002302 <STATE_Starting_Process+0x196>
	}

	avg_value_P1 = sensor_signal / var;
 8002336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	fb92 f3f3 	sdiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fbae 	bl	8000aa0 <__aeabi_i2f>
 8002344:	4603      	mov	r3, r0
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c

	//se P1 passar do nivel considerado saturado....
	if(avg_value_P1 > 3000){
 8002348:	495a      	ldr	r1, [pc, #360]	; (80024b4 <STATE_Starting_Process+0x348>)
 800234a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800234c:	f7fe fdb8 	bl	8000ec0 <__aeabi_fcmpgt>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01d      	beq.n	8002392 <STATE_Starting_Process+0x226>
		LCD_Clear();
 8002356:	f7fe ff61 	bl	800121c <LCD_Clear>
		LCD_Write_Buffer("P1 SATURADO!");
 800235a:	4857      	ldr	r0, [pc, #348]	; (80024b8 <STATE_Starting_Process+0x34c>)
 800235c:	f7fe fee4 	bl	8001128 <LCD_Write_Buffer>
		HAL_Delay(2000);
 8002360:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002364:	f000 fb6e 	bl	8002a44 <HAL_Delay>
		RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 8002368:	4b54      	ldr	r3, [pc, #336]	; (80024bc <STATE_Starting_Process+0x350>)
 800236a:	f107 0408 	add.w	r4, r7, #8
 800236e:	461d      	mov	r5, r3
 8002370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002374:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return none_capsule;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	461d      	mov	r5, r3
 8002380:	f107 0408 	add.w	r4, r7, #8
 8002384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002388:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800238c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002390:	e098      	b.n	80024c4 <STATE_Starting_Process+0x358>
	}

	//se receita precisar de CO2, verifica se está P2 saturado
	if(capsule.co2_time > 0)
 8002392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d04c      	beq.n	8002434 <STATE_Starting_Process+0x2c8>
	{
		sensor_signal = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
		for (var = 0; var < 32; ++var) {
 800239e:	2300      	movs	r3, #0
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a2:	e016      	b.n	80023d2 <STATE_Starting_Process+0x266>
			sensor_signal += ADC_GetValue(hadc, P2);
 80023a4:	2303      	movs	r3, #3
 80023a6:	9308      	str	r3, [sp, #32]
 80023a8:	466d      	mov	r5, sp
 80023aa:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80023ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80023ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c0:	f7fe fdba 	bl	8000f38 <ADC_GetValue>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c8:	4413      	add	r3, r2
 80023ca:	663b      	str	r3, [r7, #96]	; 0x60
		for (var = 0; var < 32; ++var) {
 80023cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ce:	3301      	adds	r3, #1
 80023d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d4:	2b1f      	cmp	r3, #31
 80023d6:	dde5      	ble.n	80023a4 <STATE_Starting_Process+0x238>
		}

		avg_value_P2 = sensor_signal / var;
 80023d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fb5d 	bl	8000aa0 <__aeabi_i2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48

		//se P2 passar do nivel considerado saturado....
		if(avg_value_P2 > 3000){
 80023ea:	4932      	ldr	r1, [pc, #200]	; (80024b4 <STATE_Starting_Process+0x348>)
 80023ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80023ee:	f7fe fd67 	bl	8000ec0 <__aeabi_fcmpgt>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01d      	beq.n	8002434 <STATE_Starting_Process+0x2c8>
			LCD_Clear();
 80023f8:	f7fe ff10 	bl	800121c <LCD_Clear>
			LCD_Write_Buffer("P2 SATURADO!");
 80023fc:	4830      	ldr	r0, [pc, #192]	; (80024c0 <STATE_Starting_Process+0x354>)
 80023fe:	f7fe fe93 	bl	8001128 <LCD_Write_Buffer>
			HAL_Delay(2000);
 8002402:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002406:	f000 fb1d 	bl	8002a44 <HAL_Delay>
			RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 800240a:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <STATE_Starting_Process+0x350>)
 800240c:	f107 0408 	add.w	r4, r7, #8
 8002410:	461d      	mov	r5, r3
 8002412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002416:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800241a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return none_capsule;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	461d      	mov	r5, r3
 8002422:	f107 0408 	add.w	r4, r7, #8
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800242e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002432:	e047      	b.n	80024c4 <STATE_Starting_Process+0x358>
	}

	while(1)
	{

		Pressed_Type pressed_type = Get_Button_Pressed();
 8002434:	f7ff fada 	bl	80019ec <Get_Button_Pressed>
 8002438:	4603      	mov	r3, r0
 800243a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if(pressed_type == CONFIRM_PRESSED)
 800243e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <STATE_Starting_Process+0x2f0>
		{
			return capsule;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	461d      	mov	r5, r3
 800244a:	f107 0484 	add.w	r4, r7, #132	; 0x84
 800244e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002452:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002456:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800245a:	e033      	b.n	80024c4 <STATE_Starting_Process+0x358>
		}
		if(pressed_type == CANCEL_PRESSED)
 800245c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10d      	bne.n	8002480 <STATE_Starting_Process+0x314>
		{
			capsule.capsule_type = NONE_CAPSULE_TYPE;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			return capsule;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	461d      	mov	r5, r3
 800246e:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002476:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800247a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800247e:	e021      	b.n	80024c4 <STATE_Starting_Process+0x358>
		}

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8002480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002484:	4804      	ldr	r0, [pc, #16]	; (8002498 <STATE_Starting_Process+0x32c>)
 8002486:	f001 fbfe 	bl	8003c86 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800248a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800248e:	f000 fad9 	bl	8002a44 <HAL_Delay>
	{
 8002492:	e7cf      	b.n	8002434 <STATE_Starting_Process+0x2c8>
 8002494:	08006590 	.word	0x08006590
 8002498:	40010800 	.word	0x40010800
 800249c:	080065ec 	.word	0x080065ec
 80024a0:	0800661c 	.word	0x0800661c
 80024a4:	08006620 	.word	0x08006620
 80024a8:	0800659c 	.word	0x0800659c
 80024ac:	080065ac 	.word	0x080065ac
 80024b0:	080065bc 	.word	0x080065bc
 80024b4:	453b8000 	.word	0x453b8000
 80024b8:	080065cc 	.word	0x080065cc
 80024bc:	0800662c 	.word	0x0800662c
 80024c0:	080065dc 	.word	0x080065dc
	}
}
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	3770      	adds	r7, #112	; 0x70
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80024ce:	b004      	add	sp, #16
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <STATE_Started_Process>:
 * @retval CAPSULE_Recipe_TypeDef receita da capsula inserida, se cancelar usuário cancelar inicio, retorna vazia
 * @param capsule capsula que foi inserida
 * @param hadc objeto do ADC_1
 */
void STATE_Started_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 80024d4:	b084      	sub	sp, #16
 80024d6:	b5b0      	push	{r4, r5, r7, lr}
 80024d8:	b094      	sub	sp, #80	; 0x50
 80024da:	af10      	add	r7, sp, #64	; 0x40
 80024dc:	f107 0420 	add.w	r4, r7, #32
 80024e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD_Clear();
 80024e4:	f7fe fe9a 	bl	800121c <LCD_Clear>
	LCD_Write_Buffer("Iniciando...");
 80024e8:	4820      	ldr	r0, [pc, #128]	; (800256c <STATE_Started_Process+0x98>)
 80024ea:	f7fe fe1d 	bl	8001128 <LCD_Write_Buffer>

	uint32_t init_time = HAL_GetTick();
 80024ee:	f000 fa9f 	bl	8002a30 <HAL_GetTick>
 80024f2:	6078      	str	r0, [r7, #4]
	uint32_t current_time = init_time;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60fb      	str	r3, [r7, #12]
	uint32_t last_time = init_time;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60bb      	str	r3, [r7, #8]

	while(current_time < (init_time + 2000)){
 80024fc:	e00f      	b.n	800251e <STATE_Started_Process+0x4a>
		current_time = HAL_GetTick();
 80024fe:	f000 fa97 	bl	8002a30 <HAL_GetTick>
 8002502:	60f8      	str	r0, [r7, #12]

		if(current_time > last_time + 300){
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d906      	bls.n	800251e <STATE_Started_Process+0x4a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8002510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002514:	4816      	ldr	r0, [pc, #88]	; (8002570 <STATE_Started_Process+0x9c>)
 8002516:	f001 fbb6 	bl	8003c86 <HAL_GPIO_TogglePin>
			last_time = current_time;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	60bb      	str	r3, [r7, #8]
	while(current_time < (init_time + 2000)){
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3e9      	bcc.n	80024fe <STATE_Started_Process+0x2a>

		}
	}

	uint8_t confirm_button = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	70fb      	strb	r3, [r7, #3]
	while(1)
	{
		CONTROLLER_Execute(hadc, capsule);
 800252e:	ac08      	add	r4, sp, #32
 8002530:	f107 0520 	add.w	r5, r7, #32
 8002534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002538:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800253c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002540:	466d      	mov	r5, sp
 8002542:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800254e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002558:	f7ff f902 	bl	8001760 <CONTROLLER_Execute>

		return;
 800255c:	bf00      	nop

	}
}
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002566:	b004      	add	sp, #16
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	0800664c 	.word	0x0800664c
 8002570:	40010800 	.word	0x40010800

08002574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_MspInit+0x5c>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_MspInit+0x5c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_MspInit+0x5c>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_MspInit+0x5c>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_MspInit+0x5c>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_MspInit+0x5c>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_MspInit+0x60>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_MspInit+0x60>)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000

080025d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a28      	ldr	r2, [pc, #160]	; (8002694 <HAL_ADC_MspInit+0xbc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d149      	bne.n	800268c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_ADC_MspInit+0xc0>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a26      	ldr	r2, [pc, #152]	; (8002698 <HAL_ADC_MspInit+0xc0>)
 80025fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_ADC_MspInit+0xc0>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_ADC_MspInit+0xc0>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a20      	ldr	r2, [pc, #128]	; (8002698 <HAL_ADC_MspInit+0xc0>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_ADC_MspInit+0xc0>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC1_IN4_____T1_Pin|ADC1_IN5_____T2_Pin|ADC1_IN6_____P1_Pin|ADC1_IN7_____P2_Pin;
 8002628:	23f0      	movs	r3, #240	; 0xf0
 800262a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262c:	2303      	movs	r3, #3
 800262e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	4619      	mov	r1, r3
 8002636:	4819      	ldr	r0, [pc, #100]	; (800269c <HAL_ADC_MspInit+0xc4>)
 8002638:	f001 f99c 	bl	8003974 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_ADC_MspInit+0xcc>)
 8002640:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 8002644:	2200      	movs	r2, #0
 8002646:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 800265e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002662:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002670:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 8002672:	f000 ff91 	bl	8003598 <HAL_DMA_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800267c:	f7ff fd06 	bl	800208c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 8002684:	621a      	str	r2, [r3, #32]
 8002686:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_ADC_MspInit+0xc8>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40012400 	.word	0x40012400
 8002698:	40021000 	.word	0x40021000
 800269c:	40010800 	.word	0x40010800
 80026a0:	200000dc 	.word	0x200000dc
 80026a4:	40020008 	.word	0x40020008

080026a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <HAL_RTC_MspInit+0x3c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d110      	bne.n	80026dc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80026ba:	f001 fafd 	bl	8003cb8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_RTC_MspInit+0x40>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RTC_MspInit+0x40>)
 80026c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026c8:	61d3      	str	r3, [r2, #28]
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_RTC_MspInit+0x40>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RTC_MspInit+0x44>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40002800 	.word	0x40002800
 80026e8:	40021000 	.word	0x40021000
 80026ec:	4242043c 	.word	0x4242043c

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_TIM_Base_MspInit+0x58>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10c      	bne.n	800271c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_TIM_Base_MspInit+0x5c>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_TIM_Base_MspInit+0x5c>)
 8002708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800270c:	6193      	str	r3, [r2, #24]
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_TIM_Base_MspInit+0x5c>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800271a:	e010      	b.n	800273e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d10b      	bne.n	800273e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_TIM_Base_MspInit+0x5c>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_TIM_Base_MspInit+0x5c>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_TIM_Base_MspInit+0x5c>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40012c00 	.word	0x40012c00
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276e:	d117      	bne.n	80027a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_TIM_MspPostInit+0x58>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_TIM_MspPostInit+0x58>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_TIM_MspPostInit+0x58>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM2_CH1_____R1_Pin|TIM2_CH2_____CP1_Pin|TIM2_CH3_____B1_Pin;
 8002788:	2307      	movs	r3, #7
 800278a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2302      	movs	r3, #2
 8002792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4619      	mov	r1, r3
 800279a:	4804      	ldr	r0, [pc, #16]	; (80027ac <HAL_TIM_MspPostInit+0x5c>)
 800279c:	f001 f8ea 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027a0:	bf00      	nop
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010800 	.word	0x40010800

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <HardFault_Handler+0x4>

080027c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <MemManage_Handler+0x4>

080027c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <BusFault_Handler+0x4>

080027ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <UsageFault_Handler+0x4>

080027d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027fc:	f000 f906 	bl	8002a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}

08002804 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <DMA1_Channel1_IRQHandler+0x10>)
 800280a:	f000 ff7f 	bl	800370c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200000dc 	.word	0x200000dc

08002818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002848:	f003 f970 	bl	8005b2c <__errno>
 800284c:	4602      	mov	r2, r0
 800284e:	230c      	movs	r3, #12
 8002850:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <_sbrk+0x64>)
 8002868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20005000 	.word	0x20005000
 8002878:	00000400 	.word	0x00000400
 800287c:	20000090 	.word	0x20000090
 8002880:	200001d0 	.word	0x200001d0

08002884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <UTILS_get_Hour>:
 * Na lihna acima, deve-se passar por parâmetro na função time() o valor do tempo atual;
 *
 * @param [out]hour vetor de char que será armazenado a hora
 */
void UTILS_get_Hour(char* hour, RTC_HandleTypeDef hrtc)
{
 8002890:	b084      	sub	sp, #16
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af02      	add	r7, sp, #8
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	f107 001c 	add.w	r0, r7, #28
 800289e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	  sTm = gmtime (&now);
//
//	  strftime (hour, 9, "%H:%M:%S", sTm);

	  RTC_TimeTypeDef time;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80028a2:	f107 010c 	add.w	r1, r7, #12
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	2200      	movs	r2, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 f81f 	bl	80048f0 <HAL_RTC_GetTime>

	  sprintf(hour, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80028b2:	7b3b      	ldrb	r3, [r7, #12]
 80028b4:	461a      	mov	r2, r3
 80028b6:	7b7b      	ldrb	r3, [r7, #13]
 80028b8:	4619      	mov	r1, r3
 80028ba:	7bbb      	ldrb	r3, [r7, #14]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	460b      	mov	r3, r1
 80028c0:	4905      	ldr	r1, [pc, #20]	; (80028d8 <UTILS_get_Hour+0x48>)
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f003 f964 	bl	8005b90 <siprintf>
	  return;
 80028c8:	bf00      	nop
}
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028d2:	b004      	add	sp, #16
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	0800665c 	.word	0x0800665c
 80028dc:	00000000 	.word	0x00000000

080028e0 <UTILS_To_Temp>:
 *
 * @retval uint32_t temperatura
 * @param value_adc valor lido em um canal do adc
 */
uint32_t UTILS_To_Temp(uint32_t value_adc)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	uint32_t temperature = (value_adc * ADC_SCALE) * 25;
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fd fd73 	bl	80003d4 <__aeabi_ui2d>
 80028ee:	a30e      	add	r3, pc, #56	; (adr r3, 8002928 <UTILS_To_Temp+0x48>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fde8 	bl	80004c8 <__aeabi_dmul>
 80028f8:	4603      	mov	r3, r0
 80028fa:	460c      	mov	r4, r1
 80028fc:	4618      	mov	r0, r3
 80028fe:	4621      	mov	r1, r4
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <UTILS_To_Temp+0x50>)
 8002906:	f7fd fddf 	bl	80004c8 <__aeabi_dmul>
 800290a:	4603      	mov	r3, r0
 800290c:	460c      	mov	r4, r1
 800290e:	4618      	mov	r0, r3
 8002910:	4621      	mov	r1, r4
 8002912:	f7fd ffeb 	bl	80008ec <__aeabi_d2uiz>
 8002916:	4603      	mov	r3, r0
 8002918:	60fb      	str	r3, [r7, #12]
	return temperature;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	f3af 8000 	nop.w
 8002928:	e734d9b4 	.word	0xe734d9b4
 800292c:	3f4a680c 	.word	0x3f4a680c
 8002930:	40390000 	.word	0x40390000

08002934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002934:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002936:	e003      	b.n	8002940 <LoopCopyDataInit>

08002938 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800293a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800293c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800293e:	3104      	adds	r1, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002940:	480a      	ldr	r0, [pc, #40]	; (800296c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002944:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002946:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002948:	d3f6      	bcc.n	8002938 <CopyDataInit>
  ldr r2, =_sbss
 800294a:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800294c:	e002      	b.n	8002954 <LoopFillZerobss>

0800294e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002950:	f842 3b04 	str.w	r3, [r2], #4

08002954 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002956:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002958:	d3f9      	bcc.n	800294e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800295a:	f7ff ff93 	bl	8002884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295e:	f003 f8eb 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002962:	f7ff f8ad 	bl	8001ac0 <main>
  bx lr
 8002966:	4770      	bx	lr
  ldr r3, =_sidata
 8002968:	080066e8 	.word	0x080066e8
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002970:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002974:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002978:	200001cc 	.word	0x200001cc

0800297c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC1_2_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_Init+0x28>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_Init+0x28>)
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 fdbf 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	2000      	movs	r0, #0
 8002998:	f000 f808 	bl	80029ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299c:	f7ff fdea 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000

080029ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x54>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_InitTick+0x58>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fdd7 	bl	800357e <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00e      	b.n	80029f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d80a      	bhi.n	80029f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f000 fd9f 	bl	800352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_InitTick+0x5c>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000008 	.word	0x20000008
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_IncTick+0x1c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_IncTick+0x20>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_IncTick+0x20>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	200001c4 	.word	0x200001c4

08002a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <HAL_GetTick+0x10>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	200001c4 	.word	0x200001c4

08002a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d005      	beq.n	8002a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_Delay+0x40>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6a:	bf00      	nop
 8002a6c:	f7ff ffe0 	bl	8002a30 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d8f7      	bhi.n	8002a6c <HAL_Delay+0x28>
  {
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000008 	.word	0x20000008

08002a88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0be      	b.n	8002c28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fd86 	bl	80025d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb19 	bl	8003104 <ADC_ConversionStop_Disable>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8099 	bne.w	8002c16 <HAL_ADC_Init+0x18e>
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8095 	bne.w	8002c16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af4:	f023 0302 	bic.w	r3, r3, #2
 8002af8:	f043 0202 	orr.w	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7b1b      	ldrb	r3, [r3, #12]
 8002b0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d003      	beq.n	8002b2a <HAL_ADC_Init+0xa2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_ADC_Init+0xa8>
 8002b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b2e:	e000      	b.n	8002b32 <HAL_ADC_Init+0xaa>
 8002b30:	2300      	movs	r3, #0
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7d1b      	ldrb	r3, [r3, #20]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d119      	bne.n	8002b74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7b1b      	ldrb	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	035a      	lsls	r2, r3, #13
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e00b      	b.n	8002b74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_ADC_Init+0x1a8>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba4:	d003      	beq.n	8002bae <HAL_ADC_Init+0x126>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d104      	bne.n	8002bb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	051b      	lsls	r3, r3, #20
 8002bb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_ADC_Init+0x1ac>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d10b      	bne.n	8002bf4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bf2:	e018      	b.n	8002c26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f023 0312 	bic.w	r3, r3, #18
 8002bfc:	f043 0210 	orr.w	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c14:	e007      	b.n	8002c26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	f043 0210 	orr.w	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	ffe1f7fd 	.word	0xffe1f7fd
 8002c34:	ff1f0efe 	.word	0xff1f0efe

08002c38 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Stop+0x1a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e01a      	b.n	8002c88 <HAL_ADC_Stop+0x50>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa52 	bl	8003104 <ADC_ConversionStop_Disable>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a64      	ldr	r2, [pc, #400]	; (8002e38 <HAL_ADC_Start_DMA+0x1a8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_Start_DMA+0x24>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a63      	ldr	r2, [pc, #396]	; (8002e3c <HAL_ADC_Start_DMA+0x1ac>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d106      	bne.n	8002cc2 <HAL_ADC_Start_DMA+0x32>
 8002cb4:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <HAL_ADC_Start_DMA+0x1a8>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 80b3 	bne.w	8002e28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_Start_DMA+0x40>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0ae      	b.n	8002e2e <HAL_ADC_Start_DMA+0x19e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f9c1 	bl	8003060 <ADC_Enable>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 809a 	bne.w	8002e1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4e      	ldr	r2, [pc, #312]	; (8002e3c <HAL_ADC_Start_DMA+0x1ac>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d105      	bne.n	8002d14 <HAL_ADC_Start_DMA+0x84>
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_ADC_Start_DMA+0x1a8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d026      	beq.n	8002d7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d3e:	e01d      	b.n	8002d7c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a39      	ldr	r2, [pc, #228]	; (8002e38 <HAL_ADC_Start_DMA+0x1a8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_ADC_Start_DMA+0xd0>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a38      	ldr	r2, [pc, #224]	; (8002e3c <HAL_ADC_Start_DMA+0x1ac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d10d      	bne.n	8002d7c <HAL_ADC_Start_DMA+0xec>
 8002d60:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_ADC_Start_DMA+0x1a8>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f023 0206 	bic.w	r2, r3, #6
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d94:	e002      	b.n	8002d9c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <HAL_ADC_Start_DMA+0x1b0>)
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <HAL_ADC_Start_DMA+0x1b4>)
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_ADC_Start_DMA+0x1b8>)
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0202 	mvn.w	r2, #2
 8002dc4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a18      	ldr	r0, [r3, #32]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	334c      	adds	r3, #76	; 0x4c
 8002de0:	4619      	mov	r1, r3
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f000 fc31 	bl	800364c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002df4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002df8:	d108      	bne.n	8002e0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e0a:	e00f      	b.n	8002e2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e1c:	e006      	b.n	8002e2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002e26:	e001      	b.n	8002e2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40012400 	.word	0x40012400
 8002e3c:	40012800 	.word	0x40012800
 8002e40:	08003179 	.word	0x08003179
 8002e44:	080031f5 	.word	0x080031f5
 8002e48:	08003211 	.word	0x08003211

08002e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x20>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0dc      	b.n	800304a <HAL_ADC_ConfigChannel+0x1da>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d81c      	bhi.n	8002eda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b05      	subs	r3, #5
 8002eb2:	221f      	movs	r2, #31
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b05      	subs	r3, #5
 8002ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed8:	e03c      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d81c      	bhi.n	8002f1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3b23      	subs	r3, #35	; 0x23
 8002ef4:	221f      	movs	r2, #31
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4019      	ands	r1, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b23      	subs	r3, #35	; 0x23
 8002f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
 8002f1a:	e01b      	b.n	8002f54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b41      	subs	r3, #65	; 0x41
 8002f2e:	221f      	movs	r2, #31
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	4019      	ands	r1, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	3b41      	subs	r3, #65	; 0x41
 8002f48:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d91c      	bls.n	8002f96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68d9      	ldr	r1, [r3, #12]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b1e      	subs	r3, #30
 8002f6e:	2207      	movs	r2, #7
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4019      	ands	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6898      	ldr	r0, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	3b1e      	subs	r3, #30
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	e019      	b.n	8002fca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6919      	ldr	r1, [r3, #16]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4019      	ands	r1, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6898      	ldr	r0, [r3, #8]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d003      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fd6:	2b11      	cmp	r3, #17
 8002fd8:	d132      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_ADC_ConfigChannel+0x1e4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d125      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d126      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003000:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b10      	cmp	r3, #16
 8003008:	d11a      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_ADC_ConfigChannel+0x1e8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <HAL_ADC_ConfigChannel+0x1ec>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	0c9a      	lsrs	r2, r3, #18
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003020:	e002      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	3b01      	subs	r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f9      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x1b2>
 800302e:	e007      	b.n	8003040 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40012400 	.word	0x40012400
 8003058:	20000000 	.word	0x20000000
 800305c:	431bde83 	.word	0x431bde83

08003060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d039      	beq.n	80030f2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <ADC_Enable+0x9c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <ADC_Enable+0xa0>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	0c9b      	lsrs	r3, r3, #18
 800309a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800309c:	e002      	b.n	80030a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f9      	bne.n	800309e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030aa:	f7ff fcc1 	bl	8002a30 <HAL_GetTick>
 80030ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030b0:	e018      	b.n	80030e4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030b2:	f7ff fcbd 	bl	8002a30 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d911      	bls.n	80030e4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d1df      	bne.n	80030b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000000 	.word	0x20000000
 8003100:	431bde83 	.word	0x431bde83

08003104 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d127      	bne.n	800316e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800312e:	f7ff fc7f 	bl	8002a30 <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003134:	e014      	b.n	8003160 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003136:	f7ff fc7b 	bl	8002a30 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d90d      	bls.n	8003160 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d0e3      	beq.n	8003136 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	d127      	bne.n	80031e2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031ac:	d115      	bne.n	80031da <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d111      	bne.n	80031da <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d105      	bne.n	80031da <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7fd fed0 	bl	8000f80 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031e0:	e004      	b.n	80031ec <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff fe22 	bl	8002e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fe11 	bl	8002e5e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADCEx_Calibration_Start+0x1e>
 800325e:	2302      	movs	r3, #2
 8003260:	e086      	b.n	8003370 <HAL_ADCEx_Calibration_Start+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff4a 	bl	8003104 <ADC_ConversionStop_Disable>
 8003270:	4603      	mov	r3, r0
 8003272:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d175      	bne.n	8003366 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003282:	f023 0302 	bic.w	r3, r3, #2
 8003286:	f043 0202 	orr.w	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800328e:	4b3a      	ldr	r3, [pc, #232]	; (8003378 <HAL_ADCEx_Calibration_Start+0x134>)
 8003290:	681c      	ldr	r4, [r3, #0]
 8003292:	2002      	movs	r0, #2
 8003294:	f001 f9da 	bl	800464c <HAL_RCCEx_GetPeriphCLKFreq>
 8003298:	4603      	mov	r3, r0
 800329a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800329e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80032a0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80032a2:	e002      	b.n	80032aa <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f9      	bne.n	80032a4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fed5 	bl	8003060 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0208 	orr.w	r2, r2, #8
 80032c4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80032c6:	f7ff fbb3 	bl	8002a30 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032cc:	e014      	b.n	80032f8 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80032ce:	f7ff fbaf 	bl	8002a30 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b0a      	cmp	r3, #10
 80032da:	d90d      	bls.n	80032f8 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f023 0312 	bic.w	r3, r3, #18
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e03b      	b.n	8003370 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e3      	bne.n	80032ce <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0204 	orr.w	r2, r2, #4
 8003314:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003316:	f7ff fb8b 	bl	8002a30 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800331c:	e014      	b.n	8003348 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800331e:	f7ff fb87 	bl	8002a30 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b0a      	cmp	r3, #10
 800332a:	d90d      	bls.n	8003348 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f023 0312 	bic.w	r3, r3, #18
 8003334:	f043 0210 	orr.w	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e013      	b.n	8003370 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e3      	bne.n	800331e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	bd90      	pop	{r4, r7, pc}
 8003378:	20000000 	.word	0x20000000

0800337c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ae:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	60d3      	str	r3, [r2, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_GetPriorityGrouping+0x18>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 0307 	and.w	r3, r3, #7
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	db0b      	blt.n	800340a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	4906      	ldr	r1, [pc, #24]	; (8003414 <__NVIC_EnableIRQ+0x34>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2001      	movs	r0, #1
 8003402:	fa00 f202 	lsl.w	r2, r0, r2
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
         );
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff90 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff2d 	bl	800337c <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff42 	bl	80033c4 <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff90 	bl	800346c <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5f 	bl	8003418 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff35 	bl	80033e0 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e043      	b.n	8003636 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_DMA_Init+0xa8>)
 80035b6:	4413      	add	r3, r2
 80035b8:	4a22      	ldr	r2, [pc, #136]	; (8003644 <HAL_DMA_Init+0xac>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	009a      	lsls	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_DMA_Init+0xb0>)
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	bffdfff8 	.word	0xbffdfff8
 8003644:	cccccccd 	.word	0xcccccccd
 8003648:	40020000 	.word	0x40020000

0800364c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_DMA_Start_IT+0x20>
 8003668:	2302      	movs	r3, #2
 800366a:	e04a      	b.n	8003702 <HAL_DMA_Start_IT+0xb6>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800367a:	2b01      	cmp	r3, #1
 800367c:	d13a      	bne.n	80036f4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f938 	bl	8003918 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 020e 	orr.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e00f      	b.n	80036e2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0204 	bic.w	r2, r2, #4
 80036d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 020a 	orr.w	r2, r2, #10
 80036e0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e005      	b.n	8003700 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2204      	movs	r2, #4
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d04f      	beq.n	80037d4 <HAL_DMA_IRQHandler+0xc8>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04a      	beq.n	80037d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0204 	bic.w	r2, r2, #4
 800375a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a66      	ldr	r2, [pc, #408]	; (80038fc <HAL_DMA_IRQHandler+0x1f0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d029      	beq.n	80037ba <HAL_DMA_IRQHandler+0xae>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a65      	ldr	r2, [pc, #404]	; (8003900 <HAL_DMA_IRQHandler+0x1f4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xaa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a63      	ldr	r2, [pc, #396]	; (8003904 <HAL_DMA_IRQHandler+0x1f8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01a      	beq.n	80037b0 <HAL_DMA_IRQHandler+0xa4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a62      	ldr	r2, [pc, #392]	; (8003908 <HAL_DMA_IRQHandler+0x1fc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d012      	beq.n	80037aa <HAL_DMA_IRQHandler+0x9e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a60      	ldr	r2, [pc, #384]	; (800390c <HAL_DMA_IRQHandler+0x200>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00a      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x98>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5f      	ldr	r2, [pc, #380]	; (8003910 <HAL_DMA_IRQHandler+0x204>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d102      	bne.n	800379e <HAL_DMA_IRQHandler+0x92>
 8003798:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800379c:	e00e      	b.n	80037bc <HAL_DMA_IRQHandler+0xb0>
 800379e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037a2:	e00b      	b.n	80037bc <HAL_DMA_IRQHandler+0xb0>
 80037a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037a8:	e008      	b.n	80037bc <HAL_DMA_IRQHandler+0xb0>
 80037aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ae:	e005      	b.n	80037bc <HAL_DMA_IRQHandler+0xb0>
 80037b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b4:	e002      	b.n	80037bc <HAL_DMA_IRQHandler+0xb0>
 80037b6:	2340      	movs	r3, #64	; 0x40
 80037b8:	e000      	b.n	80037bc <HAL_DMA_IRQHandler+0xb0>
 80037ba:	2304      	movs	r3, #4
 80037bc:	4a55      	ldr	r2, [pc, #340]	; (8003914 <HAL_DMA_IRQHandler+0x208>)
 80037be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8094 	beq.w	80038f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037d2:	e08e      	b.n	80038f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2202      	movs	r2, #2
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d056      	beq.n	8003892 <HAL_DMA_IRQHandler+0x186>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d051      	beq.n	8003892 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 020a 	bic.w	r2, r2, #10
 800380a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a38      	ldr	r2, [pc, #224]	; (80038fc <HAL_DMA_IRQHandler+0x1f0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d029      	beq.n	8003872 <HAL_DMA_IRQHandler+0x166>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a37      	ldr	r2, [pc, #220]	; (8003900 <HAL_DMA_IRQHandler+0x1f4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_DMA_IRQHandler+0x162>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a35      	ldr	r2, [pc, #212]	; (8003904 <HAL_DMA_IRQHandler+0x1f8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x15c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <HAL_DMA_IRQHandler+0x1fc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d012      	beq.n	8003862 <HAL_DMA_IRQHandler+0x156>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a32      	ldr	r2, [pc, #200]	; (800390c <HAL_DMA_IRQHandler+0x200>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00a      	beq.n	800385c <HAL_DMA_IRQHandler+0x150>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a31      	ldr	r2, [pc, #196]	; (8003910 <HAL_DMA_IRQHandler+0x204>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d102      	bne.n	8003856 <HAL_DMA_IRQHandler+0x14a>
 8003850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003854:	e00e      	b.n	8003874 <HAL_DMA_IRQHandler+0x168>
 8003856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800385a:	e00b      	b.n	8003874 <HAL_DMA_IRQHandler+0x168>
 800385c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003860:	e008      	b.n	8003874 <HAL_DMA_IRQHandler+0x168>
 8003862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003866:	e005      	b.n	8003874 <HAL_DMA_IRQHandler+0x168>
 8003868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386c:	e002      	b.n	8003874 <HAL_DMA_IRQHandler+0x168>
 800386e:	2320      	movs	r3, #32
 8003870:	e000      	b.n	8003874 <HAL_DMA_IRQHandler+0x168>
 8003872:	2302      	movs	r3, #2
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <HAL_DMA_IRQHandler+0x208>)
 8003876:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d034      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003890:	e02f      	b.n	80038f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2208      	movs	r2, #8
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d028      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x1e8>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d023      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 020e 	bic.w	r2, r2, #14
 80038ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
    }
  }
  return;
 80038f2:	bf00      	nop
 80038f4:	bf00      	nop
}
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40020008 	.word	0x40020008
 8003900:	4002001c 	.word	0x4002001c
 8003904:	40020030 	.word	0x40020030
 8003908:	40020044 	.word	0x40020044
 800390c:	40020058 	.word	0x40020058
 8003910:	4002006c 	.word	0x4002006c
 8003914:	40020000 	.word	0x40020000

08003918 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b10      	cmp	r3, #16
 8003944:	d108      	bne.n	8003958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003956:	e007      	b.n	8003968 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
	...

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b480      	push	{r7}
 8003976:	b08b      	sub	sp, #44	; 0x2c
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003986:	e127      	b.n	8003bd8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003988:	2201      	movs	r2, #1
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f040 8116 	bne.w	8003bd2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b12      	cmp	r3, #18
 80039ac:	d034      	beq.n	8003a18 <HAL_GPIO_Init+0xa4>
 80039ae:	2b12      	cmp	r3, #18
 80039b0:	d80d      	bhi.n	80039ce <HAL_GPIO_Init+0x5a>
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d02b      	beq.n	8003a0e <HAL_GPIO_Init+0x9a>
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d804      	bhi.n	80039c4 <HAL_GPIO_Init+0x50>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d031      	beq.n	8003a22 <HAL_GPIO_Init+0xae>
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d01c      	beq.n	80039fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039c2:	e048      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d043      	beq.n	8003a50 <HAL_GPIO_Init+0xdc>
 80039c8:	2b11      	cmp	r3, #17
 80039ca:	d01b      	beq.n	8003a04 <HAL_GPIO_Init+0x90>
          break;
 80039cc:	e043      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039ce:	4a89      	ldr	r2, [pc, #548]	; (8003bf4 <HAL_GPIO_Init+0x280>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d026      	beq.n	8003a22 <HAL_GPIO_Init+0xae>
 80039d4:	4a87      	ldr	r2, [pc, #540]	; (8003bf4 <HAL_GPIO_Init+0x280>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d806      	bhi.n	80039e8 <HAL_GPIO_Init+0x74>
 80039da:	4a87      	ldr	r2, [pc, #540]	; (8003bf8 <HAL_GPIO_Init+0x284>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d020      	beq.n	8003a22 <HAL_GPIO_Init+0xae>
 80039e0:	4a86      	ldr	r2, [pc, #536]	; (8003bfc <HAL_GPIO_Init+0x288>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01d      	beq.n	8003a22 <HAL_GPIO_Init+0xae>
          break;
 80039e6:	e036      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039e8:	4a85      	ldr	r2, [pc, #532]	; (8003c00 <HAL_GPIO_Init+0x28c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0xae>
 80039ee:	4a85      	ldr	r2, [pc, #532]	; (8003c04 <HAL_GPIO_Init+0x290>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d016      	beq.n	8003a22 <HAL_GPIO_Init+0xae>
 80039f4:	4a84      	ldr	r2, [pc, #528]	; (8003c08 <HAL_GPIO_Init+0x294>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_GPIO_Init+0xae>
          break;
 80039fa:	e02c      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	623b      	str	r3, [r7, #32]
          break;
 8003a02:	e028      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	623b      	str	r3, [r7, #32]
          break;
 8003a0c:	e023      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	3308      	adds	r3, #8
 8003a14:	623b      	str	r3, [r7, #32]
          break;
 8003a16:	e01e      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	623b      	str	r3, [r7, #32]
          break;
 8003a20:	e019      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	623b      	str	r3, [r7, #32]
          break;
 8003a2e:	e012      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a38:	2308      	movs	r3, #8
 8003a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	611a      	str	r2, [r3, #16]
          break;
 8003a42:	e008      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a44:	2308      	movs	r3, #8
 8003a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	615a      	str	r2, [r3, #20]
          break;
 8003a4e:	e002      	b.n	8003a56 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a50:	2300      	movs	r3, #0
 8003a52:	623b      	str	r3, [r7, #32]
          break;
 8003a54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2bff      	cmp	r3, #255	; 0xff
 8003a5a:	d801      	bhi.n	8003a60 <HAL_GPIO_Init+0xec>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	e001      	b.n	8003a64 <HAL_GPIO_Init+0xf0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2bff      	cmp	r3, #255	; 0xff
 8003a6a:	d802      	bhi.n	8003a72 <HAL_GPIO_Init+0xfe>
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x104>
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	3b08      	subs	r3, #8
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	210f      	movs	r1, #15
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	401a      	ands	r2, r3
 8003a8a:	6a39      	ldr	r1, [r7, #32]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	431a      	orrs	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8096 	beq.w	8003bd2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003aa6:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_GPIO_Init+0x298>)
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	4a58      	ldr	r2, [pc, #352]	; (8003c0c <HAL_GPIO_Init+0x298>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6193      	str	r3, [r2, #24]
 8003ab2:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <HAL_GPIO_Init+0x298>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003abe:	4a54      	ldr	r2, [pc, #336]	; (8003c10 <HAL_GPIO_Init+0x29c>)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	; (8003c14 <HAL_GPIO_Init+0x2a0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_GPIO_Init+0x19e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <HAL_GPIO_Init+0x2a4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00d      	beq.n	8003b0e <HAL_GPIO_Init+0x19a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a49      	ldr	r2, [pc, #292]	; (8003c1c <HAL_GPIO_Init+0x2a8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <HAL_GPIO_Init+0x196>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a48      	ldr	r2, [pc, #288]	; (8003c20 <HAL_GPIO_Init+0x2ac>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_GPIO_Init+0x192>
 8003b02:	2303      	movs	r3, #3
 8003b04:	e006      	b.n	8003b14 <HAL_GPIO_Init+0x1a0>
 8003b06:	2304      	movs	r3, #4
 8003b08:	e004      	b.n	8003b14 <HAL_GPIO_Init+0x1a0>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e002      	b.n	8003b14 <HAL_GPIO_Init+0x1a0>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_GPIO_Init+0x1a0>
 8003b12:	2300      	movs	r3, #0
 8003b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b16:	f002 0203 	and.w	r2, r2, #3
 8003b1a:	0092      	lsls	r2, r2, #2
 8003b1c:	4093      	lsls	r3, r2
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b24:	493a      	ldr	r1, [pc, #232]	; (8003c10 <HAL_GPIO_Init+0x29c>)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b3e:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4938      	ldr	r1, [pc, #224]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
 8003b4a:	e006      	b.n	8003b5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b4c:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	4933      	ldr	r1, [pc, #204]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b66:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	492e      	ldr	r1, [pc, #184]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
 8003b72:	e006      	b.n	8003b82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	4929      	ldr	r1, [pc, #164]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b8e:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	4924      	ldr	r1, [pc, #144]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
 8003b9a:	e006      	b.n	8003baa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b9c:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	491f      	ldr	r1, [pc, #124]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	491a      	ldr	r1, [pc, #104]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60cb      	str	r3, [r1, #12]
 8003bc2:	e006      	b.n	8003bd2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bc4:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	4915      	ldr	r1, [pc, #84]	; (8003c24 <HAL_GPIO_Init+0x2b0>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f47f aed0 	bne.w	8003988 <HAL_GPIO_Init+0x14>
  }
}
 8003be8:	bf00      	nop
 8003bea:	372c      	adds	r7, #44	; 0x2c
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	10210000 	.word	0x10210000
 8003bf8:	10110000 	.word	0x10110000
 8003bfc:	10120000 	.word	0x10120000
 8003c00:	10310000 	.word	0x10310000
 8003c04:	10320000 	.word	0x10320000
 8003c08:	10220000 	.word	0x10220000
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40010800 	.word	0x40010800
 8003c18:	40010c00 	.word	0x40010c00
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	40011400 	.word	0x40011400
 8003c24:	40010400 	.word	0x40010400

08003c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	e001      	b.n	8003c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	807b      	strh	r3, [r7, #2]
 8003c62:	4613      	mov	r3, r2
 8003c64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c66:	787b      	ldrb	r3, [r7, #1]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c6c:	887a      	ldrh	r2, [r7, #2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c72:	e003      	b.n	8003c7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	041a      	lsls	r2, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	611a      	str	r2, [r3, #16]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c98:	887a      	ldrh	r2, [r7, #2]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	041a      	lsls	r2, r3, #16
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	611a      	str	r2, [r3, #16]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <HAL_PWR_EnableBkUpAccess+0x14>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	420e0020 	.word	0x420e0020

08003cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e26c      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8087 	beq.w	8003dfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf0:	4b92      	ldr	r3, [pc, #584]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d00c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cfc:	4b8f      	ldr	r3, [pc, #572]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d112      	bne.n	8003d2e <HAL_RCC_OscConfig+0x5e>
 8003d08:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d16:	4b89      	ldr	r3, [pc, #548]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d06c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x12c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d168      	bne.n	8003dfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e246      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x76>
 8003d38:	4b80      	ldr	r3, [pc, #512]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7f      	ldr	r2, [pc, #508]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e02e      	b.n	8003da4 <HAL_RCC_OscConfig+0xd4>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x98>
 8003d4e:	4b7b      	ldr	r3, [pc, #492]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7a      	ldr	r2, [pc, #488]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b78      	ldr	r3, [pc, #480]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a77      	ldr	r2, [pc, #476]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e01d      	b.n	8003da4 <HAL_RCC_OscConfig+0xd4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0xbc>
 8003d72:	4b72      	ldr	r3, [pc, #456]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a71      	ldr	r2, [pc, #452]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b6f      	ldr	r3, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6e      	ldr	r2, [pc, #440]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0xd4>
 8003d8c:	4b6b      	ldr	r3, [pc, #428]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6a      	ldr	r2, [pc, #424]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a67      	ldr	r2, [pc, #412]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe fe40 	bl	8002a30 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fe fe3c 	bl	8002a30 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e1fa      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b5d      	ldr	r3, [pc, #372]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0xe4>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fe2c 	bl	8002a30 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe fe28 	bl	8002a30 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1e6      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x10c>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d063      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e0a:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e16:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d11c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x18c>
 8003e22:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	4b43      	ldr	r3, [pc, #268]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_RCC_OscConfig+0x176>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1ba      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4939      	ldr	r1, [pc, #228]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	e03a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCC_OscConfig+0x270>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fe fde1 	bl	8002a30 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fe fddd 	bl	8002a30 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e19b      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4927      	ldr	r1, [pc, #156]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea6:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fe fdc0 	bl	8002a30 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fdbc 	bl	8002a30 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e17a      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d03a      	beq.n	8003f54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eec:	f7fe fda0 	bl	8002a30 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fe fd9c 	bl	8002a30 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e15a      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_RCC_OscConfig+0x26c>)
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f12:	2001      	movs	r0, #1
 8003f14:	f000 fac6 	bl	80044a4 <RCC_Delay>
 8003f18:	e01c      	b.n	8003f54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <HAL_RCC_OscConfig+0x274>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f20:	f7fe fd86 	bl	8002a30 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f26:	e00f      	b.n	8003f48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fe fd82 	bl	8002a30 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d908      	bls.n	8003f48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e140      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	42420000 	.word	0x42420000
 8003f44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b9e      	ldr	r3, [pc, #632]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e9      	bne.n	8003f28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a6 	beq.w	80040ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f66:	4b97      	ldr	r3, [pc, #604]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10d      	bne.n	8003f8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	4b94      	ldr	r3, [pc, #592]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4a93      	ldr	r2, [pc, #588]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	61d3      	str	r3, [r2, #28]
 8003f7e:	4b91      	ldr	r3, [pc, #580]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8e:	4b8e      	ldr	r3, [pc, #568]	; (80041c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d118      	bne.n	8003fcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9a:	4b8b      	ldr	r3, [pc, #556]	; (80041c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a8a      	ldr	r2, [pc, #552]	; (80041c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fd43 	bl	8002a30 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fae:	f7fe fd3f 	bl	8002a30 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b64      	cmp	r3, #100	; 0x64
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0fd      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	4b81      	ldr	r3, [pc, #516]	; (80041c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d106      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x312>
 8003fd4:	4b7b      	ldr	r3, [pc, #492]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4a7a      	ldr	r2, [pc, #488]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6213      	str	r3, [r2, #32]
 8003fe0:	e02d      	b.n	800403e <HAL_RCC_OscConfig+0x36e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0x334>
 8003fea:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	4a75      	ldr	r2, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	6213      	str	r3, [r2, #32]
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4a72      	ldr	r2, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8003ffc:	f023 0304 	bic.w	r3, r3, #4
 8004000:	6213      	str	r3, [r2, #32]
 8004002:	e01c      	b.n	800403e <HAL_RCC_OscConfig+0x36e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b05      	cmp	r3, #5
 800400a:	d10c      	bne.n	8004026 <HAL_RCC_OscConfig+0x356>
 800400c:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	4a6c      	ldr	r2, [pc, #432]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004012:	f043 0304 	orr.w	r3, r3, #4
 8004016:	6213      	str	r3, [r2, #32]
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4a69      	ldr	r2, [pc, #420]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6213      	str	r3, [r2, #32]
 8004024:	e00b      	b.n	800403e <HAL_RCC_OscConfig+0x36e>
 8004026:	4b67      	ldr	r3, [pc, #412]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a66      	ldr	r2, [pc, #408]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	6213      	str	r3, [r2, #32]
 8004032:	4b64      	ldr	r3, [pc, #400]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4a63      	ldr	r2, [pc, #396]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d015      	beq.n	8004072 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004046:	f7fe fcf3 	bl	8002a30 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fe fcef 	bl	8002a30 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0ab      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	4b57      	ldr	r3, [pc, #348]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ee      	beq.n	800404e <HAL_RCC_OscConfig+0x37e>
 8004070:	e014      	b.n	800409c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004072:	f7fe fcdd 	bl	8002a30 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004078:	e00a      	b.n	8004090 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fe fcd9 	bl	8002a30 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	; 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e095      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	4b4c      	ldr	r3, [pc, #304]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1ee      	bne.n	800407a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d105      	bne.n	80040ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a2:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4a47      	ldr	r2, [pc, #284]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8081 	beq.w	80041ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b8:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d061      	beq.n	8004188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d146      	bne.n	800415a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040cc:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_OscConfig+0x4fc>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe fcad 	bl	8002a30 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe fca9 	bl	8002a30 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e067      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ec:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d108      	bne.n	8004114 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	492d      	ldr	r1, [pc, #180]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a19      	ldr	r1, [r3, #32]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	430b      	orrs	r3, r1
 8004126:	4927      	ldr	r1, [pc, #156]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <HAL_RCC_OscConfig+0x4fc>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe fc7d 	bl	8002a30 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe fc79 	bl	8002a30 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e037      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x46a>
 8004158:	e02f      	b.n	80041ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415a:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <HAL_RCC_OscConfig+0x4fc>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fe fc66 	bl	8002a30 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004168:	f7fe fc62 	bl	8002a30 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e020      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x498>
 8004186:	e018      	b.n	80041ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e013      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_OscConfig+0x4f4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40007000 	.word	0x40007000
 80041cc:	42420060 	.word	0x42420060

080041d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0d0      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4965      	ldr	r1, [pc, #404]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b63      	ldr	r3, [pc, #396]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b8      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b59      	ldr	r3, [pc, #356]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a58      	ldr	r2, [pc, #352]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004244:	4b53      	ldr	r3, [pc, #332]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800424e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b50      	ldr	r3, [pc, #320]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	494d      	ldr	r1, [pc, #308]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d040      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d115      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e073      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06b      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b39      	ldr	r3, [pc, #228]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4936      	ldr	r1, [pc, #216]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fe fbb6 	bl	8002a30 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fe fbb2 	bl	8002a30 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e053      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d210      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	4922      	ldr	r1, [pc, #136]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e032      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4916      	ldr	r1, [pc, #88]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	490e      	ldr	r1, [pc, #56]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800435e:	f000 f821 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004362:	4601      	mov	r1, r0
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	fa21 f303 	lsr.w	r3, r1, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1cc>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_ClockConfig+0x1d0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fb14 	bl	80029ac <HAL_InitTick>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40022000 	.word	0x40022000
 8004394:	40021000 	.word	0x40021000
 8004398:	08006694 	.word	0x08006694
 800439c:	20000000 	.word	0x20000000
 80043a0:	20000004 	.word	0x20000004

080043a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	b490      	push	{r4, r7}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043aa:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043ac:	1d3c      	adds	r4, r7, #4
 80043ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043ce:	4b23      	ldr	r3, [pc, #140]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d002      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x40>
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x46>
 80043e2:	e02d      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043e4:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043e6:	623b      	str	r3, [r7, #32]
      break;
 80043e8:	e02d      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	0c9b      	lsrs	r3, r3, #18
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043f6:	4413      	add	r3, r2
 80043f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0c5b      	lsrs	r3, r3, #17
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004416:	4413      	add	r3, r2
 8004418:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800441c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004422:	fb02 f203 	mul.w	r2, r2, r3
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e004      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	623b      	str	r3, [r7, #32]
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004442:	623b      	str	r3, [r7, #32]
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	6a3b      	ldr	r3, [r7, #32]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3728      	adds	r7, #40	; 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bc90      	pop	{r4, r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	0800666c 	.word	0x0800666c
 8004458:	0800667c 	.word	0x0800667c
 800445c:	40021000 	.word	0x40021000
 8004460:	007a1200 	.word	0x007a1200
 8004464:	003d0900 	.word	0x003d0900

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <HAL_RCC_GetHCLKFreq+0x10>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004480:	f7ff fff2 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004484:	4601      	mov	r1, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	0adb      	lsrs	r3, r3, #11
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	080066a4 	.word	0x080066a4

080044a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <RCC_Delay+0x34>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <RCC_Delay+0x38>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	0a5b      	lsrs	r3, r3, #9
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044c0:	bf00      	nop
  }
  while (Delay --);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	60fa      	str	r2, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f9      	bne.n	80044c0 <RCC_Delay+0x1c>
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000000 	.word	0x20000000
 80044dc:	10624dd3 	.word	0x10624dd3

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d07d      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80044fc:	2300      	movs	r3, #0
 80044fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004500:	4b4f      	ldr	r3, [pc, #316]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b4c      	ldr	r3, [pc, #304]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	61d3      	str	r3, [r2, #28]
 8004518:	4b49      	ldr	r3, [pc, #292]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d118      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a42      	ldr	r2, [pc, #264]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004540:	f7fe fa76 	bl	8002a30 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fe fa72 	bl	8002a30 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e06d      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004566:	4b36      	ldr	r3, [pc, #216]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d027      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004584:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800458e:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800459a:	4a29      	ldr	r2, [pc, #164]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d014      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fe fa41 	bl	8002a30 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fe fa3d 	bl	8002a30 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e036      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ee      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4917      	ldr	r1, [pc, #92]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	490b      	ldr	r1, [pc, #44]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4904      	ldr	r1, [pc, #16]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
 8004648:	42420440 	.word	0x42420440

0800464c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b08d      	sub	sp, #52	; 0x34
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004654:	4b55      	ldr	r3, [pc, #340]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004656:	f107 040c 	add.w	r4, r7, #12
 800465a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800465c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004660:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466e:	2300      	movs	r3, #0
 8004670:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	2300      	movs	r3, #0
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d07f      	beq.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004680:	2b10      	cmp	r3, #16
 8004682:	d002      	beq.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004684:	2b01      	cmp	r3, #1
 8004686:	d048      	beq.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004688:	e08b      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800468a:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004690:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d07f      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	0c9b      	lsrs	r3, r3, #18
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046a8:	4413      	add	r3, r2
 80046aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046ba:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	0c5b      	lsrs	r3, r3, #17
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046c8:	4413      	add	r3, r2
 80046ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046da:	4a37      	ldr	r2, [pc, #220]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ea:	e004      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	4a33      	ldr	r2, [pc, #204]	; (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d102      	bne.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004708:	e048      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004718:	e040      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800471a:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d108      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
 800473c:	e01f      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004748:	d109      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004756:	f649 4340 	movw	r3, #40000	; 0x9c40
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
 800475c:	e00f      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004768:	d11a      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d014      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004776:	f24f 4324 	movw	r3, #62500	; 0xf424
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800477c:	e010      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800477e:	e00f      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004780:	f7ff fe7c 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	0b9b      	lsrs	r3, r3, #14
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	3301      	adds	r3, #1
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800479a:	e002      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80047a0:	bf00      	nop
    }
  }
  return (frequency);
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3734      	adds	r7, #52	; 0x34
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd90      	pop	{r4, r7, pc}
 80047ac:	08006680 	.word	0x08006680
 80047b0:	08006690 	.word	0x08006690
 80047b4:	40021000 	.word	0x40021000
 80047b8:	007a1200 	.word	0x007a1200
 80047bc:	003d0900 	.word	0x003d0900
 80047c0:	aaaaaaab 	.word	0xaaaaaaab

080047c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e084      	b.n	80048e4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	7c5b      	ldrb	r3, [r3, #17]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd ff5c 	bl	80026a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f952 	bl	8004aa0 <HAL_RTC_WaitForSynchro>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2204      	movs	r2, #4
 8004806:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e06b      	b.n	80048e4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fa0b 	bl	8004c28 <RTC_EnterInitMode>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2204      	movs	r2, #4
 800481c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e060      	b.n	80048e4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0207 	bic.w	r2, r2, #7
 8004830:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800483a:	4b2c      	ldr	r3, [pc, #176]	; (80048ec <HAL_RTC_Init+0x128>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <HAL_RTC_Init+0x128>)
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004846:	4b29      	ldr	r3, [pc, #164]	; (80048ec <HAL_RTC_Init+0x128>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4926      	ldr	r1, [pc, #152]	; (80048ec <HAL_RTC_Init+0x128>)
 8004854:	4313      	orrs	r3, r2
 8004856:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d003      	beq.n	800486a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e00e      	b.n	8004888 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800486a:	2001      	movs	r0, #1
 800486c:	f7ff feee 	bl	800464c <HAL_RCCEx_GetPeriphCLKFreq>
 8004870:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2204      	movs	r2, #4
 800487c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e030      	b.n	80048e4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3b01      	subs	r3, #1
 8004886:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 010f 	bic.w	r1, r3, #15
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0c1a      	lsrs	r2, r3, #16
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	b291      	uxth	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f9df 	bl	8004c78 <RTC_ExitInitMode>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2204      	movs	r2, #4
 80048c4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00c      	b.n	80048e4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
  }
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40006c00 	.word	0x40006c00

080048f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	2300      	movs	r3, #0
 800490a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_RTC_GetTime+0x28>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b5      	b.n	8004a88 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0ac      	b.n	8004a88 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8e3 	bl	8004afa <RTC_ReadTimeCounter>
 8004934:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	4a55      	ldr	r2, [pc, #340]	; (8004a90 <HAL_RTC_GetTime+0x1a0>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	0adb      	lsrs	r3, r3, #11
 8004940:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4b52      	ldr	r3, [pc, #328]	; (8004a90 <HAL_RTC_GetTime+0x1a0>)
 8004946:	fba3 1302 	umull	r1, r3, r3, r2
 800494a:	0adb      	lsrs	r3, r3, #11
 800494c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	4a4f      	ldr	r2, [pc, #316]	; (8004a94 <HAL_RTC_GetTime+0x1a4>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	4a4a      	ldr	r2, [pc, #296]	; (8004a90 <HAL_RTC_GetTime+0x1a0>)
 8004968:	fba2 1203 	umull	r1, r2, r2, r3
 800496c:	0ad2      	lsrs	r2, r2, #11
 800496e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004972:	fb01 f202 	mul.w	r2, r1, r2
 8004976:	1a9a      	subs	r2, r3, r2
 8004978:	4b46      	ldr	r3, [pc, #280]	; (8004a94 <HAL_RTC_GetTime+0x1a4>)
 800497a:	fba3 1302 	umull	r1, r3, r3, r2
 800497e:	0959      	lsrs	r1, r3, #5
 8004980:	460b      	mov	r3, r1
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a5b      	subs	r3, r3, r1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	1ad1      	subs	r1, r2, r3
 800498a:	b2ca      	uxtb	r2, r1
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b17      	cmp	r3, #23
 8004994:	d955      	bls.n	8004a42 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4a3f      	ldr	r2, [pc, #252]	; (8004a98 <HAL_RTC_GetTime+0x1a8>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80049a2:	6939      	ldr	r1, [r7, #16]
 80049a4:	4b3c      	ldr	r3, [pc, #240]	; (8004a98 <HAL_RTC_GetTime+0x1a8>)
 80049a6:	fba3 2301 	umull	r2, r3, r3, r1
 80049aa:	091a      	lsrs	r2, r3, #4
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	1aca      	subs	r2, r1, r3
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f8f3 	bl	8004ba8 <RTC_ReadAlarmCounter>
 80049c2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d008      	beq.n	80049de <HAL_RTC_GetTime+0xee>
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d904      	bls.n	80049de <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e002      	b.n	80049e4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4a2d      	ldr	r2, [pc, #180]	; (8004a9c <HAL_RTC_GetTime+0x1ac>)
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f8b0 	bl	8004b5a <RTC_WriteTimeCounter>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e041      	b.n	8004a88 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d00c      	beq.n	8004a26 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a14:	69f9      	ldr	r1, [r7, #28]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8df 	bl	8004bda <RTC_WriteAlarmCounter>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e030      	b.n	8004a88 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a26:	69f9      	ldr	r1, [r7, #28]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f8d6 	bl	8004bda <RTC_WriteAlarmCounter>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e027      	b.n	8004a88 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f961 	bl	8004d02 <RTC_DateUpdate>
 8004a40:	e003      	b.n	8004a4a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01a      	beq.n	8004a86 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f937 	bl	8004cc8 <RTC_ByteToBcd2>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f92e 	bl	8004cc8 <RTC_ByteToBcd2>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	789b      	ldrb	r3, [r3, #2]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f925 	bl	8004cc8 <RTC_ByteToBcd2>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	91a2b3c5 	.word	0x91a2b3c5
 8004a94:	88888889 	.word	0x88888889
 8004a98:	aaaaaaab 	.word	0xaaaaaaab
 8004a9c:	00015180 	.word	0x00015180

08004aa0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e01d      	b.n	8004af2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0208 	bic.w	r2, r2, #8
 8004ac4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004ac6:	f7fd ffb3 	bl	8002a30 <HAL_GetTick>
 8004aca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004acc:	e009      	b.n	8004ae2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004ace:	f7fd ffaf 	bl	8002a30 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004adc:	d901      	bls.n	8004ae2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e007      	b.n	8004af2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ee      	beq.n	8004ace <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b087      	sub	sp, #28
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	827b      	strh	r3, [r7, #18]
 8004b06:	2300      	movs	r3, #0
 8004b08:	823b      	strh	r3, [r7, #16]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004b2a:	8a7a      	ldrh	r2, [r7, #18]
 8004b2c:	8a3b      	ldrh	r3, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d008      	beq.n	8004b44 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004b32:	8a3b      	ldrh	r3, [r7, #16]
 8004b34:	041a      	lsls	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e004      	b.n	8004b4e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004b44:	8a7b      	ldrh	r3, [r7, #18]
 8004b46:	041a      	lsls	r2, r3, #16
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004b4e:	697b      	ldr	r3, [r7, #20]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f85d 	bl	8004c28 <RTC_EnterInitMode>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	e011      	b.n	8004b9e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	0c12      	lsrs	r2, r2, #16
 8004b82:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	b292      	uxth	r2, r2
 8004b8c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f872 	bl	8004c78 <RTC_ExitInitMode>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	81fb      	strh	r3, [r7, #14]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	041a      	lsls	r2, r3, #16
 8004bcc:	89bb      	ldrh	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f81d 	bl	8004c28 <RTC_EnterInitMode>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	e011      	b.n	8004c1e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	0c12      	lsrs	r2, r2, #16
 8004c02:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	b292      	uxth	r2, r2
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f832 	bl	8004c78 <RTC_ExitInitMode>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004c34:	f7fd fefc 	bl	8002a30 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c3a:	e009      	b.n	8004c50 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c3c:	f7fd fef8 	bl	8002a30 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c4a:	d901      	bls.n	8004c50 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e00f      	b.n	8004c70 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ee      	beq.n	8004c3c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0210 	orr.w	r2, r2, #16
 8004c6c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0210 	bic.w	r2, r2, #16
 8004c92:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004c94:	f7fd fecc 	bl	8002a30 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c9a:	e009      	b.n	8004cb0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c9c:	f7fd fec8 	bl	8002a30 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004caa:	d901      	bls.n	8004cb0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e007      	b.n	8004cc0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0ee      	beq.n	8004c9c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004cd6:	e005      	b.n	8004ce4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	3b0a      	subs	r3, #10
 8004ce2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	2b09      	cmp	r3, #9
 8004ce8:	d8f6      	bhi.n	8004cd8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	b2db      	uxtb	r3, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7bdb      	ldrb	r3, [r3, #15]
 8004d20:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7b5b      	ldrb	r3, [r3, #13]
 8004d26:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7b9b      	ldrb	r3, [r3, #14]
 8004d2c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	e06f      	b.n	8004e14 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d011      	beq.n	8004d5e <RTC_DateUpdate+0x5c>
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d00e      	beq.n	8004d5e <RTC_DateUpdate+0x5c>
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d00b      	beq.n	8004d5e <RTC_DateUpdate+0x5c>
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b07      	cmp	r3, #7
 8004d4a:	d008      	beq.n	8004d5e <RTC_DateUpdate+0x5c>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d005      	beq.n	8004d5e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b0a      	cmp	r3, #10
 8004d56:	d002      	beq.n	8004d5e <RTC_DateUpdate+0x5c>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b0c      	cmp	r3, #12
 8004d5c:	d117      	bne.n	8004d8e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b1e      	cmp	r3, #30
 8004d62:	d803      	bhi.n	8004d6c <RTC_DateUpdate+0x6a>
      {
        day++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004d6a:	e050      	b.n	8004e0e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d005      	beq.n	8004d7e <RTC_DateUpdate+0x7c>
        {
          month++;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3301      	adds	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004d7c:	e047      	b.n	8004e0e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d82:	2301      	movs	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
          year++;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004d8c:	e03f      	b.n	8004e0e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d008      	beq.n	8004da6 <RTC_DateUpdate+0xa4>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d005      	beq.n	8004da6 <RTC_DateUpdate+0xa4>
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b09      	cmp	r3, #9
 8004d9e:	d002      	beq.n	8004da6 <RTC_DateUpdate+0xa4>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b0b      	cmp	r3, #11
 8004da4:	d10c      	bne.n	8004dc0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b1d      	cmp	r3, #29
 8004daa:	d803      	bhi.n	8004db4 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004db2:	e02c      	b.n	8004e0e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	3301      	adds	r3, #1
 8004db8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004dbe:	e026      	b.n	8004e0e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d123      	bne.n	8004e0e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b1b      	cmp	r3, #27
 8004dca:	d803      	bhi.n	8004dd4 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e01c      	b.n	8004e0e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b1c      	cmp	r3, #28
 8004dd8:	d111      	bne.n	8004dfe <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f838 	bl	8004e54 <RTC_IsLeapYear>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e00d      	b.n	8004e0e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e007      	b.n	8004e0e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b1d      	cmp	r3, #29
 8004e02:	d104      	bne.n	8004e0e <RTC_DateUpdate+0x10c>
      {
        month++;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	3301      	adds	r3, #1
 8004e08:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d38b      	bcc.n	8004d34 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f000 f83a 	bl	8004eb8 <RTC_WeekDayNum>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	731a      	strb	r2, [r3, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e01d      	b.n	8004eaa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <RTC_IsLeapYear+0x60>)
 8004e72:	fba2 1203 	umull	r1, r2, r2, r3
 8004e76:	0952      	lsrs	r2, r2, #5
 8004e78:	2164      	movs	r1, #100	; 0x64
 8004e7a:	fb01 f202 	mul.w	r2, r1, r2
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e00f      	b.n	8004eaa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <RTC_IsLeapYear+0x60>)
 8004e8e:	fba2 1203 	umull	r1, r2, r2, r3
 8004e92:	09d2      	lsrs	r2, r2, #7
 8004e94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004e98:	fb01 f202 	mul.w	r2, r1, r2
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004ea8:	2300      	movs	r3, #0
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	51eb851f 	.word	0x51eb851f

08004eb8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004ed6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d82d      	bhi.n	8004f3a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <RTC_WeekDayNum+0xe4>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	085a      	lsrs	r2, r3, #1
 8004ef2:	78bb      	ldrb	r3, [r7, #2]
 8004ef4:	441a      	add	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	441a      	add	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	4926      	ldr	r1, [pc, #152]	; (8004fa0 <RTC_WeekDayNum+0xe8>)
 8004f08:	fba1 1303 	umull	r1, r3, r1, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	4922      	ldr	r1, [pc, #136]	; (8004fa0 <RTC_WeekDayNum+0xe8>)
 8004f16:	fba1 1303 	umull	r1, r3, r1, r3
 8004f1a:	09db      	lsrs	r3, r3, #7
 8004f1c:	4413      	add	r3, r2
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <RTC_WeekDayNum+0xec>)
 8004f22:	fba3 1302 	umull	r1, r3, r3, r2
 8004f26:	1ad1      	subs	r1, r2, r3
 8004f28:	0849      	lsrs	r1, r1, #1
 8004f2a:	440b      	add	r3, r1
 8004f2c:	0899      	lsrs	r1, r3, #2
 8004f2e:	460b      	mov	r3, r1
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	1a5b      	subs	r3, r3, r1
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e029      	b.n	8004f8e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <RTC_WeekDayNum+0xe4>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	085a      	lsrs	r2, r3, #1
 8004f4e:	78bb      	ldrb	r3, [r7, #2]
 8004f50:	441a      	add	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	441a      	add	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4910      	ldr	r1, [pc, #64]	; (8004fa0 <RTC_WeekDayNum+0xe8>)
 8004f60:	fba1 1303 	umull	r1, r3, r1, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	1ad2      	subs	r2, r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	490d      	ldr	r1, [pc, #52]	; (8004fa0 <RTC_WeekDayNum+0xe8>)
 8004f6c:	fba1 1303 	umull	r1, r3, r1, r3
 8004f70:	09db      	lsrs	r3, r3, #7
 8004f72:	4413      	add	r3, r2
 8004f74:	1c9a      	adds	r2, r3, #2
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <RTC_WeekDayNum+0xec>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	1ad1      	subs	r1, r2, r3
 8004f7e:	0849      	lsrs	r1, r1, #1
 8004f80:	440b      	add	r3, r1
 8004f82:	0899      	lsrs	r1, r3, #2
 8004f84:	460b      	mov	r3, r1
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	1a5b      	subs	r3, r3, r1
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	b2db      	uxtb	r3, r3
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	38e38e39 	.word	0x38e38e39
 8004fa0:	51eb851f 	.word	0x51eb851f
 8004fa4:	24924925 	.word	0x24924925

08004fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e041      	b.n	800503e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fd fb8e 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f000 fa9e 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e041      	b.n	80050dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f839 	bl	80050e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 fa4f 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_TIM_PWM_Start+0x24>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e022      	b.n	8005162 <HAL_TIM_PWM_Start+0x6a>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b04      	cmp	r3, #4
 8005120:	d109      	bne.n	8005136 <HAL_TIM_PWM_Start+0x3e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b01      	cmp	r3, #1
 800512c:	bf14      	ite	ne
 800512e:	2301      	movne	r3, #1
 8005130:	2300      	moveq	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	e015      	b.n	8005162 <HAL_TIM_PWM_Start+0x6a>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d109      	bne.n	8005150 <HAL_TIM_PWM_Start+0x58>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e008      	b.n	8005162 <HAL_TIM_PWM_Start+0x6a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e05e      	b.n	8005228 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start+0x82>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005178:	e013      	b.n	80051a2 <HAL_TIM_PWM_Start+0xaa>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start+0x92>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005188:	e00b      	b.n	80051a2 <HAL_TIM_PWM_Start+0xaa>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005198:	e003      	b.n	80051a2 <HAL_TIM_PWM_Start+0xaa>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2201      	movs	r2, #1
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fc3c 	bl	8005a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <HAL_TIM_PWM_Start+0x138>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d107      	bne.n	80051ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a18      	ldr	r2, [pc, #96]	; (8005230 <HAL_TIM_PWM_Start+0x138>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_TIM_PWM_Start+0xfa>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051dc:	d009      	beq.n	80051f2 <HAL_TIM_PWM_Start+0xfa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a14      	ldr	r2, [pc, #80]	; (8005234 <HAL_TIM_PWM_Start+0x13c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_TIM_PWM_Start+0xfa>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a12      	ldr	r2, [pc, #72]	; (8005238 <HAL_TIM_PWM_Start+0x140>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d111      	bne.n	8005216 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b06      	cmp	r3, #6
 8005202:	d010      	beq.n	8005226 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	e007      	b.n	8005226 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0201 	orr.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800

0800523c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005252:	2302      	movs	r3, #2
 8005254:	e0ac      	b.n	80053b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b0c      	cmp	r3, #12
 8005262:	f200 809f 	bhi.w	80053a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080053a5 	.word	0x080053a5
 8005274:	080053a5 	.word	0x080053a5
 8005278:	080053a5 	.word	0x080053a5
 800527c:	080052e1 	.word	0x080052e1
 8005280:	080053a5 	.word	0x080053a5
 8005284:	080053a5 	.word	0x080053a5
 8005288:	080053a5 	.word	0x080053a5
 800528c:	08005323 	.word	0x08005323
 8005290:	080053a5 	.word	0x080053a5
 8005294:	080053a5 	.word	0x080053a5
 8005298:	080053a5 	.word	0x080053a5
 800529c:	08005363 	.word	0x08005363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f9a0 	bl	80055ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e062      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f9e6 	bl	80056b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e041      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa2f 	bl	800578c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e021      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fa79 	bl	8005860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e000      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80053a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIM_ConfigClockSource+0x18>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e0a6      	b.n	800551e <HAL_TIM_ConfigClockSource+0x166>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d067      	beq.n	80054d8 <HAL_TIM_ConfigClockSource+0x120>
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d80b      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x6c>
 800540c:	2b10      	cmp	r3, #16
 800540e:	d073      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x140>
 8005410:	2b10      	cmp	r3, #16
 8005412:	d802      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x62>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d06f      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005418:	e078      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800541a:	2b20      	cmp	r3, #32
 800541c:	d06c      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x140>
 800541e:	2b30      	cmp	r3, #48	; 0x30
 8005420:	d06a      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005422:	e073      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d00d      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x8c>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d804      	bhi.n	8005436 <HAL_TIM_ConfigClockSource+0x7e>
 800542c:	2b50      	cmp	r3, #80	; 0x50
 800542e:	d033      	beq.n	8005498 <HAL_TIM_ConfigClockSource+0xe0>
 8005430:	2b60      	cmp	r3, #96	; 0x60
 8005432:	d041      	beq.n	80054b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005434:	e06a      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543a:	d066      	beq.n	800550a <HAL_TIM_ConfigClockSource+0x152>
 800543c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005440:	d017      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005442:	e063      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6899      	ldr	r1, [r3, #8]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f000 fac9 	bl	80059ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005466:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
      break;
 8005470:	e04c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6899      	ldr	r1, [r3, #8]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f000 fab2 	bl	80059ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005494:	609a      	str	r2, [r3, #8]
      break;
 8005496:	e039      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	6859      	ldr	r1, [r3, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	461a      	mov	r2, r3
 80054a6:	f000 fa29 	bl	80058fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2150      	movs	r1, #80	; 0x50
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fa80 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 80054b6:	e029      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	461a      	mov	r2, r3
 80054c6:	f000 fa47 	bl	8005958 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2160      	movs	r1, #96	; 0x60
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fa70 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 80054d6:	e019      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	461a      	mov	r2, r3
 80054e6:	f000 fa09 	bl	80058fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2140      	movs	r1, #64	; 0x40
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fa60 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 80054f6:	e009      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f000 fa57 	bl	80059b6 <TIM_ITRx_SetConfig>
        break;
 8005508:	e000      	b.n	800550c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800550a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a29      	ldr	r2, [pc, #164]	; (80055e0 <TIM_Base_SetConfig+0xb8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x30>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x30>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <TIM_Base_SetConfig+0xbc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x30>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <TIM_Base_SetConfig+0xc0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <TIM_Base_SetConfig+0xb8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0x62>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0x62>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <TIM_Base_SetConfig+0xbc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0x62>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <TIM_Base_SetConfig+0xc0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <TIM_Base_SetConfig+0xb8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d103      	bne.n	80055d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	615a      	str	r2, [r3, #20]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800

080055ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 0302 	bic.w	r3, r3, #2
 8005634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <TIM_OC1_SetConfig+0xc8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10c      	bne.n	8005662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 0308 	bic.w	r3, r3, #8
 800564e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <TIM_OC1_SetConfig+0xc8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d111      	bne.n	800568e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40012c00 	.word	0x40012c00

080056b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0210 	bic.w	r2, r3, #16
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0320 	bic.w	r3, r3, #32
 8005702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1d      	ldr	r2, [pc, #116]	; (8005788 <TIM_OC2_SetConfig+0xd0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d10d      	bne.n	8005734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a14      	ldr	r2, [pc, #80]	; (8005788 <TIM_OC2_SetConfig+0xd0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d113      	bne.n	8005764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00

0800578c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1d      	ldr	r2, [pc, #116]	; (800585c <TIM_OC3_SetConfig+0xd0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10d      	bne.n	8005806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a14      	ldr	r2, [pc, #80]	; (800585c <TIM_OC3_SetConfig+0xd0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d113      	bne.n	8005836 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40012c00 	.word	0x40012c00

08005860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	031b      	lsls	r3, r3, #12
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a0f      	ldr	r2, [pc, #60]	; (80058f8 <TIM_OC4_SetConfig+0x98>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d109      	bne.n	80058d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00

080058fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f023 030a 	bic.w	r3, r3, #10
 8005938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f023 0210 	bic.w	r2, r3, #16
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005982:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	031b      	lsls	r3, r3, #12
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	621a      	str	r2, [r3, #32]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f043 0307 	orr.w	r3, r3, #7
 80059d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	021a      	lsls	r2, r3, #8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	609a      	str	r2, [r3, #8]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1a      	ldr	r2, [r3, #32]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e046      	b.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad4:	d009      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10c      	bne.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800

08005b2c <__errno>:
 8005b2c:	4b01      	ldr	r3, [pc, #4]	; (8005b34 <__errno+0x8>)
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	2000000c 	.word	0x2000000c

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	2500      	movs	r5, #0
 8005b3c:	4e0c      	ldr	r6, [pc, #48]	; (8005b70 <__libc_init_array+0x38>)
 8005b3e:	4c0d      	ldr	r4, [pc, #52]	; (8005b74 <__libc_init_array+0x3c>)
 8005b40:	1ba4      	subs	r4, r4, r6
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	42a5      	cmp	r5, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	f000 fc34 	bl	80063b4 <_init>
 8005b4c:	2500      	movs	r5, #0
 8005b4e:	4e0a      	ldr	r6, [pc, #40]	; (8005b78 <__libc_init_array+0x40>)
 8005b50:	4c0a      	ldr	r4, [pc, #40]	; (8005b7c <__libc_init_array+0x44>)
 8005b52:	1ba4      	subs	r4, r4, r6
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	42a5      	cmp	r5, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b60:	4798      	blx	r3
 8005b62:	3501      	adds	r5, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b6a:	4798      	blx	r3
 8005b6c:	3501      	adds	r5, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	080066e0 	.word	0x080066e0
 8005b74:	080066e0 	.word	0x080066e0
 8005b78:	080066e0 	.word	0x080066e0
 8005b7c:	080066e4 	.word	0x080066e4

08005b80 <memset>:
 8005b80:	4603      	mov	r3, r0
 8005b82:	4402      	add	r2, r0
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d100      	bne.n	8005b8a <memset+0xa>
 8005b88:	4770      	bx	lr
 8005b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8e:	e7f9      	b.n	8005b84 <memset+0x4>

08005b90 <siprintf>:
 8005b90:	b40e      	push	{r1, r2, r3}
 8005b92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b96:	b500      	push	{lr}
 8005b98:	b09c      	sub	sp, #112	; 0x70
 8005b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b9c:	9002      	str	r0, [sp, #8]
 8005b9e:	9006      	str	r0, [sp, #24]
 8005ba0:	9107      	str	r1, [sp, #28]
 8005ba2:	9104      	str	r1, [sp, #16]
 8005ba4:	4808      	ldr	r0, [pc, #32]	; (8005bc8 <siprintf+0x38>)
 8005ba6:	4909      	ldr	r1, [pc, #36]	; (8005bcc <siprintf+0x3c>)
 8005ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bac:	9105      	str	r1, [sp, #20]
 8005bae:	6800      	ldr	r0, [r0, #0]
 8005bb0:	a902      	add	r1, sp, #8
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	f000 f866 	bl	8005c84 <_svfiprintf_r>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	9b02      	ldr	r3, [sp, #8]
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	b01c      	add	sp, #112	; 0x70
 8005bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc4:	b003      	add	sp, #12
 8005bc6:	4770      	bx	lr
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	ffff0208 	.word	0xffff0208

08005bd0 <__ssputs_r>:
 8005bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	688e      	ldr	r6, [r1, #8]
 8005bd6:	4682      	mov	sl, r0
 8005bd8:	429e      	cmp	r6, r3
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4690      	mov	r8, r2
 8005bde:	4699      	mov	r9, r3
 8005be0:	d837      	bhi.n	8005c52 <__ssputs_r+0x82>
 8005be2:	898a      	ldrh	r2, [r1, #12]
 8005be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005be8:	d031      	beq.n	8005c4e <__ssputs_r+0x7e>
 8005bea:	2302      	movs	r3, #2
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	6909      	ldr	r1, [r1, #16]
 8005bf0:	1a6f      	subs	r7, r5, r1
 8005bf2:	6965      	ldr	r5, [r4, #20]
 8005bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bf8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005bfc:	f109 0301 	add.w	r3, r9, #1
 8005c00:	443b      	add	r3, r7
 8005c02:	429d      	cmp	r5, r3
 8005c04:	bf38      	it	cc
 8005c06:	461d      	movcc	r5, r3
 8005c08:	0553      	lsls	r3, r2, #21
 8005c0a:	d530      	bpl.n	8005c6e <__ssputs_r+0x9e>
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f000 fb37 	bl	8006280 <_malloc_r>
 8005c12:	4606      	mov	r6, r0
 8005c14:	b950      	cbnz	r0, 8005c2c <__ssputs_r+0x5c>
 8005c16:	230c      	movs	r3, #12
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	f8ca 3000 	str.w	r3, [sl]
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	463a      	mov	r2, r7
 8005c2e:	6921      	ldr	r1, [r4, #16]
 8005c30:	f000 fab6 	bl	80061a0 <memcpy>
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3e:	81a3      	strh	r3, [r4, #12]
 8005c40:	6126      	str	r6, [r4, #16]
 8005c42:	443e      	add	r6, r7
 8005c44:	6026      	str	r6, [r4, #0]
 8005c46:	464e      	mov	r6, r9
 8005c48:	6165      	str	r5, [r4, #20]
 8005c4a:	1bed      	subs	r5, r5, r7
 8005c4c:	60a5      	str	r5, [r4, #8]
 8005c4e:	454e      	cmp	r6, r9
 8005c50:	d900      	bls.n	8005c54 <__ssputs_r+0x84>
 8005c52:	464e      	mov	r6, r9
 8005c54:	4632      	mov	r2, r6
 8005c56:	4641      	mov	r1, r8
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	f000 faac 	bl	80061b6 <memmove>
 8005c5e:	68a3      	ldr	r3, [r4, #8]
 8005c60:	2000      	movs	r0, #0
 8005c62:	1b9b      	subs	r3, r3, r6
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	441e      	add	r6, r3
 8005c6a:	6026      	str	r6, [r4, #0]
 8005c6c:	e7dc      	b.n	8005c28 <__ssputs_r+0x58>
 8005c6e:	462a      	mov	r2, r5
 8005c70:	f000 fb60 	bl	8006334 <_realloc_r>
 8005c74:	4606      	mov	r6, r0
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d1e2      	bne.n	8005c40 <__ssputs_r+0x70>
 8005c7a:	6921      	ldr	r1, [r4, #16]
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	f000 fab3 	bl	80061e8 <_free_r>
 8005c82:	e7c8      	b.n	8005c16 <__ssputs_r+0x46>

08005c84 <_svfiprintf_r>:
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	461d      	mov	r5, r3
 8005c8a:	898b      	ldrh	r3, [r1, #12]
 8005c8c:	b09d      	sub	sp, #116	; 0x74
 8005c8e:	061f      	lsls	r7, r3, #24
 8005c90:	4680      	mov	r8, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	4616      	mov	r6, r2
 8005c96:	d50f      	bpl.n	8005cb8 <_svfiprintf_r+0x34>
 8005c98:	690b      	ldr	r3, [r1, #16]
 8005c9a:	b96b      	cbnz	r3, 8005cb8 <_svfiprintf_r+0x34>
 8005c9c:	2140      	movs	r1, #64	; 0x40
 8005c9e:	f000 faef 	bl	8006280 <_malloc_r>
 8005ca2:	6020      	str	r0, [r4, #0]
 8005ca4:	6120      	str	r0, [r4, #16]
 8005ca6:	b928      	cbnz	r0, 8005cb4 <_svfiprintf_r+0x30>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	f8c8 3000 	str.w	r3, [r8]
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb2:	e0c8      	b.n	8005e46 <_svfiprintf_r+0x1c2>
 8005cb4:	2340      	movs	r3, #64	; 0x40
 8005cb6:	6163      	str	r3, [r4, #20]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cc2:	2330      	movs	r3, #48	; 0x30
 8005cc4:	f04f 0b01 	mov.w	fp, #1
 8005cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ccc:	9503      	str	r5, [sp, #12]
 8005cce:	4637      	mov	r7, r6
 8005cd0:	463d      	mov	r5, r7
 8005cd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cd6:	b10b      	cbz	r3, 8005cdc <_svfiprintf_r+0x58>
 8005cd8:	2b25      	cmp	r3, #37	; 0x25
 8005cda:	d13e      	bne.n	8005d5a <_svfiprintf_r+0xd6>
 8005cdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ce0:	d00b      	beq.n	8005cfa <_svfiprintf_r+0x76>
 8005ce2:	4653      	mov	r3, sl
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4640      	mov	r0, r8
 8005cea:	f7ff ff71 	bl	8005bd0 <__ssputs_r>
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f000 80a4 	beq.w	8005e3c <_svfiprintf_r+0x1b8>
 8005cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf6:	4453      	add	r3, sl
 8005cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfa:	783b      	ldrb	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 809d 	beq.w	8005e3c <_svfiprintf_r+0x1b8>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	9307      	str	r3, [sp, #28]
 8005d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d14:	931a      	str	r3, [sp, #104]	; 0x68
 8005d16:	462f      	mov	r7, r5
 8005d18:	2205      	movs	r2, #5
 8005d1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d1e:	4850      	ldr	r0, [pc, #320]	; (8005e60 <_svfiprintf_r+0x1dc>)
 8005d20:	f000 fa30 	bl	8006184 <memchr>
 8005d24:	9b04      	ldr	r3, [sp, #16]
 8005d26:	b9d0      	cbnz	r0, 8005d5e <_svfiprintf_r+0xda>
 8005d28:	06d9      	lsls	r1, r3, #27
 8005d2a:	bf44      	itt	mi
 8005d2c:	2220      	movmi	r2, #32
 8005d2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d32:	071a      	lsls	r2, r3, #28
 8005d34:	bf44      	itt	mi
 8005d36:	222b      	movmi	r2, #43	; 0x2b
 8005d38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d3c:	782a      	ldrb	r2, [r5, #0]
 8005d3e:	2a2a      	cmp	r2, #42	; 0x2a
 8005d40:	d015      	beq.n	8005d6e <_svfiprintf_r+0xea>
 8005d42:	462f      	mov	r7, r5
 8005d44:	2000      	movs	r0, #0
 8005d46:	250a      	movs	r5, #10
 8005d48:	9a07      	ldr	r2, [sp, #28]
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d50:	3b30      	subs	r3, #48	; 0x30
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d94d      	bls.n	8005df2 <_svfiprintf_r+0x16e>
 8005d56:	b1b8      	cbz	r0, 8005d88 <_svfiprintf_r+0x104>
 8005d58:	e00f      	b.n	8005d7a <_svfiprintf_r+0xf6>
 8005d5a:	462f      	mov	r7, r5
 8005d5c:	e7b8      	b.n	8005cd0 <_svfiprintf_r+0x4c>
 8005d5e:	4a40      	ldr	r2, [pc, #256]	; (8005e60 <_svfiprintf_r+0x1dc>)
 8005d60:	463d      	mov	r5, r7
 8005d62:	1a80      	subs	r0, r0, r2
 8005d64:	fa0b f000 	lsl.w	r0, fp, r0
 8005d68:	4318      	orrs	r0, r3
 8005d6a:	9004      	str	r0, [sp, #16]
 8005d6c:	e7d3      	b.n	8005d16 <_svfiprintf_r+0x92>
 8005d6e:	9a03      	ldr	r2, [sp, #12]
 8005d70:	1d11      	adds	r1, r2, #4
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	9103      	str	r1, [sp, #12]
 8005d76:	2a00      	cmp	r2, #0
 8005d78:	db01      	blt.n	8005d7e <_svfiprintf_r+0xfa>
 8005d7a:	9207      	str	r2, [sp, #28]
 8005d7c:	e004      	b.n	8005d88 <_svfiprintf_r+0x104>
 8005d7e:	4252      	negs	r2, r2
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	9207      	str	r2, [sp, #28]
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	783b      	ldrb	r3, [r7, #0]
 8005d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d8c:	d10c      	bne.n	8005da8 <_svfiprintf_r+0x124>
 8005d8e:	787b      	ldrb	r3, [r7, #1]
 8005d90:	2b2a      	cmp	r3, #42	; 0x2a
 8005d92:	d133      	bne.n	8005dfc <_svfiprintf_r+0x178>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	3702      	adds	r7, #2
 8005d98:	1d1a      	adds	r2, r3, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	9203      	str	r2, [sp, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfb8      	it	lt
 8005da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005da6:	9305      	str	r3, [sp, #20]
 8005da8:	4d2e      	ldr	r5, [pc, #184]	; (8005e64 <_svfiprintf_r+0x1e0>)
 8005daa:	2203      	movs	r2, #3
 8005dac:	7839      	ldrb	r1, [r7, #0]
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f9e8 	bl	8006184 <memchr>
 8005db4:	b138      	cbz	r0, 8005dc6 <_svfiprintf_r+0x142>
 8005db6:	2340      	movs	r3, #64	; 0x40
 8005db8:	1b40      	subs	r0, r0, r5
 8005dba:	fa03 f000 	lsl.w	r0, r3, r0
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	3701      	adds	r7, #1
 8005dc2:	4303      	orrs	r3, r0
 8005dc4:	9304      	str	r3, [sp, #16]
 8005dc6:	7839      	ldrb	r1, [r7, #0]
 8005dc8:	2206      	movs	r2, #6
 8005dca:	4827      	ldr	r0, [pc, #156]	; (8005e68 <_svfiprintf_r+0x1e4>)
 8005dcc:	1c7e      	adds	r6, r7, #1
 8005dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd2:	f000 f9d7 	bl	8006184 <memchr>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d038      	beq.n	8005e4c <_svfiprintf_r+0x1c8>
 8005dda:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <_svfiprintf_r+0x1e8>)
 8005ddc:	bb13      	cbnz	r3, 8005e24 <_svfiprintf_r+0x1a0>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	3307      	adds	r3, #7
 8005de2:	f023 0307 	bic.w	r3, r3, #7
 8005de6:	3308      	adds	r3, #8
 8005de8:	9303      	str	r3, [sp, #12]
 8005dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dec:	444b      	add	r3, r9
 8005dee:	9309      	str	r3, [sp, #36]	; 0x24
 8005df0:	e76d      	b.n	8005cce <_svfiprintf_r+0x4a>
 8005df2:	fb05 3202 	mla	r2, r5, r2, r3
 8005df6:	2001      	movs	r0, #1
 8005df8:	460f      	mov	r7, r1
 8005dfa:	e7a6      	b.n	8005d4a <_svfiprintf_r+0xc6>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	250a      	movs	r5, #10
 8005e00:	4619      	mov	r1, r3
 8005e02:	3701      	adds	r7, #1
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	4638      	mov	r0, r7
 8005e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e0c:	3a30      	subs	r2, #48	; 0x30
 8005e0e:	2a09      	cmp	r2, #9
 8005e10:	d903      	bls.n	8005e1a <_svfiprintf_r+0x196>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0c8      	beq.n	8005da8 <_svfiprintf_r+0x124>
 8005e16:	9105      	str	r1, [sp, #20]
 8005e18:	e7c6      	b.n	8005da8 <_svfiprintf_r+0x124>
 8005e1a:	fb05 2101 	mla	r1, r5, r1, r2
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4607      	mov	r7, r0
 8005e22:	e7f0      	b.n	8005e06 <_svfiprintf_r+0x182>
 8005e24:	ab03      	add	r3, sp, #12
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <_svfiprintf_r+0x1ec>)
 8005e2c:	a904      	add	r1, sp, #16
 8005e2e:	4640      	mov	r0, r8
 8005e30:	f3af 8000 	nop.w
 8005e34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e38:	4681      	mov	r9, r0
 8005e3a:	d1d6      	bne.n	8005dea <_svfiprintf_r+0x166>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	065b      	lsls	r3, r3, #25
 8005e40:	f53f af35 	bmi.w	8005cae <_svfiprintf_r+0x2a>
 8005e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e46:	b01d      	add	sp, #116	; 0x74
 8005e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4c:	ab03      	add	r3, sp, #12
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4622      	mov	r2, r4
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <_svfiprintf_r+0x1ec>)
 8005e54:	a904      	add	r1, sp, #16
 8005e56:	4640      	mov	r0, r8
 8005e58:	f000 f882 	bl	8005f60 <_printf_i>
 8005e5c:	e7ea      	b.n	8005e34 <_svfiprintf_r+0x1b0>
 8005e5e:	bf00      	nop
 8005e60:	080066ac 	.word	0x080066ac
 8005e64:	080066b2 	.word	0x080066b2
 8005e68:	080066b6 	.word	0x080066b6
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005bd1 	.word	0x08005bd1

08005e74 <_printf_common>:
 8005e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e78:	4691      	mov	r9, r2
 8005e7a:	461f      	mov	r7, r3
 8005e7c:	688a      	ldr	r2, [r1, #8]
 8005e7e:	690b      	ldr	r3, [r1, #16]
 8005e80:	4606      	mov	r6, r0
 8005e82:	4293      	cmp	r3, r2
 8005e84:	bfb8      	it	lt
 8005e86:	4613      	movlt	r3, r2
 8005e88:	f8c9 3000 	str.w	r3, [r9]
 8005e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e90:	460c      	mov	r4, r1
 8005e92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e96:	b112      	cbz	r2, 8005e9e <_printf_common+0x2a>
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f8c9 3000 	str.w	r3, [r9]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ea8:	3302      	addmi	r3, #2
 8005eaa:	f8c9 3000 	strmi.w	r3, [r9]
 8005eae:	6825      	ldr	r5, [r4, #0]
 8005eb0:	f015 0506 	ands.w	r5, r5, #6
 8005eb4:	d107      	bne.n	8005ec6 <_printf_common+0x52>
 8005eb6:	f104 0a19 	add.w	sl, r4, #25
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	42ab      	cmp	r3, r5
 8005ec4:	dc29      	bgt.n	8005f1a <_printf_common+0xa6>
 8005ec6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	3300      	adds	r3, #0
 8005ece:	bf18      	it	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	0692      	lsls	r2, r2, #26
 8005ed4:	d42e      	bmi.n	8005f34 <_printf_common+0xc0>
 8005ed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eda:	4639      	mov	r1, r7
 8005edc:	4630      	mov	r0, r6
 8005ede:	47c0      	blx	r8
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d021      	beq.n	8005f28 <_printf_common+0xb4>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	68e5      	ldr	r5, [r4, #12]
 8005ee8:	f003 0306 	and.w	r3, r3, #6
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	bf18      	it	ne
 8005ef0:	2500      	movne	r5, #0
 8005ef2:	f8d9 2000 	ldr.w	r2, [r9]
 8005ef6:	f04f 0900 	mov.w	r9, #0
 8005efa:	bf08      	it	eq
 8005efc:	1aad      	subeq	r5, r5, r2
 8005efe:	68a3      	ldr	r3, [r4, #8]
 8005f00:	6922      	ldr	r2, [r4, #16]
 8005f02:	bf08      	it	eq
 8005f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bfc4      	itt	gt
 8005f0c:	1a9b      	subgt	r3, r3, r2
 8005f0e:	18ed      	addgt	r5, r5, r3
 8005f10:	341a      	adds	r4, #26
 8005f12:	454d      	cmp	r5, r9
 8005f14:	d11a      	bne.n	8005f4c <_printf_common+0xd8>
 8005f16:	2000      	movs	r0, #0
 8005f18:	e008      	b.n	8005f2c <_printf_common+0xb8>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4652      	mov	r2, sl
 8005f1e:	4639      	mov	r1, r7
 8005f20:	4630      	mov	r0, r6
 8005f22:	47c0      	blx	r8
 8005f24:	3001      	adds	r0, #1
 8005f26:	d103      	bne.n	8005f30 <_printf_common+0xbc>
 8005f28:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f30:	3501      	adds	r5, #1
 8005f32:	e7c2      	b.n	8005eba <_printf_common+0x46>
 8005f34:	2030      	movs	r0, #48	; 0x30
 8005f36:	18e1      	adds	r1, r4, r3
 8005f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f42:	4422      	add	r2, r4
 8005f44:	3302      	adds	r3, #2
 8005f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f4a:	e7c4      	b.n	8005ed6 <_printf_common+0x62>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4639      	mov	r1, r7
 8005f52:	4630      	mov	r0, r6
 8005f54:	47c0      	blx	r8
 8005f56:	3001      	adds	r0, #1
 8005f58:	d0e6      	beq.n	8005f28 <_printf_common+0xb4>
 8005f5a:	f109 0901 	add.w	r9, r9, #1
 8005f5e:	e7d8      	b.n	8005f12 <_printf_common+0x9e>

08005f60 <_printf_i>:
 8005f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f68:	460c      	mov	r4, r1
 8005f6a:	7e09      	ldrb	r1, [r1, #24]
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	296e      	cmp	r1, #110	; 0x6e
 8005f70:	4617      	mov	r7, r2
 8005f72:	4606      	mov	r6, r0
 8005f74:	4698      	mov	r8, r3
 8005f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f78:	f000 80b3 	beq.w	80060e2 <_printf_i+0x182>
 8005f7c:	d822      	bhi.n	8005fc4 <_printf_i+0x64>
 8005f7e:	2963      	cmp	r1, #99	; 0x63
 8005f80:	d036      	beq.n	8005ff0 <_printf_i+0x90>
 8005f82:	d80a      	bhi.n	8005f9a <_printf_i+0x3a>
 8005f84:	2900      	cmp	r1, #0
 8005f86:	f000 80b9 	beq.w	80060fc <_printf_i+0x19c>
 8005f8a:	2958      	cmp	r1, #88	; 0x58
 8005f8c:	f000 8083 	beq.w	8006096 <_printf_i+0x136>
 8005f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005f98:	e032      	b.n	8006000 <_printf_i+0xa0>
 8005f9a:	2964      	cmp	r1, #100	; 0x64
 8005f9c:	d001      	beq.n	8005fa2 <_printf_i+0x42>
 8005f9e:	2969      	cmp	r1, #105	; 0x69
 8005fa0:	d1f6      	bne.n	8005f90 <_printf_i+0x30>
 8005fa2:	6820      	ldr	r0, [r4, #0]
 8005fa4:	6813      	ldr	r3, [r2, #0]
 8005fa6:	0605      	lsls	r5, r0, #24
 8005fa8:	f103 0104 	add.w	r1, r3, #4
 8005fac:	d52a      	bpl.n	8006004 <_printf_i+0xa4>
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6011      	str	r1, [r2, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da03      	bge.n	8005fbe <_printf_i+0x5e>
 8005fb6:	222d      	movs	r2, #45	; 0x2d
 8005fb8:	425b      	negs	r3, r3
 8005fba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005fbe:	486f      	ldr	r0, [pc, #444]	; (800617c <_printf_i+0x21c>)
 8005fc0:	220a      	movs	r2, #10
 8005fc2:	e039      	b.n	8006038 <_printf_i+0xd8>
 8005fc4:	2973      	cmp	r1, #115	; 0x73
 8005fc6:	f000 809d 	beq.w	8006104 <_printf_i+0x1a4>
 8005fca:	d808      	bhi.n	8005fde <_printf_i+0x7e>
 8005fcc:	296f      	cmp	r1, #111	; 0x6f
 8005fce:	d020      	beq.n	8006012 <_printf_i+0xb2>
 8005fd0:	2970      	cmp	r1, #112	; 0x70
 8005fd2:	d1dd      	bne.n	8005f90 <_printf_i+0x30>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	f043 0320 	orr.w	r3, r3, #32
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	e003      	b.n	8005fe6 <_printf_i+0x86>
 8005fde:	2975      	cmp	r1, #117	; 0x75
 8005fe0:	d017      	beq.n	8006012 <_printf_i+0xb2>
 8005fe2:	2978      	cmp	r1, #120	; 0x78
 8005fe4:	d1d4      	bne.n	8005f90 <_printf_i+0x30>
 8005fe6:	2378      	movs	r3, #120	; 0x78
 8005fe8:	4865      	ldr	r0, [pc, #404]	; (8006180 <_printf_i+0x220>)
 8005fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fee:	e055      	b.n	800609c <_printf_i+0x13c>
 8005ff0:	6813      	ldr	r3, [r2, #0]
 8005ff2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff6:	1d19      	adds	r1, r3, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6011      	str	r1, [r2, #0]
 8005ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006000:	2301      	movs	r3, #1
 8006002:	e08c      	b.n	800611e <_printf_i+0x1be>
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800600a:	6011      	str	r1, [r2, #0]
 800600c:	bf18      	it	ne
 800600e:	b21b      	sxthne	r3, r3
 8006010:	e7cf      	b.n	8005fb2 <_printf_i+0x52>
 8006012:	6813      	ldr	r3, [r2, #0]
 8006014:	6825      	ldr	r5, [r4, #0]
 8006016:	1d18      	adds	r0, r3, #4
 8006018:	6010      	str	r0, [r2, #0]
 800601a:	0628      	lsls	r0, r5, #24
 800601c:	d501      	bpl.n	8006022 <_printf_i+0xc2>
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	e002      	b.n	8006028 <_printf_i+0xc8>
 8006022:	0668      	lsls	r0, r5, #25
 8006024:	d5fb      	bpl.n	800601e <_printf_i+0xbe>
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	296f      	cmp	r1, #111	; 0x6f
 800602a:	bf14      	ite	ne
 800602c:	220a      	movne	r2, #10
 800602e:	2208      	moveq	r2, #8
 8006030:	4852      	ldr	r0, [pc, #328]	; (800617c <_printf_i+0x21c>)
 8006032:	2100      	movs	r1, #0
 8006034:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006038:	6865      	ldr	r5, [r4, #4]
 800603a:	2d00      	cmp	r5, #0
 800603c:	60a5      	str	r5, [r4, #8]
 800603e:	f2c0 8095 	blt.w	800616c <_printf_i+0x20c>
 8006042:	6821      	ldr	r1, [r4, #0]
 8006044:	f021 0104 	bic.w	r1, r1, #4
 8006048:	6021      	str	r1, [r4, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d13d      	bne.n	80060ca <_printf_i+0x16a>
 800604e:	2d00      	cmp	r5, #0
 8006050:	f040 808e 	bne.w	8006170 <_printf_i+0x210>
 8006054:	4665      	mov	r5, ip
 8006056:	2a08      	cmp	r2, #8
 8006058:	d10b      	bne.n	8006072 <_printf_i+0x112>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	07db      	lsls	r3, r3, #31
 800605e:	d508      	bpl.n	8006072 <_printf_i+0x112>
 8006060:	6923      	ldr	r3, [r4, #16]
 8006062:	6862      	ldr	r2, [r4, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	bfde      	ittt	le
 8006068:	2330      	movle	r3, #48	; 0x30
 800606a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800606e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006072:	ebac 0305 	sub.w	r3, ip, r5
 8006076:	6123      	str	r3, [r4, #16]
 8006078:	f8cd 8000 	str.w	r8, [sp]
 800607c:	463b      	mov	r3, r7
 800607e:	aa03      	add	r2, sp, #12
 8006080:	4621      	mov	r1, r4
 8006082:	4630      	mov	r0, r6
 8006084:	f7ff fef6 	bl	8005e74 <_printf_common>
 8006088:	3001      	adds	r0, #1
 800608a:	d14d      	bne.n	8006128 <_printf_i+0x1c8>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	b005      	add	sp, #20
 8006092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006096:	4839      	ldr	r0, [pc, #228]	; (800617c <_printf_i+0x21c>)
 8006098:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800609c:	6813      	ldr	r3, [r2, #0]
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	1d1d      	adds	r5, r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6015      	str	r5, [r2, #0]
 80060a6:	060a      	lsls	r2, r1, #24
 80060a8:	d50b      	bpl.n	80060c2 <_printf_i+0x162>
 80060aa:	07ca      	lsls	r2, r1, #31
 80060ac:	bf44      	itt	mi
 80060ae:	f041 0120 	orrmi.w	r1, r1, #32
 80060b2:	6021      	strmi	r1, [r4, #0]
 80060b4:	b91b      	cbnz	r3, 80060be <_printf_i+0x15e>
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	f022 0220 	bic.w	r2, r2, #32
 80060bc:	6022      	str	r2, [r4, #0]
 80060be:	2210      	movs	r2, #16
 80060c0:	e7b7      	b.n	8006032 <_printf_i+0xd2>
 80060c2:	064d      	lsls	r5, r1, #25
 80060c4:	bf48      	it	mi
 80060c6:	b29b      	uxthmi	r3, r3
 80060c8:	e7ef      	b.n	80060aa <_printf_i+0x14a>
 80060ca:	4665      	mov	r5, ip
 80060cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80060d0:	fb02 3311 	mls	r3, r2, r1, r3
 80060d4:	5cc3      	ldrb	r3, [r0, r3]
 80060d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80060da:	460b      	mov	r3, r1
 80060dc:	2900      	cmp	r1, #0
 80060de:	d1f5      	bne.n	80060cc <_printf_i+0x16c>
 80060e0:	e7b9      	b.n	8006056 <_printf_i+0xf6>
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	1d18      	adds	r0, r3, #4
 80060e8:	6961      	ldr	r1, [r4, #20]
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	0628      	lsls	r0, r5, #24
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	d501      	bpl.n	80060f6 <_printf_i+0x196>
 80060f2:	6019      	str	r1, [r3, #0]
 80060f4:	e002      	b.n	80060fc <_printf_i+0x19c>
 80060f6:	066a      	lsls	r2, r5, #25
 80060f8:	d5fb      	bpl.n	80060f2 <_printf_i+0x192>
 80060fa:	8019      	strh	r1, [r3, #0]
 80060fc:	2300      	movs	r3, #0
 80060fe:	4665      	mov	r5, ip
 8006100:	6123      	str	r3, [r4, #16]
 8006102:	e7b9      	b.n	8006078 <_printf_i+0x118>
 8006104:	6813      	ldr	r3, [r2, #0]
 8006106:	1d19      	adds	r1, r3, #4
 8006108:	6011      	str	r1, [r2, #0]
 800610a:	681d      	ldr	r5, [r3, #0]
 800610c:	6862      	ldr	r2, [r4, #4]
 800610e:	2100      	movs	r1, #0
 8006110:	4628      	mov	r0, r5
 8006112:	f000 f837 	bl	8006184 <memchr>
 8006116:	b108      	cbz	r0, 800611c <_printf_i+0x1bc>
 8006118:	1b40      	subs	r0, r0, r5
 800611a:	6060      	str	r0, [r4, #4]
 800611c:	6863      	ldr	r3, [r4, #4]
 800611e:	6123      	str	r3, [r4, #16]
 8006120:	2300      	movs	r3, #0
 8006122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006126:	e7a7      	b.n	8006078 <_printf_i+0x118>
 8006128:	6923      	ldr	r3, [r4, #16]
 800612a:	462a      	mov	r2, r5
 800612c:	4639      	mov	r1, r7
 800612e:	4630      	mov	r0, r6
 8006130:	47c0      	blx	r8
 8006132:	3001      	adds	r0, #1
 8006134:	d0aa      	beq.n	800608c <_printf_i+0x12c>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	079b      	lsls	r3, r3, #30
 800613a:	d413      	bmi.n	8006164 <_printf_i+0x204>
 800613c:	68e0      	ldr	r0, [r4, #12]
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	4298      	cmp	r0, r3
 8006142:	bfb8      	it	lt
 8006144:	4618      	movlt	r0, r3
 8006146:	e7a3      	b.n	8006090 <_printf_i+0x130>
 8006148:	2301      	movs	r3, #1
 800614a:	464a      	mov	r2, r9
 800614c:	4639      	mov	r1, r7
 800614e:	4630      	mov	r0, r6
 8006150:	47c0      	blx	r8
 8006152:	3001      	adds	r0, #1
 8006154:	d09a      	beq.n	800608c <_printf_i+0x12c>
 8006156:	3501      	adds	r5, #1
 8006158:	68e3      	ldr	r3, [r4, #12]
 800615a:	9a03      	ldr	r2, [sp, #12]
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	42ab      	cmp	r3, r5
 8006160:	dcf2      	bgt.n	8006148 <_printf_i+0x1e8>
 8006162:	e7eb      	b.n	800613c <_printf_i+0x1dc>
 8006164:	2500      	movs	r5, #0
 8006166:	f104 0919 	add.w	r9, r4, #25
 800616a:	e7f5      	b.n	8006158 <_printf_i+0x1f8>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ac      	bne.n	80060ca <_printf_i+0x16a>
 8006170:	7803      	ldrb	r3, [r0, #0]
 8006172:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006176:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800617a:	e76c      	b.n	8006056 <_printf_i+0xf6>
 800617c:	080066bd 	.word	0x080066bd
 8006180:	080066ce 	.word	0x080066ce

08006184 <memchr>:
 8006184:	b510      	push	{r4, lr}
 8006186:	b2c9      	uxtb	r1, r1
 8006188:	4402      	add	r2, r0
 800618a:	4290      	cmp	r0, r2
 800618c:	4603      	mov	r3, r0
 800618e:	d101      	bne.n	8006194 <memchr+0x10>
 8006190:	2300      	movs	r3, #0
 8006192:	e003      	b.n	800619c <memchr+0x18>
 8006194:	781c      	ldrb	r4, [r3, #0]
 8006196:	3001      	adds	r0, #1
 8006198:	428c      	cmp	r4, r1
 800619a:	d1f6      	bne.n	800618a <memchr+0x6>
 800619c:	4618      	mov	r0, r3
 800619e:	bd10      	pop	{r4, pc}

080061a0 <memcpy>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	1e43      	subs	r3, r0, #1
 80061a4:	440a      	add	r2, r1
 80061a6:	4291      	cmp	r1, r2
 80061a8:	d100      	bne.n	80061ac <memcpy+0xc>
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061b4:	e7f7      	b.n	80061a6 <memcpy+0x6>

080061b6 <memmove>:
 80061b6:	4288      	cmp	r0, r1
 80061b8:	b510      	push	{r4, lr}
 80061ba:	eb01 0302 	add.w	r3, r1, r2
 80061be:	d807      	bhi.n	80061d0 <memmove+0x1a>
 80061c0:	1e42      	subs	r2, r0, #1
 80061c2:	4299      	cmp	r1, r3
 80061c4:	d00a      	beq.n	80061dc <memmove+0x26>
 80061c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80061ce:	e7f8      	b.n	80061c2 <memmove+0xc>
 80061d0:	4283      	cmp	r3, r0
 80061d2:	d9f5      	bls.n	80061c0 <memmove+0xa>
 80061d4:	1881      	adds	r1, r0, r2
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	42d3      	cmn	r3, r2
 80061da:	d100      	bne.n	80061de <memmove+0x28>
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80061e6:	e7f7      	b.n	80061d8 <memmove+0x22>

080061e8 <_free_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4605      	mov	r5, r0
 80061ec:	2900      	cmp	r1, #0
 80061ee:	d043      	beq.n	8006278 <_free_r+0x90>
 80061f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f4:	1f0c      	subs	r4, r1, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bfb8      	it	lt
 80061fa:	18e4      	addlt	r4, r4, r3
 80061fc:	f000 f8d0 	bl	80063a0 <__malloc_lock>
 8006200:	4a1e      	ldr	r2, [pc, #120]	; (800627c <_free_r+0x94>)
 8006202:	6813      	ldr	r3, [r2, #0]
 8006204:	4610      	mov	r0, r2
 8006206:	b933      	cbnz	r3, 8006216 <_free_r+0x2e>
 8006208:	6063      	str	r3, [r4, #4]
 800620a:	6014      	str	r4, [r2, #0]
 800620c:	4628      	mov	r0, r5
 800620e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006212:	f000 b8c6 	b.w	80063a2 <__malloc_unlock>
 8006216:	42a3      	cmp	r3, r4
 8006218:	d90b      	bls.n	8006232 <_free_r+0x4a>
 800621a:	6821      	ldr	r1, [r4, #0]
 800621c:	1862      	adds	r2, r4, r1
 800621e:	4293      	cmp	r3, r2
 8006220:	bf01      	itttt	eq
 8006222:	681a      	ldreq	r2, [r3, #0]
 8006224:	685b      	ldreq	r3, [r3, #4]
 8006226:	1852      	addeq	r2, r2, r1
 8006228:	6022      	streq	r2, [r4, #0]
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	6004      	str	r4, [r0, #0]
 800622e:	e7ed      	b.n	800620c <_free_r+0x24>
 8006230:	4613      	mov	r3, r2
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	b10a      	cbz	r2, 800623a <_free_r+0x52>
 8006236:	42a2      	cmp	r2, r4
 8006238:	d9fa      	bls.n	8006230 <_free_r+0x48>
 800623a:	6819      	ldr	r1, [r3, #0]
 800623c:	1858      	adds	r0, r3, r1
 800623e:	42a0      	cmp	r0, r4
 8006240:	d10b      	bne.n	800625a <_free_r+0x72>
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	4401      	add	r1, r0
 8006246:	1858      	adds	r0, r3, r1
 8006248:	4282      	cmp	r2, r0
 800624a:	6019      	str	r1, [r3, #0]
 800624c:	d1de      	bne.n	800620c <_free_r+0x24>
 800624e:	6810      	ldr	r0, [r2, #0]
 8006250:	6852      	ldr	r2, [r2, #4]
 8006252:	4401      	add	r1, r0
 8006254:	6019      	str	r1, [r3, #0]
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	e7d8      	b.n	800620c <_free_r+0x24>
 800625a:	d902      	bls.n	8006262 <_free_r+0x7a>
 800625c:	230c      	movs	r3, #12
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	e7d4      	b.n	800620c <_free_r+0x24>
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1821      	adds	r1, r4, r0
 8006266:	428a      	cmp	r2, r1
 8006268:	bf01      	itttt	eq
 800626a:	6811      	ldreq	r1, [r2, #0]
 800626c:	6852      	ldreq	r2, [r2, #4]
 800626e:	1809      	addeq	r1, r1, r0
 8006270:	6021      	streq	r1, [r4, #0]
 8006272:	6062      	str	r2, [r4, #4]
 8006274:	605c      	str	r4, [r3, #4]
 8006276:	e7c9      	b.n	800620c <_free_r+0x24>
 8006278:	bd38      	pop	{r3, r4, r5, pc}
 800627a:	bf00      	nop
 800627c:	20000094 	.word	0x20000094

08006280 <_malloc_r>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	1ccd      	adds	r5, r1, #3
 8006284:	f025 0503 	bic.w	r5, r5, #3
 8006288:	3508      	adds	r5, #8
 800628a:	2d0c      	cmp	r5, #12
 800628c:	bf38      	it	cc
 800628e:	250c      	movcc	r5, #12
 8006290:	2d00      	cmp	r5, #0
 8006292:	4606      	mov	r6, r0
 8006294:	db01      	blt.n	800629a <_malloc_r+0x1a>
 8006296:	42a9      	cmp	r1, r5
 8006298:	d903      	bls.n	80062a2 <_malloc_r+0x22>
 800629a:	230c      	movs	r3, #12
 800629c:	6033      	str	r3, [r6, #0]
 800629e:	2000      	movs	r0, #0
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
 80062a2:	f000 f87d 	bl	80063a0 <__malloc_lock>
 80062a6:	4a21      	ldr	r2, [pc, #132]	; (800632c <_malloc_r+0xac>)
 80062a8:	6814      	ldr	r4, [r2, #0]
 80062aa:	4621      	mov	r1, r4
 80062ac:	b991      	cbnz	r1, 80062d4 <_malloc_r+0x54>
 80062ae:	4c20      	ldr	r4, [pc, #128]	; (8006330 <_malloc_r+0xb0>)
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	b91b      	cbnz	r3, 80062bc <_malloc_r+0x3c>
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 f863 	bl	8006380 <_sbrk_r>
 80062ba:	6020      	str	r0, [r4, #0]
 80062bc:	4629      	mov	r1, r5
 80062be:	4630      	mov	r0, r6
 80062c0:	f000 f85e 	bl	8006380 <_sbrk_r>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d124      	bne.n	8006312 <_malloc_r+0x92>
 80062c8:	230c      	movs	r3, #12
 80062ca:	4630      	mov	r0, r6
 80062cc:	6033      	str	r3, [r6, #0]
 80062ce:	f000 f868 	bl	80063a2 <__malloc_unlock>
 80062d2:	e7e4      	b.n	800629e <_malloc_r+0x1e>
 80062d4:	680b      	ldr	r3, [r1, #0]
 80062d6:	1b5b      	subs	r3, r3, r5
 80062d8:	d418      	bmi.n	800630c <_malloc_r+0x8c>
 80062da:	2b0b      	cmp	r3, #11
 80062dc:	d90f      	bls.n	80062fe <_malloc_r+0x7e>
 80062de:	600b      	str	r3, [r1, #0]
 80062e0:	18cc      	adds	r4, r1, r3
 80062e2:	50cd      	str	r5, [r1, r3]
 80062e4:	4630      	mov	r0, r6
 80062e6:	f000 f85c 	bl	80063a2 <__malloc_unlock>
 80062ea:	f104 000b 	add.w	r0, r4, #11
 80062ee:	1d23      	adds	r3, r4, #4
 80062f0:	f020 0007 	bic.w	r0, r0, #7
 80062f4:	1ac3      	subs	r3, r0, r3
 80062f6:	d0d3      	beq.n	80062a0 <_malloc_r+0x20>
 80062f8:	425a      	negs	r2, r3
 80062fa:	50e2      	str	r2, [r4, r3]
 80062fc:	e7d0      	b.n	80062a0 <_malloc_r+0x20>
 80062fe:	684b      	ldr	r3, [r1, #4]
 8006300:	428c      	cmp	r4, r1
 8006302:	bf16      	itet	ne
 8006304:	6063      	strne	r3, [r4, #4]
 8006306:	6013      	streq	r3, [r2, #0]
 8006308:	460c      	movne	r4, r1
 800630a:	e7eb      	b.n	80062e4 <_malloc_r+0x64>
 800630c:	460c      	mov	r4, r1
 800630e:	6849      	ldr	r1, [r1, #4]
 8006310:	e7cc      	b.n	80062ac <_malloc_r+0x2c>
 8006312:	1cc4      	adds	r4, r0, #3
 8006314:	f024 0403 	bic.w	r4, r4, #3
 8006318:	42a0      	cmp	r0, r4
 800631a:	d005      	beq.n	8006328 <_malloc_r+0xa8>
 800631c:	1a21      	subs	r1, r4, r0
 800631e:	4630      	mov	r0, r6
 8006320:	f000 f82e 	bl	8006380 <_sbrk_r>
 8006324:	3001      	adds	r0, #1
 8006326:	d0cf      	beq.n	80062c8 <_malloc_r+0x48>
 8006328:	6025      	str	r5, [r4, #0]
 800632a:	e7db      	b.n	80062e4 <_malloc_r+0x64>
 800632c:	20000094 	.word	0x20000094
 8006330:	20000098 	.word	0x20000098

08006334 <_realloc_r>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	4607      	mov	r7, r0
 8006338:	4614      	mov	r4, r2
 800633a:	460e      	mov	r6, r1
 800633c:	b921      	cbnz	r1, 8006348 <_realloc_r+0x14>
 800633e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006342:	4611      	mov	r1, r2
 8006344:	f7ff bf9c 	b.w	8006280 <_malloc_r>
 8006348:	b922      	cbnz	r2, 8006354 <_realloc_r+0x20>
 800634a:	f7ff ff4d 	bl	80061e8 <_free_r>
 800634e:	4625      	mov	r5, r4
 8006350:	4628      	mov	r0, r5
 8006352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006354:	f000 f826 	bl	80063a4 <_malloc_usable_size_r>
 8006358:	42a0      	cmp	r0, r4
 800635a:	d20f      	bcs.n	800637c <_realloc_r+0x48>
 800635c:	4621      	mov	r1, r4
 800635e:	4638      	mov	r0, r7
 8006360:	f7ff ff8e 	bl	8006280 <_malloc_r>
 8006364:	4605      	mov	r5, r0
 8006366:	2800      	cmp	r0, #0
 8006368:	d0f2      	beq.n	8006350 <_realloc_r+0x1c>
 800636a:	4631      	mov	r1, r6
 800636c:	4622      	mov	r2, r4
 800636e:	f7ff ff17 	bl	80061a0 <memcpy>
 8006372:	4631      	mov	r1, r6
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff ff37 	bl	80061e8 <_free_r>
 800637a:	e7e9      	b.n	8006350 <_realloc_r+0x1c>
 800637c:	4635      	mov	r5, r6
 800637e:	e7e7      	b.n	8006350 <_realloc_r+0x1c>

08006380 <_sbrk_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	2300      	movs	r3, #0
 8006384:	4c05      	ldr	r4, [pc, #20]	; (800639c <_sbrk_r+0x1c>)
 8006386:	4605      	mov	r5, r0
 8006388:	4608      	mov	r0, r1
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	f7fc fa44 	bl	8002818 <_sbrk>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_sbrk_r+0x1a>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	b103      	cbz	r3, 800639a <_sbrk_r+0x1a>
 8006398:	602b      	str	r3, [r5, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	200001c8 	.word	0x200001c8

080063a0 <__malloc_lock>:
 80063a0:	4770      	bx	lr

080063a2 <__malloc_unlock>:
 80063a2:	4770      	bx	lr

080063a4 <_malloc_usable_size_r>:
 80063a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a8:	1f18      	subs	r0, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfbc      	itt	lt
 80063ae:	580b      	ldrlt	r3, [r1, r0]
 80063b0:	18c0      	addlt	r0, r0, r3
 80063b2:	4770      	bx	lr

080063b4 <_init>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr

080063c0 <_fini>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr
