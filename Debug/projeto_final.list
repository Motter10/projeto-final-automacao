
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007930  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e8  080081e8  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081f0  080081f0  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  080081f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000244  0800843c  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  0800843c  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116ce  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d2b  00000000  00000000  0003193b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00034668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a93a  00000000  00000000  000360c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef82  00000000  00000000  000509fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fa61  00000000  00000000  0005f97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef3dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c4  00000000  00000000  000ef458  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f3b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f3b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000244 	.word	0x20000244
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a28 	.word	0x08007a28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000248 	.word	0x20000248
 800014c:	08007a28 	.word	0x08007a28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <__aeabi_frsub>:
 8000950:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000954:	e002      	b.n	800095c <__addsf3>
 8000956:	bf00      	nop

08000958 <__aeabi_fsub>:
 8000958:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800095c <__addsf3>:
 800095c:	0042      	lsls	r2, r0, #1
 800095e:	bf1f      	itttt	ne
 8000960:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000964:	ea92 0f03 	teqne	r2, r3
 8000968:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800096c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000970:	d06a      	beq.n	8000a48 <__addsf3+0xec>
 8000972:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000976:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800097a:	bfc1      	itttt	gt
 800097c:	18d2      	addgt	r2, r2, r3
 800097e:	4041      	eorgt	r1, r0
 8000980:	4048      	eorgt	r0, r1
 8000982:	4041      	eorgt	r1, r0
 8000984:	bfb8      	it	lt
 8000986:	425b      	neglt	r3, r3
 8000988:	2b19      	cmp	r3, #25
 800098a:	bf88      	it	hi
 800098c:	4770      	bxhi	lr
 800098e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000992:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4240      	negne	r0, r0
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009aa:	bf18      	it	ne
 80009ac:	4249      	negne	r1, r1
 80009ae:	ea92 0f03 	teq	r2, r3
 80009b2:	d03f      	beq.n	8000a34 <__addsf3+0xd8>
 80009b4:	f1a2 0201 	sub.w	r2, r2, #1
 80009b8:	fa41 fc03 	asr.w	ip, r1, r3
 80009bc:	eb10 000c 	adds.w	r0, r0, ip
 80009c0:	f1c3 0320 	rsb	r3, r3, #32
 80009c4:	fa01 f103 	lsl.w	r1, r1, r3
 80009c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009cc:	d502      	bpl.n	80009d4 <__addsf3+0x78>
 80009ce:	4249      	negs	r1, r1
 80009d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d8:	d313      	bcc.n	8000a02 <__addsf3+0xa6>
 80009da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009de:	d306      	bcc.n	80009ee <__addsf3+0x92>
 80009e0:	0840      	lsrs	r0, r0, #1
 80009e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e6:	f102 0201 	add.w	r2, r2, #1
 80009ea:	2afe      	cmp	r2, #254	; 0xfe
 80009ec:	d251      	bcs.n	8000a92 <__addsf3+0x136>
 80009ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f6:	bf08      	it	eq
 80009f8:	f020 0001 	biceq.w	r0, r0, #1
 80009fc:	ea40 0003 	orr.w	r0, r0, r3
 8000a00:	4770      	bx	lr
 8000a02:	0049      	lsls	r1, r1, #1
 8000a04:	eb40 0000 	adc.w	r0, r0, r0
 8000a08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a10:	d1ed      	bne.n	80009ee <__addsf3+0x92>
 8000a12:	fab0 fc80 	clz	ip, r0
 8000a16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a22:	bfaa      	itet	ge
 8000a24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a28:	4252      	neglt	r2, r2
 8000a2a:	4318      	orrge	r0, r3
 8000a2c:	bfbc      	itt	lt
 8000a2e:	40d0      	lsrlt	r0, r2
 8000a30:	4318      	orrlt	r0, r3
 8000a32:	4770      	bx	lr
 8000a34:	f092 0f00 	teq	r2, #0
 8000a38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a3c:	bf06      	itte	eq
 8000a3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a42:	3201      	addeq	r2, #1
 8000a44:	3b01      	subne	r3, #1
 8000a46:	e7b5      	b.n	80009b4 <__addsf3+0x58>
 8000a48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a56:	d021      	beq.n	8000a9c <__addsf3+0x140>
 8000a58:	ea92 0f03 	teq	r2, r3
 8000a5c:	d004      	beq.n	8000a68 <__addsf3+0x10c>
 8000a5e:	f092 0f00 	teq	r2, #0
 8000a62:	bf08      	it	eq
 8000a64:	4608      	moveq	r0, r1
 8000a66:	4770      	bx	lr
 8000a68:	ea90 0f01 	teq	r0, r1
 8000a6c:	bf1c      	itt	ne
 8000a6e:	2000      	movne	r0, #0
 8000a70:	4770      	bxne	lr
 8000a72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a76:	d104      	bne.n	8000a82 <__addsf3+0x126>
 8000a78:	0040      	lsls	r0, r0, #1
 8000a7a:	bf28      	it	cs
 8000a7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a80:	4770      	bx	lr
 8000a82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a86:	bf3c      	itt	cc
 8000a88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a8c:	4770      	bxcc	lr
 8000a8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	4770      	bx	lr
 8000a9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aa0:	bf16      	itet	ne
 8000aa2:	4608      	movne	r0, r1
 8000aa4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa8:	4601      	movne	r1, r0
 8000aaa:	0242      	lsls	r2, r0, #9
 8000aac:	bf06      	itte	eq
 8000aae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ab2:	ea90 0f01 	teqeq	r0, r1
 8000ab6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aba:	4770      	bx	lr

08000abc <__aeabi_ui2f>:
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e004      	b.n	8000acc <__aeabi_i2f+0x8>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_i2f>:
 8000ac4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	bf48      	it	mi
 8000aca:	4240      	negmi	r0, r0
 8000acc:	ea5f 0c00 	movs.w	ip, r0
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad8:	4601      	mov	r1, r0
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	e01c      	b.n	8000b1a <__aeabi_l2f+0x2a>

08000ae0 <__aeabi_ul2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e00a      	b.n	8000b04 <__aeabi_l2f+0x14>
 8000aee:	bf00      	nop

08000af0 <__aeabi_l2f>:
 8000af0:	ea50 0201 	orrs.w	r2, r0, r1
 8000af4:	bf08      	it	eq
 8000af6:	4770      	bxeq	lr
 8000af8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000afc:	d502      	bpl.n	8000b04 <__aeabi_l2f+0x14>
 8000afe:	4240      	negs	r0, r0
 8000b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b04:	ea5f 0c01 	movs.w	ip, r1
 8000b08:	bf02      	ittt	eq
 8000b0a:	4684      	moveq	ip, r0
 8000b0c:	4601      	moveq	r1, r0
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b14:	bf08      	it	eq
 8000b16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1e:	fabc f28c 	clz	r2, ip
 8000b22:	3a08      	subs	r2, #8
 8000b24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b28:	db10      	blt.n	8000b4c <__aeabi_l2f+0x5c>
 8000b2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2e:	4463      	add	r3, ip
 8000b30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b34:	f1c2 0220 	rsb	r2, r2, #32
 8000b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b40:	eb43 0002 	adc.w	r0, r3, r2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f102 0220 	add.w	r2, r2, #32
 8000b50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b54:	f1c2 0220 	rsb	r2, r2, #32
 8000b58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b60:	eb43 0002 	adc.w	r0, r3, r2
 8000b64:	bf08      	it	eq
 8000b66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_fmul>:
 8000b6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b74:	bf1e      	ittt	ne
 8000b76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b7a:	ea92 0f0c 	teqne	r2, ip
 8000b7e:	ea93 0f0c 	teqne	r3, ip
 8000b82:	d06f      	beq.n	8000c64 <__aeabi_fmul+0xf8>
 8000b84:	441a      	add	r2, r3
 8000b86:	ea80 0c01 	eor.w	ip, r0, r1
 8000b8a:	0240      	lsls	r0, r0, #9
 8000b8c:	bf18      	it	ne
 8000b8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b92:	d01e      	beq.n	8000bd2 <__aeabi_fmul+0x66>
 8000b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ba0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bac:	bf3e      	ittt	cc
 8000bae:	0049      	lslcc	r1, r1, #1
 8000bb0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb4:	005b      	lslcc	r3, r3, #1
 8000bb6:	ea40 0001 	orr.w	r0, r0, r1
 8000bba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bbe:	2afd      	cmp	r2, #253	; 0xfd
 8000bc0:	d81d      	bhi.n	8000bfe <__aeabi_fmul+0x92>
 8000bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	4770      	bx	lr
 8000bd2:	f090 0f00 	teq	r0, #0
 8000bd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bda:	bf08      	it	eq
 8000bdc:	0249      	lsleq	r1, r1, #9
 8000bde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be6:	3a7f      	subs	r2, #127	; 0x7f
 8000be8:	bfc2      	ittt	gt
 8000bea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bf2:	4770      	bxgt	lr
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	dc5d      	bgt.n	8000cbc <__aeabi_fmul+0x150>
 8000c00:	f112 0f19 	cmn.w	r2, #25
 8000c04:	bfdc      	itt	le
 8000c06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c0a:	4770      	bxle	lr
 8000c0c:	f1c2 0200 	rsb	r2, r2, #0
 8000c10:	0041      	lsls	r1, r0, #1
 8000c12:	fa21 f102 	lsr.w	r1, r1, r2
 8000c16:	f1c2 0220 	rsb	r2, r2, #32
 8000c1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c22:	f140 0000 	adc.w	r0, r0, #0
 8000c26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c2a:	bf08      	it	eq
 8000c2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c30:	4770      	bx	lr
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0040      	lsleq	r0, r0, #1
 8000c3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c42:	3a01      	subeq	r2, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xce>
 8000c46:	ea40 000c 	orr.w	r0, r0, ip
 8000c4a:	f093 0f00 	teq	r3, #0
 8000c4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c52:	bf02      	ittt	eq
 8000c54:	0049      	lsleq	r1, r1, #1
 8000c56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c5a:	3b01      	subeq	r3, #1
 8000c5c:	d0f9      	beq.n	8000c52 <__aeabi_fmul+0xe6>
 8000c5e:	ea41 010c 	orr.w	r1, r1, ip
 8000c62:	e78f      	b.n	8000b84 <__aeabi_fmul+0x18>
 8000c64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c68:	ea92 0f0c 	teq	r2, ip
 8000c6c:	bf18      	it	ne
 8000c6e:	ea93 0f0c 	teqne	r3, ip
 8000c72:	d00a      	beq.n	8000c8a <__aeabi_fmul+0x11e>
 8000c74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c78:	bf18      	it	ne
 8000c7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7e:	d1d8      	bne.n	8000c32 <__aeabi_fmul+0xc6>
 8000c80:	ea80 0001 	eor.w	r0, r0, r1
 8000c84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f090 0f00 	teq	r0, #0
 8000c8e:	bf17      	itett	ne
 8000c90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c94:	4608      	moveq	r0, r1
 8000c96:	f091 0f00 	teqne	r1, #0
 8000c9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9e:	d014      	beq.n	8000cca <__aeabi_fmul+0x15e>
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	d101      	bne.n	8000caa <__aeabi_fmul+0x13e>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	d10f      	bne.n	8000cca <__aeabi_fmul+0x15e>
 8000caa:	ea93 0f0c 	teq	r3, ip
 8000cae:	d103      	bne.n	8000cb8 <__aeabi_fmul+0x14c>
 8000cb0:	024b      	lsls	r3, r1, #9
 8000cb2:	bf18      	it	ne
 8000cb4:	4608      	movne	r0, r1
 8000cb6:	d108      	bne.n	8000cca <__aeabi_fmul+0x15e>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc8:	4770      	bx	lr
 8000cca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fdiv>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d069      	beq.n	8000dc0 <__aeabi_fdiv+0xec>
 8000cec:	eba2 0203 	sub.w	r2, r2, r3
 8000cf0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf4:	0249      	lsls	r1, r1, #9
 8000cf6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cfa:	d037      	beq.n	8000d6c <__aeabi_fdiv+0x98>
 8000cfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	bf38      	it	cc
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	bf24      	itt	cs
 8000d1e:	1a5b      	subcs	r3, r3, r1
 8000d20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d28:	bf24      	itt	cs
 8000d2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d36:	bf24      	itt	cs
 8000d38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d44:	bf24      	itt	cs
 8000d46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d56:	d1e0      	bne.n	8000d1a <__aeabi_fdiv+0x46>
 8000d58:	2afd      	cmp	r2, #253	; 0xfd
 8000d5a:	f63f af50 	bhi.w	8000bfe <__aeabi_fmul+0x92>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d64:	bf08      	it	eq
 8000d66:	f020 0001 	biceq.w	r0, r0, #1
 8000d6a:	4770      	bx	lr
 8000d6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d74:	327f      	adds	r2, #127	; 0x7f
 8000d76:	bfc2      	ittt	gt
 8000d78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d80:	4770      	bxgt	lr
 8000d82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	3a01      	subs	r2, #1
 8000d8c:	e737      	b.n	8000bfe <__aeabi_fmul+0x92>
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xc2>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fdiv+0xda>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e795      	b.n	8000cec <__aeabi_fdiv+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	d108      	bne.n	8000ddc <__aeabi_fdiv+0x108>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	f47f af7d 	bne.w	8000cca <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	f47f af70 	bne.w	8000cb8 <__aeabi_fmul+0x14c>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	e776      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000ddc:	ea93 0f0c 	teq	r3, ip
 8000de0:	d104      	bne.n	8000dec <__aeabi_fdiv+0x118>
 8000de2:	024b      	lsls	r3, r1, #9
 8000de4:	f43f af4c 	beq.w	8000c80 <__aeabi_fmul+0x114>
 8000de8:	4608      	mov	r0, r1
 8000dea:	e76e      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1ca      	bne.n	8000d8e <__aeabi_fdiv+0xba>
 8000df8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dfc:	f47f af5c 	bne.w	8000cb8 <__aeabi_fmul+0x14c>
 8000e00:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	f47f af3c 	bne.w	8000c80 <__aeabi_fmul+0x114>
 8000e08:	e75f      	b.n	8000cca <__aeabi_fmul+0x15e>
 8000e0a:	bf00      	nop

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2uiz>:
 8000ef8:	0042      	lsls	r2, r0, #1
 8000efa:	d20e      	bcs.n	8000f1a <__aeabi_f2uiz+0x22>
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f00:	d30b      	bcc.n	8000f1a <__aeabi_f2uiz+0x22>
 8000f02:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d409      	bmi.n	8000f20 <__aeabi_f2uiz+0x28>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2uiz+0x32>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d102      	bne.n	8000f30 <__aeabi_f2uiz+0x38>
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__aeabi_ldivmod>:
 8000f38:	b97b      	cbnz	r3, 8000f5a <__aeabi_ldivmod+0x22>
 8000f3a:	b972      	cbnz	r2, 8000f5a <__aeabi_ldivmod+0x22>
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	bfbe      	ittt	lt
 8000f40:	2000      	movlt	r0, #0
 8000f42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f46:	e006      	blt.n	8000f56 <__aeabi_ldivmod+0x1e>
 8000f48:	bf08      	it	eq
 8000f4a:	2800      	cmpeq	r0, #0
 8000f4c:	bf1c      	itt	ne
 8000f4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f52:	f04f 30ff 	movne.w	r0, #4294967295
 8000f56:	f000 b9a7 	b.w	80012a8 <__aeabi_idiv0>
 8000f5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f62:	2900      	cmp	r1, #0
 8000f64:	db09      	blt.n	8000f7a <__aeabi_ldivmod+0x42>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db1a      	blt.n	8000fa0 <__aeabi_ldivmod+0x68>
 8000f6a:	f000 f835 	bl	8000fd8 <__udivmoddi4>
 8000f6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f76:	b004      	add	sp, #16
 8000f78:	4770      	bx	lr
 8000f7a:	4240      	negs	r0, r0
 8000f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db1b      	blt.n	8000fbc <__aeabi_ldivmod+0x84>
 8000f84:	f000 f828 	bl	8000fd8 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4240      	negs	r0, r0
 8000f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f98:	4252      	negs	r2, r2
 8000f9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f9e:	4770      	bx	lr
 8000fa0:	4252      	negs	r2, r2
 8000fa2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fa6:	f000 f817 	bl	8000fd8 <__udivmoddi4>
 8000faa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fba:	4770      	bx	lr
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	f000 f809 	bl	8000fd8 <__udivmoddi4>
 8000fc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fce:	b004      	add	sp, #16
 8000fd0:	4252      	negs	r2, r2
 8000fd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fd6:	4770      	bx	lr

08000fd8 <__udivmoddi4>:
 8000fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fdc:	468c      	mov	ip, r1
 8000fde:	4604      	mov	r4, r0
 8000fe0:	9e08      	ldr	r6, [sp, #32]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d14b      	bne.n	800107e <__udivmoddi4+0xa6>
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	4615      	mov	r5, r2
 8000fea:	d967      	bls.n	80010bc <__udivmoddi4+0xe4>
 8000fec:	fab2 f282 	clz	r2, r2
 8000ff0:	b14a      	cbz	r2, 8001006 <__udivmoddi4+0x2e>
 8000ff2:	f1c2 0720 	rsb	r7, r2, #32
 8000ff6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffa:	fa20 f707 	lsr.w	r7, r0, r7
 8000ffe:	4095      	lsls	r5, r2
 8001000:	ea47 0c03 	orr.w	ip, r7, r3
 8001004:	4094      	lsls	r4, r2
 8001006:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800100a:	fbbc f7fe 	udiv	r7, ip, lr
 800100e:	fa1f f885 	uxth.w	r8, r5
 8001012:	fb0e c317 	mls	r3, lr, r7, ip
 8001016:	fb07 f908 	mul.w	r9, r7, r8
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001020:	4599      	cmp	r9, r3
 8001022:	d909      	bls.n	8001038 <__udivmoddi4+0x60>
 8001024:	18eb      	adds	r3, r5, r3
 8001026:	f107 31ff 	add.w	r1, r7, #4294967295
 800102a:	f080 811c 	bcs.w	8001266 <__udivmoddi4+0x28e>
 800102e:	4599      	cmp	r9, r3
 8001030:	f240 8119 	bls.w	8001266 <__udivmoddi4+0x28e>
 8001034:	3f02      	subs	r7, #2
 8001036:	442b      	add	r3, r5
 8001038:	eba3 0309 	sub.w	r3, r3, r9
 800103c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001040:	fb0e 3310 	mls	r3, lr, r0, r3
 8001044:	fb00 f108 	mul.w	r1, r0, r8
 8001048:	b2a4      	uxth	r4, r4
 800104a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800104e:	42a1      	cmp	r1, r4
 8001050:	d909      	bls.n	8001066 <__udivmoddi4+0x8e>
 8001052:	192c      	adds	r4, r5, r4
 8001054:	f100 33ff 	add.w	r3, r0, #4294967295
 8001058:	f080 8107 	bcs.w	800126a <__udivmoddi4+0x292>
 800105c:	42a1      	cmp	r1, r4
 800105e:	f240 8104 	bls.w	800126a <__udivmoddi4+0x292>
 8001062:	3802      	subs	r0, #2
 8001064:	442c      	add	r4, r5
 8001066:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800106a:	2700      	movs	r7, #0
 800106c:	1a64      	subs	r4, r4, r1
 800106e:	b11e      	cbz	r6, 8001078 <__udivmoddi4+0xa0>
 8001070:	2300      	movs	r3, #0
 8001072:	40d4      	lsrs	r4, r2
 8001074:	e9c6 4300 	strd	r4, r3, [r6]
 8001078:	4639      	mov	r1, r7
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	428b      	cmp	r3, r1
 8001080:	d909      	bls.n	8001096 <__udivmoddi4+0xbe>
 8001082:	2e00      	cmp	r6, #0
 8001084:	f000 80ec 	beq.w	8001260 <__udivmoddi4+0x288>
 8001088:	2700      	movs	r7, #0
 800108a:	e9c6 0100 	strd	r0, r1, [r6]
 800108e:	4638      	mov	r0, r7
 8001090:	4639      	mov	r1, r7
 8001092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001096:	fab3 f783 	clz	r7, r3
 800109a:	2f00      	cmp	r7, #0
 800109c:	d148      	bne.n	8001130 <__udivmoddi4+0x158>
 800109e:	428b      	cmp	r3, r1
 80010a0:	d302      	bcc.n	80010a8 <__udivmoddi4+0xd0>
 80010a2:	4282      	cmp	r2, r0
 80010a4:	f200 80fb 	bhi.w	800129e <__udivmoddi4+0x2c6>
 80010a8:	1a84      	subs	r4, r0, r2
 80010aa:	eb61 0303 	sbc.w	r3, r1, r3
 80010ae:	2001      	movs	r0, #1
 80010b0:	469c      	mov	ip, r3
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	d0e0      	beq.n	8001078 <__udivmoddi4+0xa0>
 80010b6:	e9c6 4c00 	strd	r4, ip, [r6]
 80010ba:	e7dd      	b.n	8001078 <__udivmoddi4+0xa0>
 80010bc:	b902      	cbnz	r2, 80010c0 <__udivmoddi4+0xe8>
 80010be:	deff      	udf	#255	; 0xff
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	f040 808f 	bne.w	80011e8 <__udivmoddi4+0x210>
 80010ca:	2701      	movs	r7, #1
 80010cc:	1b49      	subs	r1, r1, r5
 80010ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80010d2:	fa1f f985 	uxth.w	r9, r5
 80010d6:	fbb1 fef8 	udiv	lr, r1, r8
 80010da:	fb08 111e 	mls	r1, r8, lr, r1
 80010de:	fb09 f00e 	mul.w	r0, r9, lr
 80010e2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80010e6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d907      	bls.n	80010fe <__udivmoddi4+0x126>
 80010ee:	18eb      	adds	r3, r5, r3
 80010f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80010f4:	d202      	bcs.n	80010fc <__udivmoddi4+0x124>
 80010f6:	4298      	cmp	r0, r3
 80010f8:	f200 80cd 	bhi.w	8001296 <__udivmoddi4+0x2be>
 80010fc:	468e      	mov	lr, r1
 80010fe:	1a1b      	subs	r3, r3, r0
 8001100:	fbb3 f0f8 	udiv	r0, r3, r8
 8001104:	fb08 3310 	mls	r3, r8, r0, r3
 8001108:	fb09 f900 	mul.w	r9, r9, r0
 800110c:	b2a4      	uxth	r4, r4
 800110e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001112:	45a1      	cmp	r9, r4
 8001114:	d907      	bls.n	8001126 <__udivmoddi4+0x14e>
 8001116:	192c      	adds	r4, r5, r4
 8001118:	f100 33ff 	add.w	r3, r0, #4294967295
 800111c:	d202      	bcs.n	8001124 <__udivmoddi4+0x14c>
 800111e:	45a1      	cmp	r9, r4
 8001120:	f200 80b6 	bhi.w	8001290 <__udivmoddi4+0x2b8>
 8001124:	4618      	mov	r0, r3
 8001126:	eba4 0409 	sub.w	r4, r4, r9
 800112a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800112e:	e79e      	b.n	800106e <__udivmoddi4+0x96>
 8001130:	f1c7 0520 	rsb	r5, r7, #32
 8001134:	40bb      	lsls	r3, r7
 8001136:	fa22 fc05 	lsr.w	ip, r2, r5
 800113a:	ea4c 0c03 	orr.w	ip, ip, r3
 800113e:	fa21 f405 	lsr.w	r4, r1, r5
 8001142:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001146:	fbb4 f9fe 	udiv	r9, r4, lr
 800114a:	fa1f f88c 	uxth.w	r8, ip
 800114e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001152:	fa20 f305 	lsr.w	r3, r0, r5
 8001156:	40b9      	lsls	r1, r7
 8001158:	fb09 fa08 	mul.w	sl, r9, r8
 800115c:	4319      	orrs	r1, r3
 800115e:	0c0b      	lsrs	r3, r1, #16
 8001160:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001164:	45a2      	cmp	sl, r4
 8001166:	fa02 f207 	lsl.w	r2, r2, r7
 800116a:	fa00 f307 	lsl.w	r3, r0, r7
 800116e:	d90b      	bls.n	8001188 <__udivmoddi4+0x1b0>
 8001170:	eb1c 0404 	adds.w	r4, ip, r4
 8001174:	f109 30ff 	add.w	r0, r9, #4294967295
 8001178:	f080 8088 	bcs.w	800128c <__udivmoddi4+0x2b4>
 800117c:	45a2      	cmp	sl, r4
 800117e:	f240 8085 	bls.w	800128c <__udivmoddi4+0x2b4>
 8001182:	f1a9 0902 	sub.w	r9, r9, #2
 8001186:	4464      	add	r4, ip
 8001188:	eba4 040a 	sub.w	r4, r4, sl
 800118c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001190:	fb0e 4410 	mls	r4, lr, r0, r4
 8001194:	fb00 fa08 	mul.w	sl, r0, r8
 8001198:	b289      	uxth	r1, r1
 800119a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800119e:	45a2      	cmp	sl, r4
 80011a0:	d908      	bls.n	80011b4 <__udivmoddi4+0x1dc>
 80011a2:	eb1c 0404 	adds.w	r4, ip, r4
 80011a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80011aa:	d26b      	bcs.n	8001284 <__udivmoddi4+0x2ac>
 80011ac:	45a2      	cmp	sl, r4
 80011ae:	d969      	bls.n	8001284 <__udivmoddi4+0x2ac>
 80011b0:	3802      	subs	r0, #2
 80011b2:	4464      	add	r4, ip
 80011b4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011b8:	fba0 8902 	umull	r8, r9, r0, r2
 80011bc:	eba4 040a 	sub.w	r4, r4, sl
 80011c0:	454c      	cmp	r4, r9
 80011c2:	4641      	mov	r1, r8
 80011c4:	46ce      	mov	lr, r9
 80011c6:	d354      	bcc.n	8001272 <__udivmoddi4+0x29a>
 80011c8:	d051      	beq.n	800126e <__udivmoddi4+0x296>
 80011ca:	2e00      	cmp	r6, #0
 80011cc:	d069      	beq.n	80012a2 <__udivmoddi4+0x2ca>
 80011ce:	1a5a      	subs	r2, r3, r1
 80011d0:	eb64 040e 	sbc.w	r4, r4, lr
 80011d4:	fa04 f505 	lsl.w	r5, r4, r5
 80011d8:	fa22 f307 	lsr.w	r3, r2, r7
 80011dc:	40fc      	lsrs	r4, r7
 80011de:	431d      	orrs	r5, r3
 80011e0:	e9c6 5400 	strd	r5, r4, [r6]
 80011e4:	2700      	movs	r7, #0
 80011e6:	e747      	b.n	8001078 <__udivmoddi4+0xa0>
 80011e8:	4095      	lsls	r5, r2
 80011ea:	f1c2 0320 	rsb	r3, r2, #32
 80011ee:	fa21 f003 	lsr.w	r0, r1, r3
 80011f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011f6:	fbb0 f7f8 	udiv	r7, r0, r8
 80011fa:	fa1f f985 	uxth.w	r9, r5
 80011fe:	fb08 0017 	mls	r0, r8, r7, r0
 8001202:	fa24 f303 	lsr.w	r3, r4, r3
 8001206:	4091      	lsls	r1, r2
 8001208:	fb07 fc09 	mul.w	ip, r7, r9
 800120c:	430b      	orrs	r3, r1
 800120e:	0c19      	lsrs	r1, r3, #16
 8001210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001214:	458c      	cmp	ip, r1
 8001216:	fa04 f402 	lsl.w	r4, r4, r2
 800121a:	d907      	bls.n	800122c <__udivmoddi4+0x254>
 800121c:	1869      	adds	r1, r5, r1
 800121e:	f107 30ff 	add.w	r0, r7, #4294967295
 8001222:	d231      	bcs.n	8001288 <__udivmoddi4+0x2b0>
 8001224:	458c      	cmp	ip, r1
 8001226:	d92f      	bls.n	8001288 <__udivmoddi4+0x2b0>
 8001228:	3f02      	subs	r7, #2
 800122a:	4429      	add	r1, r5
 800122c:	eba1 010c 	sub.w	r1, r1, ip
 8001230:	fbb1 f0f8 	udiv	r0, r1, r8
 8001234:	fb08 1c10 	mls	ip, r8, r0, r1
 8001238:	fb00 fe09 	mul.w	lr, r0, r9
 800123c:	b299      	uxth	r1, r3
 800123e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001242:	458e      	cmp	lr, r1
 8001244:	d907      	bls.n	8001256 <__udivmoddi4+0x27e>
 8001246:	1869      	adds	r1, r5, r1
 8001248:	f100 33ff 	add.w	r3, r0, #4294967295
 800124c:	d218      	bcs.n	8001280 <__udivmoddi4+0x2a8>
 800124e:	458e      	cmp	lr, r1
 8001250:	d916      	bls.n	8001280 <__udivmoddi4+0x2a8>
 8001252:	3802      	subs	r0, #2
 8001254:	4429      	add	r1, r5
 8001256:	eba1 010e 	sub.w	r1, r1, lr
 800125a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800125e:	e73a      	b.n	80010d6 <__udivmoddi4+0xfe>
 8001260:	4637      	mov	r7, r6
 8001262:	4630      	mov	r0, r6
 8001264:	e708      	b.n	8001078 <__udivmoddi4+0xa0>
 8001266:	460f      	mov	r7, r1
 8001268:	e6e6      	b.n	8001038 <__udivmoddi4+0x60>
 800126a:	4618      	mov	r0, r3
 800126c:	e6fb      	b.n	8001066 <__udivmoddi4+0x8e>
 800126e:	4543      	cmp	r3, r8
 8001270:	d2ab      	bcs.n	80011ca <__udivmoddi4+0x1f2>
 8001272:	ebb8 0102 	subs.w	r1, r8, r2
 8001276:	eb69 020c 	sbc.w	r2, r9, ip
 800127a:	3801      	subs	r0, #1
 800127c:	4696      	mov	lr, r2
 800127e:	e7a4      	b.n	80011ca <__udivmoddi4+0x1f2>
 8001280:	4618      	mov	r0, r3
 8001282:	e7e8      	b.n	8001256 <__udivmoddi4+0x27e>
 8001284:	4608      	mov	r0, r1
 8001286:	e795      	b.n	80011b4 <__udivmoddi4+0x1dc>
 8001288:	4607      	mov	r7, r0
 800128a:	e7cf      	b.n	800122c <__udivmoddi4+0x254>
 800128c:	4681      	mov	r9, r0
 800128e:	e77b      	b.n	8001188 <__udivmoddi4+0x1b0>
 8001290:	3802      	subs	r0, #2
 8001292:	442c      	add	r4, r5
 8001294:	e747      	b.n	8001126 <__udivmoddi4+0x14e>
 8001296:	f1ae 0e02 	sub.w	lr, lr, #2
 800129a:	442b      	add	r3, r5
 800129c:	e72f      	b.n	80010fe <__udivmoddi4+0x126>
 800129e:	4638      	mov	r0, r7
 80012a0:	e707      	b.n	80010b2 <__udivmoddi4+0xda>
 80012a2:	4637      	mov	r7, r6
 80012a4:	e6e8      	b.n	8001078 <__udivmoddi4+0xa0>
 80012a6:	bf00      	nop

080012a8 <__aeabi_idiv0>:
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <ADC_Init>:
 * @retval none
 * @param hadc1 objeto do ADC_1
 *
 */
void ADC_Init(ADC_HandleTypeDef hadc1)
{
 80012ac:	b084      	sub	sp, #16
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	f107 0c08 	add.w	ip, r7, #8
 80012b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//calibração do ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80012ba:	f107 0008 	add.w	r0, r7, #8
 80012be:	f002 f8d9 	bl	8003474 <HAL_ADCEx_Calibration_Start>
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ca:	b004      	add	sp, #16
 80012cc:	4770      	bx	lr
	...

080012d0 <ADC_GetValue>:
 * @param hadc1 objeto do ADC_1
 * @param cahannel_id id do canal a ser lido
 *
 */
uint32_t ADC_GetValue(ADC_HandleTypeDef hadc1, ADC_CHANNEL_Id channel_id)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	f107 0c08 	add.w	ip, r7, #8
 80012da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	adc_data_ready = 0;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <ADC_GetValue+0x40>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, adc_data, NUMBER_OF_CONVERSTION);
 80012e4:	2204      	movs	r2, #4
 80012e6:	490b      	ldr	r1, [pc, #44]	; (8001314 <ADC_GetValue+0x44>)
 80012e8:	f107 0008 	add.w	r0, r7, #8
 80012ec:	f001 fde8 	bl	8002ec0 <HAL_ADC_Start_DMA>

	HAL_ADC_Stop(&hadc1);
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	f001 fdb8 	bl	8002e68 <HAL_ADC_Stop>

	return adc_data[channel_id];
 80012f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <ADC_GetValue+0x44>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800130a:	b004      	add	sp, #16
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000260 	.word	0x20000260
 8001314:	20000298 	.word	0x20000298

08001318 <HAL_ADC_ConvCpltCallback>:
 *
 * Avisa que a leitura completa do adc foi realizada
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	adc_data_ready = 1;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_ADC_ConvCpltCallback+0x18>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000260 	.word	0x20000260

08001334 <DWT_Delay_Init>:
 */

#include "DWT.h"

uint32_t DWT_Delay_Init(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <DWT_Delay_Init+0x58>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4a13      	ldr	r2, [pc, #76]	; (800138c <DWT_Delay_Init+0x58>)
 800133e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001342:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <DWT_Delay_Init+0x58>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a10      	ldr	r2, [pc, #64]	; (800138c <DWT_Delay_Init+0x58>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <DWT_Delay_Init+0x5c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <DWT_Delay_Init+0x5c>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800136e:	bf00      	nop
    __ASM volatile ("NOP");
 8001370:	bf00      	nop
    __ASM volatile ("NOP");
 8001372:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <DWT_Delay_Init+0x5c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800137c:	2300      	movs	r3, #0
 800137e:	e000      	b.n	8001382 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001380:	2301      	movs	r3, #1
    }
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000edf0 	.word	0xe000edf0
 8001390:	e0001000 	.word	0xe0001000

08001394 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <DWT_Delay_us+0x44>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80013a2:	f003 f96d 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <DWT_Delay_us+0x48>)
 80013aa:	fba3 2302 	umull	r2, r3, r3, r2
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80013bc:	bf00      	nop
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <DWT_Delay_us+0x44>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad2      	subs	r2, r2, r3
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3f6      	bcc.n	80013be <DWT_Delay_us+0x2a>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	e0001000 	.word	0xe0001000
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <LCD_Send>:
 *
 * Aciona pino enable, espera 15ms, desaciona pino enable
 *
 * @retval Nenhum
 */
void LCD_Send() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CTRL_PINS, EN, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <LCD_Send+0x28>)
 80013ec:	f002 fd4b 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80013f0:	200f      	movs	r0, #15
 80013f2:	f001 fc3f 	bl	8002c74 <HAL_Delay>
	HAL_GPIO_WritePin(CTRL_PINS, EN, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <LCD_Send+0x28>)
 80013fe:	f002 fd42 	bl	8003e86 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40010c00 	.word	0x40010c00

0800140c <LCD_Write>:
 *
 * @retval Nenhum
 * @param[in] data byte a ser enviado
 * @param[in] is_data 1 se for dado, 0 se for instrução
 */
void LCD_Write(uint8_t data, bool is_data) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	460a      	mov	r2, r1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	4613      	mov	r3, r2
 800141a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CTRL_PINS, RS, is_data);  //instrução / data
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	461a      	mov	r2, r3
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	4825      	ldr	r0, [pc, #148]	; (80014bc <LCD_Write+0xb0>)
 8001426:	f002 fd2e 	bl	8003e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_PINS, RW, 0);		//escrita
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001430:	4822      	ldr	r0, [pc, #136]	; (80014bc <LCD_Write+0xb0>)
 8001432:	f002 fd28 	bl	8003e86 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e017      	b.n	800146c <LCD_Write+0x60>
			{
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	b299      	uxth	r1, r3
				data & (1 << (i + 4)));
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3304      	adds	r3, #4
 800144c:	2201      	movs	r2, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	b25a      	sxtb	r2, r3
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4013      	ands	r3, r2
 800145a:	b25b      	sxtb	r3, r3
		HAL_GPIO_WritePin(DATA_PINS,  (uint16_t) FRST_PIN << i,
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <LCD_Write+0xb0>)
 8001462:	f002 fd10 	bl	8003e86 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble mais significativo
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d9e4      	bls.n	800143c <LCD_Write+0x30>
		//00100111
	}

	LCD_Send();
 8001472:	f7ff ffb5 	bl	80013e0 <LCD_Send>

	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 8001476:	2300      	movs	r3, #0
 8001478:	73bb      	strb	r3, [r7, #14]
 800147a:	e016      	b.n	80014aa <LCD_Write+0x9e>
			{
		HAL_GPIO_WritePin(DATA_PINS, (uint16_t) FRST_PIN << i, data & (1 << i));
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	b299      	uxth	r1, r3
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	2201      	movs	r2, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	b25a      	sxtb	r2, r3
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	4013      	ands	r3, r2
 8001498:	b25b      	sxtb	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <LCD_Write+0xb0>)
 80014a0:	f002 fcf1 	bl	8003e86 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) //nibble menos significativo
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	3301      	adds	r3, #1
 80014a8:	73bb      	strb	r3, [r7, #14]
 80014aa:	7bbb      	ldrb	r3, [r7, #14]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d9e5      	bls.n	800147c <LCD_Write+0x70>
	}

	LCD_Send();
 80014b0:	f7ff ff96 	bl	80013e0 <LCD_Send>
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010c00 	.word	0x40010c00

080014c0 <LCD_Write_Buffer>:
 *
 *
 * @retval Nenhum
 * @param[in] *data string a ser enviado
 */
void LCD_Write_Buffer(uint8_t *data) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e069      	b.n	80015a2 <LCD_Write_Buffer+0xe2>
		if(i == 17)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b11      	cmp	r3, #17
 80014d2:	d103      	bne.n	80014dc <LCD_Write_Buffer+0x1c>
		{
			LCD_Write(0xC0, 0);
 80014d4:	2100      	movs	r1, #0
 80014d6:	20c0      	movs	r0, #192	; 0xc0
 80014d8:	f7ff ff98 	bl	800140c <LCD_Write>
		}
		//caracter espciais
		switch (*data) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2bc3      	cmp	r3, #195	; 0xc3
 80014e2:	d152      	bne.n	800158a <LCD_Write_Buffer+0xca>
			case 195:
				data++;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3301      	adds	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
				switch (*data) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	3ba1      	subs	r3, #161	; 0xa1
 80014f0:	2b14      	cmp	r3, #20
 80014f2:	d846      	bhi.n	8001582 <LCD_Write_Buffer+0xc2>
 80014f4:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <LCD_Write_Buffer+0x3c>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	08001551 	.word	0x08001551
 8001500:	08001583 	.word	0x08001583
 8001504:	0800156f 	.word	0x0800156f
 8001508:	08001583 	.word	0x08001583
 800150c:	08001583 	.word	0x08001583
 8001510:	08001583 	.word	0x08001583
 8001514:	08001565 	.word	0x08001565
 8001518:	08001583 	.word	0x08001583
 800151c:	0800155b 	.word	0x0800155b
 8001520:	08001583 	.word	0x08001583
 8001524:	08001583 	.word	0x08001583
 8001528:	08001583 	.word	0x08001583
 800152c:	08001583 	.word	0x08001583
 8001530:	08001583 	.word	0x08001583
 8001534:	08001583 	.word	0x08001583
 8001538:	08001583 	.word	0x08001583
 800153c:	08001583 	.word	0x08001583
 8001540:	08001583 	.word	0x08001583
 8001544:	08001583 	.word	0x08001583
 8001548:	08001583 	.word	0x08001583
 800154c:	08001579 	.word	0x08001579
					case 161:
						LCD_Write(0, 1);
 8001550:	2101      	movs	r1, #1
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff5a 	bl	800140c <LCD_Write>
						break;
 8001558:	e013      	b.n	8001582 <LCD_Write_Buffer+0xc2>
					case 169:
						LCD_Write(1, 1);
 800155a:	2101      	movs	r1, #1
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff ff55 	bl	800140c <LCD_Write>
						break;
 8001562:	e00e      	b.n	8001582 <LCD_Write_Buffer+0xc2>
					case 167:
						LCD_Write(2, 1);
 8001564:	2101      	movs	r1, #1
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff ff50 	bl	800140c <LCD_Write>
						break;
 800156c:	e009      	b.n	8001582 <LCD_Write_Buffer+0xc2>
					case 163:
						LCD_Write(3, 1);
 800156e:	2101      	movs	r1, #1
 8001570:	2003      	movs	r0, #3
 8001572:	f7ff ff4b 	bl	800140c <LCD_Write>
						break;
 8001576:	e004      	b.n	8001582 <LCD_Write_Buffer+0xc2>
					case 181:
						LCD_Write(4, 1);
 8001578:	2101      	movs	r1, #1
 800157a:	2004      	movs	r0, #4
 800157c:	f7ff ff46 	bl	800140c <LCD_Write>
						break;
 8001580:	bf00      	nop
				}
				data++;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3301      	adds	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
				break;
 8001588:	e008      	b.n	800159c <LCD_Write_Buffer+0xdc>
			default:
				LCD_Write(*data++, 1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2101      	movs	r1, #1
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff39 	bl	800140c <LCD_Write>
				break;
 800159a:	bf00      	nop
	for (uint8_t i = 0; i < *data!= '\0'; ++i) {
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d390      	bcc.n	80014ce <LCD_Write_Buffer+0xe>
		}
	}
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <LCD_Clear>:
/**
 * @brief limpa display e retorna cursor para primeira linha
 *
 * @retval Nenhum
 */
void LCD_Clear(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	LCD_Write(0x01, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff ff26 	bl	800140c <LCD_Write>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <LCD_Seccond_Line>:
 * @brief Desloca o cursor para a posição inicial da segunda linha
 *
 * @retval Nenhum
 */
void LCD_Seccond_Line()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	LCD_Write(0xC0, 0);
 80015c8:	2100      	movs	r1, #0
 80015ca:	20c0      	movs	r0, #192	; 0xc0
 80015cc:	f7ff ff1e 	bl	800140c <LCD_Write>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <LCD_Create_Custom_Char>:
 *
 * @retval Nenhum
 * @param[in] loc localização para escrever o caracter
 * @param[in] *c ponteiro para o vetor de 8 bytes do caracter
 */
void LCD_Create_Custom_Char(uint8_t loc, uint8_t *c) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	if (loc < 8) {
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b07      	cmp	r3, #7
 80015e4:	d819      	bhi.n	800161a <LCD_Create_Custom_Char+0x46>
		LCD_Write(0x40 + (loc * 8), 0); /* aponta para 0x40 + loc * 8 */
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	3308      	adds	r3, #8
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff0a 	bl	800140c <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e00a      	b.n	8001614 <LCD_Create_Custom_Char+0x40>
			LCD_Write(c[i], 1);
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2101      	movs	r1, #1
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff feff 	bl	800140c <LCD_Write>
		for (i = 0; i < 8; i++) /* escreve 8 bytes de cada caracter */
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	3301      	adds	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d9f1      	bls.n	80015fe <LCD_Create_Custom_Char+0x2a>
	}
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <LCD_Init_Custom_Characters>:
 *
 *	Define vetor de caracteres customizados e escreve na CGRAM
 *
 * @retval Nenhum
 */
void LCD_Init_Custom_Characters() {
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
	uint8_t character1[8] = { 0x02, 0x04, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <LCD_Init_Custom_Characters+0x8c>)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001634:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character2[8] = { 0x02, 0x04, 0x0E, 0x11, 0x1F, 0x10, 0x0E,
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <LCD_Init_Custom_Characters+0x90>)
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001642:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character3[8] = { 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x04,
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <LCD_Init_Custom_Characters+0x94>)
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001650:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character4[8] = { 0x1F, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F,
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <LCD_Init_Custom_Characters+0x98>)
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800165e:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t character5[8] = { 0x1F, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E,
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <LCD_Init_Custom_Characters+0x9c>)
 8001664:	463b      	mov	r3, r7
 8001666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166a:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	LCD_Create_Custom_Char(0, character1);
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	4619      	mov	r1, r3
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff ffad 	bl	80015d4 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(1, character2);
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4619      	mov	r1, r3
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ffa7 	bl	80015d4 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(2, character3);
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4619      	mov	r1, r3
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff ffa1 	bl	80015d4 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(3, character4);
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	4619      	mov	r1, r3
 8001698:	2003      	movs	r0, #3
 800169a:	f7ff ff9b 	bl	80015d4 <LCD_Create_Custom_Char>
	LCD_Create_Custom_Char(4, character5);
 800169e:	463b      	mov	r3, r7
 80016a0:	4619      	mov	r1, r3
 80016a2:	2004      	movs	r0, #4
 80016a4:	f7ff ff96 	bl	80015d4 <LCD_Create_Custom_Char>
}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	08007a44 	.word	0x08007a44
 80016b4:	08007a4c 	.word	0x08007a4c
 80016b8:	08007a54 	.word	0x08007a54
 80016bc:	08007a5c 	.word	0x08007a5c
 80016c0:	08007a64 	.word	0x08007a64

080016c4 <LCD_Init>:
 *	Escreve deslocando a mensagem para a esquerda
 *	Inicializa caracteres especiais
 *
 * @retval Nenhum
 */
void LCD_Init() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 80016c8:	200f      	movs	r0, #15
 80016ca:	f001 fad3 	bl	8002c74 <HAL_Delay>
	LCD_Write(0x03, 0); // 1
 80016ce:	2100      	movs	r1, #0
 80016d0:	2003      	movs	r0, #3
 80016d2:	f7ff fe9b 	bl	800140c <LCD_Write>
	LCD_Write(0x03, 0); // 2
 80016d6:	2100      	movs	r1, #0
 80016d8:	2003      	movs	r0, #3
 80016da:	f7ff fe97 	bl	800140c <LCD_Write>
	LCD_Write(0x03, 0); // 3
 80016de:	2100      	movs	r1, #0
 80016e0:	2003      	movs	r0, #3
 80016e2:	f7ff fe93 	bl	800140c <LCD_Write>
	LCD_Write(0x02, 0); // 4
 80016e6:	2100      	movs	r1, #0
 80016e8:	2002      	movs	r0, #2
 80016ea:	f7ff fe8f 	bl	800140c <LCD_Write>
	LCD_Write(0x02, 0); // 5
 80016ee:	2100      	movs	r1, #0
 80016f0:	2002      	movs	r0, #2
 80016f2:	f7ff fe8b 	bl	800140c <LCD_Write>
	LCD_Write(0x08, 0); // 6
 80016f6:	2100      	movs	r1, #0
 80016f8:	2008      	movs	r0, #8
 80016fa:	f7ff fe87 	bl	800140c <LCD_Write>
	LCD_Write(0x00, 0); // 7
 80016fe:	2100      	movs	r1, #0
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fe83 	bl	800140c <LCD_Write>
	LCD_Write(0x08, 0); // 8
 8001706:	2100      	movs	r1, #0
 8001708:	2008      	movs	r0, #8
 800170a:	f7ff fe7f 	bl	800140c <LCD_Write>
	LCD_Write(0x00, 0); // 9
 800170e:	2100      	movs	r1, #0
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fe7b 	bl	800140c <LCD_Write>
	LCD_Write(0x01, 0); // 10
 8001716:	2100      	movs	r1, #0
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fe77 	bl	800140c <LCD_Write>
	LCD_Write(0x00, 0); // 11
 800171e:	2100      	movs	r1, #0
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fe73 	bl	800140c <LCD_Write>
	LCD_Write(0x01, 0); // 12
 8001726:	2100      	movs	r1, #0
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff fe6f 	bl	800140c <LCD_Write>

	LCD_Write(0x28, 0); //2 linhas 5x7 (4 bits)
 800172e:	2100      	movs	r1, #0
 8001730:	2028      	movs	r0, #40	; 0x28
 8001732:	f7ff fe6b 	bl	800140c <LCD_Write>
	LCD_Write(0x0E, 0); //Display aceso c/ cursor fixo
 8001736:	2100      	movs	r1, #0
 8001738:	200e      	movs	r0, #14
 800173a:	f7ff fe67 	bl	800140c <LCD_Write>
	LCD_Write(0x06, 0); //Escreve deslocando a mensagem para a esquerda
 800173e:	2100      	movs	r1, #0
 8001740:	2006      	movs	r0, #6
 8001742:	f7ff fe63 	bl	800140c <LCD_Write>

	LCD_Init_Custom_Characters();
 8001746:	f7ff ff6d 	bl	8001624 <LCD_Init_Custom_Characters>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <PWM_Init>:
 * @retval none
 * @param htim2 objeto do Timer2
 *
 */
void PWM_Init(TIM_HandleTypeDef* htim2)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8001756:	2100      	movs	r1, #0
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f003 f9e7 	bl	8004b2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 800175e:	2104      	movs	r1, #4
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f003 f9e3 	bl	8004b2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 8001766:	2108      	movs	r1, #8
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f003 f9df 	bl	8004b2c <HAL_TIM_PWM_Start>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <PWM_Increase>:
 * @retval none
 * @param pwm_data objeto que contém faixa de pwm e o canal do mesmo
 *
 */
void PWM_Increase(PWM_TypeDef pwm_data)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08d      	sub	sp, #52	; 0x34
 800177c:	af00      	add	r7, sp, #0
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//converte de porcentagem para valor
	uint32_t duty_value_max = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4932      	ldr	r1, [pc, #200]	; (8001850 <PWM_Increase+0xd8>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff f9ef 	bl	8000b6c <__aeabi_fmul>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fbb1 	bl	8000ef8 <__aeabi_f2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t duty_value = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t init_time = HAL_GetTick();
 800179e:	f001 fa5f 	bl	8002c60 <HAL_GetTick>
 80017a2:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t current_time = init_time;
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	623b      	str	r3, [r7, #32]

	//pega qual o delau necessário para atingir o tempo de subida necessário;
	//multiplica por mil para transformar em microssegundos
	uint32_t delay = ((float)pwm_data.speed_time / duty_value_max) * 1000;
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f986 	bl	8000abc <__aeabi_ui2f>
 80017b0:	4604      	mov	r4, r0
 80017b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017b4:	f7ff f982 	bl	8000abc <__aeabi_ui2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fa89 	bl	8000cd4 <__aeabi_fdiv>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4923      	ldr	r1, [pc, #140]	; (8001854 <PWM_Increase+0xdc>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f9d0 	bl	8000b6c <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fb92 	bl	8000ef8 <__aeabi_f2uiz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	61fb      	str	r3, [r7, #28]

	uint32_t first_time = HAL_GetTick();
 80017d8:	f001 fa42 	bl	8002c60 <HAL_GetTick>
 80017dc:	61b8      	str	r0, [r7, #24]
	while(duty_value < duty_value_max)
 80017de:	e02c      	b.n	800183a <PWM_Increase+0xc2>
	{
		//Como identificar canal?
		if(pwm_data.pwm_channel == 1)
 80017e0:	793b      	ldrb	r3, [r7, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d104      	bne.n	80017f0 <PWM_Increase+0x78>
		{
			TIM2->CCR1 = duty_value;
 80017e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	6353      	str	r3, [r2, #52]	; 0x34
 80017ee:	e00e      	b.n	800180e <PWM_Increase+0x96>
		}
		else if(pwm_data.pwm_channel == 2)
 80017f0:	793b      	ldrb	r3, [r7, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d104      	bne.n	8001800 <PWM_Increase+0x88>
		{
			TIM2->CCR2 = duty_value;
 80017f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	6393      	str	r3, [r2, #56]	; 0x38
 80017fe:	e006      	b.n	800180e <PWM_Increase+0x96>
		}
		else if(pwm_data.pwm_channel == 3)
 8001800:	793b      	ldrb	r3, [r7, #4]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d103      	bne.n	800180e <PWM_Increase+0x96>
		{
			TIM2->CCR3 = duty_value;
 8001806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
		duty_value += 1;
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	3301      	adds	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
		DWT_Delay_us(delay);
 8001814:	69f8      	ldr	r0, [r7, #28]
 8001816:	f7ff fdbd 	bl	8001394 <DWT_Delay_us>

		//pisca led
		current_time = HAL_GetTick();
 800181a:	f001 fa21 	bl	8002c60 <HAL_GetTick>
 800181e:	6238      	str	r0, [r7, #32]
		if(current_time > (init_time + 300)){
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001826:	6a3a      	ldr	r2, [r7, #32]
 8001828:	429a      	cmp	r2, r3
 800182a:	d906      	bls.n	800183a <PWM_Increase+0xc2>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <PWM_Increase+0xe0>)
 8001832:	f002 fb40 	bl	8003eb6 <HAL_GPIO_TogglePin>
			init_time = current_time;
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
	while(duty_value < duty_value_max)
 800183a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	429a      	cmp	r2, r3
 8001840:	d3ce      	bcc.n	80017e0 <PWM_Increase+0x68>
		}
	}
	uint32_t last_time = HAL_GetTick();
 8001842:	f001 fa0d 	bl	8002c60 <HAL_GetTick>
 8001846:	6178      	str	r0, [r7, #20]
	return;
 8001848:	bf00      	nop
}
 800184a:	3734      	adds	r7, #52	; 0x34
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	4526a000 	.word	0x4526a000
 8001854:	447a0000 	.word	0x447a0000
 8001858:	40011000 	.word	0x40011000

0800185c <PWM_Decrease>:
 * @retval none
 * @param pwm_data objeto que contém faixa de pwm e o canal do mesmo.
 *
 */
void PWM_Decrease(PWM_TypeDef pwm_data)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af00      	add	r7, sp, #0
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//converte de porcentagem para valor
	uint32_t duty_value_max = pwm_data.duty_cycle * MAX_DUTY_CYCLE_VALUE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4931      	ldr	r1, [pc, #196]	; (8001930 <PWM_Decrease+0xd4>)
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f97d 	bl	8000b6c <__aeabi_fmul>
 8001872:	4603      	mov	r3, r0
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb3f 	bl	8000ef8 <__aeabi_f2uiz>
 800187a:	4603      	mov	r3, r0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t init_time = HAL_GetTick();
 800187e:	f001 f9ef 	bl	8002c60 <HAL_GetTick>
 8001882:	6238      	str	r0, [r7, #32]
	uint32_t current_time = init_time;
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	61fb      	str	r3, [r7, #28]

	//pega qual o delau necessário para atingir o tempo de subida necessário;
	//multiplica por mil para transformar em microssegundos
	uint32_t delay = ((float)pwm_data.speed_time / duty_value_max) * 1000;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f916 	bl	8000abc <__aeabi_ui2f>
 8001890:	4604      	mov	r4, r0
 8001892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001894:	f7ff f912 	bl	8000abc <__aeabi_ui2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4619      	mov	r1, r3
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff fa19 	bl	8000cd4 <__aeabi_fdiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4923      	ldr	r1, [pc, #140]	; (8001934 <PWM_Decrease+0xd8>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f960 	bl	8000b6c <__aeabi_fmul>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fb22 	bl	8000ef8 <__aeabi_f2uiz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]

	uint32_t first_time = HAL_GetTick();
 80018b8:	f001 f9d2 	bl	8002c60 <HAL_GetTick>
 80018bc:	6178      	str	r0, [r7, #20]
	while(duty_value_max > 0)
 80018be:	e02c      	b.n	800191a <PWM_Decrease+0xbe>
	{
		if(pwm_data.pwm_channel == 1)
 80018c0:	793b      	ldrb	r3, [r7, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d104      	bne.n	80018d0 <PWM_Decrease+0x74>
		{
			TIM2->CCR1 = duty_value_max;
 80018c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	6353      	str	r3, [r2, #52]	; 0x34
 80018ce:	e00e      	b.n	80018ee <PWM_Decrease+0x92>
		}
		else if(pwm_data.pwm_channel == 2)
 80018d0:	793b      	ldrb	r3, [r7, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d104      	bne.n	80018e0 <PWM_Decrease+0x84>
		{
			TIM2->CCR2 = duty_value_max;
 80018d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	6393      	str	r3, [r2, #56]	; 0x38
 80018de:	e006      	b.n	80018ee <PWM_Decrease+0x92>
		}
		else if(pwm_data.pwm_channel == 3)
 80018e0:	793b      	ldrb	r3, [r7, #4]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d103      	bne.n	80018ee <PWM_Decrease+0x92>
		{
			TIM2->CCR3 = duty_value_max;
 80018e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
		duty_value_max -= 1;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	3b01      	subs	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
		DWT_Delay_us(delay);
 80018f4:	69b8      	ldr	r0, [r7, #24]
 80018f6:	f7ff fd4d 	bl	8001394 <DWT_Delay_us>

		//pisca led
		current_time = HAL_GetTick();
 80018fa:	f001 f9b1 	bl	8002c60 <HAL_GetTick>
 80018fe:	61f8      	str	r0, [r7, #28]
		if(current_time > (init_time + 300)){
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	429a      	cmp	r2, r3
 800190a:	d906      	bls.n	800191a <PWM_Decrease+0xbe>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800190c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <PWM_Decrease+0xdc>)
 8001912:	f002 fad0 	bl	8003eb6 <HAL_GPIO_TogglePin>
			init_time = current_time;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	623b      	str	r3, [r7, #32]
	while(duty_value_max > 0)
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1cf      	bne.n	80018c0 <PWM_Decrease+0x64>
		}
	}
	uint32_t last_time = HAL_GetTick();
 8001920:	f001 f99e 	bl	8002c60 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]
	return;
 8001926:	bf00      	nop
}
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop
 8001930:	4526a000 	.word	0x4526a000
 8001934:	447a0000 	.word	0x447a0000
 8001938:	40011000 	.word	0x40011000

0800193c <CAPSULE_Verify_Insertion>:
 *
 * @retval CAPSULE_Recipe_TypeDef
 *
 */
CAPSULE_Recipe_TypeDef CAPSULE_Verify_Insertion()
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b0bc      	sub	sp, #240	; 0xf0
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	uint8_t bit_0 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_0);
 8001944:	2108      	movs	r1, #8
 8001946:	4861      	ldr	r0, [pc, #388]	; (8001acc <CAPSULE_Verify_Insertion+0x190>)
 8001948:	f002 fa86 	bl	8003e58 <HAL_GPIO_ReadPin>
 800194c:	4603      	mov	r3, r0
 800194e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t bit_1 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_1);
 8001952:	2110      	movs	r1, #16
 8001954:	485d      	ldr	r0, [pc, #372]	; (8001acc <CAPSULE_Verify_Insertion+0x190>)
 8001956:	f002 fa7f 	bl	8003e58 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	uint8_t bit_2 = HAL_GPIO_ReadPin(CAPSULE_BN1_PORT, CAPSULE_BN1_BIT_2);
 8001960:	2120      	movs	r1, #32
 8001962:	485a      	ldr	r0, [pc, #360]	; (8001acc <CAPSULE_Verify_Insertion+0x190>)
 8001964:	f002 fa78 	bl	8003e58 <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	//monta número que identifica capsula
	CAPSULE_Type capsule_type = bit_0 | (bit_1 << 1) | (bit_2 << 2);
 800196e:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b25a      	sxtb	r2, r3
 8001976:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 800197a:	4313      	orrs	r3, r2
 800197c:	b25a      	sxtb	r2, r3
 800197e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	b25b      	sxtb	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec

	CAPSULE_Recipe_TypeDef recipe;

	//inicializa receitas
	RECIPE_NONE_CAPSULE_TYPE_DATA(recipe_none);
 800198e:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <CAPSULE_Verify_Insertion+0x194>)
 8001990:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001994:	461d      	mov	r5, r3
 8001996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800199e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_WATER_DATA(recipe_water);
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <CAPSULE_Verify_Insertion+0x198>)
 80019a4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80019a8:	461d      	mov	r5, r3
 80019aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SPARKLINK_WATER_DATA(recipe_sparklink_water);
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <CAPSULE_Verify_Insertion+0x19c>)
 80019b8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80019bc:	461d      	mov	r5, r3
 80019be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_ICE_TEA_DATA(recipe_ice_tea);
 80019ca:	4b44      	ldr	r3, [pc, #272]	; (8001adc <CAPSULE_Verify_Insertion+0x1a0>)
 80019cc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80019d0:	461d      	mov	r5, r3
 80019d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_HOT_TEA_DATA(recipe_hot_tea);
 80019de:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <CAPSULE_Verify_Insertion+0x1a4>)
 80019e0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80019e4:	461d      	mov	r5, r3
 80019e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RECIPE_SODA_DATA(recipe_soda);
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <CAPSULE_Verify_Insertion+0x1a8>)
 80019f4:	f107 040c 	add.w	r4, r7, #12
 80019f8:	461d      	mov	r5, r3
 80019fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (capsule_type) {
 8001a06:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d850      	bhi.n	8001ab0 <CAPSULE_Verify_Insertion+0x174>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <CAPSULE_Verify_Insertion+0xd8>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a2d 	.word	0x08001a2d
 8001a18:	08001a43 	.word	0x08001a43
 8001a1c:	08001a59 	.word	0x08001a59
 8001a20:	08001a6f 	.word	0x08001a6f
 8001a24:	08001a85 	.word	0x08001a85
 8001a28:	08001a9b 	.word	0x08001a9b
		case NONE_CAPSULE_TYPE:
			return recipe_none;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	461d      	mov	r5, r3
 8001a30:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a40:	e040      	b.n	8001ac4 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_WATER:
				return recipe_water;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	461d      	mov	r5, r3
 8001a46:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a52:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a56:	e035      	b.n	8001ac4 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SPARKLINK_WATER:
			return recipe_sparklink_water;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a6c:	e02a      	b.n	8001ac4 <CAPSULE_Verify_Insertion+0x188>
			break;
		case RECIPE_ICE_TEA:
				return recipe_ice_tea;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	461d      	mov	r5, r3
 8001a72:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a82:	e01f      	b.n	8001ac4 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_HOT_TEA:
				return recipe_hot_tea;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	461d      	mov	r5, r3
 8001a88:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a98:	e014      	b.n	8001ac4 <CAPSULE_Verify_Insertion+0x188>
				break;
		case RECIPE_SODA:
				return recipe_soda;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	f107 040c 	add.w	r4, r7, #12
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aaa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001aae:	e009      	b.n	8001ac4 <CAPSULE_Verify_Insertion+0x188>
				break;
		default:
			return recipe_none;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			break;
	}

}
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	37f0      	adds	r7, #240	; 0xf0
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	40010c00 	.word	0x40010c00
 8001ad0:	08007a6c 	.word	0x08007a6c
 8001ad4:	08007a8c 	.word	0x08007a8c
 8001ad8:	08007aac 	.word	0x08007aac
 8001adc:	08007acc 	.word	0x08007acc
 8001ae0:	08007aec 	.word	0x08007aec
 8001ae4:	08007b0c 	.word	0x08007b0c

08001ae8 <CONTROLLER_Execute>:
 * @param hadc objeto do ADC_1
 * @param capsule capsula que determina se precisará aquecer ou resfriar a água.
 *
 */
void CONTROLLER_Execute(ADC_HandleTypeDef hadc, CAPSULE_Recipe_TypeDef capsule)
{
 8001ae8:	b084      	sub	sp, #16
 8001aea:	b5b0      	push	{r4, r5, r7, lr}
 8001aec:	b0aa      	sub	sp, #168	; 0xa8
 8001aee:	af0a      	add	r7, sp, #40	; 0x28
 8001af0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int32_t sensor_signal = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t sensor_temp = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	66bb      	str	r3, [r7, #104]	; 0x68
	int32_t error_signal = 1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t ref_sinal = capsule.water_temp;
 8001b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b08:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CHANNEL_Id sensor_channel_id;
	uint32_t init_time = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t current_time = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	673b      	str	r3, [r7, #112]	; 0x70

	Controler_TypeDef block;
	LCD_Clear();
 8001b12:	f7ff fd4f 	bl	80015b4 <LCD_Clear>

	Y3(natural_water_output);
 8001b16:	4a89      	ldr	r2, [pc, #548]	; (8001d3c <CONTROLLER_Execute+0x254>)
 8001b18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b20:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (capsule.water_type) {
 8001b24:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d004      	beq.n	8001b36 <CONTROLLER_Execute+0x4e>
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d043      	beq.n	8001bb8 <CONTROLLER_Execute+0xd0>
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d022      	beq.n	8001b7a <CONTROLLER_Execute+0x92>
		case NATURAL_WATER:
			block.output = natural_water_output;
			goto activate_pump;
			break;
		default:
			break;
 8001b34:	e049      	b.n	8001bca <CONTROLLER_Execute+0xe2>
			LCD_Write_Buffer("Aquecendo a água.");
 8001b36:	4882      	ldr	r0, [pc, #520]	; (8001d40 <CONTROLLER_Execute+0x258>)
 8001b38:	f7ff fcc2 	bl	80014c0 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_HEATER_DATA(heater_block);
 8001b3c:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <CONTROLLER_Execute+0x25c>)
 8001b3e:	f107 0418 	add.w	r4, r7, #24
 8001b42:	461d      	mov	r5, r3
 8001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b4c:	e884 0003 	stmia.w	r4, {r0, r1}
			block = heater_block;
 8001b50:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001b54:	f107 0518 	add.w	r5, r7, #24
 8001b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b60:	e884 0003 	stmia.w	r4, {r0, r1}
			PWM_Increase(block.pwm);
 8001b64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b6c:	f7ff fe04 	bl	8001778 <PWM_Increase>
			sensor_channel_id = heater_block.adc_channel_id;
 8001b70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b74:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			break;
 8001b78:	e027      	b.n	8001bca <CONTROLLER_Execute+0xe2>
			LCD_Write_Buffer("Refrigerando a água.");
 8001b7a:	4873      	ldr	r0, [pc, #460]	; (8001d48 <CONTROLLER_Execute+0x260>)
 8001b7c:	f7ff fca0 	bl	80014c0 <LCD_Write_Buffer>
			CONTROLLER_BLOCK_COOLER_DATA(cooler_block);
 8001b80:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <CONTROLLER_Execute+0x264>)
 8001b82:	463c      	mov	r4, r7
 8001b84:	461d      	mov	r5, r3
 8001b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b8e:	e884 0003 	stmia.w	r4, {r0, r1}
			block = cooler_block;
 8001b92:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001b96:	463d      	mov	r5, r7
 8001b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ba0:	e884 0003 	stmia.w	r4, {r0, r1}
			PWM_Increase(block.pwm);
 8001ba4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bac:	f7ff fde4 	bl	8001778 <PWM_Increase>
			sensor_channel_id = cooler_block.adc_channel_id;
 8001bb0:	7b3b      	ldrb	r3, [r7, #12]
 8001bb2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			break;
 8001bb6:	e008      	b.n	8001bca <CONTROLLER_Execute+0xe2>
			block.output = natural_water_output;
 8001bb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bbc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8001bc8:	e03d      	b.n	8001c46 <CONTROLLER_Execute+0x15e>
	}

	init_time = HAL_GetTick();
 8001bca:	f001 f849 	bl	8002c60 <HAL_GetTick>
 8001bce:	6778      	str	r0, [r7, #116]	; 0x74
	current_time = init_time;
 8001bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd2:	673b      	str	r3, [r7, #112]	; 0x70
	//fica no while até chegar na temperatura desejada
	while(error_signal != 0)
 8001bd4:	e02e      	b.n	8001c34 <CONTROLLER_Execute+0x14c>
	{
		sensor_signal = ADC_GetValue(hadc, sensor_channel_id);
 8001bd6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001bda:	9308      	str	r3, [sp, #32]
 8001bdc:	466d      	mov	r5, sp
 8001bde:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001bee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf4:	f7ff fb6c 	bl	80012d0 <ADC_GetValue>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	66fb      	str	r3, [r7, #108]	; 0x6c

		sensor_temp = UTILS_To_Temp(sensor_signal);
 8001bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 ff86 	bl	8002b10 <UTILS_To_Temp>
 8001c04:	66b8      	str	r0, [r7, #104]	; 0x68

		error_signal = ref_sinal - sensor_temp;
 8001c06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	67fb      	str	r3, [r7, #124]	; 0x7c

		HAL_Delay(50);
 8001c0e:	2032      	movs	r0, #50	; 0x32
 8001c10:	f001 f830 	bl	8002c74 <HAL_Delay>
		current_time = HAL_GetTick();
 8001c14:	f001 f824 	bl	8002c60 <HAL_GetTick>
 8001c18:	6738      	str	r0, [r7, #112]	; 0x70
		if(current_time > (init_time + 300)){
 8001c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c1c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001c20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d906      	bls.n	8001c34 <CONTROLLER_Execute+0x14c>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2a:	4849      	ldr	r0, [pc, #292]	; (8001d50 <CONTROLLER_Execute+0x268>)
 8001c2c:	f002 f943 	bl	8003eb6 <HAL_GPIO_TogglePin>
			init_time = current_time;
 8001c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c32:	677b      	str	r3, [r7, #116]	; 0x74
	while(error_signal != 0)
 8001c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1cd      	bne.n	8001bd6 <CONTROLLER_Execute+0xee>
		}
	}

	PWM_Decrease(block.pwm);
 8001c3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c42:	f7ff fe0b 	bl	800185c <PWM_Decrease>

	activate_pump: ;

	LCD_Clear();
 8001c46:	f7ff fcb5 	bl	80015b4 <LCD_Clear>
	LCD_Write_Buffer("Ativando bomba...");
 8001c4a:	4842      	ldr	r0, [pc, #264]	; (8001d54 <CONTROLLER_Execute+0x26c>)
 8001c4c:	f7ff fc38 	bl	80014c0 <LCD_Write_Buffer>

	//ativa bomba de saída
	PWM_TypeDef b1 = {.duty_cycle = 1, .pwm_channel = 3, .speed_time=200};
 8001c50:	4a41      	ldr	r2, [pc, #260]	; (8001d58 <CONTROLLER_Execute+0x270>)
 8001c52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PWM_Increase(b1);
 8001c5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c64:	f7ff fd88 	bl	8001778 <PWM_Increase>

	LCD_Clear();
 8001c68:	f7ff fca4 	bl	80015b4 <LCD_Clear>
	LCD_Write_Buffer("-Despejando água");
 8001c6c:	483b      	ldr	r0, [pc, #236]	; (8001d5c <CONTROLLER_Execute+0x274>)
 8001c6e:	f7ff fc27 	bl	80014c0 <LCD_Write_Buffer>

	init_time = HAL_GetTick();
 8001c72:	f000 fff5 	bl	8002c60 <HAL_GetTick>
 8001c76:	6778      	str	r0, [r7, #116]	; 0x74
	current_time = init_time;
 8001c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7a:	673b      	str	r3, [r7, #112]	; 0x70

	//se precisar de CO2, ativa CO2
	Y4(co2_output);
 8001c7c:	4a38      	ldr	r2, [pc, #224]	; (8001d60 <CONTROLLER_Execute+0x278>)
 8001c7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c86:	e883 0003 	stmia.w	r3, {r0, r1}
	if(capsule.co2_time > 0){
 8001c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <CONTROLLER_Execute+0x1c4>
		LCD_Seccond_Line();
 8001c92:	f7ff fc97 	bl	80015c4 <LCD_Seccond_Line>
		LCD_Write_Buffer("-Despejando CO2");
 8001c96:	4833      	ldr	r0, [pc, #204]	; (8001d64 <CONTROLLER_Execute+0x27c>)
 8001c98:	f7ff fc12 	bl	80014c0 <LCD_Write_Buffer>
		HAL_GPIO_WritePin(co2_output.gpio_class, co2_output.gpio_pin, GPIO_PIN_SET);
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f002 f8ed 	bl	8003e86 <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_SET);
 8001cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cae:	4618      	mov	r0, r3
 8001cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f002 f8e5 	bl	8003e86 <HAL_GPIO_WritePin>

	//aguarda até passar o tempo de despejo de água e de CO2.
	while(current_time < (init_time + capsule.water_time) || current_time < (init_time + capsule.co2_time)){
 8001cbc:	e020      	b.n	8001d00 <CONTROLLER_Execute+0x218>
		current_time = HAL_GetTick();
 8001cbe:	f000 ffcf 	bl	8002c60 <HAL_GetTick>
 8001cc2:	6738      	str	r0, [r7, #112]	; 0x70

		//se chegou no tempo desejado de água, desliga.
		if(current_time >=  (init_time + capsule.water_time)){
 8001cc4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cca:	4413      	add	r3, r2
 8001ccc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d307      	bcc.n	8001ce2 <CONTROLLER_Execute+0x1fa>
			HAL_GPIO_WritePin(block.output.gpio_class, block.output.gpio_pin, GPIO_PIN_RESET);
 8001cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f002 f8d2 	bl	8003e86 <HAL_GPIO_WritePin>
		}

		//se chegou no tempo desejado de co2, desliga.
		if(current_time >= (init_time + capsule.co2_time)){
 8001ce2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ce8:	4413      	add	r3, r2
 8001cea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d307      	bcc.n	8001d00 <CONTROLLER_Execute+0x218>
			HAL_GPIO_WritePin(co2_output.gpio_class, co2_output.gpio_pin, GPIO_PIN_RESET);
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f002 f8c3 	bl	8003e86 <HAL_GPIO_WritePin>
	while(current_time < (init_time + capsule.water_time) || current_time < (init_time + capsule.co2_time)){
 8001d00:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d06:	4413      	add	r3, r2
 8001d08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3d7      	bcc.n	8001cbe <CONTROLLER_Execute+0x1d6>
 8001d0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d14:	4413      	add	r3, r2
 8001d16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d3d0      	bcc.n	8001cbe <CONTROLLER_Execute+0x1d6>
		}
	}

	//seta tempo para desacelerar
	b1.speed_time = 250;
 8001d1c:	23fa      	movs	r3, #250	; 0xfa
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	PWM_Decrease(b1);
 8001d20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d28:	f7ff fd98 	bl	800185c <PWM_Decrease>
	return;
 8001d2c:	bf00      	nop
}
 8001d2e:	3780      	adds	r7, #128	; 0x80
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d36:	b004      	add	sp, #16
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	08007b90 	.word	0x08007b90
 8001d40:	08007b2c 	.word	0x08007b2c
 8001d44:	08007b98 	.word	0x08007b98
 8001d48:	08007b40 	.word	0x08007b40
 8001d4c:	08007bb0 	.word	0x08007bb0
 8001d50:	40011000 	.word	0x40011000
 8001d54:	08007b58 	.word	0x08007b58
 8001d58:	08007bc8 	.word	0x08007bc8
 8001d5c:	08007b6c 	.word	0x08007b6c
 8001d60:	08007bd4 	.word	0x08007bd4
 8001d64:	08007b80 	.word	0x08007b80

08001d68 <Get_Button_Pressed>:
 *
 * @retval Pressed_Type Tipo do botão pressionado
 *
 */
Pressed_Type Get_Button_Pressed()
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
	BUTTON_CONFIRMAR(confirm_button);
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <Get_Button_Pressed+0xc0>)
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d78:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_CANCELAR(cancel_button);
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <Get_Button_Pressed+0xc4>)
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d86:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_INCREASE(increase_button);
 8001d8a:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <Get_Button_Pressed+0xc8>)
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d94:	e883 0003 	stmia.w	r3, {r0, r1}
	BUTTON_DECREASE(decrease_button);
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <Get_Button_Pressed+0xcc>)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001da0:	e883 0003 	stmia.w	r3, {r0, r1}

	while(1)
	{
		if(HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin)){
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	461a      	mov	r2, r3
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f002 f852 	bl	8003e58 <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <Get_Button_Pressed+0x56>
			return CONFIRM_PRESSED;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e030      	b.n	8001e20 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(cancel_button.gpio_class, cancel_button.gpio_pin)){
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4610      	mov	r0, r2
 8001dca:	f002 f845 	bl	8003e58 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <Get_Button_Pressed+0x70>
			return CANCEL_PRESSED;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e023      	b.n	8001e20 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(increase_button.gpio_class, increase_button.gpio_pin)){
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f002 f838 	bl	8003e58 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <Get_Button_Pressed+0x8a>
			return INCREASE_PRESSED;
 8001dee:	2302      	movs	r3, #2
 8001df0:	e016      	b.n	8001e20 <Get_Button_Pressed+0xb8>
		}
		if(HAL_GPIO_ReadPin(decrease_button.gpio_class, decrease_button.gpio_pin)){
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	461a      	mov	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f002 f82b 	bl	8003e58 <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <Get_Button_Pressed+0xa4>
			return DECREASE_PRESSED;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e009      	b.n	8001e20 <Get_Button_Pressed+0xb8>
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <Get_Button_Pressed+0xd0>)
 8001e12:	f002 f850 	bl	8003eb6 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001e16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e1a:	f000 ff2b 	bl	8002c74 <HAL_Delay>
		if(HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin)){
 8001e1e:	e7c1      	b.n	8001da4 <Get_Button_Pressed+0x3c>
	}
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	08007bdc 	.word	0x08007bdc
 8001e2c:	08007be4 	.word	0x08007be4
 8001e30:	08007bec 	.word	0x08007bec
 8001e34:	08007bf4 	.word	0x08007bf4
 8001e38:	40011000 	.word	0x40011000

08001e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3e:	b0a5      	sub	sp, #148	; 0x94
 8001e40:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e42:	f000 feb5 	bl	8002bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e46:	f000 f887 	bl	8001f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4a:	f000 fa41 	bl	80022d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e4e:	f000 fa21 	bl	8002294 <MX_DMA_Init>
  MX_TIM2_Init();
 8001e52:	f000 f993 	bl	800217c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001e56:	f000 f8d7 	bl	8002008 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001e5a:	f000 f93f 	bl	80020dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  //inicializa LCD em modo 4 bits
  LCD_Init();
 8001e5e:	f7ff fc31 	bl	80016c4 <LCD_Init>
  ADC_Init(hadc1);
 8001e62:	4e39      	ldr	r6, [pc, #228]	; (8001f48 <main+0x10c>)
 8001e64:	466d      	mov	r5, sp
 8001e66:	f106 0410 	add.w	r4, r6, #16
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e76:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e7a:	f7ff fa17 	bl	80012ac <ADC_Init>
  PWM_Init(&htim2);
 8001e7e:	4833      	ldr	r0, [pc, #204]	; (8001f4c <main+0x110>)
 8001e80:	f7ff fc65 	bl	800174e <PWM_Init>
  DWT_Delay_Init();
 8001e84:	f7ff fa56 	bl	8001334 <DWT_Delay_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  STATE current_state = STATE_SHOWING_CLOCK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	switch (current_state) {
 8001e8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <main+0x60>
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d009      	beq.n	8001eae <main+0x72>
				current_state = STATE_SHOWING_CLOCK;
			}
			current_state = STATE_SHOWING_CLOCK;
			break;
		default:
			break;
 8001e9a:	e04b      	b.n	8001f34 <main+0xf8>
			capsule = STATE_Show_Clock();
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fa99 	bl	80023d8 <STATE_Show_Clock>
			current_state = STATE_STARTING_PROCESS;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001eac:	e042      	b.n	8001f34 <main+0xf8>
			capsule = STATE_Starting_Process(capsule, hadc1);
 8001eae:	463e      	mov	r6, r7
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <main+0x10c>)
 8001eb2:	ac05      	add	r4, sp, #20
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ec6:	466d      	mov	r5, sp
 8001ec8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	602b      	str	r3, [r5, #0]
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eda:	4630      	mov	r0, r6
 8001edc:	f000 fad2 	bl	8002484 <STATE_Starting_Process>
 8001ee0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001ee4:	463d      	mov	r5, r7
 8001ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(capsule.capsule_type != NONE_CAPSULE_TYPE)
 8001ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d018      	beq.n	8001f2c <main+0xf0>
				STATE_Started_Process(capsule, hadc1);
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <main+0x10c>)
 8001efc:	ac04      	add	r4, sp, #16
 8001efe:	461d      	mov	r5, r3
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f10:	466c      	mov	r4, sp
 8001f12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f22:	f000 fc37 	bl	8002794 <STATE_Started_Process>
				current_state = STATE_SHOWING_CLOCK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			current_state = STATE_SHOWING_CLOCK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001f32:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <main+0x114>)
 8001f3a:	f001 ffbc 	bl	8003eb6 <HAL_GPIO_TogglePin>
	DWT_Delay_us(300000);
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <main+0x118>)
 8001f40:	f7ff fa28 	bl	8001394 <DWT_Delay_us>
	switch (current_state) {
 8001f44:	e7a3      	b.n	8001e8e <main+0x52>
 8001f46:	bf00      	nop
 8001f48:	200002a8 	.word	0x200002a8
 8001f4c:	20000364 	.word	0x20000364
 8001f50:	40011000 	.word	0x40011000
 8001f54:	000493e0 	.word	0x000493e0

08001f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b094      	sub	sp, #80	; 0x50
 8001f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f62:	2228      	movs	r2, #40	; 0x28
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fbf2 	bl	8005750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f90:	2310      	movs	r3, #16
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f94:	2302      	movs	r3, #2
 8001f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001f9c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 ff9e 	bl	8003ee8 <HAL_RCC_OscConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001fb2:	f000 fa0b 	bl	80023cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fa08 	bl	80043e8 <HAL_RCC_ClockConfig>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001fde:	f000 f9f5 	bl	80023cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fb82 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ffa:	f000 f9e7 	bl	80023cc <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	3750      	adds	r7, #80	; 0x50
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <MX_ADC1_Init+0xcc>)
 800201a:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <MX_ADC1_Init+0xd0>)
 800201c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002024:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002028:	2201      	movs	r2, #1
 800202a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <MX_ADC1_Init+0xcc>)
 800202e:	2200      	movs	r2, #0
 8002030:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002032:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002034:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002038:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <MX_ADC1_Init+0xcc>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002042:	2204      	movs	r2, #4
 8002044:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002046:	4823      	ldr	r0, [pc, #140]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002048:	f000 fe36 	bl	8002cb8 <HAL_ADC_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002052:	f000 f9bb 	bl	80023cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002056:	2307      	movs	r3, #7
 8002058:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800205a:	2301      	movs	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4619      	mov	r1, r3
 8002066:	481b      	ldr	r0, [pc, #108]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002068:	f001 f81a 	bl	80030a0 <HAL_ADC_ConfigChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002072:	f000 f9ab 	bl	80023cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002076:	2306      	movs	r3, #6
 8002078:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800207a:	2302      	movs	r3, #2
 800207c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	4619      	mov	r1, r3
 8002082:	4814      	ldr	r0, [pc, #80]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002084:	f001 f80c 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800208e:	f000 f99d 	bl	80023cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002092:	2305      	movs	r3, #5
 8002094:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002096:	2303      	movs	r3, #3
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <MX_ADC1_Init+0xcc>)
 80020a0:	f000 fffe 	bl	80030a0 <HAL_ADC_ConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80020aa:	f000 f98f 	bl	80023cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020ae:	2304      	movs	r3, #4
 80020b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80020b2:	2304      	movs	r3, #4
 80020b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4806      	ldr	r0, [pc, #24]	; (80020d4 <MX_ADC1_Init+0xcc>)
 80020bc:	f000 fff0 	bl	80030a0 <HAL_ADC_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80020c6:	f000 f981 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200002a8 	.word	0x200002a8
 80020d8:	40012400 	.word	0x40012400

080020dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f0:	463b      	mov	r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <MX_TIM1_Init+0x98>)
 80020fa:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <MX_TIM1_Init+0x9c>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 56 - 1;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_TIM1_Init+0x98>)
 8002100:	2237      	movs	r2, #55	; 0x37
 8002102:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <MX_TIM1_Init+0x98>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_TIM1_Init+0x98>)
 800210c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002110:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <MX_TIM1_Init+0x98>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_TIM1_Init+0x98>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <MX_TIM1_Init+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002124:	4813      	ldr	r0, [pc, #76]	; (8002174 <MX_TIM1_Init+0x98>)
 8002126:	f002 fc59 	bl	80049dc <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002130:	f000 f94c 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002138:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	4619      	mov	r1, r3
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <MX_TIM1_Init+0x98>)
 8002142:	f002 fe53 	bl	8004dec <HAL_TIM_ConfigClockSource>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800214c:	f000 f93e 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002158:	463b      	mov	r3, r7
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_TIM1_Init+0x98>)
 800215e:	f003 f9a1 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002168:	f000 f930 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000031c 	.word	0x2000031c
 8002178:	40012c00 	.word	0x40012c00

0800217c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	; 0x38
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <MX_TIM2_Init+0x114>)
 80021ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <MX_TIM2_Init+0x114>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <MX_TIM2_Init+0x114>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2667 - 1;
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <MX_TIM2_Init+0x114>)
 80021c2:	f640 226a 	movw	r2, #2666	; 0xa6a
 80021c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <MX_TIM2_Init+0x114>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <MX_TIM2_Init+0x114>)
 80021d0:	2280      	movs	r2, #128	; 0x80
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d4:	482e      	ldr	r0, [pc, #184]	; (8002290 <MX_TIM2_Init+0x114>)
 80021d6:	f002 fc01 	bl	80049dc <HAL_TIM_Base_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021e0:	f000 f8f4 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ee:	4619      	mov	r1, r3
 80021f0:	4827      	ldr	r0, [pc, #156]	; (8002290 <MX_TIM2_Init+0x114>)
 80021f2:	f002 fdfb 	bl	8004dec <HAL_TIM_ConfigClockSource>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021fc:	f000 f8e6 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002200:	4823      	ldr	r0, [pc, #140]	; (8002290 <MX_TIM2_Init+0x114>)
 8002202:	f002 fc3a 	bl	8004a7a <HAL_TIM_PWM_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800220c:	f000 f8de 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	4619      	mov	r1, r3
 800221e:	481c      	ldr	r0, [pc, #112]	; (8002290 <MX_TIM2_Init+0x114>)
 8002220:	f003 f940 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800222a:	f000 f8cf 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222e:	2360      	movs	r3, #96	; 0x60
 8002230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2200      	movs	r2, #0
 8002242:	4619      	mov	r1, r3
 8002244:	4812      	ldr	r0, [pc, #72]	; (8002290 <MX_TIM2_Init+0x114>)
 8002246:	f002 fd13 	bl	8004c70 <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002250:	f000 f8bc 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	2204      	movs	r2, #4
 8002258:	4619      	mov	r1, r3
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MX_TIM2_Init+0x114>)
 800225c:	f002 fd08 	bl	8004c70 <HAL_TIM_PWM_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002266:	f000 f8b1 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2208      	movs	r2, #8
 800226e:	4619      	mov	r1, r3
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM2_Init+0x114>)
 8002272:	f002 fcfd 	bl	8004c70 <HAL_TIM_PWM_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800227c:	f000 f8a6 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM2_Init+0x114>)
 8002282:	f000 fb85 	bl	8002990 <HAL_TIM_MspPostInit>

}
 8002286:	bf00      	nop
 8002288:	3738      	adds	r7, #56	; 0x38
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000364 	.word	0x20000364

08002294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_DMA_Init+0x38>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <MX_DMA_Init+0x38>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6153      	str	r3, [r2, #20]
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_DMA_Init+0x38>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	200b      	movs	r0, #11
 80022b8:	f001 fa4f 	bl	800375a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022bc:	200b      	movs	r0, #11
 80022be:	f001 fa68 	bl	8003792 <HAL_NVIC_EnableIRQ>

}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000

080022d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <MX_GPIO_Init+0xec>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a34      	ldr	r2, [pc, #208]	; (80023bc <MX_GPIO_Init+0xec>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <MX_GPIO_Init+0xec>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <MX_GPIO_Init+0xec>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <MX_GPIO_Init+0xec>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <MX_GPIO_Init+0xec>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <MX_GPIO_Init+0xec>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <MX_GPIO_Init+0xec>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <MX_GPIO_Init+0xec>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002332:	4823      	ldr	r0, [pc, #140]	; (80023c0 <MX_GPIO_Init+0xf0>)
 8002334:	f001 fda7 	bl	8003e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8002338:	2200      	movs	r2, #0
 800233a:	f64f 61c3 	movw	r1, #65219	; 0xfec3
 800233e:	4821      	ldr	r0, [pc, #132]	; (80023c4 <MX_GPIO_Init+0xf4>)
 8002340:	f001 fda1 	bl	8003e86 <HAL_GPIO_WritePin>
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Y3_Pin|Y4_Pin|Display_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2302      	movs	r3, #2
 8002354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	4619      	mov	r1, r3
 800235c:	4818      	ldr	r0, [pc, #96]	; (80023c0 <MX_GPIO_Init+0xf0>)
 800235e:	f001 fc21 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y1_Pin Y2_Pin Display_RW_Pin Display_EN_Pin
                           Display_D4_Pin Display_D5_Pin Display_D6_Pin Display_D7_Pin
                           Y3_Pin Y4_Pin Display_RS_Pin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Display_RW_Pin|Display_EN_Pin
 8002362:	f64f 63c3 	movw	r3, #65219	; 0xfec3
 8002366:	613b      	str	r3, [r7, #16]
                          |Display_D4_Pin|Display_D5_Pin|Display_D6_Pin|Display_D7_Pin
                          |Y3_Pin|Y4_Pin|Display_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2302      	movs	r3, #2
 8002372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4619      	mov	r1, r3
 800237a:	4812      	ldr	r0, [pc, #72]	; (80023c4 <MX_GPIO_Init+0xf4>)
 800237c:	f001 fc12 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Decrease_Pin Button_Increase_Pin Button_Cancelar_Pin Button_Confirmar_Pin */
  GPIO_InitStruct.Pin = Button_Decrease_Pin|Button_Increase_Pin|Button_Cancelar_Pin|Button_Confirmar_Pin;
 8002380:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	4619      	mov	r1, r3
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <MX_GPIO_Init+0xf8>)
 8002396:	f001 fc05 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1_Bit_0_Pin BN1_bit_1_Pin BN1_bit_2_Pin Inserir_Capsula_Pin */
  GPIO_InitStruct.Pin = BN1_Bit_0_Pin|BN1_bit_1_Pin|BN1_bit_2_Pin|Inserir_Capsula_Pin;
 800239a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800239e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_GPIO_Init+0xf4>)
 80023b0:	f001 fbf8 	bl	8003ba4 <HAL_GPIO_Init>

}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40010c00 	.word	0x40010c00
 80023c8:	40010800 	.word	0x40010800

080023cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <STATE_Show_Clock>:
 *
 * @retval CAPSULE_Recipe_TypeDef capsula inserida
 *
 */
CAPSULE_Recipe_TypeDef STATE_Show_Clock()
{
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	b090      	sub	sp, #64	; 0x40
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	char hour[10];
	CAPSULE_Recipe_TypeDef capsule = {
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2220      	movs	r2, #32
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 f9b1 	bl	8005750 <memset>
			.capsule_type = NONE_CAPSULE_TYPE,
	};
	uint8_t insert_button = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	while(1)
	{
		UTILS_get_Hour(hour);
 80023f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fb69 	bl	8002ad0 <UTILS_get_Hour>
		LCD_Clear();
 80023fe:	f7ff f8d9 	bl	80015b4 <LCD_Clear>
		LCD_Write_Buffer(hour);
 8002402:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f85a 	bl	80014c0 <LCD_Write_Buffer>

		BUTTON_CONFIRMAR(confirm_button);
 800240c:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <STATE_Show_Clock+0xa0>)
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002416:	e883 0003 	stmia.w	r3, {r0, r1}
		insert_button = HAL_GPIO_ReadPin(confirm_button.gpio_class, confirm_button.gpio_pin);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	461a      	mov	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	b29b      	uxth	r3, r3
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f001 fd17 	bl	8003e58 <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		//se botão de inserir capsula for pressionado, verifica  qual é a receita
		if(insert_button)
 8002430:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <STATE_Show_Clock+0x6a>
		{
			capsule = CAPSULE_Verify_Insertion();
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fa7d 	bl	800193c <CAPSULE_Verify_Insertion>
		}

		//se tiver uma cápsula, retorna
		if(capsule.capsule_type != NONE_CAPSULE_TYPE ){
 8002442:	7d3b      	ldrb	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <STATE_Show_Clock+0x86>

			return capsule;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	461d      	mov	r5, r3
 800244c:	f107 0414 	add.w	r4, r7, #20
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002458:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800245c:	e008      	b.n	8002470 <STATE_Show_Clock+0x98>
		}
		DWT_Delay_us(300000);
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <STATE_Show_Clock+0xa4>)
 8002460:	f7fe ff98 	bl	8001394 <DWT_Delay_us>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002464:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <STATE_Show_Clock+0xa8>)
 800246a:	f001 fd24 	bl	8003eb6 <HAL_GPIO_TogglePin>
	{
 800246e:	e7c1      	b.n	80023f4 <STATE_Show_Clock+0x1c>
	}
}
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	3740      	adds	r7, #64	; 0x40
 8002474:	46bd      	mov	sp, r7
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	08007bfc 	.word	0x08007bfc
 800247c:	000493e0 	.word	0x000493e0
 8002480:	40011000 	.word	0x40011000

08002484 <STATE_Starting_Process>:
 * @retval CAPSULE_Recipe_TypeDef receita da capsula inserida, se cancelar usuário cancelar inicio, retorna vazia
 * @param capsule capsula que foi inserida
 * @param hadc objeto do ADC_1
 */
CAPSULE_Recipe_TypeDef STATE_Starting_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 8002484:	b084      	sub	sp, #16
 8002486:	b5b0      	push	{r4, r5, r7, lr}
 8002488:	b0a2      	sub	sp, #136	; 0x88
 800248a:	af0a      	add	r7, sp, #40	; 0x28
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t confirm_button = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	LCD_Clear();
 800249c:	f7ff f88a 	bl	80015b4 <LCD_Clear>
	LCD_Write_Buffer(capsule.capsule_name);
 80024a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024a4:	3302      	adds	r3, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f80a 	bl	80014c0 <LCD_Write_Buffer>
	LCD_Seccond_Line();
 80024ac:	f7ff f88a 	bl	80015c4 <LCD_Seccond_Line>

	GPIO_PinState pin_state;

	//se for apenas água, escolhe entre quente, natural e gelada.
	if(capsule.capsule_type == RECIPE_WATER)
 80024b0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d171      	bne.n	800259c <STATE_Starting_Process+0x118>
	{
		//vetor para mostrar no display
		char choices[CHOICES_NUMBER][16] = {"Natural", "Gelada", "Quente"};
 80024b8:	4bac      	ldr	r3, [pc, #688]	; (800276c <STATE_Starting_Process+0x2e8>)
 80024ba:	f107 0408 	add.w	r4, r7, #8
 80024be:	461d      	mov	r5, r3
 80024c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//vetor para obter qual informação foi escolhida
		WATER_Type choices_values[CHOICES_NUMBER] = {NATURAL_WATER, ICE_WATER, HOT_WATER};
 80024d0:	4aa7      	ldr	r2, [pc, #668]	; (8002770 <STATE_Starting_Process+0x2ec>)
 80024d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	4611      	mov	r1, r2
 80024da:	8019      	strh	r1, [r3, #0]
 80024dc:	3302      	adds	r3, #2
 80024de:	0c12      	lsrs	r2, r2, #16
 80024e0:	701a      	strb	r2, [r3, #0]

		//vetor para obter qual temparatura foi escolhida, perguntar para Professor
		uint32_t choices_values_temp[CHOICES_NUMBER] = {0, 20, 60};
 80024e2:	4aa4      	ldr	r2, [pc, #656]	; (8002774 <STATE_Starting_Process+0x2f0>)
 80024e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}


		uint8_t choice_index = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while(1){

			LCD_Clear();
 80024f4:	f7ff f85e 	bl	80015b4 <LCD_Clear>
			LCD_Write_Buffer(choices[choice_index]);
 80024f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80024fc:	f107 0208 	add.w	r2, r7, #8
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4413      	add	r3, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe ffdb 	bl	80014c0 <LCD_Write_Buffer>

			Pressed_Type pressed_type = Get_Button_Pressed();
 800250a:	f7ff fc2d 	bl	8001d68 <Get_Button_Pressed>
 800250e:	4603      	mov	r3, r0
 8002510:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			switch (pressed_type) {
 8002514:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002518:	2b03      	cmp	r3, #3
 800251a:	d83d      	bhi.n	8002598 <STATE_Starting_Process+0x114>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <STATE_Starting_Process+0xa0>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002535 	.word	0x08002535
 8002528:	0800255d 	.word	0x0800255d
 800252c:	08002565 	.word	0x08002565
 8002530:	0800257f 	.word	0x0800257f
				case CONFIRM_PRESSED:
					capsule.water_type = choices_values[choice_index];
 8002534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002538:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800253c:	4413      	add	r3, r2
 800253e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002542:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					capsule.water_temp = choices_values_temp[choice_index];
 8002546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002550:	4413      	add	r3, r2
 8002552:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					goto choiced;
 800255a:	e01f      	b.n	800259c <STATE_Starting_Process+0x118>
					break;
				case CANCEL_PRESSED:
					capsule.capsule_type = NONE_CAPSULE_TYPE;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					goto choiced;
 8002562:	e01b      	b.n	800259c <STATE_Starting_Process+0x118>
					break;
				case INCREASE_PRESSED:
					choice_index = (choice_index < CHOICES_NUMBER - 1) ? choice_index + 1 : 0;
 8002564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002568:	2b01      	cmp	r3, #1
 800256a:	d804      	bhi.n	8002576 <STATE_Starting_Process+0xf2>
 800256c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002570:	3301      	adds	r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e000      	b.n	8002578 <STATE_Starting_Process+0xf4>
 8002576:	2300      	movs	r3, #0
 8002578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 800257c:	e00d      	b.n	800259a <STATE_Starting_Process+0x116>
				case DECREASE_PRESSED:
					choice_index = (choice_index > 0) ? choice_index - 1 : CHOICES_NUMBER - 1;
 800257e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <STATE_Starting_Process+0x10c>
 8002586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800258a:	3b01      	subs	r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e000      	b.n	8002592 <STATE_Starting_Process+0x10e>
 8002590:	2302      	movs	r3, #2
 8002592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					break;
 8002596:	e000      	b.n	800259a <STATE_Starting_Process+0x116>
				default:
					break;
 8002598:	bf00      	nop
		while(1){
 800259a:	e7ab      	b.n	80024f4 <STATE_Starting_Process+0x70>
		}
		choiced: ;
	}


	LCD_Clear();
 800259c:	f7ff f80a 	bl	80015b4 <LCD_Clear>
	LCD_Write_Buffer("S --> Iniciar.");
 80025a0:	4875      	ldr	r0, [pc, #468]	; (8002778 <STATE_Starting_Process+0x2f4>)
 80025a2:	f7fe ff8d 	bl	80014c0 <LCD_Write_Buffer>
	LCD_Seccond_Line();
 80025a6:	f7ff f80d 	bl	80015c4 <LCD_Seccond_Line>
	LCD_Write_Buffer("C --> Cancelar.");
 80025aa:	4874      	ldr	r0, [pc, #464]	; (800277c <STATE_Starting_Process+0x2f8>)
 80025ac:	f7fe ff88 	bl	80014c0 <LCD_Write_Buffer>

	int32_t sensor_signal = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	65bb      	str	r3, [r7, #88]	; 0x58
	float avg_value_P1 = 0;
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	float avg_value_P2 = 0;
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48

	int32_t var = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	657b      	str	r3, [r7, #84]	; 0x54
	for (var = 0; var < 32; ++var) {
 80025c4:	2300      	movs	r3, #0
 80025c6:	657b      	str	r3, [r7, #84]	; 0x54
 80025c8:	e016      	b.n	80025f8 <STATE_Starting_Process+0x174>
		sensor_signal += ADC_GetValue(hadc, P1);
 80025ca:	2300      	movs	r3, #0
 80025cc:	9308      	str	r3, [sp, #32]
 80025ce:	466d      	mov	r5, sp
 80025d0:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80025d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80025e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e6:	f7fe fe73 	bl	80012d0 <ADC_GetValue>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ee:	4413      	add	r3, r2
 80025f0:	65bb      	str	r3, [r7, #88]	; 0x58
	for (var = 0; var < 32; ++var) {
 80025f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f4:	3301      	adds	r3, #1
 80025f6:	657b      	str	r3, [r7, #84]	; 0x54
 80025f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fa:	2b1f      	cmp	r3, #31
 80025fc:	dde5      	ble.n	80025ca <STATE_Starting_Process+0x146>
	}

	avg_value_P1 = sensor_signal / var;
 80025fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002602:	fb92 f3f3 	sdiv	r3, r2, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fa5c 	bl	8000ac4 <__aeabi_i2f>
 800260c:	4603      	mov	r3, r0
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c

	//se P1 passar do nivel considerado saturado....
	if(avg_value_P1 > 3000){
 8002610:	495b      	ldr	r1, [pc, #364]	; (8002780 <STATE_Starting_Process+0x2fc>)
 8002612:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002614:	f7fe fc66 	bl	8000ee4 <__aeabi_fcmpgt>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01d      	beq.n	800265a <STATE_Starting_Process+0x1d6>
		LCD_Clear();
 800261e:	f7fe ffc9 	bl	80015b4 <LCD_Clear>
		LCD_Write_Buffer("P1 SATURADO!");
 8002622:	4858      	ldr	r0, [pc, #352]	; (8002784 <STATE_Starting_Process+0x300>)
 8002624:	f7fe ff4c 	bl	80014c0 <LCD_Write_Buffer>
		HAL_Delay(2000);
 8002628:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800262c:	f000 fb22 	bl	8002c74 <HAL_Delay>
		RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 8002630:	4b55      	ldr	r3, [pc, #340]	; (8002788 <STATE_Starting_Process+0x304>)
 8002632:	f107 0408 	add.w	r4, r7, #8
 8002636:	461d      	mov	r5, r3
 8002638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return none_capsule;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	461d      	mov	r5, r3
 8002648:	f107 0408 	add.w	r4, r7, #8
 800264c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002654:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002658:	e080      	b.n	800275c <STATE_Starting_Process+0x2d8>
	}

	//se receita precisar de CO2, verifica se está P2 saturado
	if(capsule.co2_time > 0)
 800265a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265e:	2b00      	cmp	r3, #0
 8002660:	d04c      	beq.n	80026fc <STATE_Starting_Process+0x278>
	{
		sensor_signal = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	65bb      	str	r3, [r7, #88]	; 0x58
		for (var = 0; var < 32; ++var) {
 8002666:	2300      	movs	r3, #0
 8002668:	657b      	str	r3, [r7, #84]	; 0x54
 800266a:	e016      	b.n	800269a <STATE_Starting_Process+0x216>
			sensor_signal += ADC_GetValue(hadc, P2);
 800266c:	2303      	movs	r3, #3
 800266e:	9308      	str	r3, [sp, #32]
 8002670:	466d      	mov	r5, sp
 8002672:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8002676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800267e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002682:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002688:	f7fe fe22 	bl	80012d0 <ADC_GetValue>
 800268c:	4602      	mov	r2, r0
 800268e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002690:	4413      	add	r3, r2
 8002692:	65bb      	str	r3, [r7, #88]	; 0x58
		for (var = 0; var < 32; ++var) {
 8002694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002696:	3301      	adds	r3, #1
 8002698:	657b      	str	r3, [r7, #84]	; 0x54
 800269a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269c:	2b1f      	cmp	r3, #31
 800269e:	dde5      	ble.n	800266c <STATE_Starting_Process+0x1e8>
		}

		avg_value_P2 = sensor_signal / var;
 80026a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fa0b 	bl	8000ac4 <__aeabi_i2f>
 80026ae:	4603      	mov	r3, r0
 80026b0:	64bb      	str	r3, [r7, #72]	; 0x48

		//se P2 passar do nivel considerado saturado....
		if(avg_value_P2 > 3000){
 80026b2:	4933      	ldr	r1, [pc, #204]	; (8002780 <STATE_Starting_Process+0x2fc>)
 80026b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026b6:	f7fe fc15 	bl	8000ee4 <__aeabi_fcmpgt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01d      	beq.n	80026fc <STATE_Starting_Process+0x278>
			LCD_Clear();
 80026c0:	f7fe ff78 	bl	80015b4 <LCD_Clear>
			LCD_Write_Buffer("P2 SATURADO!");
 80026c4:	4831      	ldr	r0, [pc, #196]	; (800278c <STATE_Starting_Process+0x308>)
 80026c6:	f7fe fefb 	bl	80014c0 <LCD_Write_Buffer>
			HAL_Delay(2000);
 80026ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026ce:	f000 fad1 	bl	8002c74 <HAL_Delay>
			RECIPE_NONE_CAPSULE_TYPE_DATA(none_capsule);
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <STATE_Starting_Process+0x304>)
 80026d4:	f107 0408 	add.w	r4, r7, #8
 80026d8:	461d      	mov	r5, r3
 80026da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return none_capsule;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	461d      	mov	r5, r3
 80026ea:	f107 0408 	add.w	r4, r7, #8
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80026fa:	e02f      	b.n	800275c <STATE_Starting_Process+0x2d8>
	}

	while(1)
	{

		Pressed_Type pressed_type = Get_Button_Pressed();
 80026fc:	f7ff fb34 	bl	8001d68 <Get_Button_Pressed>
 8002700:	4603      	mov	r3, r0
 8002702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if(pressed_type == CONFIRM_PRESSED)
 8002706:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <STATE_Starting_Process+0x2a0>
		{
			return capsule;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	461d      	mov	r5, r3
 8002712:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800271e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002722:	e01b      	b.n	800275c <STATE_Starting_Process+0x2d8>
		}
		if(pressed_type == CANCEL_PRESSED)
 8002724:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10d      	bne.n	8002748 <STATE_Starting_Process+0x2c4>
		{
			capsule.capsule_type = NONE_CAPSULE_TYPE;
 800272c:	2300      	movs	r3, #0
 800272e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			return capsule;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	461d      	mov	r5, r3
 8002736:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800273a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002742:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002746:	e009      	b.n	800275c <STATE_Starting_Process+0x2d8>
		}

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800274c:	4810      	ldr	r0, [pc, #64]	; (8002790 <STATE_Starting_Process+0x30c>)
 800274e:	f001 fbb2 	bl	8003eb6 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8002752:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002756:	f000 fa8d 	bl	8002c74 <HAL_Delay>
	{
 800275a:	e7cf      	b.n	80026fc <STATE_Starting_Process+0x278>
	}
}
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	3760      	adds	r7, #96	; 0x60
 8002760:	46bd      	mov	sp, r7
 8002762:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002766:	b004      	add	sp, #16
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	08007c44 	.word	0x08007c44
 8002770:	08007c74 	.word	0x08007c74
 8002774:	08007c78 	.word	0x08007c78
 8002778:	08007c04 	.word	0x08007c04
 800277c:	08007c14 	.word	0x08007c14
 8002780:	453b8000 	.word	0x453b8000
 8002784:	08007c24 	.word	0x08007c24
 8002788:	08007c84 	.word	0x08007c84
 800278c:	08007c34 	.word	0x08007c34
 8002790:	40011000 	.word	0x40011000

08002794 <STATE_Started_Process>:
 * @retval CAPSULE_Recipe_TypeDef receita da capsula inserida, se cancelar usuário cancelar inicio, retorna vazia
 * @param capsule capsula que foi inserida
 * @param hadc objeto do ADC_1
 */
void STATE_Started_Process(CAPSULE_Recipe_TypeDef capsule, ADC_HandleTypeDef hadc)
{
 8002794:	b084      	sub	sp, #16
 8002796:	b5b0      	push	{r4, r5, r7, lr}
 8002798:	b092      	sub	sp, #72	; 0x48
 800279a:	af10      	add	r7, sp, #64	; 0x40
 800279c:	f107 0418 	add.w	r4, r7, #24
 80027a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD_Clear();
 80027a4:	f7fe ff06 	bl	80015b4 <LCD_Clear>
	LCD_Write_Buffer("Iniciando...");
 80027a8:	4813      	ldr	r0, [pc, #76]	; (80027f8 <STATE_Started_Process+0x64>)
 80027aa:	f7fe fe89 	bl	80014c0 <LCD_Write_Buffer>
	HAL_Delay(1500);
 80027ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80027b2:	f000 fa5f 	bl	8002c74 <HAL_Delay>

	uint8_t confirm_button = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		CONTROLLER_Execute(hadc, capsule);
 80027ba:	ac08      	add	r4, sp, #32
 80027bc:	f107 0518 	add.w	r5, r7, #24
 80027c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027cc:	466d      	mov	r5, sp
 80027ce:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80027d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e4:	f7ff f980 	bl	8001ae8 <CONTROLLER_Execute>

		return;
 80027e8:	bf00      	nop

	}
}
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80027f2:	b004      	add	sp, #16
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	08007ca4 	.word	0x08007ca4

080027fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_MspInit+0x5c>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	4a14      	ldr	r2, [pc, #80]	; (8002858 <HAL_MspInit+0x5c>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6193      	str	r3, [r2, #24]
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_MspInit+0x5c>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_MspInit+0x5c>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_MspInit+0x5c>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	61d3      	str	r3, [r2, #28]
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_MspInit+0x5c>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_MspInit+0x60>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_MspInit+0x60>)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000

08002860 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a28      	ldr	r2, [pc, #160]	; (800291c <HAL_ADC_MspInit+0xbc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d149      	bne.n	8002914 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_ADC_MspInit+0xc0>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a26      	ldr	r2, [pc, #152]	; (8002920 <HAL_ADC_MspInit+0xc0>)
 8002886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_ADC_MspInit+0xc0>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_ADC_MspInit+0xc0>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_ADC_MspInit+0xc0>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_ADC_MspInit+0xc0>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC1_IN4_____T1_Pin|ADC1_IN5_____T2_Pin|ADC1_IN6_____P1_Pin|ADC1_IN7_____P2_Pin;
 80028b0:	23f0      	movs	r3, #240	; 0xf0
 80028b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b4:	2303      	movs	r3, #3
 80028b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4619      	mov	r1, r3
 80028be:	4819      	ldr	r0, [pc, #100]	; (8002924 <HAL_ADC_MspInit+0xc4>)
 80028c0:	f001 f970 	bl	8003ba4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_ADC_MspInit+0xcc>)
 80028c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028f8:	480b      	ldr	r0, [pc, #44]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 80028fa:	f000 ff65 	bl	80037c8 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002904:	f7ff fd62 	bl	80023cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 800290c:	621a      	str	r2, [r3, #32]
 800290e:	4a06      	ldr	r2, [pc, #24]	; (8002928 <HAL_ADC_MspInit+0xc8>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002914:	bf00      	nop
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40012400 	.word	0x40012400
 8002920:	40021000 	.word	0x40021000
 8002924:	40010800 	.word	0x40010800
 8002928:	200002d8 	.word	0x200002d8
 800292c:	40020008 	.word	0x40020008

08002930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_TIM_Base_MspInit+0x58>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_TIM_Base_MspInit+0x5c>)
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_TIM_Base_MspInit+0x5c>)
 8002948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800294c:	6193      	str	r3, [r2, #24]
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_TIM_Base_MspInit+0x5c>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800295a:	e010      	b.n	800297e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d10b      	bne.n	800297e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_TIM_Base_MspInit+0x5c>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_TIM_Base_MspInit+0x5c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	61d3      	str	r3, [r2, #28]
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_TIM_Base_MspInit+0x5c>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d117      	bne.n	80029e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b0:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_TIM_MspPostInit+0x58>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_TIM_MspPostInit+0x58>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_TIM_MspPostInit+0x58>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM2_CH1_____R1_Pin|TIM2_CH2_____CP1_Pin|TIM2_CH3_____B1_Pin;
 80029c8:	2307      	movs	r3, #7
 80029ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4619      	mov	r1, r3
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <HAL_TIM_MspPostInit+0x5c>)
 80029dc:	f001 f8e2 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029e0:	bf00      	nop
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40010800 	.word	0x40010800

080029f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <HardFault_Handler+0x4>

08002a02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <MemManage_Handler+0x4>

08002a08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <BusFault_Handler+0x4>

08002a0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <UsageFault_Handler+0x4>

08002a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3c:	f000 f8fe 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <DMA1_Channel1_IRQHandler+0x10>)
 8002a4a:	f000 ff77 	bl	800393c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200002d8 	.word	0x200002d8

08002a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <_sbrk+0x5c>)
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <_sbrk+0x60>)
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <_sbrk+0x64>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <_sbrk+0x64>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <_sbrk+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d207      	bcs.n	8002a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a88:	f002 fd6a 	bl	8005560 <__errno>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	230c      	movs	r3, #12
 8002a90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e009      	b.n	8002aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <_sbrk+0x64>)
 8002aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20005000 	.word	0x20005000
 8002ab8:	00000400 	.word	0x00000400
 8002abc:	20000268 	.word	0x20000268
 8002ac0:	200003b8 	.word	0x200003b8

08002ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <UTILS_get_Hour>:
 * Na lihna acima, deve-se passar por parâmetro na função time() o valor do tempo atual;
 *
 * @param [out]hour vetor de char que será armazenado a hora
 */
void UTILS_get_Hour(char* hour)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	  struct tm *sTm;

	  time_t now = time (0);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f003 fd11 	bl	8006500 <time>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  sTm = gmtime (&now);
 8002ae6:	f107 0308 	add.w	r3, r7, #8
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fd3e 	bl	800556c <gmtime>
 8002af0:	6178      	str	r0, [r7, #20]

	  strftime (hour, 9, "%H:%M:%S", sTm);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <UTILS_get_Hour+0x38>)
 8002af6:	2109      	movs	r1, #9
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f003 fc4d 	bl	8006398 <strftime>
	  return;
 8002afe:	bf00      	nop
}
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	08007cb4 	.word	0x08007cb4
 8002b0c:	00000000 	.word	0x00000000

08002b10 <UTILS_To_Temp>:
 *
 * @retval uint32_t temperatura
 * @param value_adc valor lido em um canal do adc
 */
uint32_t UTILS_To_Temp(uint32_t value_adc)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	uint32_t temperature = (value_adc * ADC_SCALE) * 25;
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fd fc6d 	bl	80003f8 <__aeabi_ui2d>
 8002b1e:	a30e      	add	r3, pc, #56	; (adr r3, 8002b58 <UTILS_To_Temp+0x48>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fce2 	bl	80004ec <__aeabi_dmul>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4621      	mov	r1, r4
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <UTILS_To_Temp+0x50>)
 8002b36:	f7fd fcd9 	bl	80004ec <__aeabi_dmul>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4621      	mov	r1, r4
 8002b42:	f7fd fee5 	bl	8000910 <__aeabi_d2uiz>
 8002b46:	4603      	mov	r3, r0
 8002b48:	60fb      	str	r3, [r7, #12]
	return temperature;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	f3af 8000 	nop.w
 8002b58:	e734d9b4 	.word	0xe734d9b4
 8002b5c:	3f4a680c 	.word	0x3f4a680c
 8002b60:	40390000 	.word	0x40390000

08002b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b66:	e003      	b.n	8002b70 <LoopCopyDataInit>

08002b68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b6e:	3104      	adds	r1, #4

08002b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b70:	480a      	ldr	r0, [pc, #40]	; (8002b9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b78:	d3f6      	bcc.n	8002b68 <CopyDataInit>
  ldr r2, =_sbss
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b7c:	e002      	b.n	8002b84 <LoopFillZerobss>

08002b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b80:	f842 3b04 	str.w	r3, [r2], #4

08002b84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b88:	d3f9      	bcc.n	8002b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b8a:	f7ff ff9b 	bl	8002ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b8e:	f002 fdab 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b92:	f7ff f953 	bl	8001e3c <main>
  bx lr
 8002b96:	4770      	bx	lr
  ldr r3, =_sidata
 8002b98:	080081f8 	.word	0x080081f8
  ldr r0, =_sdata
 8002b9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ba0:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 8002ba4:	20000244 	.word	0x20000244
  ldr r3, = _ebss
 8002ba8:	200003b4 	.word	0x200003b4

08002bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <ADC1_2_IRQHandler>
	...

08002bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_Init+0x28>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_Init+0x28>)
 8002bba:	f043 0310 	orr.w	r3, r3, #16
 8002bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 fdbf 	bl	8003744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f000 f808 	bl	8002bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bcc:	f7ff fe16 	bl	80027fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000

08002bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_InitTick+0x54>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x58>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fdd7 	bl	80037ae <HAL_SYSTICK_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00e      	b.n	8002c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d80a      	bhi.n	8002c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f000 fd9f 	bl	800375a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_InitTick+0x5c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000004 	.word	0x20000004
 8002c34:	2000000c 	.word	0x2000000c
 8002c38:	20000008 	.word	0x20000008

08002c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_IncTick+0x20>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <HAL_IncTick+0x20>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	2000000c 	.word	0x2000000c
 8002c5c:	200003ac 	.word	0x200003ac

08002c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <HAL_GetTick+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	200003ac 	.word	0x200003ac

08002c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7ff fff0 	bl	8002c60 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d005      	beq.n	8002c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_Delay+0x40>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c9a:	bf00      	nop
 8002c9c:	f7ff ffe0 	bl	8002c60 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d8f7      	bhi.n	8002c9c <HAL_Delay+0x28>
  {
  }
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000000c 	.word	0x2000000c

08002cb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0be      	b.n	8002e58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fdb2 	bl	8002860 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fb19 	bl	8003334 <ADC_ConversionStop_Disable>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 8099 	bne.w	8002e46 <HAL_ADC_Init+0x18e>
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8095 	bne.w	8002e46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d24:	f023 0302 	bic.w	r3, r3, #2
 8002d28:	f043 0202 	orr.w	r2, r3, #2
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7b1b      	ldrb	r3, [r3, #12]
 8002d3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d50:	d003      	beq.n	8002d5a <HAL_ADC_Init+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <HAL_ADC_Init+0xa8>
 8002d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5e:	e000      	b.n	8002d62 <HAL_ADC_Init+0xaa>
 8002d60:	2300      	movs	r3, #0
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7d1b      	ldrb	r3, [r3, #20]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d119      	bne.n	8002da4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7b1b      	ldrb	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	035a      	lsls	r2, r3, #13
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e00b      	b.n	8002da4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_ADC_Init+0x1a8>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd4:	d003      	beq.n	8002dde <HAL_ADC_Init+0x126>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d104      	bne.n	8002de8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	051b      	lsls	r3, r3, #20
 8002de6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_ADC_Init+0x1ac>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d10b      	bne.n	8002e24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	f043 0201 	orr.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e22:	e018      	b.n	8002e56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	f023 0312 	bic.w	r3, r3, #18
 8002e2c:	f043 0210 	orr.w	r2, r3, #16
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e44:	e007      	b.n	8002e56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	ffe1f7fd 	.word	0xffe1f7fd
 8002e64:	ff1f0efe 	.word	0xff1f0efe

08002e68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Stop+0x1a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e01a      	b.n	8002eb8 <HAL_ADC_Stop+0x50>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa52 	bl	8003334 <ADC_ConversionStop_Disable>
 8002e90:	4603      	mov	r3, r0
 8002e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a64      	ldr	r2, [pc, #400]	; (8003068 <HAL_ADC_Start_DMA+0x1a8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_ADC_Start_DMA+0x24>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a63      	ldr	r2, [pc, #396]	; (800306c <HAL_ADC_Start_DMA+0x1ac>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d106      	bne.n	8002ef2 <HAL_ADC_Start_DMA+0x32>
 8002ee4:	4b60      	ldr	r3, [pc, #384]	; (8003068 <HAL_ADC_Start_DMA+0x1a8>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 80b3 	bne.w	8003058 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x40>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0ae      	b.n	800305e <HAL_ADC_Start_DMA+0x19e>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f9c1 	bl	8003290 <ADC_Enable>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 809a 	bne.w	800304e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a4e      	ldr	r2, [pc, #312]	; (800306c <HAL_ADC_Start_DMA+0x1ac>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d105      	bne.n	8002f44 <HAL_ADC_Start_DMA+0x84>
 8002f38:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <HAL_ADC_Start_DMA+0x1a8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d115      	bne.n	8002f70 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d026      	beq.n	8002fac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f6e:	e01d      	b.n	8002fac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a39      	ldr	r2, [pc, #228]	; (8003068 <HAL_ADC_Start_DMA+0x1a8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_ADC_Start_DMA+0xd0>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a38      	ldr	r2, [pc, #224]	; (800306c <HAL_ADC_Start_DMA+0x1ac>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10d      	bne.n	8002fac <HAL_ADC_Start_DMA+0xec>
 8002f90:	4b35      	ldr	r3, [pc, #212]	; (8003068 <HAL_ADC_Start_DMA+0x1a8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f023 0206 	bic.w	r2, r3, #6
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a25      	ldr	r2, [pc, #148]	; (8003070 <HAL_ADC_Start_DMA+0x1b0>)
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a24      	ldr	r2, [pc, #144]	; (8003074 <HAL_ADC_Start_DMA+0x1b4>)
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a23      	ldr	r2, [pc, #140]	; (8003078 <HAL_ADC_Start_DMA+0x1b8>)
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003004:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a18      	ldr	r0, [r3, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	334c      	adds	r3, #76	; 0x4c
 8003010:	4619      	mov	r1, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f000 fc31 	bl	800387c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003024:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003028:	d108      	bne.n	800303c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003038:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800303a:	e00f      	b.n	800305c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800304a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800304c:	e006      	b.n	800305c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003056:	e001      	b.n	800305c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800305c:	7dfb      	ldrb	r3, [r7, #23]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40012400 	.word	0x40012400
 800306c:	40012800 	.word	0x40012800
 8003070:	080033a9 	.word	0x080033a9
 8003074:	08003425 	.word	0x08003425
 8003078:	08003441 	.word	0x08003441

0800307c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x20>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0dc      	b.n	800327a <HAL_ADC_ConfigChannel+0x1da>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d81c      	bhi.n	800310a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	221f      	movs	r2, #31
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4019      	ands	r1, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b05      	subs	r3, #5
 80030fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
 8003108:	e03c      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d81c      	bhi.n	800314c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	3b23      	subs	r3, #35	; 0x23
 8003124:	221f      	movs	r2, #31
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	4019      	ands	r1, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	3b23      	subs	r3, #35	; 0x23
 800313e:	fa00 f203 	lsl.w	r2, r0, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
 800314a:	e01b      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b41      	subs	r3, #65	; 0x41
 800315e:	221f      	movs	r2, #31
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	4019      	ands	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b41      	subs	r3, #65	; 0x41
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b09      	cmp	r3, #9
 800318a:	d91c      	bls.n	80031c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68d9      	ldr	r1, [r3, #12]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	3b1e      	subs	r3, #30
 800319e:	2207      	movs	r2, #7
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4019      	ands	r1, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6898      	ldr	r0, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	e019      	b.n	80031fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6919      	ldr	r1, [r3, #16]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	2207      	movs	r2, #7
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4019      	ands	r1, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6898      	ldr	r0, [r3, #8]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	fa00 f203 	lsl.w	r2, r0, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d003      	beq.n	800320a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003206:	2b11      	cmp	r3, #17
 8003208:	d132      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_ADC_ConfigChannel+0x1e4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d125      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d126      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003230:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d11a      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_ADC_ConfigChannel+0x1e8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <HAL_ADC_ConfigChannel+0x1ec>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9a      	lsrs	r2, r3, #18
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003250:	e002      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x1b2>
 800325e:	e007      	b.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012400 	.word	0x40012400
 8003288:	20000004 	.word	0x20000004
 800328c:	431bde83 	.word	0x431bde83

08003290 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d039      	beq.n	8003322 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <ADC_Enable+0x9c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <ADC_Enable+0xa0>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032cc:	e002      	b.n	80032d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f9      	bne.n	80032ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032da:	f7ff fcc1 	bl	8002c60 <HAL_GetTick>
 80032de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032e0:	e018      	b.n	8003314 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032e2:	f7ff fcbd 	bl	8002c60 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d911      	bls.n	8003314 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	f043 0210 	orr.w	r2, r3, #16
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e007      	b.n	8003324 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d1df      	bne.n	80032e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000004 	.word	0x20000004
 8003330:	431bde83 	.word	0x431bde83

08003334 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d127      	bne.n	800339e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800335e:	f7ff fc7f 	bl	8002c60 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003364:	e014      	b.n	8003390 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003366:	f7ff fc7b 	bl	8002c60 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d90d      	bls.n	8003390 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f043 0210 	orr.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d0e3      	beq.n	8003366 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d127      	bne.n	8003412 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033dc:	d115      	bne.n	800340a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d111      	bne.n	800340a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7fd ff84 	bl	8001318 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003410:	e004      	b.n	800341c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff fe22 	bl	800307c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	f043 0204 	orr.w	r2, r3, #4
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff fe11 	bl	800308e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADCEx_Calibration_Start+0x1e>
 800348e:	2302      	movs	r3, #2
 8003490:	e086      	b.n	80035a0 <HAL_ADCEx_Calibration_Start+0x12c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff4a 	bl	8003334 <ADC_ConversionStop_Disable>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d175      	bne.n	8003596 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034b2:	f023 0302 	bic.w	r3, r3, #2
 80034b6:	f043 0202 	orr.w	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034be:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <HAL_ADCEx_Calibration_Start+0x134>)
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	2002      	movs	r0, #2
 80034c4:	f001 f9ce 	bl	8004864 <HAL_RCCEx_GetPeriphCLKFreq>
 80034c8:	4603      	mov	r3, r0
 80034ca:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034ce:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034d0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034d2:	e002      	b.n	80034da <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff fed5 	bl	8003290 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0208 	orr.w	r2, r2, #8
 80034f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034f6:	f7ff fbb3 	bl	8002c60 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034fc:	e014      	b.n	8003528 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034fe:	f7ff fbaf 	bl	8002c60 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b0a      	cmp	r3, #10
 800350a:	d90d      	bls.n	8003528 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f023 0312 	bic.w	r3, r3, #18
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e03b      	b.n	80035a0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e3      	bne.n	80034fe <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0204 	orr.w	r2, r2, #4
 8003544:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003546:	f7ff fb8b 	bl	8002c60 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800354c:	e014      	b.n	8003578 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800354e:	f7ff fb87 	bl	8002c60 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b0a      	cmp	r3, #10
 800355a:	d90d      	bls.n	8003578 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f023 0312 	bic.w	r3, r3, #18
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e013      	b.n	80035a0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e3      	bne.n	800354e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	f043 0201 	orr.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800359e:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}
 80035a8:	20000004 	.word	0x20000004

080035ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c8:	4013      	ands	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035de:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	60d3      	str	r3, [r2, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <__NVIC_GetPriorityGrouping+0x18>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f003 0307 	and.w	r3, r3, #7
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0b      	blt.n	800363a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4906      	ldr	r1, [pc, #24]	; (8003644 <__NVIC_EnableIRQ+0x34>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100

08003648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db0a      	blt.n	8003672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	490c      	ldr	r1, [pc, #48]	; (8003694 <__NVIC_SetPriority+0x4c>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	440b      	add	r3, r1
 800366c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003670:	e00a      	b.n	8003688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <__NVIC_SetPriority+0x50>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3b04      	subs	r3, #4
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	440b      	add	r3, r1
 8003686:	761a      	strb	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f1c3 0307 	rsb	r3, r3, #7
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf28      	it	cs
 80036ba:	2304      	movcs	r3, #4
 80036bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d902      	bls.n	80036cc <NVIC_EncodePriority+0x30>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3b03      	subs	r3, #3
 80036ca:	e000      	b.n	80036ce <NVIC_EncodePriority+0x32>
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	4313      	orrs	r3, r2
         );
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003710:	d301      	bcc.n	8003716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003712:	2301      	movs	r3, #1
 8003714:	e00f      	b.n	8003736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <SysTick_Config+0x40>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371e:	210f      	movs	r1, #15
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	f7ff ff90 	bl	8003648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <SysTick_Config+0x40>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <SysTick_Config+0x40>)
 8003730:	2207      	movs	r2, #7
 8003732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	e000e010 	.word	0xe000e010

08003744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff2d 	bl	80035ac <__NVIC_SetPriorityGrouping>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800376c:	f7ff ff42 	bl	80035f4 <__NVIC_GetPriorityGrouping>
 8003770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f7ff ff90 	bl	800369c <NVIC_EncodePriority>
 800377c:	4602      	mov	r2, r0
 800377e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff5f 	bl	8003648 <__NVIC_SetPriority>
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff35 	bl	8003610 <__NVIC_EnableIRQ>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ffa2 	bl	8003700 <SysTick_Config>
 80037bc:	4603      	mov	r3, r0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e043      	b.n	8003866 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_DMA_Init+0xa8>)
 80037e6:	4413      	add	r3, r2
 80037e8:	4a22      	ldr	r2, [pc, #136]	; (8003874 <HAL_DMA_Init+0xac>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	009a      	lsls	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <HAL_DMA_Init+0xb0>)
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003812:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003816:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	bffdfff8 	.word	0xbffdfff8
 8003874:	cccccccd 	.word	0xcccccccd
 8003878:	40020000 	.word	0x40020000

0800387c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_DMA_Start_IT+0x20>
 8003898:	2302      	movs	r3, #2
 800389a:	e04a      	b.n	8003932 <HAL_DMA_Start_IT+0xb6>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d13a      	bne.n	8003924 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f938 	bl	8003b48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 020e 	orr.w	r2, r2, #14
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e00f      	b.n	8003912 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0204 	bic.w	r2, r2, #4
 8003900:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 020a 	orr.w	r2, r2, #10
 8003910:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e005      	b.n	8003930 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2204      	movs	r2, #4
 800395a:	409a      	lsls	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d04f      	beq.n	8003a04 <HAL_DMA_IRQHandler+0xc8>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04a      	beq.n	8003a04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a66      	ldr	r2, [pc, #408]	; (8003b2c <HAL_DMA_IRQHandler+0x1f0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d029      	beq.n	80039ea <HAL_DMA_IRQHandler+0xae>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_DMA_IRQHandler+0x1f4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xaa>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a63      	ldr	r2, [pc, #396]	; (8003b34 <HAL_DMA_IRQHandler+0x1f8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01a      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xa4>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a62      	ldr	r2, [pc, #392]	; (8003b38 <HAL_DMA_IRQHandler+0x1fc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d012      	beq.n	80039da <HAL_DMA_IRQHandler+0x9e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a60      	ldr	r2, [pc, #384]	; (8003b3c <HAL_DMA_IRQHandler+0x200>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00a      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x98>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5f      	ldr	r2, [pc, #380]	; (8003b40 <HAL_DMA_IRQHandler+0x204>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d102      	bne.n	80039ce <HAL_DMA_IRQHandler+0x92>
 80039c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039cc:	e00e      	b.n	80039ec <HAL_DMA_IRQHandler+0xb0>
 80039ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039d2:	e00b      	b.n	80039ec <HAL_DMA_IRQHandler+0xb0>
 80039d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039d8:	e008      	b.n	80039ec <HAL_DMA_IRQHandler+0xb0>
 80039da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039de:	e005      	b.n	80039ec <HAL_DMA_IRQHandler+0xb0>
 80039e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e4:	e002      	b.n	80039ec <HAL_DMA_IRQHandler+0xb0>
 80039e6:	2340      	movs	r3, #64	; 0x40
 80039e8:	e000      	b.n	80039ec <HAL_DMA_IRQHandler+0xb0>
 80039ea:	2304      	movs	r3, #4
 80039ec:	4a55      	ldr	r2, [pc, #340]	; (8003b44 <HAL_DMA_IRQHandler+0x208>)
 80039ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8094 	beq.w	8003b22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a02:	e08e      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	2202      	movs	r2, #2
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d056      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x186>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d051      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 020a 	bic.w	r2, r2, #10
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a38      	ldr	r2, [pc, #224]	; (8003b2c <HAL_DMA_IRQHandler+0x1f0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d029      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x166>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a37      	ldr	r2, [pc, #220]	; (8003b30 <HAL_DMA_IRQHandler+0x1f4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x162>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <HAL_DMA_IRQHandler+0x1f8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01a      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x15c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <HAL_DMA_IRQHandler+0x1fc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d012      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x156>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <HAL_DMA_IRQHandler+0x200>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00a      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x150>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a31      	ldr	r2, [pc, #196]	; (8003b40 <HAL_DMA_IRQHandler+0x204>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <HAL_DMA_IRQHandler+0x14a>
 8003a80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a84:	e00e      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x168>
 8003a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8a:	e00b      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x168>
 8003a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a90:	e008      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x168>
 8003a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a96:	e005      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x168>
 8003a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a9c:	e002      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x168>
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x168>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_DMA_IRQHandler+0x208>)
 8003aa6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d034      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ac0:	e02f      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d028      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x1e8>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d023      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 020e 	bic.w	r2, r2, #14
 8003aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
    }
  }
  return;
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
}
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40020008 	.word	0x40020008
 8003b30:	4002001c 	.word	0x4002001c
 8003b34:	40020030 	.word	0x40020030
 8003b38:	40020044 	.word	0x40020044
 8003b3c:	40020058 	.word	0x40020058
 8003b40:	4002006c 	.word	0x4002006c
 8003b44:	40020000 	.word	0x40020000

08003b48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d108      	bne.n	8003b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b86:	e007      	b.n	8003b98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b08b      	sub	sp, #44	; 0x2c
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	e127      	b.n	8003e08 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bb8:	2201      	movs	r2, #1
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	f040 8116 	bne.w	8003e02 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b12      	cmp	r3, #18
 8003bdc:	d034      	beq.n	8003c48 <HAL_GPIO_Init+0xa4>
 8003bde:	2b12      	cmp	r3, #18
 8003be0:	d80d      	bhi.n	8003bfe <HAL_GPIO_Init+0x5a>
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d02b      	beq.n	8003c3e <HAL_GPIO_Init+0x9a>
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d804      	bhi.n	8003bf4 <HAL_GPIO_Init+0x50>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d031      	beq.n	8003c52 <HAL_GPIO_Init+0xae>
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d01c      	beq.n	8003c2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bf2:	e048      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d043      	beq.n	8003c80 <HAL_GPIO_Init+0xdc>
 8003bf8:	2b11      	cmp	r3, #17
 8003bfa:	d01b      	beq.n	8003c34 <HAL_GPIO_Init+0x90>
          break;
 8003bfc:	e043      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003bfe:	4a89      	ldr	r2, [pc, #548]	; (8003e24 <HAL_GPIO_Init+0x280>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d026      	beq.n	8003c52 <HAL_GPIO_Init+0xae>
 8003c04:	4a87      	ldr	r2, [pc, #540]	; (8003e24 <HAL_GPIO_Init+0x280>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d806      	bhi.n	8003c18 <HAL_GPIO_Init+0x74>
 8003c0a:	4a87      	ldr	r2, [pc, #540]	; (8003e28 <HAL_GPIO_Init+0x284>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d020      	beq.n	8003c52 <HAL_GPIO_Init+0xae>
 8003c10:	4a86      	ldr	r2, [pc, #536]	; (8003e2c <HAL_GPIO_Init+0x288>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_GPIO_Init+0xae>
          break;
 8003c16:	e036      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c18:	4a85      	ldr	r2, [pc, #532]	; (8003e30 <HAL_GPIO_Init+0x28c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d019      	beq.n	8003c52 <HAL_GPIO_Init+0xae>
 8003c1e:	4a85      	ldr	r2, [pc, #532]	; (8003e34 <HAL_GPIO_Init+0x290>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d016      	beq.n	8003c52 <HAL_GPIO_Init+0xae>
 8003c24:	4a84      	ldr	r2, [pc, #528]	; (8003e38 <HAL_GPIO_Init+0x294>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0xae>
          break;
 8003c2a:	e02c      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	623b      	str	r3, [r7, #32]
          break;
 8003c32:	e028      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	623b      	str	r3, [r7, #32]
          break;
 8003c3c:	e023      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	3308      	adds	r3, #8
 8003c44:	623b      	str	r3, [r7, #32]
          break;
 8003c46:	e01e      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	623b      	str	r3, [r7, #32]
          break;
 8003c50:	e019      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	623b      	str	r3, [r7, #32]
          break;
 8003c5e:	e012      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	611a      	str	r2, [r3, #16]
          break;
 8003c72:	e008      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c74:	2308      	movs	r3, #8
 8003c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	615a      	str	r2, [r3, #20]
          break;
 8003c7e:	e002      	b.n	8003c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c80:	2300      	movs	r3, #0
 8003c82:	623b      	str	r3, [r7, #32]
          break;
 8003c84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2bff      	cmp	r3, #255	; 0xff
 8003c8a:	d801      	bhi.n	8003c90 <HAL_GPIO_Init+0xec>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	e001      	b.n	8003c94 <HAL_GPIO_Init+0xf0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2bff      	cmp	r3, #255	; 0xff
 8003c9a:	d802      	bhi.n	8003ca2 <HAL_GPIO_Init+0xfe>
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	e002      	b.n	8003ca8 <HAL_GPIO_Init+0x104>
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	3b08      	subs	r3, #8
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	210f      	movs	r1, #15
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	401a      	ands	r2, r3
 8003cba:	6a39      	ldr	r1, [r7, #32]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8096 	beq.w	8003e02 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cd6:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_GPIO_Init+0x298>)
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_GPIO_Init+0x298>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6193      	str	r3, [r2, #24]
 8003ce2:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <HAL_GPIO_Init+0x298>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cee:	4a54      	ldr	r2, [pc, #336]	; (8003e40 <HAL_GPIO_Init+0x29c>)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <HAL_GPIO_Init+0x2a0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_GPIO_Init+0x19e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4a      	ldr	r2, [pc, #296]	; (8003e48 <HAL_GPIO_Init+0x2a4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00d      	beq.n	8003d3e <HAL_GPIO_Init+0x19a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a49      	ldr	r2, [pc, #292]	; (8003e4c <HAL_GPIO_Init+0x2a8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <HAL_GPIO_Init+0x196>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	; (8003e50 <HAL_GPIO_Init+0x2ac>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_GPIO_Init+0x192>
 8003d32:	2303      	movs	r3, #3
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x1a0>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_Init+0x1a0>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_Init+0x1a0>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x1a0>
 8003d42:	2300      	movs	r3, #0
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d54:	493a      	ldr	r1, [pc, #232]	; (8003e40 <HAL_GPIO_Init+0x29c>)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4938      	ldr	r1, [pc, #224]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
 8003d7a:	e006      	b.n	8003d8a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d7c:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	4933      	ldr	r1, [pc, #204]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d96:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	492e      	ldr	r1, [pc, #184]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
 8003da2:	e006      	b.n	8003db2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	4929      	ldr	r1, [pc, #164]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dbe:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	4924      	ldr	r1, [pc, #144]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
 8003dca:	e006      	b.n	8003dda <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dcc:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	491f      	ldr	r1, [pc, #124]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d006      	beq.n	8003df4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	491a      	ldr	r1, [pc, #104]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60cb      	str	r3, [r1, #12]
 8003df2:	e006      	b.n	8003e02 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	4915      	ldr	r1, [pc, #84]	; (8003e54 <HAL_GPIO_Init+0x2b0>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	3301      	adds	r3, #1
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f47f aed0 	bne.w	8003bb8 <HAL_GPIO_Init+0x14>
  }
}
 8003e18:	bf00      	nop
 8003e1a:	372c      	adds	r7, #44	; 0x2c
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	10210000 	.word	0x10210000
 8003e28:	10110000 	.word	0x10110000
 8003e2c:	10120000 	.word	0x10120000
 8003e30:	10310000 	.word	0x10310000
 8003e34:	10320000 	.word	0x10320000
 8003e38:	10220000 	.word	0x10220000
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40010800 	.word	0x40010800
 8003e48:	40010c00 	.word	0x40010c00
 8003e4c:	40011000 	.word	0x40011000
 8003e50:	40011400 	.word	0x40011400
 8003e54:	40010400 	.word	0x40010400

08003e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e001      	b.n	8003e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	807b      	strh	r3, [r7, #2]
 8003e92:	4613      	mov	r3, r2
 8003e94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e96:	787b      	ldrb	r3, [r7, #1]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9c:	887a      	ldrh	r2, [r7, #2]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ea2:	e003      	b.n	8003eac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	041a      	lsls	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	611a      	str	r2, [r3, #16]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ec8:	887a      	ldrh	r2, [r7, #2]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	041a      	lsls	r2, r3, #16
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e26c      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8087 	beq.w	8004016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f08:	4b92      	ldr	r3, [pc, #584]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d00c      	beq.n	8003f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f14:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d112      	bne.n	8003f46 <HAL_RCC_OscConfig+0x5e>
 8003f20:	4b8c      	ldr	r3, [pc, #560]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d10b      	bne.n	8003f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2e:	4b89      	ldr	r3, [pc, #548]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d06c      	beq.n	8004014 <HAL_RCC_OscConfig+0x12c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d168      	bne.n	8004014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e246      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x76>
 8003f50:	4b80      	ldr	r3, [pc, #512]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7f      	ldr	r2, [pc, #508]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e02e      	b.n	8003fbc <HAL_RCC_OscConfig+0xd4>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x98>
 8003f66:	4b7b      	ldr	r3, [pc, #492]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7a      	ldr	r2, [pc, #488]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b78      	ldr	r3, [pc, #480]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a77      	ldr	r2, [pc, #476]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e01d      	b.n	8003fbc <HAL_RCC_OscConfig+0xd4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xbc>
 8003f8a:	4b72      	ldr	r3, [pc, #456]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a71      	ldr	r2, [pc, #452]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0xd4>
 8003fa4:	4b6b      	ldr	r3, [pc, #428]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6a      	ldr	r2, [pc, #424]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b68      	ldr	r3, [pc, #416]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a67      	ldr	r2, [pc, #412]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fe4c 	bl	8002c60 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fe fe48 	bl	8002c60 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1fa      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b5d      	ldr	r3, [pc, #372]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0xe4>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fe38 	bl	8002c60 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe fe34 	bl	8002c60 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1e6      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x10c>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004022:	4b4c      	ldr	r3, [pc, #304]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800402e:	4b49      	ldr	r3, [pc, #292]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b08      	cmp	r3, #8
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x18c>
 800403a:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d116      	bne.n	8004074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	4b43      	ldr	r3, [pc, #268]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_RCC_OscConfig+0x176>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e1ba      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4939      	ldr	r1, [pc, #228]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	e03a      	b.n	80040ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe fded 	bl	8002c60 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408a:	f7fe fde9 	bl	8002c60 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e19b      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4927      	ldr	r1, [pc, #156]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_RCC_OscConfig+0x270>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe fdcc 	bl	8002c60 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040cc:	f7fe fdc8 	bl	8002c60 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e17a      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d03a      	beq.n	800416c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d019      	beq.n	8004132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <HAL_RCC_OscConfig+0x274>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004104:	f7fe fdac 	bl	8002c60 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410c:	f7fe fda8 	bl	8002c60 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e15a      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <HAL_RCC_OscConfig+0x26c>)
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800412a:	2001      	movs	r0, #1
 800412c:	f000 fac6 	bl	80046bc <RCC_Delay>
 8004130:	e01c      	b.n	800416c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <HAL_RCC_OscConfig+0x274>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7fe fd92 	bl	8002c60 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413e:	e00f      	b.n	8004160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7fe fd8e 	bl	8002c60 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d908      	bls.n	8004160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e140      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	42420000 	.word	0x42420000
 800415c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	4b9e      	ldr	r3, [pc, #632]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e9      	bne.n	8004140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80a6 	beq.w	80042c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b97      	ldr	r3, [pc, #604]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4b94      	ldr	r3, [pc, #592]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4a93      	ldr	r2, [pc, #588]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	61d3      	str	r3, [r2, #28]
 8004196:	4b91      	ldr	r3, [pc, #580]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	4b8e      	ldr	r3, [pc, #568]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d118      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b2:	4b8b      	ldr	r3, [pc, #556]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a8a      	ldr	r2, [pc, #552]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041be:	f7fe fd4f 	bl	8002c60 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fe fd4b 	bl	8002c60 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	; 0x64
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0fd      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b81      	ldr	r3, [pc, #516]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x312>
 80041ec:	4b7b      	ldr	r3, [pc, #492]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4a7a      	ldr	r2, [pc, #488]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6213      	str	r3, [r2, #32]
 80041f8:	e02d      	b.n	8004256 <HAL_RCC_OscConfig+0x36e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x334>
 8004202:	4b76      	ldr	r3, [pc, #472]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a75      	ldr	r2, [pc, #468]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6213      	str	r3, [r2, #32]
 800420e:	4b73      	ldr	r3, [pc, #460]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a72      	ldr	r2, [pc, #456]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6213      	str	r3, [r2, #32]
 800421a:	e01c      	b.n	8004256 <HAL_RCC_OscConfig+0x36e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b05      	cmp	r3, #5
 8004222:	d10c      	bne.n	800423e <HAL_RCC_OscConfig+0x356>
 8004224:	4b6d      	ldr	r3, [pc, #436]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4a6c      	ldr	r2, [pc, #432]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 800422a:	f043 0304 	orr.w	r3, r3, #4
 800422e:	6213      	str	r3, [r2, #32]
 8004230:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	4a69      	ldr	r2, [pc, #420]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6213      	str	r3, [r2, #32]
 800423c:	e00b      	b.n	8004256 <HAL_RCC_OscConfig+0x36e>
 800423e:	4b67      	ldr	r3, [pc, #412]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4a66      	ldr	r2, [pc, #408]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	6213      	str	r3, [r2, #32]
 800424a:	4b64      	ldr	r3, [pc, #400]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4a63      	ldr	r2, [pc, #396]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d015      	beq.n	800428a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7fe fcff 	bl	8002c60 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	e00a      	b.n	800427c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fe fcfb 	bl	8002c60 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e0ab      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427c:	4b57      	ldr	r3, [pc, #348]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ee      	beq.n	8004266 <HAL_RCC_OscConfig+0x37e>
 8004288:	e014      	b.n	80042b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7fe fce9 	bl	8002c60 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fe fce5 	bl	8002c60 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e095      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ee      	bne.n	8004292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ba:	4b48      	ldr	r3, [pc, #288]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4a47      	ldr	r2, [pc, #284]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 80042c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8081 	beq.w	80043d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d0:	4b42      	ldr	r3, [pc, #264]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d061      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d146      	bne.n	8004372 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e4:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <HAL_RCC_OscConfig+0x4fc>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fe fcb9 	bl	8002c60 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f2:	f7fe fcb5 	bl	8002c60 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e067      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d108      	bne.n	800432c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800431a:	4b30      	ldr	r3, [pc, #192]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	492d      	ldr	r1, [pc, #180]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a19      	ldr	r1, [r3, #32]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	430b      	orrs	r3, r1
 800433e:	4927      	ldr	r1, [pc, #156]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004344:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x4fc>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fe fc89 	bl	8002c60 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fe fc85 	bl	8002c60 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e037      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x46a>
 8004370:	e02f      	b.n	80043d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <HAL_RCC_OscConfig+0x4fc>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe fc72 	bl	8002c60 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004380:	f7fe fc6e 	bl	8002c60 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e020      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x498>
 800439e:	e018      	b.n	80043d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e013      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_OscConfig+0x4f4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d106      	bne.n	80043ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40007000 	.word	0x40007000
 80043e4:	42420060 	.word	0x42420060

080043e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0d0      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043fc:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d910      	bls.n	800442c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 0207 	bic.w	r2, r3, #7
 8004412:	4965      	ldr	r1, [pc, #404]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0b8      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004444:	4b59      	ldr	r3, [pc, #356]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800444e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a52      	ldr	r2, [pc, #328]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004468:	4b50      	ldr	r3, [pc, #320]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	494d      	ldr	r1, [pc, #308]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d040      	beq.n	8004508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d115      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07f      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a6:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e073      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b6:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06b      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f023 0203 	bic.w	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4936      	ldr	r1, [pc, #216]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d8:	f7fe fbc2 	bl	8002c60 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e0:	f7fe fbbe 	bl	8002c60 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e053      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	4b2d      	ldr	r3, [pc, #180]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 020c 	and.w	r2, r3, #12
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	429a      	cmp	r2, r3
 8004506:	d1eb      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004508:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d210      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 0207 	bic.w	r2, r3, #7
 800451e:	4922      	ldr	r1, [pc, #136]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e032      	b.n	800459e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4916      	ldr	r1, [pc, #88]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	490e      	ldr	r1, [pc, #56]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004576:	f000 f821 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800457a:	4601      	mov	r1, r0
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	5cd3      	ldrb	r3, [r2, r3]
 800458a:	fa21 f303 	lsr.w	r3, r1, r3
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe fb20 	bl	8002bdc <HAL_InitTick>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40022000 	.word	0x40022000
 80045ac:	40021000 	.word	0x40021000
 80045b0:	08007cf4 	.word	0x08007cf4
 80045b4:	20000004 	.word	0x20000004
 80045b8:	20000008 	.word	0x20000008

080045bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	b490      	push	{r4, r7}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045c2:	4b2a      	ldr	r3, [pc, #168]	; (800466c <HAL_RCC_GetSysClockFreq+0xb0>)
 80045c4:	1d3c      	adds	r4, r7, #4
 80045c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d002      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x40>
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d003      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0x46>
 80045fa:	e02d      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045fe:	623b      	str	r3, [r7, #32]
      break;
 8004600:	e02d      	b.n	800465e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	0c9b      	lsrs	r3, r3, #18
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800460e:	4413      	add	r3, r2
 8004610:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004614:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d013      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	0c5b      	lsrs	r3, r3, #17
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800462e:	4413      	add	r3, r2
 8004630:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004634:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800463a:	fb02 f203 	mul.w	r2, r2, r3
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
 8004646:	e004      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	4a0c      	ldr	r2, [pc, #48]	; (800467c <HAL_RCC_GetSysClockFreq+0xc0>)
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	623b      	str	r3, [r7, #32]
      break;
 8004656:	e002      	b.n	800465e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800465a:	623b      	str	r3, [r7, #32]
      break;
 800465c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465e:	6a3b      	ldr	r3, [r7, #32]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3728      	adds	r7, #40	; 0x28
 8004664:	46bd      	mov	sp, r7
 8004666:	bc90      	pop	{r4, r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	08007cc0 	.word	0x08007cc0
 8004670:	08007cd0 	.word	0x08007cd0
 8004674:	40021000 	.word	0x40021000
 8004678:	007a1200 	.word	0x007a1200
 800467c:	003d0900 	.word	0x003d0900

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <HAL_RCC_GetHCLKFreq+0x10>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	20000004 	.word	0x20000004

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004698:	f7ff fff2 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 800469c:	4601      	mov	r1, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	0adb      	lsrs	r3, r3, #11
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	08007d04 	.word	0x08007d04

080046bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <RCC_Delay+0x34>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <RCC_Delay+0x38>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0a5b      	lsrs	r3, r3, #9
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046d8:	bf00      	nop
  }
  while (Delay --);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	60fa      	str	r2, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f9      	bne.n	80046d8 <RCC_Delay+0x1c>
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000004 	.word	0x20000004
 80046f4:	10624dd3 	.word	0x10624dd3

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d07d      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004714:	2300      	movs	r3, #0
 8004716:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004718:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004724:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4a4b      	ldr	r2, [pc, #300]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	61d3      	str	r3, [r2, #28]
 8004730:	4b49      	ldr	r3, [pc, #292]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d118      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474c:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a42      	ldr	r2, [pc, #264]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004758:	f7fe fa82 	bl	8002c60 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	e008      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004760:	f7fe fa7e 	bl	8002c60 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e06d      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b3a      	ldr	r3, [pc, #232]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800477e:	4b36      	ldr	r3, [pc, #216]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02e      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	429a      	cmp	r2, r3
 800479a:	d027      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800479c:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047a6:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047b2:	4a29      	ldr	r2, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d014      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fe fa4d 	bl	8002c60 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fe fa49 	bl	8002c60 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e036      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ee      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4917      	ldr	r1, [pc, #92]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004804:	4b14      	ldr	r3, [pc, #80]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	490b      	ldr	r1, [pc, #44]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	4904      	ldr	r1, [pc, #16]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
 8004860:	42420440 	.word	0x42420440

08004864 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b08d      	sub	sp, #52	; 0x34
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800486c:	4b55      	ldr	r3, [pc, #340]	; (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800486e:	f107 040c 	add.w	r4, r7, #12
 8004872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
 8004882:	2300      	movs	r3, #0
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	2300      	movs	r3, #0
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d07f      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d002      	beq.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d048      	beq.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048a0:	e08b      	b.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80048a2:	4b4a      	ldr	r3, [pc, #296]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048a8:	4b48      	ldr	r3, [pc, #288]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d07f      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	0c9b      	lsrs	r3, r3, #18
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048c0:	4413      	add	r3, r2
 80048c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048c6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048d2:	4b3e      	ldr	r3, [pc, #248]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	0c5b      	lsrs	r3, r3, #17
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048e0:	4413      	add	r3, r2
 80048e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80048f2:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004902:	e004      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800490e:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800491a:	d102      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004920:	e048      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004930:	e040      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d108      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
 8004954:	e01f      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004960:	d109      	bne.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004962:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800496e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
 8004974:	e00f      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004980:	d11a      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d014      	beq.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800498e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004994:	e010      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004996:	e00f      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004998:	f7ff fe7c 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	0b9b      	lsrs	r3, r3, #14
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	3301      	adds	r3, #1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049b2:	e002      	b.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80049b8:	bf00      	nop
    }
  }
  return (frequency);
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3734      	adds	r7, #52	; 0x34
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd90      	pop	{r4, r7, pc}
 80049c4:	08007cd4 	.word	0x08007cd4
 80049c8:	08007ce4 	.word	0x08007ce4
 80049cc:	40021000 	.word	0x40021000
 80049d0:	007a1200 	.word	0x007a1200
 80049d4:	003d0900 	.word	0x003d0900
 80049d8:	aaaaaaab 	.word	0xaaaaaaab

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e041      	b.n	8004a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fd ff94 	bl	8002930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fa9e 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e041      	b.n	8004b10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f839 	bl	8004b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f000 fa4f 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x24>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e022      	b.n	8004b96 <HAL_TIM_PWM_Start+0x6a>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d109      	bne.n	8004b6a <HAL_TIM_PWM_Start+0x3e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	e015      	b.n	8004b96 <HAL_TIM_PWM_Start+0x6a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d109      	bne.n	8004b84 <HAL_TIM_PWM_Start+0x58>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e008      	b.n	8004b96 <HAL_TIM_PWM_Start+0x6a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e05e      	b.n	8004c5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0x82>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	e013      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xaa>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0x92>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bbc:	e00b      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xaa>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bcc:	e003      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fc3c 	bl	800545c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <HAL_TIM_PWM_Start+0x138>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d107      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <HAL_TIM_PWM_Start+0x138>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIM_PWM_Start+0xfa>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_PWM_Start+0xfa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_TIM_PWM_Start+0x13c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_PWM_Start+0xfa>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a12      	ldr	r2, [pc, #72]	; (8004c6c <HAL_TIM_PWM_Start+0x140>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d111      	bne.n	8004c4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b06      	cmp	r3, #6
 8004c36:	d010      	beq.n	8004c5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	e007      	b.n	8004c5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800

08004c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e0ac      	b.n	8004de4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	f200 809f 	bhi.w	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cd5 	.word	0x08004cd5
 8004ca4:	08004dd9 	.word	0x08004dd9
 8004ca8:	08004dd9 	.word	0x08004dd9
 8004cac:	08004dd9 	.word	0x08004dd9
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004dd9 	.word	0x08004dd9
 8004cb8:	08004dd9 	.word	0x08004dd9
 8004cbc:	08004dd9 	.word	0x08004dd9
 8004cc0:	08004d57 	.word	0x08004d57
 8004cc4:	08004dd9 	.word	0x08004dd9
 8004cc8:	08004dd9 	.word	0x08004dd9
 8004ccc:	08004dd9 	.word	0x08004dd9
 8004cd0:	08004d97 	.word	0x08004d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f9a0 	bl	8005020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0208 	orr.w	r2, r2, #8
 8004cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0204 	bic.w	r2, r2, #4
 8004cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6999      	ldr	r1, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	619a      	str	r2, [r3, #24]
      break;
 8004d12:	e062      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f9e6 	bl	80050ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6999      	ldr	r1, [r3, #24]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	021a      	lsls	r2, r3, #8
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	619a      	str	r2, [r3, #24]
      break;
 8004d54:	e041      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fa2f 	bl	80051c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0208 	orr.w	r2, r2, #8
 8004d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0204 	bic.w	r2, r2, #4
 8004d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69d9      	ldr	r1, [r3, #28]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	61da      	str	r2, [r3, #28]
      break;
 8004d94:	e021      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fa79 	bl	8005294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69d9      	ldr	r1, [r3, #28]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	021a      	lsls	r2, r3, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	61da      	str	r2, [r3, #28]
      break;
 8004dd6:	e000      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004dd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIM_ConfigClockSource+0x18>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e0a6      	b.n	8004f52 <HAL_TIM_ConfigClockSource+0x166>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d067      	beq.n	8004f0c <HAL_TIM_ConfigClockSource+0x120>
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d80b      	bhi.n	8004e58 <HAL_TIM_ConfigClockSource+0x6c>
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d073      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0x140>
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d802      	bhi.n	8004e4e <HAL_TIM_ConfigClockSource+0x62>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d06f      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e4c:	e078      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d06c      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0x140>
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	d06a      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e56:	e073      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e58:	2b70      	cmp	r3, #112	; 0x70
 8004e5a:	d00d      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0x8c>
 8004e5c:	2b70      	cmp	r3, #112	; 0x70
 8004e5e:	d804      	bhi.n	8004e6a <HAL_TIM_ConfigClockSource+0x7e>
 8004e60:	2b50      	cmp	r3, #80	; 0x50
 8004e62:	d033      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0xe0>
 8004e64:	2b60      	cmp	r3, #96	; 0x60
 8004e66:	d041      	beq.n	8004eec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e68:	e06a      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6e:	d066      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x152>
 8004e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e74:	d017      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e76:	e063      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	6899      	ldr	r1, [r3, #8]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f000 fac9 	bl	800541e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	609a      	str	r2, [r3, #8]
      break;
 8004ea4:	e04c      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6899      	ldr	r1, [r3, #8]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f000 fab2 	bl	800541e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec8:	609a      	str	r2, [r3, #8]
      break;
 8004eca:	e039      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f000 fa29 	bl	8005330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2150      	movs	r1, #80	; 0x50
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fa80 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004eea:	e029      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f000 fa47 	bl	800538c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2160      	movs	r1, #96	; 0x60
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fa70 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004f0a:	e019      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f000 fa09 	bl	8005330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2140      	movs	r1, #64	; 0x40
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa60 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004f2a:	e009      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 fa57 	bl	80053ea <TIM_ITRx_SetConfig>
        break;
 8004f3c:	e000      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a29      	ldr	r2, [pc, #164]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <TIM_Base_SetConfig+0x30>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0x30>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <TIM_Base_SetConfig+0xbc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0x30>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a25      	ldr	r2, [pc, #148]	; (800501c <TIM_Base_SetConfig+0xc0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d007      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	; (8005018 <TIM_Base_SetConfig+0xbc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <TIM_Base_SetConfig+0xc0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	615a      	str	r2, [r3, #20]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800

08005020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <TIM_OC1_SetConfig+0xc8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10c      	bne.n	8005096 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0308 	bic.w	r3, r3, #8
 8005082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <TIM_OC1_SetConfig+0xc8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d111      	bne.n	80050c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	621a      	str	r2, [r3, #32]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00

080050ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0210 	bic.w	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0320 	bic.w	r3, r3, #32
 8005136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <TIM_OC2_SetConfig+0xd0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d10d      	bne.n	8005168 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a14      	ldr	r2, [pc, #80]	; (80051bc <TIM_OC2_SetConfig+0xd0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d113      	bne.n	8005198 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00

080051c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <TIM_OC3_SetConfig+0xd0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d10d      	bne.n	800523a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <TIM_OC3_SetConfig+0xd0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d113      	bne.n	800526a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	621a      	str	r2, [r3, #32]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00

08005294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a0f      	ldr	r2, [pc, #60]	; (800532c <TIM_OC4_SetConfig+0x98>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d109      	bne.n	8005308 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	40012c00 	.word	0x40012c00

08005330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0201 	bic.w	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f023 030a 	bic.w	r3, r3, #10
 800536c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 0210 	bic.w	r2, r3, #16
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	031b      	lsls	r3, r3, #12
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	f043 0307 	orr.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800541e:	b480      	push	{r7}
 8005420:	b087      	sub	sp, #28
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005438:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	021a      	lsls	r2, r3, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	431a      	orrs	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4313      	orrs	r3, r2
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	609a      	str	r2, [r3, #8]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2201      	movs	r2, #1
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	43db      	mvns	r3, r3
 800547e:	401a      	ands	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e046      	b.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d009      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a12      	ldr	r2, [pc, #72]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a10      	ldr	r2, [pc, #64]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10c      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4313      	orrs	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800

08005560 <__errno>:
 8005560:	4b01      	ldr	r3, [pc, #4]	; (8005568 <__errno+0x8>)
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000010 	.word	0x20000010

0800556c <gmtime>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <gmtime+0x20>)
 8005570:	4605      	mov	r5, r0
 8005572:	681c      	ldr	r4, [r3, #0]
 8005574:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005576:	b91b      	cbnz	r3, 8005580 <gmtime+0x14>
 8005578:	2024      	movs	r0, #36	; 0x24
 800557a:	f000 f8d9 	bl	8005730 <malloc>
 800557e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8005580:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005582:	4628      	mov	r0, r5
 8005584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005588:	f000 b802 	b.w	8005590 <gmtime_r>
 800558c:	20000010 	.word	0x20000010

08005590 <gmtime_r>:
 8005590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005594:	e9d0 8900 	ldrd	r8, r9, [r0]
 8005598:	460c      	mov	r4, r1
 800559a:	4a4f      	ldr	r2, [pc, #316]	; (80056d8 <gmtime_r+0x148>)
 800559c:	2300      	movs	r3, #0
 800559e:	4640      	mov	r0, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	f7fb fcc9 	bl	8000f38 <__aeabi_ldivmod>
 80055a6:	4a4c      	ldr	r2, [pc, #304]	; (80056d8 <gmtime_r+0x148>)
 80055a8:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 80055ac:	2300      	movs	r3, #0
 80055ae:	4640      	mov	r0, r8
 80055b0:	4649      	mov	r1, r9
 80055b2:	f7fb fcc1 	bl	8000f38 <__aeabi_ldivmod>
 80055b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	bfbc      	itt	lt
 80055be:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80055c2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80055c6:	fb92 f3f1 	sdiv	r3, r2, r1
 80055ca:	fb01 2213 	mls	r2, r1, r3, r2
 80055ce:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	fb92 f3f1 	sdiv	r3, r2, r1
 80055d8:	fb01 2213 	mls	r2, r1, r3, r2
 80055dc:	6022      	str	r2, [r4, #0]
 80055de:	f04f 0207 	mov.w	r2, #7
 80055e2:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 80055e6:	bfb8      	it	lt
 80055e8:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 80055ec:	6063      	str	r3, [r4, #4]
 80055ee:	1ceb      	adds	r3, r5, #3
 80055f0:	fb93 f2f2 	sdiv	r2, r3, r2
 80055f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	bf48      	it	mi
 80055fc:	3307      	addmi	r3, #7
 80055fe:	2d00      	cmp	r5, #0
 8005600:	4836      	ldr	r0, [pc, #216]	; (80056dc <gmtime_r+0x14c>)
 8005602:	61a3      	str	r3, [r4, #24]
 8005604:	bfbd      	ittte	lt
 8005606:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 800560a:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800560e:	fb93 f0f0 	sdivlt	r0, r3, r0
 8005612:	fb95 f0f0 	sdivge	r0, r5, r0
 8005616:	f648 61ac 	movw	r1, #36524	; 0x8eac
 800561a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800561e:	4b30      	ldr	r3, [pc, #192]	; (80056e0 <gmtime_r+0x150>)
 8005620:	f240 166d 	movw	r6, #365	; 0x16d
 8005624:	fb03 5300 	mla	r3, r3, r0, r5
 8005628:	fbb3 f1f1 	udiv	r1, r3, r1
 800562c:	fbb3 f2f7 	udiv	r2, r3, r7
 8005630:	4419      	add	r1, r3
 8005632:	1a89      	subs	r1, r1, r2
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <gmtime_r+0x154>)
 8005636:	fbb3 f2f2 	udiv	r2, r3, r2
 800563a:	1a8a      	subs	r2, r1, r2
 800563c:	f648 6194 	movw	r1, #36500	; 0x8e94
 8005640:	fbb2 f1f1 	udiv	r1, r2, r1
 8005644:	fbb2 f5f6 	udiv	r5, r2, r6
 8005648:	fbb2 f2f7 	udiv	r2, r2, r7
 800564c:	440b      	add	r3, r1
 800564e:	2199      	movs	r1, #153	; 0x99
 8005650:	1a9a      	subs	r2, r3, r2
 8005652:	fb06 2315 	mls	r3, r6, r5, r2
 8005656:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800565a:	3202      	adds	r2, #2
 800565c:	fbb2 f2f1 	udiv	r2, r2, r1
 8005660:	2705      	movs	r7, #5
 8005662:	4351      	muls	r1, r2
 8005664:	3102      	adds	r1, #2
 8005666:	fbb1 f1f7 	udiv	r1, r1, r7
 800566a:	2a0a      	cmp	r2, #10
 800566c:	f103 0601 	add.w	r6, r3, #1
 8005670:	eba6 0101 	sub.w	r1, r6, r1
 8005674:	bf34      	ite	cc
 8005676:	2602      	movcc	r6, #2
 8005678:	f06f 0609 	mvncs.w	r6, #9
 800567c:	4416      	add	r6, r2
 800567e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005682:	fb02 5000 	mla	r0, r2, r0, r5
 8005686:	2e01      	cmp	r6, #1
 8005688:	bf98      	it	ls
 800568a:	3001      	addls	r0, #1
 800568c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8005690:	d30c      	bcc.n	80056ac <gmtime_r+0x11c>
 8005692:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005696:	61e3      	str	r3, [r4, #28]
 8005698:	2300      	movs	r3, #0
 800569a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 800569e:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80056a2:	60e1      	str	r1, [r4, #12]
 80056a4:	6223      	str	r3, [r4, #32]
 80056a6:	4620      	mov	r0, r4
 80056a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ac:	07aa      	lsls	r2, r5, #30
 80056ae:	d105      	bne.n	80056bc <gmtime_r+0x12c>
 80056b0:	2764      	movs	r7, #100	; 0x64
 80056b2:	fbb5 f2f7 	udiv	r2, r5, r7
 80056b6:	fb07 5212 	mls	r2, r7, r2, r5
 80056ba:	b95a      	cbnz	r2, 80056d4 <gmtime_r+0x144>
 80056bc:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80056c0:	fbb5 f2f7 	udiv	r2, r5, r7
 80056c4:	fb07 5212 	mls	r2, r7, r2, r5
 80056c8:	fab2 f282 	clz	r2, r2
 80056cc:	0952      	lsrs	r2, r2, #5
 80056ce:	333b      	adds	r3, #59	; 0x3b
 80056d0:	4413      	add	r3, r2
 80056d2:	e7e0      	b.n	8005696 <gmtime_r+0x106>
 80056d4:	2201      	movs	r2, #1
 80056d6:	e7fa      	b.n	80056ce <gmtime_r+0x13e>
 80056d8:	00015180 	.word	0x00015180
 80056dc:	00023ab1 	.word	0x00023ab1
 80056e0:	fffdc54f 	.word	0xfffdc54f
 80056e4:	00023ab0 	.word	0x00023ab0

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	2500      	movs	r5, #0
 80056ec:	4e0c      	ldr	r6, [pc, #48]	; (8005720 <__libc_init_array+0x38>)
 80056ee:	4c0d      	ldr	r4, [pc, #52]	; (8005724 <__libc_init_array+0x3c>)
 80056f0:	1ba4      	subs	r4, r4, r6
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	42a5      	cmp	r5, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	f002 f996 	bl	8007a28 <_init>
 80056fc:	2500      	movs	r5, #0
 80056fe:	4e0a      	ldr	r6, [pc, #40]	; (8005728 <__libc_init_array+0x40>)
 8005700:	4c0a      	ldr	r4, [pc, #40]	; (800572c <__libc_init_array+0x44>)
 8005702:	1ba4      	subs	r4, r4, r6
 8005704:	10a4      	asrs	r4, r4, #2
 8005706:	42a5      	cmp	r5, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005710:	4798      	blx	r3
 8005712:	3501      	adds	r5, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800571a:	4798      	blx	r3
 800571c:	3501      	adds	r5, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	080081f0 	.word	0x080081f0
 8005724:	080081f0 	.word	0x080081f0
 8005728:	080081f0 	.word	0x080081f0
 800572c:	080081f4 	.word	0x080081f4

08005730 <malloc>:
 8005730:	4b02      	ldr	r3, [pc, #8]	; (800573c <malloc+0xc>)
 8005732:	4601      	mov	r1, r0
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	f000 b85f 	b.w	80057f8 <_malloc_r>
 800573a:	bf00      	nop
 800573c:	20000010 	.word	0x20000010

08005740 <free>:
 8005740:	4b02      	ldr	r3, [pc, #8]	; (800574c <free+0xc>)
 8005742:	4601      	mov	r1, r0
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f000 b80b 	b.w	8005760 <_free_r>
 800574a:	bf00      	nop
 800574c:	20000010 	.word	0x20000010

08005750 <memset>:
 8005750:	4603      	mov	r3, r0
 8005752:	4402      	add	r2, r0
 8005754:	4293      	cmp	r3, r2
 8005756:	d100      	bne.n	800575a <memset+0xa>
 8005758:	4770      	bx	lr
 800575a:	f803 1b01 	strb.w	r1, [r3], #1
 800575e:	e7f9      	b.n	8005754 <memset+0x4>

08005760 <_free_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4605      	mov	r5, r0
 8005764:	2900      	cmp	r1, #0
 8005766:	d043      	beq.n	80057f0 <_free_r+0x90>
 8005768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576c:	1f0c      	subs	r4, r1, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	bfb8      	it	lt
 8005772:	18e4      	addlt	r4, r4, r3
 8005774:	f001 f8ea 	bl	800694c <__malloc_lock>
 8005778:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <_free_r+0x94>)
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	4610      	mov	r0, r2
 800577e:	b933      	cbnz	r3, 800578e <_free_r+0x2e>
 8005780:	6063      	str	r3, [r4, #4]
 8005782:	6014      	str	r4, [r2, #0]
 8005784:	4628      	mov	r0, r5
 8005786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800578a:	f001 b8e0 	b.w	800694e <__malloc_unlock>
 800578e:	42a3      	cmp	r3, r4
 8005790:	d90b      	bls.n	80057aa <_free_r+0x4a>
 8005792:	6821      	ldr	r1, [r4, #0]
 8005794:	1862      	adds	r2, r4, r1
 8005796:	4293      	cmp	r3, r2
 8005798:	bf01      	itttt	eq
 800579a:	681a      	ldreq	r2, [r3, #0]
 800579c:	685b      	ldreq	r3, [r3, #4]
 800579e:	1852      	addeq	r2, r2, r1
 80057a0:	6022      	streq	r2, [r4, #0]
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6004      	str	r4, [r0, #0]
 80057a6:	e7ed      	b.n	8005784 <_free_r+0x24>
 80057a8:	4613      	mov	r3, r2
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	b10a      	cbz	r2, 80057b2 <_free_r+0x52>
 80057ae:	42a2      	cmp	r2, r4
 80057b0:	d9fa      	bls.n	80057a8 <_free_r+0x48>
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	1858      	adds	r0, r3, r1
 80057b6:	42a0      	cmp	r0, r4
 80057b8:	d10b      	bne.n	80057d2 <_free_r+0x72>
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	4401      	add	r1, r0
 80057be:	1858      	adds	r0, r3, r1
 80057c0:	4282      	cmp	r2, r0
 80057c2:	6019      	str	r1, [r3, #0]
 80057c4:	d1de      	bne.n	8005784 <_free_r+0x24>
 80057c6:	6810      	ldr	r0, [r2, #0]
 80057c8:	6852      	ldr	r2, [r2, #4]
 80057ca:	4401      	add	r1, r0
 80057cc:	6019      	str	r1, [r3, #0]
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	e7d8      	b.n	8005784 <_free_r+0x24>
 80057d2:	d902      	bls.n	80057da <_free_r+0x7a>
 80057d4:	230c      	movs	r3, #12
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	e7d4      	b.n	8005784 <_free_r+0x24>
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	1821      	adds	r1, r4, r0
 80057de:	428a      	cmp	r2, r1
 80057e0:	bf01      	itttt	eq
 80057e2:	6811      	ldreq	r1, [r2, #0]
 80057e4:	6852      	ldreq	r2, [r2, #4]
 80057e6:	1809      	addeq	r1, r1, r0
 80057e8:	6021      	streq	r1, [r4, #0]
 80057ea:	6062      	str	r2, [r4, #4]
 80057ec:	605c      	str	r4, [r3, #4]
 80057ee:	e7c9      	b.n	8005784 <_free_r+0x24>
 80057f0:	bd38      	pop	{r3, r4, r5, pc}
 80057f2:	bf00      	nop
 80057f4:	2000026c 	.word	0x2000026c

080057f8 <_malloc_r>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	1ccd      	adds	r5, r1, #3
 80057fc:	f025 0503 	bic.w	r5, r5, #3
 8005800:	3508      	adds	r5, #8
 8005802:	2d0c      	cmp	r5, #12
 8005804:	bf38      	it	cc
 8005806:	250c      	movcc	r5, #12
 8005808:	2d00      	cmp	r5, #0
 800580a:	4606      	mov	r6, r0
 800580c:	db01      	blt.n	8005812 <_malloc_r+0x1a>
 800580e:	42a9      	cmp	r1, r5
 8005810:	d903      	bls.n	800581a <_malloc_r+0x22>
 8005812:	230c      	movs	r3, #12
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	2000      	movs	r0, #0
 8005818:	bd70      	pop	{r4, r5, r6, pc}
 800581a:	f001 f897 	bl	800694c <__malloc_lock>
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <_malloc_r+0xac>)
 8005820:	6814      	ldr	r4, [r2, #0]
 8005822:	4621      	mov	r1, r4
 8005824:	b991      	cbnz	r1, 800584c <_malloc_r+0x54>
 8005826:	4c20      	ldr	r4, [pc, #128]	; (80058a8 <_malloc_r+0xb0>)
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	b91b      	cbnz	r3, 8005834 <_malloc_r+0x3c>
 800582c:	4630      	mov	r0, r6
 800582e:	f000 f83d 	bl	80058ac <_sbrk_r>
 8005832:	6020      	str	r0, [r4, #0]
 8005834:	4629      	mov	r1, r5
 8005836:	4630      	mov	r0, r6
 8005838:	f000 f838 	bl	80058ac <_sbrk_r>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d124      	bne.n	800588a <_malloc_r+0x92>
 8005840:	230c      	movs	r3, #12
 8005842:	4630      	mov	r0, r6
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	f001 f882 	bl	800694e <__malloc_unlock>
 800584a:	e7e4      	b.n	8005816 <_malloc_r+0x1e>
 800584c:	680b      	ldr	r3, [r1, #0]
 800584e:	1b5b      	subs	r3, r3, r5
 8005850:	d418      	bmi.n	8005884 <_malloc_r+0x8c>
 8005852:	2b0b      	cmp	r3, #11
 8005854:	d90f      	bls.n	8005876 <_malloc_r+0x7e>
 8005856:	600b      	str	r3, [r1, #0]
 8005858:	18cc      	adds	r4, r1, r3
 800585a:	50cd      	str	r5, [r1, r3]
 800585c:	4630      	mov	r0, r6
 800585e:	f001 f876 	bl	800694e <__malloc_unlock>
 8005862:	f104 000b 	add.w	r0, r4, #11
 8005866:	1d23      	adds	r3, r4, #4
 8005868:	f020 0007 	bic.w	r0, r0, #7
 800586c:	1ac3      	subs	r3, r0, r3
 800586e:	d0d3      	beq.n	8005818 <_malloc_r+0x20>
 8005870:	425a      	negs	r2, r3
 8005872:	50e2      	str	r2, [r4, r3]
 8005874:	e7d0      	b.n	8005818 <_malloc_r+0x20>
 8005876:	684b      	ldr	r3, [r1, #4]
 8005878:	428c      	cmp	r4, r1
 800587a:	bf16      	itet	ne
 800587c:	6063      	strne	r3, [r4, #4]
 800587e:	6013      	streq	r3, [r2, #0]
 8005880:	460c      	movne	r4, r1
 8005882:	e7eb      	b.n	800585c <_malloc_r+0x64>
 8005884:	460c      	mov	r4, r1
 8005886:	6849      	ldr	r1, [r1, #4]
 8005888:	e7cc      	b.n	8005824 <_malloc_r+0x2c>
 800588a:	1cc4      	adds	r4, r0, #3
 800588c:	f024 0403 	bic.w	r4, r4, #3
 8005890:	42a0      	cmp	r0, r4
 8005892:	d005      	beq.n	80058a0 <_malloc_r+0xa8>
 8005894:	1a21      	subs	r1, r4, r0
 8005896:	4630      	mov	r0, r6
 8005898:	f000 f808 	bl	80058ac <_sbrk_r>
 800589c:	3001      	adds	r0, #1
 800589e:	d0cf      	beq.n	8005840 <_malloc_r+0x48>
 80058a0:	6025      	str	r5, [r4, #0]
 80058a2:	e7db      	b.n	800585c <_malloc_r+0x64>
 80058a4:	2000026c 	.word	0x2000026c
 80058a8:	20000270 	.word	0x20000270

080058ac <_sbrk_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	2300      	movs	r3, #0
 80058b0:	4c05      	ldr	r4, [pc, #20]	; (80058c8 <_sbrk_r+0x1c>)
 80058b2:	4605      	mov	r5, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	f7fd f8ce 	bl	8002a58 <_sbrk>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_sbrk_r+0x1a>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_sbrk_r+0x1a>
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	200003b0 	.word	0x200003b0

080058cc <iso_year_adjust>:
 80058cc:	6942      	ldr	r2, [r0, #20]
 80058ce:	f240 736c 	movw	r3, #1900	; 0x76c
 80058d2:	2a00      	cmp	r2, #0
 80058d4:	bfa8      	it	ge
 80058d6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80058da:	441a      	add	r2, r3
 80058dc:	0793      	lsls	r3, r2, #30
 80058de:	d105      	bne.n	80058ec <iso_year_adjust+0x20>
 80058e0:	2164      	movs	r1, #100	; 0x64
 80058e2:	fb92 f3f1 	sdiv	r3, r2, r1
 80058e6:	fb01 2313 	mls	r3, r1, r3, r2
 80058ea:	b9d3      	cbnz	r3, 8005922 <iso_year_adjust+0x56>
 80058ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80058f0:	fb92 f3f1 	sdiv	r3, r2, r1
 80058f4:	fb01 2313 	mls	r3, r1, r3, r2
 80058f8:	fab3 f283 	clz	r2, r3
 80058fc:	0952      	lsrs	r2, r2, #5
 80058fe:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005908:	4413      	add	r3, r2
 800590a:	2b21      	cmp	r3, #33	; 0x21
 800590c:	dc11      	bgt.n	8005932 <iso_year_adjust+0x66>
 800590e:	2b20      	cmp	r3, #32
 8005910:	da30      	bge.n	8005974 <iso_year_adjust+0xa8>
 8005912:	2b0d      	cmp	r3, #13
 8005914:	dc07      	bgt.n	8005926 <iso_year_adjust+0x5a>
 8005916:	2b0a      	cmp	r3, #10
 8005918:	da2c      	bge.n	8005974 <iso_year_adjust+0xa8>
 800591a:	2b01      	cmp	r3, #1
 800591c:	d92a      	bls.n	8005974 <iso_year_adjust+0xa8>
 800591e:	2000      	movs	r0, #0
 8005920:	4770      	bx	lr
 8005922:	2201      	movs	r2, #1
 8005924:	e7eb      	b.n	80058fe <iso_year_adjust+0x32>
 8005926:	2b10      	cmp	r3, #16
 8005928:	dbf9      	blt.n	800591e <iso_year_adjust+0x52>
 800592a:	2b11      	cmp	r3, #17
 800592c:	dd22      	ble.n	8005974 <iso_year_adjust+0xa8>
 800592e:	3b1c      	subs	r3, #28
 8005930:	e7f3      	b.n	800591a <iso_year_adjust+0x4e>
 8005932:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8005936:	4293      	cmp	r3, r2
 8005938:	dc0f      	bgt.n	800595a <iso_year_adjust+0x8e>
 800593a:	f241 62c2 	movw	r2, #5826	; 0x16c2
 800593e:	4293      	cmp	r3, r2
 8005940:	da09      	bge.n	8005956 <iso_year_adjust+0x8a>
 8005942:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8005946:	4293      	cmp	r3, r2
 8005948:	d005      	beq.n	8005956 <iso_year_adjust+0x8a>
 800594a:	dbe8      	blt.n	800591e <iso_year_adjust+0x52>
 800594c:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8005950:	3b12      	subs	r3, #18
 8005952:	2b02      	cmp	r3, #2
 8005954:	d8e3      	bhi.n	800591e <iso_year_adjust+0x52>
 8005956:	2001      	movs	r0, #1
 8005958:	4770      	bx	lr
 800595a:	f241 62d5 	movw	r2, #5845	; 0x16d5
 800595e:	4293      	cmp	r3, r2
 8005960:	d0f9      	beq.n	8005956 <iso_year_adjust+0x8a>
 8005962:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8005966:	4293      	cmp	r3, r2
 8005968:	d0f5      	beq.n	8005956 <iso_year_adjust+0x8a>
 800596a:	f241 62d3 	movw	r2, #5843	; 0x16d3
 800596e:	4293      	cmp	r3, r2
 8005970:	d1d5      	bne.n	800591e <iso_year_adjust+0x52>
 8005972:	e7f0      	b.n	8005956 <iso_year_adjust+0x8a>
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	4770      	bx	lr
	...

0800597c <__strftime>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	461d      	mov	r5, r3
 8005982:	2300      	movs	r3, #0
 8005984:	4607      	mov	r7, r0
 8005986:	460e      	mov	r6, r1
 8005988:	461c      	mov	r4, r3
 800598a:	b091      	sub	sp, #68	; 0x44
 800598c:	9303      	str	r3, [sp, #12]
 800598e:	f101 3bff 	add.w	fp, r1, #4294967295
 8005992:	7813      	ldrb	r3, [r2, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 84e2 	beq.w	800635e <__strftime+0x9e2>
 800599a:	2b25      	cmp	r3, #37	; 0x25
 800599c:	d11f      	bne.n	80059de <__strftime+0x62>
 800599e:	f892 a001 	ldrb.w	sl, [r2, #1]
 80059a2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80059a6:	d023      	beq.n	80059f0 <__strftime+0x74>
 80059a8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80059ac:	d020      	beq.n	80059f0 <__strftime+0x74>
 80059ae:	f04f 0a00 	mov.w	sl, #0
 80059b2:	f102 0801 	add.w	r8, r2, #1
 80059b6:	f898 3000 	ldrb.w	r3, [r8]
 80059ba:	3b31      	subs	r3, #49	; 0x31
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d81a      	bhi.n	80059f6 <__strftime+0x7a>
 80059c0:	4640      	mov	r0, r8
 80059c2:	220a      	movs	r2, #10
 80059c4:	a908      	add	r1, sp, #32
 80059c6:	f000 fd85 	bl	80064d4 <strtoul>
 80059ca:	4681      	mov	r9, r0
 80059cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d0:	f898 3000 	ldrb.w	r3, [r8]
 80059d4:	2b45      	cmp	r3, #69	; 0x45
 80059d6:	d111      	bne.n	80059fc <__strftime+0x80>
 80059d8:	f108 0801 	add.w	r8, r8, #1
 80059dc:	e010      	b.n	8005a00 <__strftime+0x84>
 80059de:	45a3      	cmp	fp, r4
 80059e0:	d802      	bhi.n	80059e8 <__strftime+0x6c>
 80059e2:	2400      	movs	r4, #0
 80059e4:	f000 bcbe 	b.w	8006364 <__strftime+0x9e8>
 80059e8:	553b      	strb	r3, [r7, r4]
 80059ea:	3201      	adds	r2, #1
 80059ec:	3401      	adds	r4, #1
 80059ee:	e7d0      	b.n	8005992 <__strftime+0x16>
 80059f0:	f102 0802 	add.w	r8, r2, #2
 80059f4:	e7df      	b.n	80059b6 <__strftime+0x3a>
 80059f6:	f04f 0900 	mov.w	r9, #0
 80059fa:	e7e9      	b.n	80059d0 <__strftime+0x54>
 80059fc:	2b4f      	cmp	r3, #79	; 0x4f
 80059fe:	d0eb      	beq.n	80059d8 <__strftime+0x5c>
 8005a00:	f898 1000 	ldrb.w	r1, [r8]
 8005a04:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8005a08:	2b55      	cmp	r3, #85	; 0x55
 8005a0a:	d8ea      	bhi.n	80059e2 <__strftime+0x66>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <__strftime+0x98>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08006355 	.word	0x08006355
 8005a18:	080059e3 	.word	0x080059e3
 8005a1c:	080059e3 	.word	0x080059e3
 8005a20:	080059e3 	.word	0x080059e3
 8005a24:	080059e3 	.word	0x080059e3
 8005a28:	080059e3 	.word	0x080059e3
 8005a2c:	080059e3 	.word	0x080059e3
 8005a30:	080059e3 	.word	0x080059e3
 8005a34:	080059e3 	.word	0x080059e3
 8005a38:	080059e3 	.word	0x080059e3
 8005a3c:	080059e3 	.word	0x080059e3
 8005a40:	080059e3 	.word	0x080059e3
 8005a44:	080059e3 	.word	0x080059e3
 8005a48:	080059e3 	.word	0x080059e3
 8005a4c:	080059e3 	.word	0x080059e3
 8005a50:	080059e3 	.word	0x080059e3
 8005a54:	080059e3 	.word	0x080059e3
 8005a58:	080059e3 	.word	0x080059e3
 8005a5c:	080059e3 	.word	0x080059e3
 8005a60:	080059e3 	.word	0x080059e3
 8005a64:	080059e3 	.word	0x080059e3
 8005a68:	080059e3 	.word	0x080059e3
 8005a6c:	080059e3 	.word	0x080059e3
 8005a70:	080059e3 	.word	0x080059e3
 8005a74:	080059e3 	.word	0x080059e3
 8005a78:	080059e3 	.word	0x080059e3
 8005a7c:	080059e3 	.word	0x080059e3
 8005a80:	080059e3 	.word	0x080059e3
 8005a84:	08005ba9 	.word	0x08005ba9
 8005a88:	08005bfd 	.word	0x08005bfd
 8005a8c:	08005c6d 	.word	0x08005c6d
 8005a90:	08005d07 	.word	0x08005d07
 8005a94:	080059e3 	.word	0x080059e3
 8005a98:	08005d55 	.word	0x08005d55
 8005a9c:	08005e45 	.word	0x08005e45
 8005aa0:	08005f5d 	.word	0x08005f5d
 8005aa4:	08005f6b 	.word	0x08005f6b
 8005aa8:	080059e3 	.word	0x080059e3
 8005aac:	080059e3 	.word	0x080059e3
 8005ab0:	080059e3 	.word	0x080059e3
 8005ab4:	08005f9b 	.word	0x08005f9b
 8005ab8:	080059e3 	.word	0x080059e3
 8005abc:	080059e3 	.word	0x080059e3
 8005ac0:	08005fad 	.word	0x08005fad
 8005ac4:	080059e3 	.word	0x080059e3
 8005ac8:	0800600b 	.word	0x0800600b
 8005acc:	08006123 	.word	0x08006123
 8005ad0:	08006131 	.word	0x08006131
 8005ad4:	08006181 	.word	0x08006181
 8005ad8:	08006191 	.word	0x08006191
 8005adc:	08006201 	.word	0x08006201
 8005ae0:	08005c65 	.word	0x08005c65
 8005ae4:	0800623b 	.word	0x0800623b
 8005ae8:	08006301 	.word	0x08006301
 8005aec:	080059e3 	.word	0x080059e3
 8005af0:	080059e3 	.word	0x080059e3
 8005af4:	080059e3 	.word	0x080059e3
 8005af8:	080059e3 	.word	0x080059e3
 8005afc:	080059e3 	.word	0x080059e3
 8005b00:	080059e3 	.word	0x080059e3
 8005b04:	08005b6d 	.word	0x08005b6d
 8005b08:	08005bd5 	.word	0x08005bd5
 8005b0c:	08005c27 	.word	0x08005c27
 8005b10:	08005ce3 	.word	0x08005ce3
 8005b14:	08005ce3 	.word	0x08005ce3
 8005b18:	080059e3 	.word	0x080059e3
 8005b1c:	08005dad 	.word	0x08005dad
 8005b20:	08005bd5 	.word	0x08005bd5
 8005b24:	080059e3 	.word	0x080059e3
 8005b28:	08005f8d 	.word	0x08005f8d
 8005b2c:	08005f5d 	.word	0x08005f5d
 8005b30:	08005f6b 	.word	0x08005f6b
 8005b34:	08005f95 	.word	0x08005f95
 8005b38:	08005f9f 	.word	0x08005f9f
 8005b3c:	080059e3 	.word	0x080059e3
 8005b40:	08005fad 	.word	0x08005fad
 8005b44:	080059e3 	.word	0x080059e3
 8005b48:	08005c55 	.word	0x08005c55
 8005b4c:	0800601d 	.word	0x0800601d
 8005b50:	08006127 	.word	0x08006127
 8005b54:	08006169 	.word	0x08006169
 8005b58:	080059e3 	.word	0x080059e3
 8005b5c:	080061f5 	.word	0x080061f5
 8005b60:	08005c5d 	.word	0x08005c5d
 8005b64:	08006219 	.word	0x08006219
 8005b68:	0800628f 	.word	0x0800628f
 8005b6c:	69ab      	ldr	r3, [r5, #24]
 8005b6e:	4aa8      	ldr	r2, [pc, #672]	; (8005e10 <__strftime+0x494>)
 8005b70:	3318      	adds	r3, #24
 8005b72:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005b76:	4648      	mov	r0, r9
 8005b78:	f7fa faea 	bl	8000150 <strlen>
 8005b7c:	eba9 0904 	sub.w	r9, r9, r4
 8005b80:	4420      	add	r0, r4
 8005b82:	42a0      	cmp	r0, r4
 8005b84:	d108      	bne.n	8005b98 <__strftime+0x21c>
 8005b86:	4604      	mov	r4, r0
 8005b88:	f898 3000 	ldrb.w	r3, [r8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 83e6 	beq.w	800635e <__strftime+0x9e2>
 8005b92:	f108 0201 	add.w	r2, r8, #1
 8005b96:	e6fc      	b.n	8005992 <__strftime+0x16>
 8005b98:	45a3      	cmp	fp, r4
 8005b9a:	f67f af22 	bls.w	80059e2 <__strftime+0x66>
 8005b9e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005ba2:	553b      	strb	r3, [r7, r4]
 8005ba4:	3401      	adds	r4, #1
 8005ba6:	e7ec      	b.n	8005b82 <__strftime+0x206>
 8005ba8:	69aa      	ldr	r2, [r5, #24]
 8005baa:	4b99      	ldr	r3, [pc, #612]	; (8005e10 <__strftime+0x494>)
 8005bac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005bb0:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8005bb4:	4648      	mov	r0, r9
 8005bb6:	f7fa facb 	bl	8000150 <strlen>
 8005bba:	eba9 0904 	sub.w	r9, r9, r4
 8005bbe:	4420      	add	r0, r4
 8005bc0:	42a0      	cmp	r0, r4
 8005bc2:	d0e0      	beq.n	8005b86 <__strftime+0x20a>
 8005bc4:	45a3      	cmp	fp, r4
 8005bc6:	f67f af0c 	bls.w	80059e2 <__strftime+0x66>
 8005bca:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005bce:	553b      	strb	r3, [r7, r4]
 8005bd0:	3401      	adds	r4, #1
 8005bd2:	e7f5      	b.n	8005bc0 <__strftime+0x244>
 8005bd4:	692a      	ldr	r2, [r5, #16]
 8005bd6:	4b8e      	ldr	r3, [pc, #568]	; (8005e10 <__strftime+0x494>)
 8005bd8:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8005bdc:	4648      	mov	r0, r9
 8005bde:	f7fa fab7 	bl	8000150 <strlen>
 8005be2:	eba9 0904 	sub.w	r9, r9, r4
 8005be6:	4420      	add	r0, r4
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d0cc      	beq.n	8005b86 <__strftime+0x20a>
 8005bec:	45a3      	cmp	fp, r4
 8005bee:	f67f aef8 	bls.w	80059e2 <__strftime+0x66>
 8005bf2:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005bf6:	553b      	strb	r3, [r7, r4]
 8005bf8:	3401      	adds	r4, #1
 8005bfa:	e7f5      	b.n	8005be8 <__strftime+0x26c>
 8005bfc:	692b      	ldr	r3, [r5, #16]
 8005bfe:	4a84      	ldr	r2, [pc, #528]	; (8005e10 <__strftime+0x494>)
 8005c00:	330c      	adds	r3, #12
 8005c02:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8005c06:	4648      	mov	r0, r9
 8005c08:	f7fa faa2 	bl	8000150 <strlen>
 8005c0c:	eba9 0904 	sub.w	r9, r9, r4
 8005c10:	4420      	add	r0, r4
 8005c12:	42a0      	cmp	r0, r4
 8005c14:	d0b7      	beq.n	8005b86 <__strftime+0x20a>
 8005c16:	45a3      	cmp	fp, r4
 8005c18:	f67f aee3 	bls.w	80059e2 <__strftime+0x66>
 8005c1c:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005c20:	553b      	strb	r3, [r7, r4]
 8005c22:	3401      	adds	r4, #1
 8005c24:	e7f5      	b.n	8005c12 <__strftime+0x296>
 8005c26:	4b7a      	ldr	r3, [pc, #488]	; (8005e10 <__strftime+0x494>)
 8005c28:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f7fa fa8f 	bl	8000150 <strlen>
 8005c32:	f899 3000 	ldrb.w	r3, [r9]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0a6      	beq.n	8005b88 <__strftime+0x20c>
 8005c3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005c3c:	464a      	mov	r2, r9
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	462b      	mov	r3, r5
 8005c42:	1b31      	subs	r1, r6, r4
 8005c44:	1938      	adds	r0, r7, r4
 8005c46:	f7ff fe99 	bl	800597c <__strftime>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	f77f aec9 	ble.w	80059e2 <__strftime+0x66>
 8005c50:	4404      	add	r4, r0
 8005c52:	e799      	b.n	8005b88 <__strftime+0x20c>
 8005c54:	4b6e      	ldr	r3, [pc, #440]	; (8005e10 <__strftime+0x494>)
 8005c56:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8005c5a:	e7e7      	b.n	8005c2c <__strftime+0x2b0>
 8005c5c:	4b6c      	ldr	r3, [pc, #432]	; (8005e10 <__strftime+0x494>)
 8005c5e:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8005c62:	e7e3      	b.n	8005c2c <__strftime+0x2b0>
 8005c64:	4b6a      	ldr	r3, [pc, #424]	; (8005e10 <__strftime+0x494>)
 8005c66:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8005c6a:	e7df      	b.n	8005c2c <__strftime+0x2b0>
 8005c6c:	4b69      	ldr	r3, [pc, #420]	; (8005e14 <__strftime+0x498>)
 8005c6e:	6969      	ldr	r1, [r5, #20]
 8005c70:	4299      	cmp	r1, r3
 8005c72:	bfac      	ite	ge
 8005c74:	2300      	movge	r3, #0
 8005c76:	2301      	movlt	r3, #1
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	db10      	blt.n	8005ca0 <__strftime+0x324>
 8005c7e:	2064      	movs	r0, #100	; 0x64
 8005c80:	fb91 f0f0 	sdiv	r0, r1, r0
 8005c84:	3013      	adds	r0, #19
 8005c86:	f1ba 0f00 	cmp.w	sl, #0
 8005c8a:	d013      	beq.n	8005cb4 <__strftime+0x338>
 8005c8c:	2863      	cmp	r0, #99	; 0x63
 8005c8e:	dd26      	ble.n	8005cde <__strftime+0x362>
 8005c90:	4a61      	ldr	r2, [pc, #388]	; (8005e18 <__strftime+0x49c>)
 8005c92:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <__strftime+0x4a0>)
 8005c94:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005c98:	bf18      	it	ne
 8005c9a:	4613      	movne	r3, r2
 8005c9c:	4a60      	ldr	r2, [pc, #384]	; (8005e20 <__strftime+0x4a4>)
 8005c9e:	e00b      	b.n	8005cb8 <__strftime+0x33c>
 8005ca0:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8005ca4:	9105      	str	r1, [sp, #20]
 8005ca6:	f000 fdcb 	bl	8006840 <abs>
 8005caa:	2364      	movs	r3, #100	; 0x64
 8005cac:	9905      	ldr	r1, [sp, #20]
 8005cae:	fb90 f0f3 	sdiv	r0, r0, r3
 8005cb2:	e7e8      	b.n	8005c86 <__strftime+0x30a>
 8005cb4:	4b58      	ldr	r3, [pc, #352]	; (8005e18 <__strftime+0x49c>)
 8005cb6:	4a5b      	ldr	r2, [pc, #364]	; (8005e24 <__strftime+0x4a8>)
 8005cb8:	9001      	str	r0, [sp, #4]
 8005cba:	9804      	ldr	r0, [sp, #16]
 8005cbc:	f8df c154 	ldr.w	ip, [pc, #340]	; 8005e14 <__strftime+0x498>
 8005cc0:	f1b9 0f02 	cmp.w	r9, #2
 8005cc4:	bf2c      	ite	cs
 8005cc6:	ebc0 0009 	rsbcs	r0, r0, r9
 8005cca:	f1c0 0002 	rsbcc	r0, r0, #2
 8005cce:	9000      	str	r0, [sp, #0]
 8005cd0:	4855      	ldr	r0, [pc, #340]	; (8005e28 <__strftime+0x4ac>)
 8005cd2:	4561      	cmp	r1, ip
 8005cd4:	bfb8      	it	lt
 8005cd6:	4603      	movlt	r3, r0
 8005cd8:	1b31      	subs	r1, r6, r4
 8005cda:	1938      	adds	r0, r7, r4
 8005cdc:	e029      	b.n	8005d32 <__strftime+0x3b6>
 8005cde:	4b4e      	ldr	r3, [pc, #312]	; (8005e18 <__strftime+0x49c>)
 8005ce0:	e7dc      	b.n	8005c9c <__strftime+0x320>
 8005ce2:	4852      	ldr	r0, [pc, #328]	; (8005e2c <__strftime+0x4b0>)
 8005ce4:	4a52      	ldr	r2, [pc, #328]	; (8005e30 <__strftime+0x4b4>)
 8005ce6:	68eb      	ldr	r3, [r5, #12]
 8005ce8:	2964      	cmp	r1, #100	; 0x64
 8005cea:	bf18      	it	ne
 8005cec:	4602      	movne	r2, r0
 8005cee:	1b31      	subs	r1, r6, r4
 8005cf0:	1938      	adds	r0, r7, r4
 8005cf2:	f001 f907 	bl	8006f04 <sniprintf>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f6ff ae73 	blt.w	80059e2 <__strftime+0x66>
 8005cfc:	4404      	add	r4, r0
 8005cfe:	42a6      	cmp	r6, r4
 8005d00:	f63f af42 	bhi.w	8005b88 <__strftime+0x20c>
 8005d04:	e66d      	b.n	80059e2 <__strftime+0x66>
 8005d06:	6968      	ldr	r0, [r5, #20]
 8005d08:	692b      	ldr	r3, [r5, #16]
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	eb07 0904 	add.w	r9, r7, r4
 8005d10:	eba6 0a04 	sub.w	sl, r6, r4
 8005d14:	f103 0301 	add.w	r3, r3, #1
 8005d18:	68ea      	ldr	r2, [r5, #12]
 8005d1a:	db0d      	blt.n	8005d38 <__strftime+0x3bc>
 8005d1c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005d20:	fb90 f1fc 	sdiv	r1, r0, ip
 8005d24:	fb0c 0011 	mls	r0, ip, r1, r0
 8005d28:	e9cd 2000 	strd	r2, r0, [sp]
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	4648      	mov	r0, r9
 8005d30:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <__strftime+0x4b8>)
 8005d32:	f001 f8e7 	bl	8006f04 <sniprintf>
 8005d36:	e7de      	b.n	8005cf6 <__strftime+0x37a>
 8005d38:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005d3c:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8005d40:	f000 fd7e 	bl	8006840 <abs>
 8005d44:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8005d48:	2164      	movs	r1, #100	; 0x64
 8005d4a:	fb90 fcf1 	sdiv	ip, r0, r1
 8005d4e:	fb0c 0011 	mls	r0, ip, r1, r0
 8005d52:	e7e9      	b.n	8005d28 <__strftime+0x3ac>
 8005d54:	2325      	movs	r3, #37	; 0x25
 8005d56:	f88d 3020 	strb.w	r3, [sp, #32]
 8005d5a:	f1ba 0f00 	cmp.w	sl, #0
 8005d5e:	d013      	beq.n	8005d88 <__strftime+0x40c>
 8005d60:	f1b9 0f06 	cmp.w	r9, #6
 8005d64:	bf38      	it	cc
 8005d66:	f04f 0906 	movcc.w	r9, #6
 8005d6a:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 8005d6e:	f1b9 0306 	subs.w	r3, r9, #6
 8005d72:	d10f      	bne.n	8005d94 <__strftime+0x418>
 8005d74:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8005d78:	492f      	ldr	r1, [pc, #188]	; (8005e38 <__strftime+0x4bc>)
 8005d7a:	f001 f923 	bl	8006fc4 <strcpy>
 8005d7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d80:	aa08      	add	r2, sp, #32
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	462b      	mov	r3, r5
 8005d86:	e75c      	b.n	8005c42 <__strftime+0x2c6>
 8005d88:	232b      	movs	r3, #43	; 0x2b
 8005d8a:	f04f 090a 	mov.w	r9, #10
 8005d8e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8005d92:	e7ec      	b.n	8005d6e <__strftime+0x3f2>
 8005d94:	4a29      	ldr	r2, [pc, #164]	; (8005e3c <__strftime+0x4c0>)
 8005d96:	211e      	movs	r1, #30
 8005d98:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8005d9c:	f001 f8b2 	bl	8006f04 <sniprintf>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	dde7      	ble.n	8005d74 <__strftime+0x3f8>
 8005da4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8005da8:	4418      	add	r0, r3
 8005daa:	e7e5      	b.n	8005d78 <__strftime+0x3fc>
 8005dac:	4628      	mov	r0, r5
 8005dae:	f7ff fd8d 	bl	80058cc <iso_year_adjust>
 8005db2:	4681      	mov	r9, r0
 8005db4:	6968      	ldr	r0, [r5, #20]
 8005db6:	2800      	cmp	r0, #0
 8005db8:	db1a      	blt.n	8005df0 <__strftime+0x474>
 8005dba:	2264      	movs	r2, #100	; 0x64
 8005dbc:	fb90 f3f2 	sdiv	r3, r0, r2
 8005dc0:	f1b9 0f00 	cmp.w	r9, #0
 8005dc4:	fb02 0013 	mls	r0, r2, r3, r0
 8005dc8:	da1a      	bge.n	8005e00 <__strftime+0x484>
 8005dca:	696a      	ldr	r2, [r5, #20]
 8005dcc:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <__strftime+0x4c4>)
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	bfb8      	it	lt
 8005dd2:	f04f 0901 	movlt.w	r9, #1
 8005dd6:	2364      	movs	r3, #100	; 0x64
 8005dd8:	4481      	add	r9, r0
 8005dda:	fb99 f0f3 	sdiv	r0, r9, r3
 8005dde:	fb03 9910 	mls	r9, r3, r0, r9
 8005de2:	4499      	add	r9, r3
 8005de4:	fb99 f2f3 	sdiv	r2, r9, r3
 8005de8:	fb03 9312 	mls	r3, r3, r2, r9
 8005dec:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <__strftime+0x4b4>)
 8005dee:	e77e      	b.n	8005cee <__strftime+0x372>
 8005df0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005df4:	f000 fd24 	bl	8006840 <abs>
 8005df8:	2364      	movs	r3, #100	; 0x64
 8005dfa:	fb90 f2f3 	sdiv	r2, r0, r3
 8005dfe:	e7df      	b.n	8005dc0 <__strftime+0x444>
 8005e00:	d0e9      	beq.n	8005dd6 <__strftime+0x45a>
 8005e02:	696a      	ldr	r2, [r5, #20]
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <__strftime+0x498>)
 8005e06:	429a      	cmp	r2, r3
 8005e08:	bfb8      	it	lt
 8005e0a:	f04f 39ff 	movlt.w	r9, #4294967295
 8005e0e:	e7e2      	b.n	8005dd6 <__strftime+0x45a>
 8005e10:	08007d68 	.word	0x08007d68
 8005e14:	fffff894 	.word	0xfffff894
 8005e18:	08007fda 	.word	0x08007fda
 8005e1c:	08007d1b 	.word	0x08007d1b
 8005e20:	08007d13 	.word	0x08007d13
 8005e24:	08007d0c 	.word	0x08007d0c
 8005e28:	0800817f 	.word	0x0800817f
 8005e2c:	08007d1d 	.word	0x08007d1d
 8005e30:	08007d2b 	.word	0x08007d2b
 8005e34:	08007d21 	.word	0x08007d21
 8005e38:	08007d34 	.word	0x08007d34
 8005e3c:	08007d30 	.word	0x08007d30
 8005e40:	fffff895 	.word	0xfffff895
 8005e44:	696b      	ldr	r3, [r5, #20]
 8005e46:	4628      	mov	r0, r5
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	9a04      	ldr	r2, [sp, #16]
 8005e4c:	4bbc      	ldr	r3, [pc, #752]	; (8006140 <__strftime+0x7c4>)
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	bfac      	ite	ge
 8005e52:	2300      	movge	r3, #0
 8005e54:	2301      	movlt	r3, #1
 8005e56:	9305      	str	r3, [sp, #20]
 8005e58:	f7ff fd38 	bl	80058cc <iso_year_adjust>
 8005e5c:	9a04      	ldr	r2, [sp, #16]
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	db3a      	blt.n	8005eda <__strftime+0x55e>
 8005e64:	2264      	movs	r2, #100	; 0x64
 8005e66:	9904      	ldr	r1, [sp, #16]
 8005e68:	fb91 f2f2 	sdiv	r2, r1, r2
 8005e6c:	3213      	adds	r2, #19
 8005e6e:	6968      	ldr	r0, [r5, #20]
 8005e70:	2800      	cmp	r0, #0
 8005e72:	db3d      	blt.n	8005ef0 <__strftime+0x574>
 8005e74:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005e78:	fb90 fefc 	sdiv	lr, r0, ip
 8005e7c:	fb0c 001e 	mls	r0, ip, lr, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	da44      	bge.n	8005f0e <__strftime+0x592>
 8005e84:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8006164 <__strftime+0x7e8>
 8005e88:	6969      	ldr	r1, [r5, #20]
 8005e8a:	4561      	cmp	r1, ip
 8005e8c:	da01      	bge.n	8005e92 <__strftime+0x516>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	4403      	add	r3, r0
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	d146      	bne.n	8005f26 <__strftime+0x5aa>
 8005e98:	2363      	movs	r3, #99	; 0x63
 8005e9a:	3a01      	subs	r2, #1
 8005e9c:	2064      	movs	r0, #100	; 0x64
 8005e9e:	fb00 3202 	mla	r2, r0, r2, r3
 8005ea2:	9b05      	ldr	r3, [sp, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d043      	beq.n	8005f30 <__strftime+0x5b4>
 8005ea8:	232d      	movs	r3, #45	; 0x2d
 8005eaa:	f88d 3020 	strb.w	r3, [sp, #32]
 8005eae:	f1b9 0f00 	cmp.w	r9, #0
 8005eb2:	d001      	beq.n	8005eb8 <__strftime+0x53c>
 8005eb4:	f109 39ff 	add.w	r9, r9, #4294967295
 8005eb8:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8005ebc:	2125      	movs	r1, #37	; 0x25
 8005ebe:	7019      	strb	r1, [r3, #0]
 8005ec0:	f1ba 0f00 	cmp.w	sl, #0
 8005ec4:	d144      	bne.n	8005f50 <__strftime+0x5d4>
 8005ec6:	1c58      	adds	r0, r3, #1
 8005ec8:	499e      	ldr	r1, [pc, #632]	; (8006144 <__strftime+0x7c8>)
 8005eca:	9204      	str	r2, [sp, #16]
 8005ecc:	f001 f87a 	bl	8006fc4 <strcpy>
 8005ed0:	9a04      	ldr	r2, [sp, #16]
 8005ed2:	9200      	str	r2, [sp, #0]
 8005ed4:	464b      	mov	r3, r9
 8005ed6:	aa08      	add	r2, sp, #32
 8005ed8:	e09b      	b.n	8006012 <__strftime+0x696>
 8005eda:	9b04      	ldr	r3, [sp, #16]
 8005edc:	9006      	str	r0, [sp, #24]
 8005ede:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 8005ee2:	f000 fcad 	bl	8006840 <abs>
 8005ee6:	2264      	movs	r2, #100	; 0x64
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	fb90 f2f2 	sdiv	r2, r0, r2
 8005eee:	e7be      	b.n	8005e6e <__strftime+0x4f2>
 8005ef0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005ef4:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8005ef8:	f000 fca2 	bl	8006840 <abs>
 8005efc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005f00:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005f04:	fb90 fefc 	sdiv	lr, r0, ip
 8005f08:	fb0e 001c 	mls	r0, lr, ip, r0
 8005f0c:	e7b8      	b.n	8005e80 <__strftime+0x504>
 8005f0e:	d0c0      	beq.n	8005e92 <__strftime+0x516>
 8005f10:	9904      	ldr	r1, [sp, #16]
 8005f12:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8006140 <__strftime+0x7c4>
 8005f16:	4561      	cmp	r1, ip
 8005f18:	bfae      	itee	ge
 8005f1a:	2100      	movge	r1, #0
 8005f1c:	2101      	movlt	r1, #1
 8005f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f22:	9105      	str	r1, [sp, #20]
 8005f24:	e7b5      	b.n	8005e92 <__strftime+0x516>
 8005f26:	2b64      	cmp	r3, #100	; 0x64
 8005f28:	bf04      	itt	eq
 8005f2a:	3201      	addeq	r2, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	e7b5      	b.n	8005e9c <__strftime+0x520>
 8005f30:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005f34:	d110      	bne.n	8005f58 <__strftime+0x5dc>
 8005f36:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d90c      	bls.n	8005f58 <__strftime+0x5dc>
 8005f3e:	f88d a020 	strb.w	sl, [sp, #32]
 8005f42:	f1b9 0f00 	cmp.w	r9, #0
 8005f46:	d1b5      	bne.n	8005eb4 <__strftime+0x538>
 8005f48:	2125      	movs	r1, #37	; 0x25
 8005f4a:	ab10      	add	r3, sp, #64	; 0x40
 8005f4c:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 8005f50:	2130      	movs	r1, #48	; 0x30
 8005f52:	1c98      	adds	r0, r3, #2
 8005f54:	7059      	strb	r1, [r3, #1]
 8005f56:	e7b7      	b.n	8005ec8 <__strftime+0x54c>
 8005f58:	ab08      	add	r3, sp, #32
 8005f5a:	e7af      	b.n	8005ebc <__strftime+0x540>
 8005f5c:	487a      	ldr	r0, [pc, #488]	; (8006148 <__strftime+0x7cc>)
 8005f5e:	4a7b      	ldr	r2, [pc, #492]	; (800614c <__strftime+0x7d0>)
 8005f60:	68ab      	ldr	r3, [r5, #8]
 8005f62:	296b      	cmp	r1, #107	; 0x6b
 8005f64:	bf18      	it	ne
 8005f66:	4602      	movne	r2, r0
 8005f68:	e6c1      	b.n	8005cee <__strftime+0x372>
 8005f6a:	68ab      	ldr	r3, [r5, #8]
 8005f6c:	220c      	movs	r2, #12
 8005f6e:	b15b      	cbz	r3, 8005f88 <__strftime+0x60c>
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <__strftime+0x600>
 8005f74:	fb93 f0f2 	sdiv	r0, r3, r2
 8005f78:	fb02 3310 	mls	r3, r2, r0, r3
 8005f7c:	4873      	ldr	r0, [pc, #460]	; (800614c <__strftime+0x7d0>)
 8005f7e:	4a72      	ldr	r2, [pc, #456]	; (8006148 <__strftime+0x7cc>)
 8005f80:	2949      	cmp	r1, #73	; 0x49
 8005f82:	bf18      	it	ne
 8005f84:	4602      	movne	r2, r0
 8005f86:	e6b2      	b.n	8005cee <__strftime+0x372>
 8005f88:	4613      	mov	r3, r2
 8005f8a:	e7f7      	b.n	8005f7c <__strftime+0x600>
 8005f8c:	69eb      	ldr	r3, [r5, #28]
 8005f8e:	4a70      	ldr	r2, [pc, #448]	; (8006150 <__strftime+0x7d4>)
 8005f90:	3301      	adds	r3, #1
 8005f92:	e6ac      	b.n	8005cee <__strftime+0x372>
 8005f94:	692b      	ldr	r3, [r5, #16]
 8005f96:	3301      	adds	r3, #1
 8005f98:	e728      	b.n	8005dec <__strftime+0x470>
 8005f9a:	686b      	ldr	r3, [r5, #4]
 8005f9c:	e726      	b.n	8005dec <__strftime+0x470>
 8005f9e:	45a3      	cmp	fp, r4
 8005fa0:	f67f ad1f 	bls.w	80059e2 <__strftime+0x66>
 8005fa4:	230a      	movs	r3, #10
 8005fa6:	553b      	strb	r3, [r7, r4]
 8005fa8:	3401      	adds	r4, #1
 8005faa:	e5ed      	b.n	8005b88 <__strftime+0x20c>
 8005fac:	68ab      	ldr	r3, [r5, #8]
 8005fae:	2b0b      	cmp	r3, #11
 8005fb0:	bfcc      	ite	gt
 8005fb2:	22a4      	movgt	r2, #164	; 0xa4
 8005fb4:	22a0      	movle	r2, #160	; 0xa0
 8005fb6:	4b67      	ldr	r3, [pc, #412]	; (8006154 <__strftime+0x7d8>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005fbe:	4648      	mov	r0, r9
 8005fc0:	f7fa f8c6 	bl	8000150 <strlen>
 8005fc4:	eba9 0304 	sub.w	r3, r9, r4
 8005fc8:	eb04 0a00 	add.w	sl, r4, r0
 8005fcc:	45a2      	cmp	sl, r4
 8005fce:	d101      	bne.n	8005fd4 <__strftime+0x658>
 8005fd0:	4654      	mov	r4, sl
 8005fd2:	e5d9      	b.n	8005b88 <__strftime+0x20c>
 8005fd4:	45a3      	cmp	fp, r4
 8005fd6:	f67f ad04 	bls.w	80059e2 <__strftime+0x66>
 8005fda:	f898 2000 	ldrb.w	r2, [r8]
 8005fde:	f813 9004 	ldrb.w	r9, [r3, r4]
 8005fe2:	2a50      	cmp	r2, #80	; 0x50
 8005fe4:	d10d      	bne.n	8006002 <__strftime+0x686>
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	f000 fc90 	bl	800690c <__locale_ctype_ptr>
 8005fec:	4448      	add	r0, r9
 8005fee:	7842      	ldrb	r2, [r0, #1]
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	f002 0203 	and.w	r2, r2, #3
 8005ff6:	2a01      	cmp	r2, #1
 8005ff8:	bf08      	it	eq
 8005ffa:	f109 0920 	addeq.w	r9, r9, #32
 8005ffe:	fa5f f989 	uxtb.w	r9, r9
 8006002:	f807 9004 	strb.w	r9, [r7, r4]
 8006006:	3401      	adds	r4, #1
 8006008:	e7e0      	b.n	8005fcc <__strftime+0x650>
 800600a:	686b      	ldr	r3, [r5, #4]
 800600c:	4a52      	ldr	r2, [pc, #328]	; (8006158 <__strftime+0x7dc>)
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	68ab      	ldr	r3, [r5, #8]
 8006012:	1b31      	subs	r1, r6, r4
 8006014:	1938      	adds	r0, r7, r4
 8006016:	f000 ff75 	bl	8006f04 <sniprintf>
 800601a:	e66c      	b.n	8005cf6 <__strftime+0x37a>
 800601c:	6a2b      	ldr	r3, [r5, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	db7c      	blt.n	800611c <__strftime+0x7a0>
 8006022:	f000 fa87 	bl	8006534 <__tz_lock>
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	b90b      	cbnz	r3, 800602e <__strftime+0x6b2>
 800602a:	f000 fa85 	bl	8006538 <_tzset_unlocked>
 800602e:	f000 fc61 	bl	80068f4 <__gettzinfo>
 8006032:	6a2b      	ldr	r3, [r5, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	bfcc      	ite	gt
 8006038:	2350      	movgt	r3, #80	; 0x50
 800603a:	2328      	movle	r3, #40	; 0x28
 800603c:	58c3      	ldr	r3, [r0, r3]
 800603e:	425b      	negs	r3, r3
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	f000 fa78 	bl	8006536 <__tz_unlock>
 8006046:	2301      	movs	r3, #1
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800604e:	193b      	adds	r3, r7, r4
 8006050:	4662      	mov	r2, ip
 8006052:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 8006056:	9305      	str	r3, [sp, #20]
 8006058:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800605c:	f143 31ff 	adc.w	r1, r3, #4294967295
 8006060:	2800      	cmp	r0, #0
 8006062:	f171 0e00 	sbcs.w	lr, r1, #0
 8006066:	da03      	bge.n	8006070 <__strftime+0x6f4>
 8006068:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 800606c:	f143 31ff 	adc.w	r1, r3, #4294967295
 8006070:	0883      	lsrs	r3, r0, #2
 8006072:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8006076:	4699      	mov	r9, r3
 8006078:	108b      	asrs	r3, r1, #2
 800607a:	2164      	movs	r1, #100	; 0x64
 800607c:	f10c 30ff 	add.w	r0, ip, #4294967295
 8006080:	fb90 f1f1 	sdiv	r1, r0, r1
 8006084:	ebb9 0201 	subs.w	r2, r9, r1
 8006088:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 800608c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006090:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 8006094:	fb90 f1f1 	sdiv	r1, r0, r1
 8006098:	eb12 0901 	adds.w	r9, r2, r1
 800609c:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 80060a0:	f240 116d 	movw	r1, #365	; 0x16d
 80060a4:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80060a8:	fb01 fc0c 	mul.w	ip, r1, ip
 80060ac:	eb19 020c 	adds.w	r2, r9, ip
 80060b0:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 80060b4:	f04f 0c18 	mov.w	ip, #24
 80060b8:	69e9      	ldr	r1, [r5, #28]
 80060ba:	eb12 0901 	adds.w	r9, r2, r1
 80060be:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 80060c2:	fba9 230c 	umull	r2, r3, r9, ip
 80060c6:	4619      	mov	r1, r3
 80060c8:	fb0c 130a 	mla	r3, ip, sl, r1
 80060cc:	4610      	mov	r0, r2
 80060ce:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80060d2:	4619      	mov	r1, r3
 80060d4:	68ab      	ldr	r3, [r5, #8]
 80060d6:	18c0      	adds	r0, r0, r3
 80060d8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80060dc:	fba0 230c 	umull	r2, r3, r0, ip
 80060e0:	4691      	mov	r9, r2
 80060e2:	fb0c 3301 	mla	r3, ip, r1, r3
 80060e6:	6869      	ldr	r1, [r5, #4]
 80060e8:	eb19 0201 	adds.w	r2, r9, r1
 80060ec:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80060f0:	fba2 010c 	umull	r0, r1, r2, ip
 80060f4:	fb0c 1103 	mla	r1, ip, r3, r1
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	4a18      	ldr	r2, [pc, #96]	; (800615c <__strftime+0x7e0>)
 80060fc:	eb10 0903 	adds.w	r9, r0, r3
 8006100:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	ebb9 0003 	subs.w	r0, r9, r3
 800610a:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 800610e:	e9cd 0100 	strd	r0, r1, [sp]
 8006112:	1b31      	subs	r1, r6, r4
 8006114:	1938      	adds	r0, r7, r4
 8006116:	f000 fef5 	bl	8006f04 <sniprintf>
 800611a:	e5ec      	b.n	8005cf6 <__strftime+0x37a>
 800611c:	2300      	movs	r3, #0
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	e793      	b.n	800604a <__strftime+0x6ce>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	e662      	b.n	8005dec <__strftime+0x470>
 8006126:	45a3      	cmp	fp, r4
 8006128:	f67f ac5b 	bls.w	80059e2 <__strftime+0x66>
 800612c:	2309      	movs	r3, #9
 800612e:	e73a      	b.n	8005fa6 <__strftime+0x62a>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	4a0b      	ldr	r2, [pc, #44]	; (8006160 <__strftime+0x7e4>)
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	686b      	ldr	r3, [r5, #4]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	68ab      	ldr	r3, [r5, #8]
 800613c:	e5cc      	b.n	8005cd8 <__strftime+0x35c>
 800613e:	bf00      	nop
 8006140:	fffff894 	.word	0xfffff894
 8006144:	08007d3c 	.word	0x08007d3c
 8006148:	08007d2b 	.word	0x08007d2b
 800614c:	08007d1d 	.word	0x08007d1d
 8006150:	08007d40 	.word	0x08007d40
 8006154:	08007d68 	.word	0x08007d68
 8006158:	08007d4f 	.word	0x08007d4f
 800615c:	08007d45 	.word	0x08007d45
 8006160:	08007d4a 	.word	0x08007d4a
 8006164:	fffff895 	.word	0xfffff895
 8006168:	45a3      	cmp	fp, r4
 800616a:	f67f ac3a 	bls.w	80059e2 <__strftime+0x66>
 800616e:	69ab      	ldr	r3, [r5, #24]
 8006170:	193a      	adds	r2, r7, r4
 8006172:	3401      	adds	r4, #1
 8006174:	b913      	cbnz	r3, 800617c <__strftime+0x800>
 8006176:	2337      	movs	r3, #55	; 0x37
 8006178:	7013      	strb	r3, [r2, #0]
 800617a:	e505      	b.n	8005b88 <__strftime+0x20c>
 800617c:	3330      	adds	r3, #48	; 0x30
 800617e:	e7fb      	b.n	8006178 <__strftime+0x7fc>
 8006180:	69eb      	ldr	r3, [r5, #28]
 8006182:	69aa      	ldr	r2, [r5, #24]
 8006184:	3307      	adds	r3, #7
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	2207      	movs	r2, #7
 800618a:	fb93 f3f2 	sdiv	r3, r3, r2
 800618e:	e62d      	b.n	8005dec <__strftime+0x470>
 8006190:	4628      	mov	r0, r5
 8006192:	f7ff fb9b 	bl	80058cc <iso_year_adjust>
 8006196:	69aa      	ldr	r2, [r5, #24]
 8006198:	b132      	cbz	r2, 80061a8 <__strftime+0x82c>
 800619a:	3a01      	subs	r2, #1
 800619c:	2800      	cmp	r0, #0
 800619e:	dc27      	bgt.n	80061f0 <__strftime+0x874>
 80061a0:	69eb      	ldr	r3, [r5, #28]
 80061a2:	d103      	bne.n	80061ac <__strftime+0x830>
 80061a4:	330a      	adds	r3, #10
 80061a6:	e7ee      	b.n	8006186 <__strftime+0x80a>
 80061a8:	2206      	movs	r2, #6
 80061aa:	e7f7      	b.n	800619c <__strftime+0x820>
 80061ac:	6968      	ldr	r0, [r5, #20]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f240 726b 	movw	r2, #1899	; 0x76b
 80061b6:	bfa8      	it	ge
 80061b8:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80061bc:	4410      	add	r0, r2
 80061be:	0782      	lsls	r2, r0, #30
 80061c0:	d105      	bne.n	80061ce <__strftime+0x852>
 80061c2:	2264      	movs	r2, #100	; 0x64
 80061c4:	fb90 f1f2 	sdiv	r1, r0, r2
 80061c8:	fb02 0111 	mls	r1, r2, r1, r0
 80061cc:	b971      	cbnz	r1, 80061ec <__strftime+0x870>
 80061ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80061d2:	fb90 f2f1 	sdiv	r2, r0, r1
 80061d6:	fb01 0212 	mls	r2, r1, r2, r0
 80061da:	fab2 f282 	clz	r2, r2
 80061de:	0952      	lsrs	r2, r2, #5
 80061e0:	1a9a      	subs	r2, r3, r2
 80061e2:	2a04      	cmp	r2, #4
 80061e4:	bfcc      	ite	gt
 80061e6:	2334      	movgt	r3, #52	; 0x34
 80061e8:	2335      	movle	r3, #53	; 0x35
 80061ea:	e5ff      	b.n	8005dec <__strftime+0x470>
 80061ec:	2201      	movs	r2, #1
 80061ee:	e7f7      	b.n	80061e0 <__strftime+0x864>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e5fb      	b.n	8005dec <__strftime+0x470>
 80061f4:	45a3      	cmp	fp, r4
 80061f6:	f67f abf4 	bls.w	80059e2 <__strftime+0x66>
 80061fa:	69ab      	ldr	r3, [r5, #24]
 80061fc:	3330      	adds	r3, #48	; 0x30
 80061fe:	e6d2      	b.n	8005fa6 <__strftime+0x62a>
 8006200:	69ab      	ldr	r3, [r5, #24]
 8006202:	b13b      	cbz	r3, 8006214 <__strftime+0x898>
 8006204:	3b01      	subs	r3, #1
 8006206:	69ea      	ldr	r2, [r5, #28]
 8006208:	3207      	adds	r2, #7
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	2307      	movs	r3, #7
 800620e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006212:	e5eb      	b.n	8005dec <__strftime+0x470>
 8006214:	2306      	movs	r3, #6
 8006216:	e7f6      	b.n	8006206 <__strftime+0x88a>
 8006218:	6968      	ldr	r0, [r5, #20]
 800621a:	2800      	cmp	r0, #0
 800621c:	db05      	blt.n	800622a <__strftime+0x8ae>
 800621e:	2264      	movs	r2, #100	; 0x64
 8006220:	fb90 f3f2 	sdiv	r3, r0, r2
 8006224:	fb02 0313 	mls	r3, r2, r3, r0
 8006228:	e5e0      	b.n	8005dec <__strftime+0x470>
 800622a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800622e:	f000 fb07 	bl	8006840 <abs>
 8006232:	2364      	movs	r3, #100	; 0x64
 8006234:	fb90 f2f3 	sdiv	r2, r0, r3
 8006238:	e7f4      	b.n	8006224 <__strftime+0x8a8>
 800623a:	696b      	ldr	r3, [r5, #20]
 800623c:	4a52      	ldr	r2, [pc, #328]	; (8006388 <__strftime+0xa0c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	da18      	bge.n	8006274 <__strftime+0x8f8>
 8006242:	212d      	movs	r1, #45	; 0x2d
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f88d 1020 	strb.w	r1, [sp, #32]
 800624a:	f1b9 0f00 	cmp.w	r9, #0
 800624e:	d001      	beq.n	8006254 <__strftime+0x8d8>
 8006250:	f109 39ff 	add.w	r9, r9, #4294967295
 8006254:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 8006258:	2125      	movs	r1, #37	; 0x25
 800625a:	7011      	strb	r1, [r2, #0]
 800625c:	f1ba 0f00 	cmp.w	sl, #0
 8006260:	f040 8088 	bne.w	8006374 <__strftime+0x9f8>
 8006264:	1c50      	adds	r0, r2, #1
 8006266:	4949      	ldr	r1, [pc, #292]	; (800638c <__strftime+0xa10>)
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	f000 feab 	bl	8006fc4 <strcpy>
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	e62f      	b.n	8005ed4 <__strftime+0x558>
 8006274:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8006278:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800627c:	f040 8081 	bne.w	8006382 <__strftime+0xa06>
 8006280:	f242 720f 	movw	r2, #9999	; 0x270f
 8006284:	4293      	cmp	r3, r2
 8006286:	d979      	bls.n	800637c <__strftime+0xa00>
 8006288:	f88d a020 	strb.w	sl, [sp, #32]
 800628c:	e7dd      	b.n	800624a <__strftime+0x8ce>
 800628e:	6a2b      	ldr	r3, [r5, #32]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f6ff ac79 	blt.w	8005b88 <__strftime+0x20c>
 8006296:	f000 f94d 	bl	8006534 <__tz_lock>
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	b90b      	cbnz	r3, 80062a2 <__strftime+0x926>
 800629e:	f000 f94b 	bl	8006538 <_tzset_unlocked>
 80062a2:	f000 fb27 	bl	80068f4 <__gettzinfo>
 80062a6:	6a2b      	ldr	r3, [r5, #32]
 80062a8:	eb07 0a04 	add.w	sl, r7, r4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfcc      	ite	gt
 80062b0:	2350      	movgt	r3, #80	; 0x50
 80062b2:	2328      	movle	r3, #40	; 0x28
 80062b4:	58c3      	ldr	r3, [r0, r3]
 80062b6:	f1c3 0900 	rsb	r9, r3, #0
 80062ba:	f000 f93c 	bl	8006536 <__tz_unlock>
 80062be:	233c      	movs	r3, #60	; 0x3c
 80062c0:	1b31      	subs	r1, r6, r4
 80062c2:	fb99 f0f3 	sdiv	r0, r9, r3
 80062c6:	9104      	str	r1, [sp, #16]
 80062c8:	9303      	str	r3, [sp, #12]
 80062ca:	f000 fb17 	bl	80068fc <labs>
 80062ce:	9b03      	ldr	r3, [sp, #12]
 80062d0:	9904      	ldr	r1, [sp, #16]
 80062d2:	fb90 f2f3 	sdiv	r2, r0, r3
 80062d6:	fb02 0013 	mls	r0, r2, r3, r0
 80062da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80062de:	9000      	str	r0, [sp, #0]
 80062e0:	fb99 f3f3 	sdiv	r3, r9, r3
 80062e4:	4a2a      	ldr	r2, [pc, #168]	; (8006390 <__strftime+0xa14>)
 80062e6:	4650      	mov	r0, sl
 80062e8:	f000 fe0c 	bl	8006f04 <sniprintf>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f6ff ab78 	blt.w	80059e2 <__strftime+0x66>
 80062f2:	4404      	add	r4, r0
 80062f4:	42a6      	cmp	r6, r4
 80062f6:	f67f ab74 	bls.w	80059e2 <__strftime+0x66>
 80062fa:	2301      	movs	r3, #1
 80062fc:	9303      	str	r3, [sp, #12]
 80062fe:	e443      	b.n	8005b88 <__strftime+0x20c>
 8006300:	6a2b      	ldr	r3, [r5, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f6ff ac40 	blt.w	8005b88 <__strftime+0x20c>
 8006308:	f000 f914 	bl	8006534 <__tz_lock>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	b90b      	cbnz	r3, 8006314 <__strftime+0x998>
 8006310:	f000 f912 	bl	8006538 <_tzset_unlocked>
 8006314:	6a2b      	ldr	r3, [r5, #32]
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <__strftime+0xa18>)
 8006318:	2b00      	cmp	r3, #0
 800631a:	bfd4      	ite	le
 800631c:	2300      	movle	r3, #0
 800631e:	2301      	movgt	r3, #1
 8006320:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8006324:	4648      	mov	r0, r9
 8006326:	f7f9 ff13 	bl	8000150 <strlen>
 800632a:	eba9 0904 	sub.w	r9, r9, r4
 800632e:	eb04 0a00 	add.w	sl, r4, r0
 8006332:	45a2      	cmp	sl, r4
 8006334:	d103      	bne.n	800633e <__strftime+0x9c2>
 8006336:	f000 f8fe 	bl	8006536 <__tz_unlock>
 800633a:	4654      	mov	r4, sl
 800633c:	e7dd      	b.n	80062fa <__strftime+0x97e>
 800633e:	45a3      	cmp	fp, r4
 8006340:	d904      	bls.n	800634c <__strftime+0x9d0>
 8006342:	f819 3004 	ldrb.w	r3, [r9, r4]
 8006346:	553b      	strb	r3, [r7, r4]
 8006348:	3401      	adds	r4, #1
 800634a:	e7f2      	b.n	8006332 <__strftime+0x9b6>
 800634c:	f000 f8f3 	bl	8006536 <__tz_unlock>
 8006350:	f7ff bb47 	b.w	80059e2 <__strftime+0x66>
 8006354:	45a3      	cmp	fp, r4
 8006356:	f67f ab44 	bls.w	80059e2 <__strftime+0x66>
 800635a:	2325      	movs	r3, #37	; 0x25
 800635c:	e623      	b.n	8005fa6 <__strftime+0x62a>
 800635e:	b10e      	cbz	r6, 8006364 <__strftime+0x9e8>
 8006360:	2300      	movs	r3, #0
 8006362:	553b      	strb	r3, [r7, r4]
 8006364:	4620      	mov	r0, r4
 8006366:	b011      	add	sp, #68	; 0x44
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	2225      	movs	r2, #37	; 0x25
 800636e:	f88d 2020 	strb.w	r2, [sp, #32]
 8006372:	aa08      	add	r2, sp, #32
 8006374:	2130      	movs	r1, #48	; 0x30
 8006376:	1c90      	adds	r0, r2, #2
 8006378:	7051      	strb	r1, [r2, #1]
 800637a:	e774      	b.n	8006266 <__strftime+0x8ea>
 800637c:	f1b9 0f00 	cmp.w	r9, #0
 8006380:	d1f4      	bne.n	800636c <__strftime+0x9f0>
 8006382:	aa08      	add	r2, sp, #32
 8006384:	e768      	b.n	8006258 <__strftime+0x8dc>
 8006386:	bf00      	nop
 8006388:	fffff894 	.word	0xfffff894
 800638c:	08007d3c 	.word	0x08007d3c
 8006390:	08007d59 	.word	0x08007d59
 8006394:	20000074 	.word	0x20000074

08006398 <strftime>:
 8006398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639a:	4c06      	ldr	r4, [pc, #24]	; (80063b4 <strftime+0x1c>)
 800639c:	4d06      	ldr	r5, [pc, #24]	; (80063b8 <strftime+0x20>)
 800639e:	6824      	ldr	r4, [r4, #0]
 80063a0:	6a24      	ldr	r4, [r4, #32]
 80063a2:	2c00      	cmp	r4, #0
 80063a4:	bf08      	it	eq
 80063a6:	462c      	moveq	r4, r5
 80063a8:	9400      	str	r4, [sp, #0]
 80063aa:	f7ff fae7 	bl	800597c <__strftime>
 80063ae:	b003      	add	sp, #12
 80063b0:	bd30      	pop	{r4, r5, pc}
 80063b2:	bf00      	nop
 80063b4:	20000010 	.word	0x20000010
 80063b8:	200000d8 	.word	0x200000d8

080063bc <_strtoul_l.isra.0>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	4680      	mov	r8, r0
 80063c2:	4689      	mov	r9, r1
 80063c4:	4692      	mov	sl, r2
 80063c6:	461e      	mov	r6, r3
 80063c8:	460f      	mov	r7, r1
 80063ca:	463d      	mov	r5, r7
 80063cc:	9808      	ldr	r0, [sp, #32]
 80063ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063d2:	f000 fa97 	bl	8006904 <__locale_ctype_ptr_l>
 80063d6:	4420      	add	r0, r4
 80063d8:	7843      	ldrb	r3, [r0, #1]
 80063da:	f013 0308 	ands.w	r3, r3, #8
 80063de:	d130      	bne.n	8006442 <_strtoul_l.isra.0+0x86>
 80063e0:	2c2d      	cmp	r4, #45	; 0x2d
 80063e2:	d130      	bne.n	8006446 <_strtoul_l.isra.0+0x8a>
 80063e4:	2101      	movs	r1, #1
 80063e6:	787c      	ldrb	r4, [r7, #1]
 80063e8:	1cbd      	adds	r5, r7, #2
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	d05c      	beq.n	80064a8 <_strtoul_l.isra.0+0xec>
 80063ee:	2e10      	cmp	r6, #16
 80063f0:	d109      	bne.n	8006406 <_strtoul_l.isra.0+0x4a>
 80063f2:	2c30      	cmp	r4, #48	; 0x30
 80063f4:	d107      	bne.n	8006406 <_strtoul_l.isra.0+0x4a>
 80063f6:	782b      	ldrb	r3, [r5, #0]
 80063f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063fc:	2b58      	cmp	r3, #88	; 0x58
 80063fe:	d14e      	bne.n	800649e <_strtoul_l.isra.0+0xe2>
 8006400:	2610      	movs	r6, #16
 8006402:	786c      	ldrb	r4, [r5, #1]
 8006404:	3502      	adds	r5, #2
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	fbb2 f2f6 	udiv	r2, r2, r6
 800640e:	2300      	movs	r3, #0
 8006410:	fb06 fc02 	mul.w	ip, r6, r2
 8006414:	4618      	mov	r0, r3
 8006416:	ea6f 0c0c 	mvn.w	ip, ip
 800641a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800641e:	2f09      	cmp	r7, #9
 8006420:	d817      	bhi.n	8006452 <_strtoul_l.isra.0+0x96>
 8006422:	463c      	mov	r4, r7
 8006424:	42a6      	cmp	r6, r4
 8006426:	dd23      	ble.n	8006470 <_strtoul_l.isra.0+0xb4>
 8006428:	2b00      	cmp	r3, #0
 800642a:	db1e      	blt.n	800646a <_strtoul_l.isra.0+0xae>
 800642c:	4282      	cmp	r2, r0
 800642e:	d31c      	bcc.n	800646a <_strtoul_l.isra.0+0xae>
 8006430:	d101      	bne.n	8006436 <_strtoul_l.isra.0+0x7a>
 8006432:	45a4      	cmp	ip, r4
 8006434:	db19      	blt.n	800646a <_strtoul_l.isra.0+0xae>
 8006436:	2301      	movs	r3, #1
 8006438:	fb00 4006 	mla	r0, r0, r6, r4
 800643c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006440:	e7eb      	b.n	800641a <_strtoul_l.isra.0+0x5e>
 8006442:	462f      	mov	r7, r5
 8006444:	e7c1      	b.n	80063ca <_strtoul_l.isra.0+0xe>
 8006446:	2c2b      	cmp	r4, #43	; 0x2b
 8006448:	bf04      	itt	eq
 800644a:	1cbd      	addeq	r5, r7, #2
 800644c:	787c      	ldrbeq	r4, [r7, #1]
 800644e:	4619      	mov	r1, r3
 8006450:	e7cb      	b.n	80063ea <_strtoul_l.isra.0+0x2e>
 8006452:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006456:	2f19      	cmp	r7, #25
 8006458:	d801      	bhi.n	800645e <_strtoul_l.isra.0+0xa2>
 800645a:	3c37      	subs	r4, #55	; 0x37
 800645c:	e7e2      	b.n	8006424 <_strtoul_l.isra.0+0x68>
 800645e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006462:	2f19      	cmp	r7, #25
 8006464:	d804      	bhi.n	8006470 <_strtoul_l.isra.0+0xb4>
 8006466:	3c57      	subs	r4, #87	; 0x57
 8006468:	e7dc      	b.n	8006424 <_strtoul_l.isra.0+0x68>
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	e7e5      	b.n	800643c <_strtoul_l.isra.0+0x80>
 8006470:	2b00      	cmp	r3, #0
 8006472:	da09      	bge.n	8006488 <_strtoul_l.isra.0+0xcc>
 8006474:	2322      	movs	r3, #34	; 0x22
 8006476:	f04f 30ff 	mov.w	r0, #4294967295
 800647a:	f8c8 3000 	str.w	r3, [r8]
 800647e:	f1ba 0f00 	cmp.w	sl, #0
 8006482:	d107      	bne.n	8006494 <_strtoul_l.isra.0+0xd8>
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	b101      	cbz	r1, 800648c <_strtoul_l.isra.0+0xd0>
 800648a:	4240      	negs	r0, r0
 800648c:	f1ba 0f00 	cmp.w	sl, #0
 8006490:	d0f8      	beq.n	8006484 <_strtoul_l.isra.0+0xc8>
 8006492:	b10b      	cbz	r3, 8006498 <_strtoul_l.isra.0+0xdc>
 8006494:	f105 39ff 	add.w	r9, r5, #4294967295
 8006498:	f8ca 9000 	str.w	r9, [sl]
 800649c:	e7f2      	b.n	8006484 <_strtoul_l.isra.0+0xc8>
 800649e:	2430      	movs	r4, #48	; 0x30
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	d1b0      	bne.n	8006406 <_strtoul_l.isra.0+0x4a>
 80064a4:	2608      	movs	r6, #8
 80064a6:	e7ae      	b.n	8006406 <_strtoul_l.isra.0+0x4a>
 80064a8:	2c30      	cmp	r4, #48	; 0x30
 80064aa:	d0a4      	beq.n	80063f6 <_strtoul_l.isra.0+0x3a>
 80064ac:	260a      	movs	r6, #10
 80064ae:	e7aa      	b.n	8006406 <_strtoul_l.isra.0+0x4a>

080064b0 <_strtoul_r>:
 80064b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064b2:	4c06      	ldr	r4, [pc, #24]	; (80064cc <_strtoul_r+0x1c>)
 80064b4:	4d06      	ldr	r5, [pc, #24]	; (80064d0 <_strtoul_r+0x20>)
 80064b6:	6824      	ldr	r4, [r4, #0]
 80064b8:	6a24      	ldr	r4, [r4, #32]
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	bf08      	it	eq
 80064be:	462c      	moveq	r4, r5
 80064c0:	9400      	str	r4, [sp, #0]
 80064c2:	f7ff ff7b 	bl	80063bc <_strtoul_l.isra.0>
 80064c6:	b003      	add	sp, #12
 80064c8:	bd30      	pop	{r4, r5, pc}
 80064ca:	bf00      	nop
 80064cc:	20000010 	.word	0x20000010
 80064d0:	200000d8 	.word	0x200000d8

080064d4 <strtoul>:
 80064d4:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <strtoul+0x24>)
 80064d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	4d08      	ldr	r5, [pc, #32]	; (80064fc <strtoul+0x28>)
 80064dc:	6a23      	ldr	r3, [r4, #32]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf08      	it	eq
 80064e2:	462b      	moveq	r3, r5
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	4613      	mov	r3, r2
 80064e8:	460a      	mov	r2, r1
 80064ea:	4601      	mov	r1, r0
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff ff65 	bl	80063bc <_strtoul_l.isra.0>
 80064f2:	b003      	add	sp, #12
 80064f4:	bd30      	pop	{r4, r5, pc}
 80064f6:	bf00      	nop
 80064f8:	20000010 	.word	0x20000010
 80064fc:	200000d8 	.word	0x200000d8

08006500 <time>:
 8006500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <time+0x30>)
 8006504:	4604      	mov	r4, r0
 8006506:	2200      	movs	r2, #0
 8006508:	4669      	mov	r1, sp
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	f000 f9e0 	bl	80068d0 <_gettimeofday_r>
 8006510:	2800      	cmp	r0, #0
 8006512:	da05      	bge.n	8006520 <time+0x20>
 8006514:	f04f 32ff 	mov.w	r2, #4294967295
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	e9cd 2300 	strd	r2, r3, [sp]
 8006520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006524:	b10c      	cbz	r4, 800652a <time+0x2a>
 8006526:	e9c4 0100 	strd	r0, r1, [r4]
 800652a:	b004      	add	sp, #16
 800652c:	bd10      	pop	{r4, pc}
 800652e:	bf00      	nop
 8006530:	20000010 	.word	0x20000010

08006534 <__tz_lock>:
 8006534:	4770      	bx	lr

08006536 <__tz_unlock>:
 8006536:	4770      	bx	lr

08006538 <_tzset_unlocked>:
 8006538:	4b01      	ldr	r3, [pc, #4]	; (8006540 <_tzset_unlocked+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	f000 b802 	b.w	8006544 <_tzset_unlocked_r>
 8006540:	20000010 	.word	0x20000010

08006544 <_tzset_unlocked_r>:
 8006544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	b08d      	sub	sp, #52	; 0x34
 800654a:	4607      	mov	r7, r0
 800654c:	f000 f9d2 	bl	80068f4 <__gettzinfo>
 8006550:	49af      	ldr	r1, [pc, #700]	; (8006810 <_tzset_unlocked_r+0x2cc>)
 8006552:	4605      	mov	r5, r0
 8006554:	4638      	mov	r0, r7
 8006556:	f000 f9b3 	bl	80068c0 <_getenv_r>
 800655a:	4eae      	ldr	r6, [pc, #696]	; (8006814 <_tzset_unlocked_r+0x2d0>)
 800655c:	4604      	mov	r4, r0
 800655e:	b970      	cbnz	r0, 800657e <_tzset_unlocked_r+0x3a>
 8006560:	4bad      	ldr	r3, [pc, #692]	; (8006818 <_tzset_unlocked_r+0x2d4>)
 8006562:	4aae      	ldr	r2, [pc, #696]	; (800681c <_tzset_unlocked_r+0x2d8>)
 8006564:	6018      	str	r0, [r3, #0]
 8006566:	4bae      	ldr	r3, [pc, #696]	; (8006820 <_tzset_unlocked_r+0x2dc>)
 8006568:	6018      	str	r0, [r3, #0]
 800656a:	4bae      	ldr	r3, [pc, #696]	; (8006824 <_tzset_unlocked_r+0x2e0>)
 800656c:	6830      	ldr	r0, [r6, #0]
 800656e:	e9c3 2200 	strd	r2, r2, [r3]
 8006572:	f7ff f8e5 	bl	8005740 <free>
 8006576:	6034      	str	r4, [r6, #0]
 8006578:	b00d      	add	sp, #52	; 0x34
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	6831      	ldr	r1, [r6, #0]
 8006580:	2900      	cmp	r1, #0
 8006582:	d15f      	bne.n	8006644 <_tzset_unlocked_r+0x100>
 8006584:	6830      	ldr	r0, [r6, #0]
 8006586:	f7ff f8db 	bl	8005740 <free>
 800658a:	4620      	mov	r0, r4
 800658c:	f7f9 fde0 	bl	8000150 <strlen>
 8006590:	1c41      	adds	r1, r0, #1
 8006592:	4638      	mov	r0, r7
 8006594:	f7ff f930 	bl	80057f8 <_malloc_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	2800      	cmp	r0, #0
 800659c:	d157      	bne.n	800664e <_tzset_unlocked_r+0x10a>
 800659e:	7823      	ldrb	r3, [r4, #0]
 80065a0:	ae0a      	add	r6, sp, #40	; 0x28
 80065a2:	2b3a      	cmp	r3, #58	; 0x3a
 80065a4:	bf08      	it	eq
 80065a6:	3401      	addeq	r4, #1
 80065a8:	4633      	mov	r3, r6
 80065aa:	4a9f      	ldr	r2, [pc, #636]	; (8006828 <_tzset_unlocked_r+0x2e4>)
 80065ac:	499f      	ldr	r1, [pc, #636]	; (800682c <_tzset_unlocked_r+0x2e8>)
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 fcdc 	bl	8006f6c <siscanf>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	dddf      	ble.n	8006578 <_tzset_unlocked_r+0x34>
 80065b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ba:	18e7      	adds	r7, r4, r3
 80065bc:	5ce3      	ldrb	r3, [r4, r3]
 80065be:	2b2d      	cmp	r3, #45	; 0x2d
 80065c0:	d149      	bne.n	8006656 <_tzset_unlocked_r+0x112>
 80065c2:	f04f 34ff 	mov.w	r4, #4294967295
 80065c6:	3701      	adds	r7, #1
 80065c8:	f04f 0800 	mov.w	r8, #0
 80065cc:	f10d 0a20 	add.w	sl, sp, #32
 80065d0:	f10d 0b1e 	add.w	fp, sp, #30
 80065d4:	9603      	str	r6, [sp, #12]
 80065d6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80065da:	f8cd b000 	str.w	fp, [sp]
 80065de:	4633      	mov	r3, r6
 80065e0:	aa07      	add	r2, sp, #28
 80065e2:	4993      	ldr	r1, [pc, #588]	; (8006830 <_tzset_unlocked_r+0x2ec>)
 80065e4:	4638      	mov	r0, r7
 80065e6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80065ea:	f8ad 8020 	strh.w	r8, [sp, #32]
 80065ee:	f000 fcbd 	bl	8006f6c <siscanf>
 80065f2:	4540      	cmp	r0, r8
 80065f4:	ddc0      	ble.n	8006578 <_tzset_unlocked_r+0x34>
 80065f6:	213c      	movs	r1, #60	; 0x3c
 80065f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80065fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006600:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800683c <_tzset_unlocked_r+0x2f8>
 8006604:	fb01 2203 	mla	r2, r1, r3, r2
 8006608:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800660c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006610:	fb01 2303 	mla	r3, r1, r3, r2
 8006614:	435c      	muls	r4, r3
 8006616:	4b84      	ldr	r3, [pc, #528]	; (8006828 <_tzset_unlocked_r+0x2e4>)
 8006618:	62ac      	str	r4, [r5, #40]	; 0x28
 800661a:	4c82      	ldr	r4, [pc, #520]	; (8006824 <_tzset_unlocked_r+0x2e0>)
 800661c:	464a      	mov	r2, r9
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	4982      	ldr	r1, [pc, #520]	; (800682c <_tzset_unlocked_r+0x2e8>)
 8006624:	441f      	add	r7, r3
 8006626:	4638      	mov	r0, r7
 8006628:	4633      	mov	r3, r6
 800662a:	f000 fc9f 	bl	8006f6c <siscanf>
 800662e:	4540      	cmp	r0, r8
 8006630:	dc16      	bgt.n	8006660 <_tzset_unlocked_r+0x11c>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	4b77      	ldr	r3, [pc, #476]	; (8006818 <_tzset_unlocked_r+0x2d4>)
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	4b78      	ldr	r3, [pc, #480]	; (8006820 <_tzset_unlocked_r+0x2dc>)
 800663e:	f8c3 8000 	str.w	r8, [r3]
 8006642:	e799      	b.n	8006578 <_tzset_unlocked_r+0x34>
 8006644:	f7f9 fd8c 	bl	8000160 <strcmp>
 8006648:	2800      	cmp	r0, #0
 800664a:	d095      	beq.n	8006578 <_tzset_unlocked_r+0x34>
 800664c:	e79a      	b.n	8006584 <_tzset_unlocked_r+0x40>
 800664e:	4621      	mov	r1, r4
 8006650:	f000 fcb8 	bl	8006fc4 <strcpy>
 8006654:	e7a3      	b.n	800659e <_tzset_unlocked_r+0x5a>
 8006656:	2b2b      	cmp	r3, #43	; 0x2b
 8006658:	bf08      	it	eq
 800665a:	3701      	addeq	r7, #1
 800665c:	2401      	movs	r4, #1
 800665e:	e7b3      	b.n	80065c8 <_tzset_unlocked_r+0x84>
 8006660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006662:	f8c4 9004 	str.w	r9, [r4, #4]
 8006666:	18fc      	adds	r4, r7, r3
 8006668:	5cfb      	ldrb	r3, [r7, r3]
 800666a:	2b2d      	cmp	r3, #45	; 0x2d
 800666c:	f040 808c 	bne.w	8006788 <_tzset_unlocked_r+0x244>
 8006670:	f04f 37ff 	mov.w	r7, #4294967295
 8006674:	3401      	adds	r4, #1
 8006676:	2300      	movs	r3, #0
 8006678:	e9cd a602 	strd	sl, r6, [sp, #8]
 800667c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006680:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006684:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006688:	930a      	str	r3, [sp, #40]	; 0x28
 800668a:	e9cd b600 	strd	fp, r6, [sp]
 800668e:	4633      	mov	r3, r6
 8006690:	aa07      	add	r2, sp, #28
 8006692:	4967      	ldr	r1, [pc, #412]	; (8006830 <_tzset_unlocked_r+0x2ec>)
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fc69 	bl	8006f6c <siscanf>
 800669a:	2800      	cmp	r0, #0
 800669c:	dc79      	bgt.n	8006792 <_tzset_unlocked_r+0x24e>
 800669e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80066a0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80066a4:	652b      	str	r3, [r5, #80]	; 0x50
 80066a6:	462f      	mov	r7, r5
 80066a8:	f04f 0900 	mov.w	r9, #0
 80066ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ae:	441c      	add	r4, r3
 80066b0:	7823      	ldrb	r3, [r4, #0]
 80066b2:	2b2c      	cmp	r3, #44	; 0x2c
 80066b4:	bf08      	it	eq
 80066b6:	3401      	addeq	r4, #1
 80066b8:	f894 8000 	ldrb.w	r8, [r4]
 80066bc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80066c0:	d17a      	bne.n	80067b8 <_tzset_unlocked_r+0x274>
 80066c2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80066c6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80066ca:	ab09      	add	r3, sp, #36	; 0x24
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	9603      	str	r6, [sp, #12]
 80066d0:	4633      	mov	r3, r6
 80066d2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80066d6:	4957      	ldr	r1, [pc, #348]	; (8006834 <_tzset_unlocked_r+0x2f0>)
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 fc47 	bl	8006f6c <siscanf>
 80066de:	2803      	cmp	r0, #3
 80066e0:	f47f af4a 	bne.w	8006578 <_tzset_unlocked_r+0x34>
 80066e4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80066e8:	1e4b      	subs	r3, r1, #1
 80066ea:	2b0b      	cmp	r3, #11
 80066ec:	f63f af44 	bhi.w	8006578 <_tzset_unlocked_r+0x34>
 80066f0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80066f4:	1e53      	subs	r3, r2, #1
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	f63f af3e 	bhi.w	8006578 <_tzset_unlocked_r+0x34>
 80066fc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006700:	2b06      	cmp	r3, #6
 8006702:	f63f af39 	bhi.w	8006578 <_tzset_unlocked_r+0x34>
 8006706:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800670a:	f887 8008 	strb.w	r8, [r7, #8]
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006712:	eb04 0803 	add.w	r8, r4, r3
 8006716:	2302      	movs	r3, #2
 8006718:	f8ad 301c 	strh.w	r3, [sp, #28]
 800671c:	2300      	movs	r3, #0
 800671e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006722:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006726:	930a      	str	r3, [sp, #40]	; 0x28
 8006728:	f898 3000 	ldrb.w	r3, [r8]
 800672c:	2b2f      	cmp	r3, #47	; 0x2f
 800672e:	d109      	bne.n	8006744 <_tzset_unlocked_r+0x200>
 8006730:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006734:	e9cd b600 	strd	fp, r6, [sp]
 8006738:	4633      	mov	r3, r6
 800673a:	aa07      	add	r2, sp, #28
 800673c:	493e      	ldr	r1, [pc, #248]	; (8006838 <_tzset_unlocked_r+0x2f4>)
 800673e:	4640      	mov	r0, r8
 8006740:	f000 fc14 	bl	8006f6c <siscanf>
 8006744:	213c      	movs	r1, #60	; 0x3c
 8006746:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800674a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800674e:	3728      	adds	r7, #40	; 0x28
 8006750:	fb01 2203 	mla	r2, r1, r3, r2
 8006754:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006758:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800675c:	fb01 2303 	mla	r3, r1, r3, r2
 8006760:	f847 3c10 	str.w	r3, [r7, #-16]
 8006764:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006766:	4444      	add	r4, r8
 8006768:	f1b9 0f00 	cmp.w	r9, #0
 800676c:	d021      	beq.n	80067b2 <_tzset_unlocked_r+0x26e>
 800676e:	6868      	ldr	r0, [r5, #4]
 8006770:	f000 fc42 	bl	8006ff8 <__tzcalc_limits>
 8006774:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006776:	4b28      	ldr	r3, [pc, #160]	; (8006818 <_tzset_unlocked_r+0x2d4>)
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	bf18      	it	ne
 8006780:	2301      	movne	r3, #1
 8006782:	4a27      	ldr	r2, [pc, #156]	; (8006820 <_tzset_unlocked_r+0x2dc>)
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e6f7      	b.n	8006578 <_tzset_unlocked_r+0x34>
 8006788:	2b2b      	cmp	r3, #43	; 0x2b
 800678a:	bf08      	it	eq
 800678c:	3401      	addeq	r4, #1
 800678e:	2701      	movs	r7, #1
 8006790:	e771      	b.n	8006676 <_tzset_unlocked_r+0x132>
 8006792:	213c      	movs	r1, #60	; 0x3c
 8006794:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006798:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800679c:	fb01 2203 	mla	r2, r1, r3, r2
 80067a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80067a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80067a8:	fb01 2303 	mla	r3, r1, r3, r2
 80067ac:	435f      	muls	r7, r3
 80067ae:	652f      	str	r7, [r5, #80]	; 0x50
 80067b0:	e779      	b.n	80066a6 <_tzset_unlocked_r+0x162>
 80067b2:	f04f 0901 	mov.w	r9, #1
 80067b6:	e77b      	b.n	80066b0 <_tzset_unlocked_r+0x16c>
 80067b8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80067bc:	bf0a      	itet	eq
 80067be:	4643      	moveq	r3, r8
 80067c0:	2344      	movne	r3, #68	; 0x44
 80067c2:	3401      	addeq	r4, #1
 80067c4:	220a      	movs	r2, #10
 80067c6:	a90b      	add	r1, sp, #44	; 0x2c
 80067c8:	4620      	mov	r0, r4
 80067ca:	9305      	str	r3, [sp, #20]
 80067cc:	f7ff fe82 	bl	80064d4 <strtoul>
 80067d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80067d4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80067d8:	45a0      	cmp	r8, r4
 80067da:	9b05      	ldr	r3, [sp, #20]
 80067dc:	d114      	bne.n	8006808 <_tzset_unlocked_r+0x2c4>
 80067de:	234d      	movs	r3, #77	; 0x4d
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	d107      	bne.n	80067f6 <_tzset_unlocked_r+0x2b2>
 80067e6:	722b      	strb	r3, [r5, #8]
 80067e8:	2103      	movs	r1, #3
 80067ea:	2302      	movs	r3, #2
 80067ec:	f8c5 9014 	str.w	r9, [r5, #20]
 80067f0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80067f4:	e78f      	b.n	8006716 <_tzset_unlocked_r+0x1d2>
 80067f6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80067fa:	220b      	movs	r2, #11
 80067fc:	2301      	movs	r3, #1
 80067fe:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8006802:	2300      	movs	r3, #0
 8006804:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006806:	e786      	b.n	8006716 <_tzset_unlocked_r+0x1d2>
 8006808:	b280      	uxth	r0, r0
 800680a:	723b      	strb	r3, [r7, #8]
 800680c:	6178      	str	r0, [r7, #20]
 800680e:	e782      	b.n	8006716 <_tzset_unlocked_r+0x1d2>
 8006810:	08007f8f 	.word	0x08007f8f
 8006814:	2000028c 	.word	0x2000028c
 8006818:	20000294 	.word	0x20000294
 800681c:	08007f92 	.word	0x08007f92
 8006820:	20000290 	.word	0x20000290
 8006824:	20000074 	.word	0x20000074
 8006828:	2000027f 	.word	0x2000027f
 800682c:	08007f96 	.word	0x08007f96
 8006830:	08007fb9 	.word	0x08007fb9
 8006834:	08007fa5 	.word	0x08007fa5
 8006838:	08007fb8 	.word	0x08007fb8
 800683c:	20000274 	.word	0x20000274

08006840 <abs>:
 8006840:	2800      	cmp	r0, #0
 8006842:	bfb8      	it	lt
 8006844:	4240      	neglt	r0, r0
 8006846:	4770      	bx	lr

08006848 <_findenv_r>:
 8006848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4607      	mov	r7, r0
 800684e:	468b      	mov	fp, r1
 8006850:	4690      	mov	r8, r2
 8006852:	f000 fc86 	bl	8007162 <__env_lock>
 8006856:	4b19      	ldr	r3, [pc, #100]	; (80068bc <_findenv_r+0x74>)
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	469a      	mov	sl, r3
 800685c:	b13d      	cbz	r5, 800686e <_findenv_r+0x26>
 800685e:	465c      	mov	r4, fp
 8006860:	4623      	mov	r3, r4
 8006862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006866:	b32a      	cbz	r2, 80068b4 <_findenv_r+0x6c>
 8006868:	2a3d      	cmp	r2, #61	; 0x3d
 800686a:	461c      	mov	r4, r3
 800686c:	d1f8      	bne.n	8006860 <_findenv_r+0x18>
 800686e:	4638      	mov	r0, r7
 8006870:	f000 fc78 	bl	8007164 <__env_unlock>
 8006874:	2000      	movs	r0, #0
 8006876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687a:	464d      	mov	r5, r9
 800687c:	46a9      	mov	r9, r5
 800687e:	f859 0b04 	ldr.w	r0, [r9], #4
 8006882:	2800      	cmp	r0, #0
 8006884:	d0f3      	beq.n	800686e <_findenv_r+0x26>
 8006886:	4622      	mov	r2, r4
 8006888:	4659      	mov	r1, fp
 800688a:	f000 fba3 	bl	8006fd4 <strncmp>
 800688e:	2800      	cmp	r0, #0
 8006890:	d1f3      	bne.n	800687a <_findenv_r+0x32>
 8006892:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8006896:	191e      	adds	r6, r3, r4
 8006898:	5d1b      	ldrb	r3, [r3, r4]
 800689a:	2b3d      	cmp	r3, #61	; 0x3d
 800689c:	d1ed      	bne.n	800687a <_findenv_r+0x32>
 800689e:	f8da 3000 	ldr.w	r3, [sl]
 80068a2:	4638      	mov	r0, r7
 80068a4:	1aed      	subs	r5, r5, r3
 80068a6:	10ad      	asrs	r5, r5, #2
 80068a8:	f8c8 5000 	str.w	r5, [r8]
 80068ac:	f000 fc5a 	bl	8007164 <__env_unlock>
 80068b0:	1c70      	adds	r0, r6, #1
 80068b2:	e7e0      	b.n	8006876 <_findenv_r+0x2e>
 80068b4:	eba4 040b 	sub.w	r4, r4, fp
 80068b8:	e7e0      	b.n	800687c <_findenv_r+0x34>
 80068ba:	bf00      	nop
 80068bc:	20000000 	.word	0x20000000

080068c0 <_getenv_r>:
 80068c0:	b507      	push	{r0, r1, r2, lr}
 80068c2:	aa01      	add	r2, sp, #4
 80068c4:	f7ff ffc0 	bl	8006848 <_findenv_r>
 80068c8:	b003      	add	sp, #12
 80068ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080068d0 <_gettimeofday_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	2300      	movs	r3, #0
 80068d4:	4c06      	ldr	r4, [pc, #24]	; (80068f0 <_gettimeofday_r+0x20>)
 80068d6:	4605      	mov	r5, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	f001 f89b 	bl	8007a18 <_gettimeofday>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d102      	bne.n	80068ec <_gettimeofday_r+0x1c>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	b103      	cbz	r3, 80068ec <_gettimeofday_r+0x1c>
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	bd38      	pop	{r3, r4, r5, pc}
 80068ee:	bf00      	nop
 80068f0:	200003b0 	.word	0x200003b0

080068f4 <__gettzinfo>:
 80068f4:	4800      	ldr	r0, [pc, #0]	; (80068f8 <__gettzinfo+0x4>)
 80068f6:	4770      	bx	lr
 80068f8:	20000080 	.word	0x20000080

080068fc <labs>:
 80068fc:	2800      	cmp	r0, #0
 80068fe:	bfb8      	it	lt
 8006900:	4240      	neglt	r0, r0
 8006902:	4770      	bx	lr

08006904 <__locale_ctype_ptr_l>:
 8006904:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006908:	4770      	bx	lr
	...

0800690c <__locale_ctype_ptr>:
 800690c:	4b04      	ldr	r3, [pc, #16]	; (8006920 <__locale_ctype_ptr+0x14>)
 800690e:	4a05      	ldr	r2, [pc, #20]	; (8006924 <__locale_ctype_ptr+0x18>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	2b00      	cmp	r3, #0
 8006916:	bf08      	it	eq
 8006918:	4613      	moveq	r3, r2
 800691a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800691e:	4770      	bx	lr
 8006920:	20000010 	.word	0x20000010
 8006924:	200000d8 	.word	0x200000d8

08006928 <__ascii_mbtowc>:
 8006928:	b082      	sub	sp, #8
 800692a:	b901      	cbnz	r1, 800692e <__ascii_mbtowc+0x6>
 800692c:	a901      	add	r1, sp, #4
 800692e:	b142      	cbz	r2, 8006942 <__ascii_mbtowc+0x1a>
 8006930:	b14b      	cbz	r3, 8006946 <__ascii_mbtowc+0x1e>
 8006932:	7813      	ldrb	r3, [r2, #0]
 8006934:	600b      	str	r3, [r1, #0]
 8006936:	7812      	ldrb	r2, [r2, #0]
 8006938:	1c10      	adds	r0, r2, #0
 800693a:	bf18      	it	ne
 800693c:	2001      	movne	r0, #1
 800693e:	b002      	add	sp, #8
 8006940:	4770      	bx	lr
 8006942:	4610      	mov	r0, r2
 8006944:	e7fb      	b.n	800693e <__ascii_mbtowc+0x16>
 8006946:	f06f 0001 	mvn.w	r0, #1
 800694a:	e7f8      	b.n	800693e <__ascii_mbtowc+0x16>

0800694c <__malloc_lock>:
 800694c:	4770      	bx	lr

0800694e <__malloc_unlock>:
 800694e:	4770      	bx	lr

08006950 <__ssputs_r>:
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	688e      	ldr	r6, [r1, #8]
 8006956:	4682      	mov	sl, r0
 8006958:	429e      	cmp	r6, r3
 800695a:	460c      	mov	r4, r1
 800695c:	4690      	mov	r8, r2
 800695e:	4699      	mov	r9, r3
 8006960:	d837      	bhi.n	80069d2 <__ssputs_r+0x82>
 8006962:	898a      	ldrh	r2, [r1, #12]
 8006964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006968:	d031      	beq.n	80069ce <__ssputs_r+0x7e>
 800696a:	2302      	movs	r3, #2
 800696c:	6825      	ldr	r5, [r4, #0]
 800696e:	6909      	ldr	r1, [r1, #16]
 8006970:	1a6f      	subs	r7, r5, r1
 8006972:	6965      	ldr	r5, [r4, #20]
 8006974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006978:	fb95 f5f3 	sdiv	r5, r5, r3
 800697c:	f109 0301 	add.w	r3, r9, #1
 8006980:	443b      	add	r3, r7
 8006982:	429d      	cmp	r5, r3
 8006984:	bf38      	it	cc
 8006986:	461d      	movcc	r5, r3
 8006988:	0553      	lsls	r3, r2, #21
 800698a:	d530      	bpl.n	80069ee <__ssputs_r+0x9e>
 800698c:	4629      	mov	r1, r5
 800698e:	f7fe ff33 	bl	80057f8 <_malloc_r>
 8006992:	4606      	mov	r6, r0
 8006994:	b950      	cbnz	r0, 80069ac <__ssputs_r+0x5c>
 8006996:	230c      	movs	r3, #12
 8006998:	f04f 30ff 	mov.w	r0, #4294967295
 800699c:	f8ca 3000 	str.w	r3, [sl]
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ac:	463a      	mov	r2, r7
 80069ae:	6921      	ldr	r1, [r4, #16]
 80069b0:	f000 fbe7 	bl	8007182 <memcpy>
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	6126      	str	r6, [r4, #16]
 80069c2:	443e      	add	r6, r7
 80069c4:	6026      	str	r6, [r4, #0]
 80069c6:	464e      	mov	r6, r9
 80069c8:	6165      	str	r5, [r4, #20]
 80069ca:	1bed      	subs	r5, r5, r7
 80069cc:	60a5      	str	r5, [r4, #8]
 80069ce:	454e      	cmp	r6, r9
 80069d0:	d900      	bls.n	80069d4 <__ssputs_r+0x84>
 80069d2:	464e      	mov	r6, r9
 80069d4:	4632      	mov	r2, r6
 80069d6:	4641      	mov	r1, r8
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	f000 fbdd 	bl	8007198 <memmove>
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	2000      	movs	r0, #0
 80069e2:	1b9b      	subs	r3, r3, r6
 80069e4:	60a3      	str	r3, [r4, #8]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	441e      	add	r6, r3
 80069ea:	6026      	str	r6, [r4, #0]
 80069ec:	e7dc      	b.n	80069a8 <__ssputs_r+0x58>
 80069ee:	462a      	mov	r2, r5
 80069f0:	f000 fbeb 	bl	80071ca <_realloc_r>
 80069f4:	4606      	mov	r6, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d1e2      	bne.n	80069c0 <__ssputs_r+0x70>
 80069fa:	6921      	ldr	r1, [r4, #16]
 80069fc:	4650      	mov	r0, sl
 80069fe:	f7fe feaf 	bl	8005760 <_free_r>
 8006a02:	e7c8      	b.n	8006996 <__ssputs_r+0x46>

08006a04 <_svfiprintf_r>:
 8006a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	461d      	mov	r5, r3
 8006a0a:	898b      	ldrh	r3, [r1, #12]
 8006a0c:	b09d      	sub	sp, #116	; 0x74
 8006a0e:	061f      	lsls	r7, r3, #24
 8006a10:	4680      	mov	r8, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	4616      	mov	r6, r2
 8006a16:	d50f      	bpl.n	8006a38 <_svfiprintf_r+0x34>
 8006a18:	690b      	ldr	r3, [r1, #16]
 8006a1a:	b96b      	cbnz	r3, 8006a38 <_svfiprintf_r+0x34>
 8006a1c:	2140      	movs	r1, #64	; 0x40
 8006a1e:	f7fe feeb 	bl	80057f8 <_malloc_r>
 8006a22:	6020      	str	r0, [r4, #0]
 8006a24:	6120      	str	r0, [r4, #16]
 8006a26:	b928      	cbnz	r0, 8006a34 <_svfiprintf_r+0x30>
 8006a28:	230c      	movs	r3, #12
 8006a2a:	f8c8 3000 	str.w	r3, [r8]
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	e0c8      	b.n	8006bc6 <_svfiprintf_r+0x1c2>
 8006a34:	2340      	movs	r3, #64	; 0x40
 8006a36:	6163      	str	r3, [r4, #20]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a42:	2330      	movs	r3, #48	; 0x30
 8006a44:	f04f 0b01 	mov.w	fp, #1
 8006a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a4c:	9503      	str	r5, [sp, #12]
 8006a4e:	4637      	mov	r7, r6
 8006a50:	463d      	mov	r5, r7
 8006a52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a56:	b10b      	cbz	r3, 8006a5c <_svfiprintf_r+0x58>
 8006a58:	2b25      	cmp	r3, #37	; 0x25
 8006a5a:	d13e      	bne.n	8006ada <_svfiprintf_r+0xd6>
 8006a5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a60:	d00b      	beq.n	8006a7a <_svfiprintf_r+0x76>
 8006a62:	4653      	mov	r3, sl
 8006a64:	4632      	mov	r2, r6
 8006a66:	4621      	mov	r1, r4
 8006a68:	4640      	mov	r0, r8
 8006a6a:	f7ff ff71 	bl	8006950 <__ssputs_r>
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f000 80a4 	beq.w	8006bbc <_svfiprintf_r+0x1b8>
 8006a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a76:	4453      	add	r3, sl
 8006a78:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7a:	783b      	ldrb	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 809d 	beq.w	8006bbc <_svfiprintf_r+0x1b8>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f04f 32ff 	mov.w	r2, #4294967295
 8006a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	9307      	str	r3, [sp, #28]
 8006a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a94:	931a      	str	r3, [sp, #104]	; 0x68
 8006a96:	462f      	mov	r7, r5
 8006a98:	2205      	movs	r2, #5
 8006a9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a9e:	4850      	ldr	r0, [pc, #320]	; (8006be0 <_svfiprintf_r+0x1dc>)
 8006aa0:	f000 fb61 	bl	8007166 <memchr>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	b9d0      	cbnz	r0, 8006ade <_svfiprintf_r+0xda>
 8006aa8:	06d9      	lsls	r1, r3, #27
 8006aaa:	bf44      	itt	mi
 8006aac:	2220      	movmi	r2, #32
 8006aae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ab2:	071a      	lsls	r2, r3, #28
 8006ab4:	bf44      	itt	mi
 8006ab6:	222b      	movmi	r2, #43	; 0x2b
 8006ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006abc:	782a      	ldrb	r2, [r5, #0]
 8006abe:	2a2a      	cmp	r2, #42	; 0x2a
 8006ac0:	d015      	beq.n	8006aee <_svfiprintf_r+0xea>
 8006ac2:	462f      	mov	r7, r5
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	250a      	movs	r5, #10
 8006ac8:	9a07      	ldr	r2, [sp, #28]
 8006aca:	4639      	mov	r1, r7
 8006acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ad0:	3b30      	subs	r3, #48	; 0x30
 8006ad2:	2b09      	cmp	r3, #9
 8006ad4:	d94d      	bls.n	8006b72 <_svfiprintf_r+0x16e>
 8006ad6:	b1b8      	cbz	r0, 8006b08 <_svfiprintf_r+0x104>
 8006ad8:	e00f      	b.n	8006afa <_svfiprintf_r+0xf6>
 8006ada:	462f      	mov	r7, r5
 8006adc:	e7b8      	b.n	8006a50 <_svfiprintf_r+0x4c>
 8006ade:	4a40      	ldr	r2, [pc, #256]	; (8006be0 <_svfiprintf_r+0x1dc>)
 8006ae0:	463d      	mov	r5, r7
 8006ae2:	1a80      	subs	r0, r0, r2
 8006ae4:	fa0b f000 	lsl.w	r0, fp, r0
 8006ae8:	4318      	orrs	r0, r3
 8006aea:	9004      	str	r0, [sp, #16]
 8006aec:	e7d3      	b.n	8006a96 <_svfiprintf_r+0x92>
 8006aee:	9a03      	ldr	r2, [sp, #12]
 8006af0:	1d11      	adds	r1, r2, #4
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	9103      	str	r1, [sp, #12]
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	db01      	blt.n	8006afe <_svfiprintf_r+0xfa>
 8006afa:	9207      	str	r2, [sp, #28]
 8006afc:	e004      	b.n	8006b08 <_svfiprintf_r+0x104>
 8006afe:	4252      	negs	r2, r2
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	9207      	str	r2, [sp, #28]
 8006b06:	9304      	str	r3, [sp, #16]
 8006b08:	783b      	ldrb	r3, [r7, #0]
 8006b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b0c:	d10c      	bne.n	8006b28 <_svfiprintf_r+0x124>
 8006b0e:	787b      	ldrb	r3, [r7, #1]
 8006b10:	2b2a      	cmp	r3, #42	; 0x2a
 8006b12:	d133      	bne.n	8006b7c <_svfiprintf_r+0x178>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	3702      	adds	r7, #2
 8006b18:	1d1a      	adds	r2, r3, #4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	9203      	str	r2, [sp, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bfb8      	it	lt
 8006b22:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b26:	9305      	str	r3, [sp, #20]
 8006b28:	4d2e      	ldr	r5, [pc, #184]	; (8006be4 <_svfiprintf_r+0x1e0>)
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	7839      	ldrb	r1, [r7, #0]
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fb19 	bl	8007166 <memchr>
 8006b34:	b138      	cbz	r0, 8006b46 <_svfiprintf_r+0x142>
 8006b36:	2340      	movs	r3, #64	; 0x40
 8006b38:	1b40      	subs	r0, r0, r5
 8006b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	3701      	adds	r7, #1
 8006b42:	4303      	orrs	r3, r0
 8006b44:	9304      	str	r3, [sp, #16]
 8006b46:	7839      	ldrb	r1, [r7, #0]
 8006b48:	2206      	movs	r2, #6
 8006b4a:	4827      	ldr	r0, [pc, #156]	; (8006be8 <_svfiprintf_r+0x1e4>)
 8006b4c:	1c7e      	adds	r6, r7, #1
 8006b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b52:	f000 fb08 	bl	8007166 <memchr>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d038      	beq.n	8006bcc <_svfiprintf_r+0x1c8>
 8006b5a:	4b24      	ldr	r3, [pc, #144]	; (8006bec <_svfiprintf_r+0x1e8>)
 8006b5c:	bb13      	cbnz	r3, 8006ba4 <_svfiprintf_r+0x1a0>
 8006b5e:	9b03      	ldr	r3, [sp, #12]
 8006b60:	3307      	adds	r3, #7
 8006b62:	f023 0307 	bic.w	r3, r3, #7
 8006b66:	3308      	adds	r3, #8
 8006b68:	9303      	str	r3, [sp, #12]
 8006b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6c:	444b      	add	r3, r9
 8006b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b70:	e76d      	b.n	8006a4e <_svfiprintf_r+0x4a>
 8006b72:	fb05 3202 	mla	r2, r5, r2, r3
 8006b76:	2001      	movs	r0, #1
 8006b78:	460f      	mov	r7, r1
 8006b7a:	e7a6      	b.n	8006aca <_svfiprintf_r+0xc6>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	250a      	movs	r5, #10
 8006b80:	4619      	mov	r1, r3
 8006b82:	3701      	adds	r7, #1
 8006b84:	9305      	str	r3, [sp, #20]
 8006b86:	4638      	mov	r0, r7
 8006b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8c:	3a30      	subs	r2, #48	; 0x30
 8006b8e:	2a09      	cmp	r2, #9
 8006b90:	d903      	bls.n	8006b9a <_svfiprintf_r+0x196>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0c8      	beq.n	8006b28 <_svfiprintf_r+0x124>
 8006b96:	9105      	str	r1, [sp, #20]
 8006b98:	e7c6      	b.n	8006b28 <_svfiprintf_r+0x124>
 8006b9a:	fb05 2101 	mla	r1, r5, r1, r2
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	e7f0      	b.n	8006b86 <_svfiprintf_r+0x182>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4622      	mov	r2, r4
 8006baa:	4b11      	ldr	r3, [pc, #68]	; (8006bf0 <_svfiprintf_r+0x1ec>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4640      	mov	r0, r8
 8006bb0:	f3af 8000 	nop.w
 8006bb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bb8:	4681      	mov	r9, r0
 8006bba:	d1d6      	bne.n	8006b6a <_svfiprintf_r+0x166>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	065b      	lsls	r3, r3, #25
 8006bc0:	f53f af35 	bmi.w	8006a2e <_svfiprintf_r+0x2a>
 8006bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bc6:	b01d      	add	sp, #116	; 0x74
 8006bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bcc:	ab03      	add	r3, sp, #12
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <_svfiprintf_r+0x1ec>)
 8006bd4:	a904      	add	r1, sp, #16
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f000 f882 	bl	8006ce0 <_printf_i>
 8006bdc:	e7ea      	b.n	8006bb4 <_svfiprintf_r+0x1b0>
 8006bde:	bf00      	nop
 8006be0:	08007fd5 	.word	0x08007fd5
 8006be4:	08007fdb 	.word	0x08007fdb
 8006be8:	08007fdf 	.word	0x08007fdf
 8006bec:	00000000 	.word	0x00000000
 8006bf0:	08006951 	.word	0x08006951

08006bf4 <_printf_common>:
 8006bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf8:	4691      	mov	r9, r2
 8006bfa:	461f      	mov	r7, r3
 8006bfc:	688a      	ldr	r2, [r1, #8]
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	4606      	mov	r6, r0
 8006c02:	4293      	cmp	r3, r2
 8006c04:	bfb8      	it	lt
 8006c06:	4613      	movlt	r3, r2
 8006c08:	f8c9 3000 	str.w	r3, [r9]
 8006c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c10:	460c      	mov	r4, r1
 8006c12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c16:	b112      	cbz	r2, 8006c1e <_printf_common+0x2a>
 8006c18:	3301      	adds	r3, #1
 8006c1a:	f8c9 3000 	str.w	r3, [r9]
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	0699      	lsls	r1, r3, #26
 8006c22:	bf42      	ittt	mi
 8006c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c28:	3302      	addmi	r3, #2
 8006c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8006c2e:	6825      	ldr	r5, [r4, #0]
 8006c30:	f015 0506 	ands.w	r5, r5, #6
 8006c34:	d107      	bne.n	8006c46 <_printf_common+0x52>
 8006c36:	f104 0a19 	add.w	sl, r4, #25
 8006c3a:	68e3      	ldr	r3, [r4, #12]
 8006c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	42ab      	cmp	r3, r5
 8006c44:	dc29      	bgt.n	8006c9a <_printf_common+0xa6>
 8006c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	3300      	adds	r3, #0
 8006c4e:	bf18      	it	ne
 8006c50:	2301      	movne	r3, #1
 8006c52:	0692      	lsls	r2, r2, #26
 8006c54:	d42e      	bmi.n	8006cb4 <_printf_common+0xc0>
 8006c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c5a:	4639      	mov	r1, r7
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	47c0      	blx	r8
 8006c60:	3001      	adds	r0, #1
 8006c62:	d021      	beq.n	8006ca8 <_printf_common+0xb4>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	68e5      	ldr	r5, [r4, #12]
 8006c68:	f003 0306 	and.w	r3, r3, #6
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	bf18      	it	ne
 8006c70:	2500      	movne	r5, #0
 8006c72:	f8d9 2000 	ldr.w	r2, [r9]
 8006c76:	f04f 0900 	mov.w	r9, #0
 8006c7a:	bf08      	it	eq
 8006c7c:	1aad      	subeq	r5, r5, r2
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	6922      	ldr	r2, [r4, #16]
 8006c82:	bf08      	it	eq
 8006c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	bfc4      	itt	gt
 8006c8c:	1a9b      	subgt	r3, r3, r2
 8006c8e:	18ed      	addgt	r5, r5, r3
 8006c90:	341a      	adds	r4, #26
 8006c92:	454d      	cmp	r5, r9
 8006c94:	d11a      	bne.n	8006ccc <_printf_common+0xd8>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e008      	b.n	8006cac <_printf_common+0xb8>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	47c0      	blx	r8
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d103      	bne.n	8006cb0 <_printf_common+0xbc>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	e7c2      	b.n	8006c3a <_printf_common+0x46>
 8006cb4:	2030      	movs	r0, #48	; 0x30
 8006cb6:	18e1      	adds	r1, r4, r3
 8006cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cc2:	4422      	add	r2, r4
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cca:	e7c4      	b.n	8006c56 <_printf_common+0x62>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4622      	mov	r2, r4
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	47c0      	blx	r8
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d0e6      	beq.n	8006ca8 <_printf_common+0xb4>
 8006cda:	f109 0901 	add.w	r9, r9, #1
 8006cde:	e7d8      	b.n	8006c92 <_printf_common+0x9e>

08006ce0 <_printf_i>:
 8006ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ce8:	460c      	mov	r4, r1
 8006cea:	7e09      	ldrb	r1, [r1, #24]
 8006cec:	b085      	sub	sp, #20
 8006cee:	296e      	cmp	r1, #110	; 0x6e
 8006cf0:	4617      	mov	r7, r2
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	4698      	mov	r8, r3
 8006cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cf8:	f000 80b3 	beq.w	8006e62 <_printf_i+0x182>
 8006cfc:	d822      	bhi.n	8006d44 <_printf_i+0x64>
 8006cfe:	2963      	cmp	r1, #99	; 0x63
 8006d00:	d036      	beq.n	8006d70 <_printf_i+0x90>
 8006d02:	d80a      	bhi.n	8006d1a <_printf_i+0x3a>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	f000 80b9 	beq.w	8006e7c <_printf_i+0x19c>
 8006d0a:	2958      	cmp	r1, #88	; 0x58
 8006d0c:	f000 8083 	beq.w	8006e16 <_printf_i+0x136>
 8006d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d18:	e032      	b.n	8006d80 <_printf_i+0xa0>
 8006d1a:	2964      	cmp	r1, #100	; 0x64
 8006d1c:	d001      	beq.n	8006d22 <_printf_i+0x42>
 8006d1e:	2969      	cmp	r1, #105	; 0x69
 8006d20:	d1f6      	bne.n	8006d10 <_printf_i+0x30>
 8006d22:	6820      	ldr	r0, [r4, #0]
 8006d24:	6813      	ldr	r3, [r2, #0]
 8006d26:	0605      	lsls	r5, r0, #24
 8006d28:	f103 0104 	add.w	r1, r3, #4
 8006d2c:	d52a      	bpl.n	8006d84 <_printf_i+0xa4>
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6011      	str	r1, [r2, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	da03      	bge.n	8006d3e <_printf_i+0x5e>
 8006d36:	222d      	movs	r2, #45	; 0x2d
 8006d38:	425b      	negs	r3, r3
 8006d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d3e:	486f      	ldr	r0, [pc, #444]	; (8006efc <_printf_i+0x21c>)
 8006d40:	220a      	movs	r2, #10
 8006d42:	e039      	b.n	8006db8 <_printf_i+0xd8>
 8006d44:	2973      	cmp	r1, #115	; 0x73
 8006d46:	f000 809d 	beq.w	8006e84 <_printf_i+0x1a4>
 8006d4a:	d808      	bhi.n	8006d5e <_printf_i+0x7e>
 8006d4c:	296f      	cmp	r1, #111	; 0x6f
 8006d4e:	d020      	beq.n	8006d92 <_printf_i+0xb2>
 8006d50:	2970      	cmp	r1, #112	; 0x70
 8006d52:	d1dd      	bne.n	8006d10 <_printf_i+0x30>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	f043 0320 	orr.w	r3, r3, #32
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	e003      	b.n	8006d66 <_printf_i+0x86>
 8006d5e:	2975      	cmp	r1, #117	; 0x75
 8006d60:	d017      	beq.n	8006d92 <_printf_i+0xb2>
 8006d62:	2978      	cmp	r1, #120	; 0x78
 8006d64:	d1d4      	bne.n	8006d10 <_printf_i+0x30>
 8006d66:	2378      	movs	r3, #120	; 0x78
 8006d68:	4865      	ldr	r0, [pc, #404]	; (8006f00 <_printf_i+0x220>)
 8006d6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d6e:	e055      	b.n	8006e1c <_printf_i+0x13c>
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d76:	1d19      	adds	r1, r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6011      	str	r1, [r2, #0]
 8006d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d80:	2301      	movs	r3, #1
 8006d82:	e08c      	b.n	8006e9e <_printf_i+0x1be>
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d8a:	6011      	str	r1, [r2, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	b21b      	sxthne	r3, r3
 8006d90:	e7cf      	b.n	8006d32 <_printf_i+0x52>
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	6825      	ldr	r5, [r4, #0]
 8006d96:	1d18      	adds	r0, r3, #4
 8006d98:	6010      	str	r0, [r2, #0]
 8006d9a:	0628      	lsls	r0, r5, #24
 8006d9c:	d501      	bpl.n	8006da2 <_printf_i+0xc2>
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	e002      	b.n	8006da8 <_printf_i+0xc8>
 8006da2:	0668      	lsls	r0, r5, #25
 8006da4:	d5fb      	bpl.n	8006d9e <_printf_i+0xbe>
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	296f      	cmp	r1, #111	; 0x6f
 8006daa:	bf14      	ite	ne
 8006dac:	220a      	movne	r2, #10
 8006dae:	2208      	moveq	r2, #8
 8006db0:	4852      	ldr	r0, [pc, #328]	; (8006efc <_printf_i+0x21c>)
 8006db2:	2100      	movs	r1, #0
 8006db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006db8:	6865      	ldr	r5, [r4, #4]
 8006dba:	2d00      	cmp	r5, #0
 8006dbc:	60a5      	str	r5, [r4, #8]
 8006dbe:	f2c0 8095 	blt.w	8006eec <_printf_i+0x20c>
 8006dc2:	6821      	ldr	r1, [r4, #0]
 8006dc4:	f021 0104 	bic.w	r1, r1, #4
 8006dc8:	6021      	str	r1, [r4, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d13d      	bne.n	8006e4a <_printf_i+0x16a>
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	f040 808e 	bne.w	8006ef0 <_printf_i+0x210>
 8006dd4:	4665      	mov	r5, ip
 8006dd6:	2a08      	cmp	r2, #8
 8006dd8:	d10b      	bne.n	8006df2 <_printf_i+0x112>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	07db      	lsls	r3, r3, #31
 8006dde:	d508      	bpl.n	8006df2 <_printf_i+0x112>
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	6862      	ldr	r2, [r4, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	bfde      	ittt	le
 8006de8:	2330      	movle	r3, #48	; 0x30
 8006dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006df2:	ebac 0305 	sub.w	r3, ip, r5
 8006df6:	6123      	str	r3, [r4, #16]
 8006df8:	f8cd 8000 	str.w	r8, [sp]
 8006dfc:	463b      	mov	r3, r7
 8006dfe:	aa03      	add	r2, sp, #12
 8006e00:	4621      	mov	r1, r4
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7ff fef6 	bl	8006bf4 <_printf_common>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d14d      	bne.n	8006ea8 <_printf_i+0x1c8>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	b005      	add	sp, #20
 8006e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e16:	4839      	ldr	r0, [pc, #228]	; (8006efc <_printf_i+0x21c>)
 8006e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e1c:	6813      	ldr	r3, [r2, #0]
 8006e1e:	6821      	ldr	r1, [r4, #0]
 8006e20:	1d1d      	adds	r5, r3, #4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6015      	str	r5, [r2, #0]
 8006e26:	060a      	lsls	r2, r1, #24
 8006e28:	d50b      	bpl.n	8006e42 <_printf_i+0x162>
 8006e2a:	07ca      	lsls	r2, r1, #31
 8006e2c:	bf44      	itt	mi
 8006e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8006e32:	6021      	strmi	r1, [r4, #0]
 8006e34:	b91b      	cbnz	r3, 8006e3e <_printf_i+0x15e>
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	f022 0220 	bic.w	r2, r2, #32
 8006e3c:	6022      	str	r2, [r4, #0]
 8006e3e:	2210      	movs	r2, #16
 8006e40:	e7b7      	b.n	8006db2 <_printf_i+0xd2>
 8006e42:	064d      	lsls	r5, r1, #25
 8006e44:	bf48      	it	mi
 8006e46:	b29b      	uxthmi	r3, r3
 8006e48:	e7ef      	b.n	8006e2a <_printf_i+0x14a>
 8006e4a:	4665      	mov	r5, ip
 8006e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e50:	fb02 3311 	mls	r3, r2, r1, r3
 8006e54:	5cc3      	ldrb	r3, [r0, r3]
 8006e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	d1f5      	bne.n	8006e4c <_printf_i+0x16c>
 8006e60:	e7b9      	b.n	8006dd6 <_printf_i+0xf6>
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1d18      	adds	r0, r3, #4
 8006e68:	6961      	ldr	r1, [r4, #20]
 8006e6a:	6010      	str	r0, [r2, #0]
 8006e6c:	0628      	lsls	r0, r5, #24
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	d501      	bpl.n	8006e76 <_printf_i+0x196>
 8006e72:	6019      	str	r1, [r3, #0]
 8006e74:	e002      	b.n	8006e7c <_printf_i+0x19c>
 8006e76:	066a      	lsls	r2, r5, #25
 8006e78:	d5fb      	bpl.n	8006e72 <_printf_i+0x192>
 8006e7a:	8019      	strh	r1, [r3, #0]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4665      	mov	r5, ip
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	e7b9      	b.n	8006df8 <_printf_i+0x118>
 8006e84:	6813      	ldr	r3, [r2, #0]
 8006e86:	1d19      	adds	r1, r3, #4
 8006e88:	6011      	str	r1, [r2, #0]
 8006e8a:	681d      	ldr	r5, [r3, #0]
 8006e8c:	6862      	ldr	r2, [r4, #4]
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 f968 	bl	8007166 <memchr>
 8006e96:	b108      	cbz	r0, 8006e9c <_printf_i+0x1bc>
 8006e98:	1b40      	subs	r0, r0, r5
 8006e9a:	6060      	str	r0, [r4, #4]
 8006e9c:	6863      	ldr	r3, [r4, #4]
 8006e9e:	6123      	str	r3, [r4, #16]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea6:	e7a7      	b.n	8006df8 <_printf_i+0x118>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	462a      	mov	r2, r5
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	47c0      	blx	r8
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d0aa      	beq.n	8006e0c <_printf_i+0x12c>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	079b      	lsls	r3, r3, #30
 8006eba:	d413      	bmi.n	8006ee4 <_printf_i+0x204>
 8006ebc:	68e0      	ldr	r0, [r4, #12]
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	4298      	cmp	r0, r3
 8006ec2:	bfb8      	it	lt
 8006ec4:	4618      	movlt	r0, r3
 8006ec6:	e7a3      	b.n	8006e10 <_printf_i+0x130>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	464a      	mov	r2, r9
 8006ecc:	4639      	mov	r1, r7
 8006ece:	4630      	mov	r0, r6
 8006ed0:	47c0      	blx	r8
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d09a      	beq.n	8006e0c <_printf_i+0x12c>
 8006ed6:	3501      	adds	r5, #1
 8006ed8:	68e3      	ldr	r3, [r4, #12]
 8006eda:	9a03      	ldr	r2, [sp, #12]
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	42ab      	cmp	r3, r5
 8006ee0:	dcf2      	bgt.n	8006ec8 <_printf_i+0x1e8>
 8006ee2:	e7eb      	b.n	8006ebc <_printf_i+0x1dc>
 8006ee4:	2500      	movs	r5, #0
 8006ee6:	f104 0919 	add.w	r9, r4, #25
 8006eea:	e7f5      	b.n	8006ed8 <_printf_i+0x1f8>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1ac      	bne.n	8006e4a <_printf_i+0x16a>
 8006ef0:	7803      	ldrb	r3, [r0, #0]
 8006ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006efa:	e76c      	b.n	8006dd6 <_printf_i+0xf6>
 8006efc:	08007fe6 	.word	0x08007fe6
 8006f00:	08007ff7 	.word	0x08007ff7

08006f04 <sniprintf>:
 8006f04:	b40c      	push	{r2, r3}
 8006f06:	b530      	push	{r4, r5, lr}
 8006f08:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <sniprintf+0x64>)
 8006f0a:	1e0c      	subs	r4, r1, #0
 8006f0c:	b09d      	sub	sp, #116	; 0x74
 8006f0e:	681d      	ldr	r5, [r3, #0]
 8006f10:	da08      	bge.n	8006f24 <sniprintf+0x20>
 8006f12:	238b      	movs	r3, #139	; 0x8b
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	b01d      	add	sp, #116	; 0x74
 8006f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f20:	b002      	add	sp, #8
 8006f22:	4770      	bx	lr
 8006f24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f2c:	bf0c      	ite	eq
 8006f2e:	4623      	moveq	r3, r4
 8006f30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f3c:	9002      	str	r0, [sp, #8]
 8006f3e:	9006      	str	r0, [sp, #24]
 8006f40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f46:	ab21      	add	r3, sp, #132	; 0x84
 8006f48:	a902      	add	r1, sp, #8
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	f7ff fd59 	bl	8006a04 <_svfiprintf_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	bfbc      	itt	lt
 8006f56:	238b      	movlt	r3, #139	; 0x8b
 8006f58:	602b      	strlt	r3, [r5, #0]
 8006f5a:	2c00      	cmp	r4, #0
 8006f5c:	d0dd      	beq.n	8006f1a <sniprintf+0x16>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	9b02      	ldr	r3, [sp, #8]
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e7d9      	b.n	8006f1a <sniprintf+0x16>
 8006f66:	bf00      	nop
 8006f68:	20000010 	.word	0x20000010

08006f6c <siscanf>:
 8006f6c:	b40e      	push	{r1, r2, r3}
 8006f6e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006f72:	b530      	push	{r4, r5, lr}
 8006f74:	b09c      	sub	sp, #112	; 0x70
 8006f76:	ac1f      	add	r4, sp, #124	; 0x7c
 8006f78:	f854 5b04 	ldr.w	r5, [r4], #4
 8006f7c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006f80:	9002      	str	r0, [sp, #8]
 8006f82:	9006      	str	r0, [sp, #24]
 8006f84:	f7f9 f8e4 	bl	8000150 <strlen>
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <siscanf+0x4c>)
 8006f8a:	9003      	str	r0, [sp, #12]
 8006f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f8e:	2300      	movs	r3, #0
 8006f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f92:	9314      	str	r3, [sp, #80]	; 0x50
 8006f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f98:	9007      	str	r0, [sp, #28]
 8006f9a:	4808      	ldr	r0, [pc, #32]	; (8006fbc <siscanf+0x50>)
 8006f9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	a902      	add	r1, sp, #8
 8006fa6:	6800      	ldr	r0, [r0, #0]
 8006fa8:	9401      	str	r4, [sp, #4]
 8006faa:	f000 f98f 	bl	80072cc <__ssvfiscanf_r>
 8006fae:	b01c      	add	sp, #112	; 0x70
 8006fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fb4:	b003      	add	sp, #12
 8006fb6:	4770      	bx	lr
 8006fb8:	08006fc1 	.word	0x08006fc1
 8006fbc:	20000010 	.word	0x20000010

08006fc0 <__seofread>:
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	4770      	bx	lr

08006fc4 <strcpy>:
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fca:	f803 2b01 	strb.w	r2, [r3], #1
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	d1f9      	bne.n	8006fc6 <strcpy+0x2>
 8006fd2:	4770      	bx	lr

08006fd4 <strncmp>:
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	b16a      	cbz	r2, 8006ff4 <strncmp+0x20>
 8006fd8:	3901      	subs	r1, #1
 8006fda:	1884      	adds	r4, r0, r2
 8006fdc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006fe0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d103      	bne.n	8006ff0 <strncmp+0x1c>
 8006fe8:	42a0      	cmp	r0, r4
 8006fea:	d001      	beq.n	8006ff0 <strncmp+0x1c>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f5      	bne.n	8006fdc <strncmp+0x8>
 8006ff0:	1a98      	subs	r0, r3, r2
 8006ff2:	bd10      	pop	{r4, pc}
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	e7fc      	b.n	8006ff2 <strncmp+0x1e>

08006ff8 <__tzcalc_limits>:
 8006ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	f7ff fc79 	bl	80068f4 <__gettzinfo>
 8007002:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007006:	4598      	cmp	r8, r3
 8007008:	f340 8097 	ble.w	800713a <__tzcalc_limits+0x142>
 800700c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8007010:	f240 126d 	movw	r2, #365	; 0x16d
 8007014:	4443      	add	r3, r8
 8007016:	109b      	asrs	r3, r3, #2
 8007018:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800701c:	fb02 3505 	mla	r5, r2, r5, r3
 8007020:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007024:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8007028:	fb93 f3f2 	sdiv	r3, r3, r2
 800702c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8007030:	441d      	add	r5, r3
 8007032:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007036:	4442      	add	r2, r8
 8007038:	fb92 f2f3 	sdiv	r2, r2, r3
 800703c:	fb98 f7f3 	sdiv	r7, r8, r3
 8007040:	4415      	add	r5, r2
 8007042:	2264      	movs	r2, #100	; 0x64
 8007044:	fb03 8717 	mls	r7, r3, r7, r8
 8007048:	fb98 f6f2 	sdiv	r6, r8, r2
 800704c:	fab7 fc87 	clz	ip, r7
 8007050:	4604      	mov	r4, r0
 8007052:	f04f 0e07 	mov.w	lr, #7
 8007056:	fb02 8616 	mls	r6, r2, r6, r8
 800705a:	f008 0303 	and.w	r3, r8, #3
 800705e:	f8c0 8004 	str.w	r8, [r0, #4]
 8007062:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007066:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	7a22      	ldrb	r2, [r4, #8]
 800706e:	6963      	ldr	r3, [r4, #20]
 8007070:	2a4a      	cmp	r2, #74	; 0x4a
 8007072:	d128      	bne.n	80070c6 <__tzcalc_limits+0xce>
 8007074:	9900      	ldr	r1, [sp, #0]
 8007076:	18ea      	adds	r2, r5, r3
 8007078:	b901      	cbnz	r1, 800707c <__tzcalc_limits+0x84>
 800707a:	b906      	cbnz	r6, 800707e <__tzcalc_limits+0x86>
 800707c:	bb0f      	cbnz	r7, 80070c2 <__tzcalc_limits+0xca>
 800707e:	2b3b      	cmp	r3, #59	; 0x3b
 8007080:	bfd4      	ite	le
 8007082:	2300      	movle	r3, #0
 8007084:	2301      	movgt	r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	1e5a      	subs	r2, r3, #1
 800708a:	69a3      	ldr	r3, [r4, #24]
 800708c:	492c      	ldr	r1, [pc, #176]	; (8007140 <__tzcalc_limits+0x148>)
 800708e:	3428      	adds	r4, #40	; 0x28
 8007090:	fb01 3202 	mla	r2, r1, r2, r3
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	4413      	add	r3, r2
 8007098:	461a      	mov	r2, r3
 800709a:	17db      	asrs	r3, r3, #31
 800709c:	e944 2302 	strd	r2, r3, [r4, #-8]
 80070a0:	45a3      	cmp	fp, r4
 80070a2:	d1e3      	bne.n	800706c <__tzcalc_limits+0x74>
 80070a4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80070a8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80070ac:	4294      	cmp	r4, r2
 80070ae:	eb75 0303 	sbcs.w	r3, r5, r3
 80070b2:	bfb4      	ite	lt
 80070b4:	2301      	movlt	r3, #1
 80070b6:	2300      	movge	r3, #0
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	2001      	movs	r0, #1
 80070bc:	b003      	add	sp, #12
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	2300      	movs	r3, #0
 80070c4:	e7df      	b.n	8007086 <__tzcalc_limits+0x8e>
 80070c6:	2a44      	cmp	r2, #68	; 0x44
 80070c8:	d101      	bne.n	80070ce <__tzcalc_limits+0xd6>
 80070ca:	18ea      	adds	r2, r5, r3
 80070cc:	e7dd      	b.n	800708a <__tzcalc_limits+0x92>
 80070ce:	9a00      	ldr	r2, [sp, #0]
 80070d0:	bb6a      	cbnz	r2, 800712e <__tzcalc_limits+0x136>
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	bf0c      	ite	eq
 80070d6:	46e1      	moveq	r9, ip
 80070d8:	f04f 0901 	movne.w	r9, #1
 80070dc:	2230      	movs	r2, #48	; 0x30
 80070de:	fb02 f909 	mul.w	r9, r2, r9
 80070e2:	68e2      	ldr	r2, [r4, #12]
 80070e4:	f04f 0800 	mov.w	r8, #0
 80070e8:	9201      	str	r2, [sp, #4]
 80070ea:	462a      	mov	r2, r5
 80070ec:	f108 0801 	add.w	r8, r8, #1
 80070f0:	4914      	ldr	r1, [pc, #80]	; (8007144 <__tzcalc_limits+0x14c>)
 80070f2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80070f6:	448a      	add	sl, r1
 80070f8:	9901      	ldr	r1, [sp, #4]
 80070fa:	f85a ac04 	ldr.w	sl, [sl, #-4]
 80070fe:	4541      	cmp	r1, r8
 8007100:	dc17      	bgt.n	8007132 <__tzcalc_limits+0x13a>
 8007102:	f102 0804 	add.w	r8, r2, #4
 8007106:	fb98 f9fe 	sdiv	r9, r8, lr
 800710a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800710e:	eba8 0909 	sub.w	r9, r8, r9
 8007112:	ebb3 0909 	subs.w	r9, r3, r9
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	bf48      	it	mi
 800711a:	f109 0907 	addmi.w	r9, r9, #7
 800711e:	3b01      	subs	r3, #1
 8007120:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007124:	444b      	add	r3, r9
 8007126:	4553      	cmp	r3, sl
 8007128:	da05      	bge.n	8007136 <__tzcalc_limits+0x13e>
 800712a:	441a      	add	r2, r3
 800712c:	e7ad      	b.n	800708a <__tzcalc_limits+0x92>
 800712e:	46e1      	mov	r9, ip
 8007130:	e7d4      	b.n	80070dc <__tzcalc_limits+0xe4>
 8007132:	4452      	add	r2, sl
 8007134:	e7da      	b.n	80070ec <__tzcalc_limits+0xf4>
 8007136:	3b07      	subs	r3, #7
 8007138:	e7f5      	b.n	8007126 <__tzcalc_limits+0x12e>
 800713a:	2000      	movs	r0, #0
 800713c:	e7be      	b.n	80070bc <__tzcalc_limits+0xc4>
 800713e:	bf00      	nop
 8007140:	00015180 	.word	0x00015180
 8007144:	0800810c 	.word	0x0800810c

08007148 <__ascii_wctomb>:
 8007148:	b149      	cbz	r1, 800715e <__ascii_wctomb+0x16>
 800714a:	2aff      	cmp	r2, #255	; 0xff
 800714c:	bf8b      	itete	hi
 800714e:	238a      	movhi	r3, #138	; 0x8a
 8007150:	700a      	strbls	r2, [r1, #0]
 8007152:	6003      	strhi	r3, [r0, #0]
 8007154:	2001      	movls	r0, #1
 8007156:	bf88      	it	hi
 8007158:	f04f 30ff 	movhi.w	r0, #4294967295
 800715c:	4770      	bx	lr
 800715e:	4608      	mov	r0, r1
 8007160:	4770      	bx	lr

08007162 <__env_lock>:
 8007162:	4770      	bx	lr

08007164 <__env_unlock>:
 8007164:	4770      	bx	lr

08007166 <memchr>:
 8007166:	b510      	push	{r4, lr}
 8007168:	b2c9      	uxtb	r1, r1
 800716a:	4402      	add	r2, r0
 800716c:	4290      	cmp	r0, r2
 800716e:	4603      	mov	r3, r0
 8007170:	d101      	bne.n	8007176 <memchr+0x10>
 8007172:	2300      	movs	r3, #0
 8007174:	e003      	b.n	800717e <memchr+0x18>
 8007176:	781c      	ldrb	r4, [r3, #0]
 8007178:	3001      	adds	r0, #1
 800717a:	428c      	cmp	r4, r1
 800717c:	d1f6      	bne.n	800716c <memchr+0x6>
 800717e:	4618      	mov	r0, r3
 8007180:	bd10      	pop	{r4, pc}

08007182 <memcpy>:
 8007182:	b510      	push	{r4, lr}
 8007184:	1e43      	subs	r3, r0, #1
 8007186:	440a      	add	r2, r1
 8007188:	4291      	cmp	r1, r2
 800718a:	d100      	bne.n	800718e <memcpy+0xc>
 800718c:	bd10      	pop	{r4, pc}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	e7f7      	b.n	8007188 <memcpy+0x6>

08007198 <memmove>:
 8007198:	4288      	cmp	r0, r1
 800719a:	b510      	push	{r4, lr}
 800719c:	eb01 0302 	add.w	r3, r1, r2
 80071a0:	d807      	bhi.n	80071b2 <memmove+0x1a>
 80071a2:	1e42      	subs	r2, r0, #1
 80071a4:	4299      	cmp	r1, r3
 80071a6:	d00a      	beq.n	80071be <memmove+0x26>
 80071a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071b0:	e7f8      	b.n	80071a4 <memmove+0xc>
 80071b2:	4283      	cmp	r3, r0
 80071b4:	d9f5      	bls.n	80071a2 <memmove+0xa>
 80071b6:	1881      	adds	r1, r0, r2
 80071b8:	1ad2      	subs	r2, r2, r3
 80071ba:	42d3      	cmn	r3, r2
 80071bc:	d100      	bne.n	80071c0 <memmove+0x28>
 80071be:	bd10      	pop	{r4, pc}
 80071c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071c8:	e7f7      	b.n	80071ba <memmove+0x22>

080071ca <_realloc_r>:
 80071ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071cc:	4607      	mov	r7, r0
 80071ce:	4614      	mov	r4, r2
 80071d0:	460e      	mov	r6, r1
 80071d2:	b921      	cbnz	r1, 80071de <_realloc_r+0x14>
 80071d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071d8:	4611      	mov	r1, r2
 80071da:	f7fe bb0d 	b.w	80057f8 <_malloc_r>
 80071de:	b922      	cbnz	r2, 80071ea <_realloc_r+0x20>
 80071e0:	f7fe fabe 	bl	8005760 <_free_r>
 80071e4:	4625      	mov	r5, r4
 80071e6:	4628      	mov	r0, r5
 80071e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ea:	f000 fc0d 	bl	8007a08 <_malloc_usable_size_r>
 80071ee:	42a0      	cmp	r0, r4
 80071f0:	d20f      	bcs.n	8007212 <_realloc_r+0x48>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7fe faff 	bl	80057f8 <_malloc_r>
 80071fa:	4605      	mov	r5, r0
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d0f2      	beq.n	80071e6 <_realloc_r+0x1c>
 8007200:	4631      	mov	r1, r6
 8007202:	4622      	mov	r2, r4
 8007204:	f7ff ffbd 	bl	8007182 <memcpy>
 8007208:	4631      	mov	r1, r6
 800720a:	4638      	mov	r0, r7
 800720c:	f7fe faa8 	bl	8005760 <_free_r>
 8007210:	e7e9      	b.n	80071e6 <_realloc_r+0x1c>
 8007212:	4635      	mov	r5, r6
 8007214:	e7e7      	b.n	80071e6 <_realloc_r+0x1c>

08007216 <_sungetc_r>:
 8007216:	b538      	push	{r3, r4, r5, lr}
 8007218:	1c4b      	adds	r3, r1, #1
 800721a:	4614      	mov	r4, r2
 800721c:	d103      	bne.n	8007226 <_sungetc_r+0x10>
 800721e:	f04f 35ff 	mov.w	r5, #4294967295
 8007222:	4628      	mov	r0, r5
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	8993      	ldrh	r3, [r2, #12]
 8007228:	b2cd      	uxtb	r5, r1
 800722a:	f023 0320 	bic.w	r3, r3, #32
 800722e:	8193      	strh	r3, [r2, #12]
 8007230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007232:	6852      	ldr	r2, [r2, #4]
 8007234:	b18b      	cbz	r3, 800725a <_sungetc_r+0x44>
 8007236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007238:	4293      	cmp	r3, r2
 800723a:	dd08      	ble.n	800724e <_sungetc_r+0x38>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	1e5a      	subs	r2, r3, #1
 8007240:	6022      	str	r2, [r4, #0]
 8007242:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	3301      	adds	r3, #1
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	e7e9      	b.n	8007222 <_sungetc_r+0xc>
 800724e:	4621      	mov	r1, r4
 8007250:	f000 fba2 	bl	8007998 <__submore>
 8007254:	2800      	cmp	r0, #0
 8007256:	d0f1      	beq.n	800723c <_sungetc_r+0x26>
 8007258:	e7e1      	b.n	800721e <_sungetc_r+0x8>
 800725a:	6921      	ldr	r1, [r4, #16]
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	b151      	cbz	r1, 8007276 <_sungetc_r+0x60>
 8007260:	4299      	cmp	r1, r3
 8007262:	d208      	bcs.n	8007276 <_sungetc_r+0x60>
 8007264:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007268:	42a9      	cmp	r1, r5
 800726a:	d104      	bne.n	8007276 <_sungetc_r+0x60>
 800726c:	3b01      	subs	r3, #1
 800726e:	3201      	adds	r2, #1
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	6062      	str	r2, [r4, #4]
 8007274:	e7d5      	b.n	8007222 <_sungetc_r+0xc>
 8007276:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800727a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800727e:	6363      	str	r3, [r4, #52]	; 0x34
 8007280:	2303      	movs	r3, #3
 8007282:	63a3      	str	r3, [r4, #56]	; 0x38
 8007284:	4623      	mov	r3, r4
 8007286:	f803 5f46 	strb.w	r5, [r3, #70]!
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	2301      	movs	r3, #1
 800728e:	e7dc      	b.n	800724a <_sungetc_r+0x34>

08007290 <__ssrefill_r>:
 8007290:	b510      	push	{r4, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007296:	b169      	cbz	r1, 80072b4 <__ssrefill_r+0x24>
 8007298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800729c:	4299      	cmp	r1, r3
 800729e:	d001      	beq.n	80072a4 <__ssrefill_r+0x14>
 80072a0:	f7fe fa5e 	bl	8005760 <_free_r>
 80072a4:	2000      	movs	r0, #0
 80072a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072a8:	6360      	str	r0, [r4, #52]	; 0x34
 80072aa:	6063      	str	r3, [r4, #4]
 80072ac:	b113      	cbz	r3, 80072b4 <__ssrefill_r+0x24>
 80072ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd10      	pop	{r4, pc}
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	2300      	movs	r3, #0
 80072be:	6063      	str	r3, [r4, #4]
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	f043 0320 	orr.w	r3, r3, #32
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	e7f3      	b.n	80072b2 <__ssrefill_r+0x22>
	...

080072cc <__ssvfiscanf_r>:
 80072cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	460c      	mov	r4, r1
 80072d2:	2100      	movs	r1, #0
 80072d4:	4606      	mov	r6, r0
 80072d6:	4692      	mov	sl, r2
 80072d8:	270a      	movs	r7, #10
 80072da:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80072de:	9144      	str	r1, [sp, #272]	; 0x110
 80072e0:	9145      	str	r1, [sp, #276]	; 0x114
 80072e2:	499e      	ldr	r1, [pc, #632]	; (800755c <__ssvfiscanf_r+0x290>)
 80072e4:	f10d 0804 	add.w	r8, sp, #4
 80072e8:	91a0      	str	r1, [sp, #640]	; 0x280
 80072ea:	499d      	ldr	r1, [pc, #628]	; (8007560 <__ssvfiscanf_r+0x294>)
 80072ec:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8007564 <__ssvfiscanf_r+0x298>
 80072f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80072f4:	91a1      	str	r1, [sp, #644]	; 0x284
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	f89a 3000 	ldrb.w	r3, [sl]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 812a 	beq.w	8007556 <__ssvfiscanf_r+0x28a>
 8007302:	4655      	mov	r5, sl
 8007304:	f7ff fb02 	bl	800690c <__locale_ctype_ptr>
 8007308:	f815 bb01 	ldrb.w	fp, [r5], #1
 800730c:	4458      	add	r0, fp
 800730e:	7843      	ldrb	r3, [r0, #1]
 8007310:	f013 0308 	ands.w	r3, r3, #8
 8007314:	d01c      	beq.n	8007350 <__ssvfiscanf_r+0x84>
 8007316:	6863      	ldr	r3, [r4, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	dd12      	ble.n	8007342 <__ssvfiscanf_r+0x76>
 800731c:	f7ff faf6 	bl	800690c <__locale_ctype_ptr>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	4410      	add	r0, r2
 8007326:	7842      	ldrb	r2, [r0, #1]
 8007328:	0712      	lsls	r2, r2, #28
 800732a:	d401      	bmi.n	8007330 <__ssvfiscanf_r+0x64>
 800732c:	46aa      	mov	sl, r5
 800732e:	e7e3      	b.n	80072f8 <__ssvfiscanf_r+0x2c>
 8007330:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007332:	3301      	adds	r3, #1
 8007334:	3201      	adds	r2, #1
 8007336:	9245      	str	r2, [sp, #276]	; 0x114
 8007338:	6862      	ldr	r2, [r4, #4]
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	3a01      	subs	r2, #1
 800733e:	6062      	str	r2, [r4, #4]
 8007340:	e7e9      	b.n	8007316 <__ssvfiscanf_r+0x4a>
 8007342:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007344:	4621      	mov	r1, r4
 8007346:	4630      	mov	r0, r6
 8007348:	4798      	blx	r3
 800734a:	2800      	cmp	r0, #0
 800734c:	d0e6      	beq.n	800731c <__ssvfiscanf_r+0x50>
 800734e:	e7ed      	b.n	800732c <__ssvfiscanf_r+0x60>
 8007350:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007354:	f040 8082 	bne.w	800745c <__ssvfiscanf_r+0x190>
 8007358:	9343      	str	r3, [sp, #268]	; 0x10c
 800735a:	9341      	str	r3, [sp, #260]	; 0x104
 800735c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007360:	2b2a      	cmp	r3, #42	; 0x2a
 8007362:	d103      	bne.n	800736c <__ssvfiscanf_r+0xa0>
 8007364:	2310      	movs	r3, #16
 8007366:	f10a 0502 	add.w	r5, sl, #2
 800736a:	9341      	str	r3, [sp, #260]	; 0x104
 800736c:	46aa      	mov	sl, r5
 800736e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007372:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007376:	2a09      	cmp	r2, #9
 8007378:	d922      	bls.n	80073c0 <__ssvfiscanf_r+0xf4>
 800737a:	2203      	movs	r2, #3
 800737c:	4879      	ldr	r0, [pc, #484]	; (8007564 <__ssvfiscanf_r+0x298>)
 800737e:	f7ff fef2 	bl	8007166 <memchr>
 8007382:	b138      	cbz	r0, 8007394 <__ssvfiscanf_r+0xc8>
 8007384:	eba0 0309 	sub.w	r3, r0, r9
 8007388:	2001      	movs	r0, #1
 800738a:	46aa      	mov	sl, r5
 800738c:	4098      	lsls	r0, r3
 800738e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007390:	4318      	orrs	r0, r3
 8007392:	9041      	str	r0, [sp, #260]	; 0x104
 8007394:	f89a 3000 	ldrb.w	r3, [sl]
 8007398:	f10a 0501 	add.w	r5, sl, #1
 800739c:	2b67      	cmp	r3, #103	; 0x67
 800739e:	d82b      	bhi.n	80073f8 <__ssvfiscanf_r+0x12c>
 80073a0:	2b65      	cmp	r3, #101	; 0x65
 80073a2:	f080 809f 	bcs.w	80074e4 <__ssvfiscanf_r+0x218>
 80073a6:	2b47      	cmp	r3, #71	; 0x47
 80073a8:	d810      	bhi.n	80073cc <__ssvfiscanf_r+0x100>
 80073aa:	2b45      	cmp	r3, #69	; 0x45
 80073ac:	f080 809a 	bcs.w	80074e4 <__ssvfiscanf_r+0x218>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d06c      	beq.n	800748e <__ssvfiscanf_r+0x1c2>
 80073b4:	2b25      	cmp	r3, #37	; 0x25
 80073b6:	d051      	beq.n	800745c <__ssvfiscanf_r+0x190>
 80073b8:	2303      	movs	r3, #3
 80073ba:	9742      	str	r7, [sp, #264]	; 0x108
 80073bc:	9347      	str	r3, [sp, #284]	; 0x11c
 80073be:	e027      	b.n	8007410 <__ssvfiscanf_r+0x144>
 80073c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80073c2:	fb07 1303 	mla	r3, r7, r3, r1
 80073c6:	3b30      	subs	r3, #48	; 0x30
 80073c8:	9343      	str	r3, [sp, #268]	; 0x10c
 80073ca:	e7cf      	b.n	800736c <__ssvfiscanf_r+0xa0>
 80073cc:	2b5b      	cmp	r3, #91	; 0x5b
 80073ce:	d06a      	beq.n	80074a6 <__ssvfiscanf_r+0x1da>
 80073d0:	d80c      	bhi.n	80073ec <__ssvfiscanf_r+0x120>
 80073d2:	2b58      	cmp	r3, #88	; 0x58
 80073d4:	d1f0      	bne.n	80073b8 <__ssvfiscanf_r+0xec>
 80073d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80073d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073dc:	9241      	str	r2, [sp, #260]	; 0x104
 80073de:	2210      	movs	r2, #16
 80073e0:	9242      	str	r2, [sp, #264]	; 0x108
 80073e2:	2b6e      	cmp	r3, #110	; 0x6e
 80073e4:	bf8c      	ite	hi
 80073e6:	2304      	movhi	r3, #4
 80073e8:	2303      	movls	r3, #3
 80073ea:	e010      	b.n	800740e <__ssvfiscanf_r+0x142>
 80073ec:	2b63      	cmp	r3, #99	; 0x63
 80073ee:	d065      	beq.n	80074bc <__ssvfiscanf_r+0x1f0>
 80073f0:	2b64      	cmp	r3, #100	; 0x64
 80073f2:	d1e1      	bne.n	80073b8 <__ssvfiscanf_r+0xec>
 80073f4:	9742      	str	r7, [sp, #264]	; 0x108
 80073f6:	e7f4      	b.n	80073e2 <__ssvfiscanf_r+0x116>
 80073f8:	2b70      	cmp	r3, #112	; 0x70
 80073fa:	d04b      	beq.n	8007494 <__ssvfiscanf_r+0x1c8>
 80073fc:	d826      	bhi.n	800744c <__ssvfiscanf_r+0x180>
 80073fe:	2b6e      	cmp	r3, #110	; 0x6e
 8007400:	d062      	beq.n	80074c8 <__ssvfiscanf_r+0x1fc>
 8007402:	d84c      	bhi.n	800749e <__ssvfiscanf_r+0x1d2>
 8007404:	2b69      	cmp	r3, #105	; 0x69
 8007406:	d1d7      	bne.n	80073b8 <__ssvfiscanf_r+0xec>
 8007408:	2300      	movs	r3, #0
 800740a:	9342      	str	r3, [sp, #264]	; 0x108
 800740c:	2303      	movs	r3, #3
 800740e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007410:	6863      	ldr	r3, [r4, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	dd68      	ble.n	80074e8 <__ssvfiscanf_r+0x21c>
 8007416:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007418:	0659      	lsls	r1, r3, #25
 800741a:	d407      	bmi.n	800742c <__ssvfiscanf_r+0x160>
 800741c:	f7ff fa76 	bl	800690c <__locale_ctype_ptr>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	781a      	ldrb	r2, [r3, #0]
 8007424:	4410      	add	r0, r2
 8007426:	7842      	ldrb	r2, [r0, #1]
 8007428:	0712      	lsls	r2, r2, #28
 800742a:	d464      	bmi.n	80074f6 <__ssvfiscanf_r+0x22a>
 800742c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800742e:	2b02      	cmp	r3, #2
 8007430:	dc73      	bgt.n	800751a <__ssvfiscanf_r+0x24e>
 8007432:	466b      	mov	r3, sp
 8007434:	4622      	mov	r2, r4
 8007436:	a941      	add	r1, sp, #260	; 0x104
 8007438:	4630      	mov	r0, r6
 800743a:	f000 f897 	bl	800756c <_scanf_chars>
 800743e:	2801      	cmp	r0, #1
 8007440:	f000 8089 	beq.w	8007556 <__ssvfiscanf_r+0x28a>
 8007444:	2802      	cmp	r0, #2
 8007446:	f47f af71 	bne.w	800732c <__ssvfiscanf_r+0x60>
 800744a:	e01d      	b.n	8007488 <__ssvfiscanf_r+0x1bc>
 800744c:	2b75      	cmp	r3, #117	; 0x75
 800744e:	d0d1      	beq.n	80073f4 <__ssvfiscanf_r+0x128>
 8007450:	2b78      	cmp	r3, #120	; 0x78
 8007452:	d0c0      	beq.n	80073d6 <__ssvfiscanf_r+0x10a>
 8007454:	2b73      	cmp	r3, #115	; 0x73
 8007456:	d1af      	bne.n	80073b8 <__ssvfiscanf_r+0xec>
 8007458:	2302      	movs	r3, #2
 800745a:	e7d8      	b.n	800740e <__ssvfiscanf_r+0x142>
 800745c:	6863      	ldr	r3, [r4, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd0c      	ble.n	800747c <__ssvfiscanf_r+0x1b0>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	455a      	cmp	r2, fp
 8007468:	d175      	bne.n	8007556 <__ssvfiscanf_r+0x28a>
 800746a:	3301      	adds	r3, #1
 800746c:	6862      	ldr	r2, [r4, #4]
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007472:	3a01      	subs	r2, #1
 8007474:	3301      	adds	r3, #1
 8007476:	6062      	str	r2, [r4, #4]
 8007478:	9345      	str	r3, [sp, #276]	; 0x114
 800747a:	e757      	b.n	800732c <__ssvfiscanf_r+0x60>
 800747c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	4798      	blx	r3
 8007484:	2800      	cmp	r0, #0
 8007486:	d0ec      	beq.n	8007462 <__ssvfiscanf_r+0x196>
 8007488:	9844      	ldr	r0, [sp, #272]	; 0x110
 800748a:	2800      	cmp	r0, #0
 800748c:	d159      	bne.n	8007542 <__ssvfiscanf_r+0x276>
 800748e:	f04f 30ff 	mov.w	r0, #4294967295
 8007492:	e05c      	b.n	800754e <__ssvfiscanf_r+0x282>
 8007494:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007496:	f042 0220 	orr.w	r2, r2, #32
 800749a:	9241      	str	r2, [sp, #260]	; 0x104
 800749c:	e79b      	b.n	80073d6 <__ssvfiscanf_r+0x10a>
 800749e:	2308      	movs	r3, #8
 80074a0:	9342      	str	r3, [sp, #264]	; 0x108
 80074a2:	2304      	movs	r3, #4
 80074a4:	e7b3      	b.n	800740e <__ssvfiscanf_r+0x142>
 80074a6:	4629      	mov	r1, r5
 80074a8:	4640      	mov	r0, r8
 80074aa:	f000 f9b7 	bl	800781c <__sccl>
 80074ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80074b0:	4605      	mov	r5, r0
 80074b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b6:	9341      	str	r3, [sp, #260]	; 0x104
 80074b8:	2301      	movs	r3, #1
 80074ba:	e7a8      	b.n	800740e <__ssvfiscanf_r+0x142>
 80074bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80074be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c2:	9341      	str	r3, [sp, #260]	; 0x104
 80074c4:	2300      	movs	r3, #0
 80074c6:	e7a2      	b.n	800740e <__ssvfiscanf_r+0x142>
 80074c8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80074ca:	06c3      	lsls	r3, r0, #27
 80074cc:	f53f af2e 	bmi.w	800732c <__ssvfiscanf_r+0x60>
 80074d0:	9b00      	ldr	r3, [sp, #0]
 80074d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074d4:	1d19      	adds	r1, r3, #4
 80074d6:	9100      	str	r1, [sp, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	07c0      	lsls	r0, r0, #31
 80074dc:	bf4c      	ite	mi
 80074de:	801a      	strhmi	r2, [r3, #0]
 80074e0:	601a      	strpl	r2, [r3, #0]
 80074e2:	e723      	b.n	800732c <__ssvfiscanf_r+0x60>
 80074e4:	2305      	movs	r3, #5
 80074e6:	e792      	b.n	800740e <__ssvfiscanf_r+0x142>
 80074e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074ea:	4621      	mov	r1, r4
 80074ec:	4630      	mov	r0, r6
 80074ee:	4798      	blx	r3
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d090      	beq.n	8007416 <__ssvfiscanf_r+0x14a>
 80074f4:	e7c8      	b.n	8007488 <__ssvfiscanf_r+0x1bc>
 80074f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074f8:	3201      	adds	r2, #1
 80074fa:	9245      	str	r2, [sp, #276]	; 0x114
 80074fc:	6862      	ldr	r2, [r4, #4]
 80074fe:	3a01      	subs	r2, #1
 8007500:	2a00      	cmp	r2, #0
 8007502:	6062      	str	r2, [r4, #4]
 8007504:	dd02      	ble.n	800750c <__ssvfiscanf_r+0x240>
 8007506:	3301      	adds	r3, #1
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	e787      	b.n	800741c <__ssvfiscanf_r+0x150>
 800750c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800750e:	4621      	mov	r1, r4
 8007510:	4630      	mov	r0, r6
 8007512:	4798      	blx	r3
 8007514:	2800      	cmp	r0, #0
 8007516:	d081      	beq.n	800741c <__ssvfiscanf_r+0x150>
 8007518:	e7b6      	b.n	8007488 <__ssvfiscanf_r+0x1bc>
 800751a:	2b04      	cmp	r3, #4
 800751c:	dc06      	bgt.n	800752c <__ssvfiscanf_r+0x260>
 800751e:	466b      	mov	r3, sp
 8007520:	4622      	mov	r2, r4
 8007522:	a941      	add	r1, sp, #260	; 0x104
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f883 	bl	8007630 <_scanf_i>
 800752a:	e788      	b.n	800743e <__ssvfiscanf_r+0x172>
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <__ssvfiscanf_r+0x29c>)
 800752e:	2b00      	cmp	r3, #0
 8007530:	f43f aefc 	beq.w	800732c <__ssvfiscanf_r+0x60>
 8007534:	466b      	mov	r3, sp
 8007536:	4622      	mov	r2, r4
 8007538:	a941      	add	r1, sp, #260	; 0x104
 800753a:	4630      	mov	r0, r6
 800753c:	f3af 8000 	nop.w
 8007540:	e77d      	b.n	800743e <__ssvfiscanf_r+0x172>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007548:	bf18      	it	ne
 800754a:	f04f 30ff 	movne.w	r0, #4294967295
 800754e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007558:	e7f9      	b.n	800754e <__ssvfiscanf_r+0x282>
 800755a:	bf00      	nop
 800755c:	08007217 	.word	0x08007217
 8007560:	08007291 	.word	0x08007291
 8007564:	08007fdb 	.word	0x08007fdb
 8007568:	00000000 	.word	0x00000000

0800756c <_scanf_chars>:
 800756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007570:	4615      	mov	r5, r2
 8007572:	688a      	ldr	r2, [r1, #8]
 8007574:	4680      	mov	r8, r0
 8007576:	460c      	mov	r4, r1
 8007578:	b932      	cbnz	r2, 8007588 <_scanf_chars+0x1c>
 800757a:	698a      	ldr	r2, [r1, #24]
 800757c:	2a00      	cmp	r2, #0
 800757e:	bf14      	ite	ne
 8007580:	f04f 32ff 	movne.w	r2, #4294967295
 8007584:	2201      	moveq	r2, #1
 8007586:	608a      	str	r2, [r1, #8]
 8007588:	2600      	movs	r6, #0
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	06d1      	lsls	r1, r2, #27
 800758e:	bf5f      	itttt	pl
 8007590:	681a      	ldrpl	r2, [r3, #0]
 8007592:	1d11      	addpl	r1, r2, #4
 8007594:	6019      	strpl	r1, [r3, #0]
 8007596:	6817      	ldrpl	r7, [r2, #0]
 8007598:	69a3      	ldr	r3, [r4, #24]
 800759a:	b1db      	cbz	r3, 80075d4 <_scanf_chars+0x68>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d107      	bne.n	80075b0 <_scanf_chars+0x44>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	6962      	ldr	r2, [r4, #20]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	5cd3      	ldrb	r3, [r2, r3]
 80075a8:	b9a3      	cbnz	r3, 80075d4 <_scanf_chars+0x68>
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	d131      	bne.n	8007612 <_scanf_chars+0xa6>
 80075ae:	e006      	b.n	80075be <_scanf_chars+0x52>
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d007      	beq.n	80075c4 <_scanf_chars+0x58>
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	d12c      	bne.n	8007612 <_scanf_chars+0xa6>
 80075b8:	69a3      	ldr	r3, [r4, #24]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d129      	bne.n	8007612 <_scanf_chars+0xa6>
 80075be:	2001      	movs	r0, #1
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	f7ff f9a2 	bl	800690c <__locale_ctype_ptr>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4418      	add	r0, r3
 80075ce:	7843      	ldrb	r3, [r0, #1]
 80075d0:	071b      	lsls	r3, r3, #28
 80075d2:	d4ef      	bmi.n	80075b4 <_scanf_chars+0x48>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	3601      	adds	r6, #1
 80075d8:	06da      	lsls	r2, r3, #27
 80075da:	bf5e      	ittt	pl
 80075dc:	682b      	ldrpl	r3, [r5, #0]
 80075de:	781b      	ldrbpl	r3, [r3, #0]
 80075e0:	703b      	strbpl	r3, [r7, #0]
 80075e2:	682a      	ldr	r2, [r5, #0]
 80075e4:	686b      	ldr	r3, [r5, #4]
 80075e6:	f102 0201 	add.w	r2, r2, #1
 80075ea:	602a      	str	r2, [r5, #0]
 80075ec:	68a2      	ldr	r2, [r4, #8]
 80075ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80075f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80075f6:	606b      	str	r3, [r5, #4]
 80075f8:	bf58      	it	pl
 80075fa:	3701      	addpl	r7, #1
 80075fc:	60a2      	str	r2, [r4, #8]
 80075fe:	b142      	cbz	r2, 8007612 <_scanf_chars+0xa6>
 8007600:	2b00      	cmp	r3, #0
 8007602:	dcc9      	bgt.n	8007598 <_scanf_chars+0x2c>
 8007604:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007608:	4629      	mov	r1, r5
 800760a:	4640      	mov	r0, r8
 800760c:	4798      	blx	r3
 800760e:	2800      	cmp	r0, #0
 8007610:	d0c2      	beq.n	8007598 <_scanf_chars+0x2c>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	f013 0310 	ands.w	r3, r3, #16
 8007618:	d105      	bne.n	8007626 <_scanf_chars+0xba>
 800761a:	68e2      	ldr	r2, [r4, #12]
 800761c:	3201      	adds	r2, #1
 800761e:	60e2      	str	r2, [r4, #12]
 8007620:	69a2      	ldr	r2, [r4, #24]
 8007622:	b102      	cbz	r2, 8007626 <_scanf_chars+0xba>
 8007624:	703b      	strb	r3, [r7, #0]
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	2000      	movs	r0, #0
 800762a:	441e      	add	r6, r3
 800762c:	6126      	str	r6, [r4, #16]
 800762e:	e7c7      	b.n	80075c0 <_scanf_chars+0x54>

08007630 <_scanf_i>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	460c      	mov	r4, r1
 8007636:	469a      	mov	sl, r3
 8007638:	4b74      	ldr	r3, [pc, #464]	; (800780c <_scanf_i+0x1dc>)
 800763a:	b087      	sub	sp, #28
 800763c:	4683      	mov	fp, r0
 800763e:	4616      	mov	r6, r2
 8007640:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007644:	ab03      	add	r3, sp, #12
 8007646:	68a7      	ldr	r7, [r4, #8]
 8007648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800764c:	4b70      	ldr	r3, [pc, #448]	; (8007810 <_scanf_i+0x1e0>)
 800764e:	69a1      	ldr	r1, [r4, #24]
 8007650:	4a70      	ldr	r2, [pc, #448]	; (8007814 <_scanf_i+0x1e4>)
 8007652:	f104 091c 	add.w	r9, r4, #28
 8007656:	2903      	cmp	r1, #3
 8007658:	bf08      	it	eq
 800765a:	461a      	moveq	r2, r3
 800765c:	1e7b      	subs	r3, r7, #1
 800765e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007662:	bf84      	itt	hi
 8007664:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007668:	60a3      	strhi	r3, [r4, #8]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	bf88      	it	hi
 800766e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007672:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	bf98      	it	ls
 800767a:	2700      	movls	r7, #0
 800767c:	464b      	mov	r3, r9
 800767e:	f04f 0800 	mov.w	r8, #0
 8007682:	9200      	str	r2, [sp, #0]
 8007684:	bf88      	it	hi
 8007686:	197f      	addhi	r7, r7, r5
 8007688:	6831      	ldr	r1, [r6, #0]
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	ab03      	add	r3, sp, #12
 800768e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007692:	2202      	movs	r2, #2
 8007694:	7809      	ldrb	r1, [r1, #0]
 8007696:	f7ff fd66 	bl	8007166 <memchr>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	b330      	cbz	r0, 80076ec <_scanf_i+0xbc>
 800769e:	f1b8 0f01 	cmp.w	r8, #1
 80076a2:	d15a      	bne.n	800775a <_scanf_i+0x12a>
 80076a4:	6862      	ldr	r2, [r4, #4]
 80076a6:	b92a      	cbnz	r2, 80076b4 <_scanf_i+0x84>
 80076a8:	2108      	movs	r1, #8
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	6061      	str	r1, [r4, #4]
 80076ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b2:	6022      	str	r2, [r4, #0]
 80076b4:	6822      	ldr	r2, [r4, #0]
 80076b6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80076ba:	6022      	str	r2, [r4, #0]
 80076bc:	68a2      	ldr	r2, [r4, #8]
 80076be:	1e51      	subs	r1, r2, #1
 80076c0:	60a1      	str	r1, [r4, #8]
 80076c2:	b19a      	cbz	r2, 80076ec <_scanf_i+0xbc>
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	1c5d      	adds	r5, r3, #1
 80076c8:	1c51      	adds	r1, r2, #1
 80076ca:	6031      	str	r1, [r6, #0]
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	6873      	ldr	r3, [r6, #4]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	6073      	str	r3, [r6, #4]
 80076d8:	dc07      	bgt.n	80076ea <_scanf_i+0xba>
 80076da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80076de:	4631      	mov	r1, r6
 80076e0:	4658      	mov	r0, fp
 80076e2:	4798      	blx	r3
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f040 8087 	bne.w	80077f8 <_scanf_i+0x1c8>
 80076ea:	462b      	mov	r3, r5
 80076ec:	f108 0801 	add.w	r8, r8, #1
 80076f0:	f1b8 0f03 	cmp.w	r8, #3
 80076f4:	d1c8      	bne.n	8007688 <_scanf_i+0x58>
 80076f6:	6862      	ldr	r2, [r4, #4]
 80076f8:	b90a      	cbnz	r2, 80076fe <_scanf_i+0xce>
 80076fa:	220a      	movs	r2, #10
 80076fc:	6062      	str	r2, [r4, #4]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	4945      	ldr	r1, [pc, #276]	; (8007818 <_scanf_i+0x1e8>)
 8007702:	6960      	ldr	r0, [r4, #20]
 8007704:	1a89      	subs	r1, r1, r2
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	f000 f888 	bl	800781c <__sccl>
 800770c:	9b01      	ldr	r3, [sp, #4]
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	461d      	mov	r5, r3
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d03b      	beq.n	8007794 <_scanf_i+0x164>
 800771c:	6831      	ldr	r1, [r6, #0]
 800771e:	6960      	ldr	r0, [r4, #20]
 8007720:	f891 c000 	ldrb.w	ip, [r1]
 8007724:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007728:	2800      	cmp	r0, #0
 800772a:	d033      	beq.n	8007794 <_scanf_i+0x164>
 800772c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007730:	d121      	bne.n	8007776 <_scanf_i+0x146>
 8007732:	0510      	lsls	r0, r2, #20
 8007734:	d51f      	bpl.n	8007776 <_scanf_i+0x146>
 8007736:	f108 0801 	add.w	r8, r8, #1
 800773a:	b117      	cbz	r7, 8007742 <_scanf_i+0x112>
 800773c:	3301      	adds	r3, #1
 800773e:	3f01      	subs	r7, #1
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	6873      	ldr	r3, [r6, #4]
 8007744:	3b01      	subs	r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	6073      	str	r3, [r6, #4]
 800774a:	dd1c      	ble.n	8007786 <_scanf_i+0x156>
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	68a3      	ldr	r3, [r4, #8]
 8007754:	3b01      	subs	r3, #1
 8007756:	60a3      	str	r3, [r4, #8]
 8007758:	e7dc      	b.n	8007714 <_scanf_i+0xe4>
 800775a:	f1b8 0f02 	cmp.w	r8, #2
 800775e:	d1ad      	bne.n	80076bc <_scanf_i+0x8c>
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007766:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800776a:	d1bf      	bne.n	80076ec <_scanf_i+0xbc>
 800776c:	2110      	movs	r1, #16
 800776e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007772:	6061      	str	r1, [r4, #4]
 8007774:	e7a1      	b.n	80076ba <_scanf_i+0x8a>
 8007776:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800777a:	6022      	str	r2, [r4, #0]
 800777c:	780b      	ldrb	r3, [r1, #0]
 800777e:	3501      	adds	r5, #1
 8007780:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007784:	e7dd      	b.n	8007742 <_scanf_i+0x112>
 8007786:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800778a:	4631      	mov	r1, r6
 800778c:	4658      	mov	r0, fp
 800778e:	4798      	blx	r3
 8007790:	2800      	cmp	r0, #0
 8007792:	d0de      	beq.n	8007752 <_scanf_i+0x122>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	05d9      	lsls	r1, r3, #23
 8007798:	d50c      	bpl.n	80077b4 <_scanf_i+0x184>
 800779a:	454d      	cmp	r5, r9
 800779c:	d908      	bls.n	80077b0 <_scanf_i+0x180>
 800779e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80077a2:	1e6f      	subs	r7, r5, #1
 80077a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077a8:	4632      	mov	r2, r6
 80077aa:	4658      	mov	r0, fp
 80077ac:	4798      	blx	r3
 80077ae:	463d      	mov	r5, r7
 80077b0:	454d      	cmp	r5, r9
 80077b2:	d029      	beq.n	8007808 <_scanf_i+0x1d8>
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	f012 0210 	ands.w	r2, r2, #16
 80077ba:	d113      	bne.n	80077e4 <_scanf_i+0x1b4>
 80077bc:	702a      	strb	r2, [r5, #0]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	4649      	mov	r1, r9
 80077c2:	4658      	mov	r0, fp
 80077c4:	9e00      	ldr	r6, [sp, #0]
 80077c6:	47b0      	blx	r6
 80077c8:	f8da 3000 	ldr.w	r3, [sl]
 80077cc:	6821      	ldr	r1, [r4, #0]
 80077ce:	1d1a      	adds	r2, r3, #4
 80077d0:	f8ca 2000 	str.w	r2, [sl]
 80077d4:	f011 0f20 	tst.w	r1, #32
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	d010      	beq.n	80077fe <_scanf_i+0x1ce>
 80077dc:	6018      	str	r0, [r3, #0]
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	3301      	adds	r3, #1
 80077e2:	60e3      	str	r3, [r4, #12]
 80077e4:	2000      	movs	r0, #0
 80077e6:	eba5 0509 	sub.w	r5, r5, r9
 80077ea:	44a8      	add	r8, r5
 80077ec:	6925      	ldr	r5, [r4, #16]
 80077ee:	4445      	add	r5, r8
 80077f0:	6125      	str	r5, [r4, #16]
 80077f2:	b007      	add	sp, #28
 80077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f8:	f04f 0800 	mov.w	r8, #0
 80077fc:	e7ca      	b.n	8007794 <_scanf_i+0x164>
 80077fe:	07ca      	lsls	r2, r1, #31
 8007800:	bf4c      	ite	mi
 8007802:	8018      	strhmi	r0, [r3, #0]
 8007804:	6018      	strpl	r0, [r3, #0]
 8007806:	e7ea      	b.n	80077de <_scanf_i+0x1ae>
 8007808:	2001      	movs	r0, #1
 800780a:	e7f2      	b.n	80077f2 <_scanf_i+0x1c2>
 800780c:	08007ce8 	.word	0x08007ce8
 8007810:	08007975 	.word	0x08007975
 8007814:	080064b1 	.word	0x080064b1
 8007818:	0800817c 	.word	0x0800817c

0800781c <__sccl>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	780b      	ldrb	r3, [r1, #0]
 8007820:	1e44      	subs	r4, r0, #1
 8007822:	2b5e      	cmp	r3, #94	; 0x5e
 8007824:	bf13      	iteet	ne
 8007826:	1c4a      	addne	r2, r1, #1
 8007828:	1c8a      	addeq	r2, r1, #2
 800782a:	784b      	ldrbeq	r3, [r1, #1]
 800782c:	2100      	movne	r1, #0
 800782e:	bf08      	it	eq
 8007830:	2101      	moveq	r1, #1
 8007832:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007836:	f804 1f01 	strb.w	r1, [r4, #1]!
 800783a:	42ac      	cmp	r4, r5
 800783c:	d1fb      	bne.n	8007836 <__sccl+0x1a>
 800783e:	b913      	cbnz	r3, 8007846 <__sccl+0x2a>
 8007840:	3a01      	subs	r2, #1
 8007842:	4610      	mov	r0, r2
 8007844:	bd70      	pop	{r4, r5, r6, pc}
 8007846:	f081 0401 	eor.w	r4, r1, #1
 800784a:	54c4      	strb	r4, [r0, r3]
 800784c:	1c51      	adds	r1, r2, #1
 800784e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007852:	1e4e      	subs	r6, r1, #1
 8007854:	2d2d      	cmp	r5, #45	; 0x2d
 8007856:	460a      	mov	r2, r1
 8007858:	d006      	beq.n	8007868 <__sccl+0x4c>
 800785a:	2d5d      	cmp	r5, #93	; 0x5d
 800785c:	d0f1      	beq.n	8007842 <__sccl+0x26>
 800785e:	b90d      	cbnz	r5, 8007864 <__sccl+0x48>
 8007860:	4632      	mov	r2, r6
 8007862:	e7ee      	b.n	8007842 <__sccl+0x26>
 8007864:	462b      	mov	r3, r5
 8007866:	e7f0      	b.n	800784a <__sccl+0x2e>
 8007868:	780e      	ldrb	r6, [r1, #0]
 800786a:	2e5d      	cmp	r6, #93	; 0x5d
 800786c:	d0fa      	beq.n	8007864 <__sccl+0x48>
 800786e:	42b3      	cmp	r3, r6
 8007870:	dcf8      	bgt.n	8007864 <__sccl+0x48>
 8007872:	3301      	adds	r3, #1
 8007874:	429e      	cmp	r6, r3
 8007876:	54c4      	strb	r4, [r0, r3]
 8007878:	dcfb      	bgt.n	8007872 <__sccl+0x56>
 800787a:	3102      	adds	r1, #2
 800787c:	e7e7      	b.n	800784e <__sccl+0x32>

0800787e <_strtol_l.isra.0>:
 800787e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007882:	4680      	mov	r8, r0
 8007884:	4689      	mov	r9, r1
 8007886:	4692      	mov	sl, r2
 8007888:	461e      	mov	r6, r3
 800788a:	460f      	mov	r7, r1
 800788c:	463d      	mov	r5, r7
 800788e:	9808      	ldr	r0, [sp, #32]
 8007890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007894:	f7ff f836 	bl	8006904 <__locale_ctype_ptr_l>
 8007898:	4420      	add	r0, r4
 800789a:	7843      	ldrb	r3, [r0, #1]
 800789c:	f013 0308 	ands.w	r3, r3, #8
 80078a0:	d132      	bne.n	8007908 <_strtol_l.isra.0+0x8a>
 80078a2:	2c2d      	cmp	r4, #45	; 0x2d
 80078a4:	d132      	bne.n	800790c <_strtol_l.isra.0+0x8e>
 80078a6:	2201      	movs	r2, #1
 80078a8:	787c      	ldrb	r4, [r7, #1]
 80078aa:	1cbd      	adds	r5, r7, #2
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	d05d      	beq.n	800796c <_strtol_l.isra.0+0xee>
 80078b0:	2e10      	cmp	r6, #16
 80078b2:	d109      	bne.n	80078c8 <_strtol_l.isra.0+0x4a>
 80078b4:	2c30      	cmp	r4, #48	; 0x30
 80078b6:	d107      	bne.n	80078c8 <_strtol_l.isra.0+0x4a>
 80078b8:	782b      	ldrb	r3, [r5, #0]
 80078ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078be:	2b58      	cmp	r3, #88	; 0x58
 80078c0:	d14f      	bne.n	8007962 <_strtol_l.isra.0+0xe4>
 80078c2:	2610      	movs	r6, #16
 80078c4:	786c      	ldrb	r4, [r5, #1]
 80078c6:	3502      	adds	r5, #2
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	bf14      	ite	ne
 80078cc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80078d0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80078d4:	2700      	movs	r7, #0
 80078d6:	fbb1 fcf6 	udiv	ip, r1, r6
 80078da:	4638      	mov	r0, r7
 80078dc:	fb06 1e1c 	mls	lr, r6, ip, r1
 80078e0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80078e4:	2b09      	cmp	r3, #9
 80078e6:	d817      	bhi.n	8007918 <_strtol_l.isra.0+0x9a>
 80078e8:	461c      	mov	r4, r3
 80078ea:	42a6      	cmp	r6, r4
 80078ec:	dd23      	ble.n	8007936 <_strtol_l.isra.0+0xb8>
 80078ee:	1c7b      	adds	r3, r7, #1
 80078f0:	d007      	beq.n	8007902 <_strtol_l.isra.0+0x84>
 80078f2:	4584      	cmp	ip, r0
 80078f4:	d31c      	bcc.n	8007930 <_strtol_l.isra.0+0xb2>
 80078f6:	d101      	bne.n	80078fc <_strtol_l.isra.0+0x7e>
 80078f8:	45a6      	cmp	lr, r4
 80078fa:	db19      	blt.n	8007930 <_strtol_l.isra.0+0xb2>
 80078fc:	2701      	movs	r7, #1
 80078fe:	fb00 4006 	mla	r0, r0, r6, r4
 8007902:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007906:	e7eb      	b.n	80078e0 <_strtol_l.isra.0+0x62>
 8007908:	462f      	mov	r7, r5
 800790a:	e7bf      	b.n	800788c <_strtol_l.isra.0+0xe>
 800790c:	2c2b      	cmp	r4, #43	; 0x2b
 800790e:	bf04      	itt	eq
 8007910:	1cbd      	addeq	r5, r7, #2
 8007912:	787c      	ldrbeq	r4, [r7, #1]
 8007914:	461a      	mov	r2, r3
 8007916:	e7c9      	b.n	80078ac <_strtol_l.isra.0+0x2e>
 8007918:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800791c:	2b19      	cmp	r3, #25
 800791e:	d801      	bhi.n	8007924 <_strtol_l.isra.0+0xa6>
 8007920:	3c37      	subs	r4, #55	; 0x37
 8007922:	e7e2      	b.n	80078ea <_strtol_l.isra.0+0x6c>
 8007924:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007928:	2b19      	cmp	r3, #25
 800792a:	d804      	bhi.n	8007936 <_strtol_l.isra.0+0xb8>
 800792c:	3c57      	subs	r4, #87	; 0x57
 800792e:	e7dc      	b.n	80078ea <_strtol_l.isra.0+0x6c>
 8007930:	f04f 37ff 	mov.w	r7, #4294967295
 8007934:	e7e5      	b.n	8007902 <_strtol_l.isra.0+0x84>
 8007936:	1c7b      	adds	r3, r7, #1
 8007938:	d108      	bne.n	800794c <_strtol_l.isra.0+0xce>
 800793a:	2322      	movs	r3, #34	; 0x22
 800793c:	4608      	mov	r0, r1
 800793e:	f8c8 3000 	str.w	r3, [r8]
 8007942:	f1ba 0f00 	cmp.w	sl, #0
 8007946:	d107      	bne.n	8007958 <_strtol_l.isra.0+0xda>
 8007948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794c:	b102      	cbz	r2, 8007950 <_strtol_l.isra.0+0xd2>
 800794e:	4240      	negs	r0, r0
 8007950:	f1ba 0f00 	cmp.w	sl, #0
 8007954:	d0f8      	beq.n	8007948 <_strtol_l.isra.0+0xca>
 8007956:	b10f      	cbz	r7, 800795c <_strtol_l.isra.0+0xde>
 8007958:	f105 39ff 	add.w	r9, r5, #4294967295
 800795c:	f8ca 9000 	str.w	r9, [sl]
 8007960:	e7f2      	b.n	8007948 <_strtol_l.isra.0+0xca>
 8007962:	2430      	movs	r4, #48	; 0x30
 8007964:	2e00      	cmp	r6, #0
 8007966:	d1af      	bne.n	80078c8 <_strtol_l.isra.0+0x4a>
 8007968:	2608      	movs	r6, #8
 800796a:	e7ad      	b.n	80078c8 <_strtol_l.isra.0+0x4a>
 800796c:	2c30      	cmp	r4, #48	; 0x30
 800796e:	d0a3      	beq.n	80078b8 <_strtol_l.isra.0+0x3a>
 8007970:	260a      	movs	r6, #10
 8007972:	e7a9      	b.n	80078c8 <_strtol_l.isra.0+0x4a>

08007974 <_strtol_r>:
 8007974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007976:	4c06      	ldr	r4, [pc, #24]	; (8007990 <_strtol_r+0x1c>)
 8007978:	4d06      	ldr	r5, [pc, #24]	; (8007994 <_strtol_r+0x20>)
 800797a:	6824      	ldr	r4, [r4, #0]
 800797c:	6a24      	ldr	r4, [r4, #32]
 800797e:	2c00      	cmp	r4, #0
 8007980:	bf08      	it	eq
 8007982:	462c      	moveq	r4, r5
 8007984:	9400      	str	r4, [sp, #0]
 8007986:	f7ff ff7a 	bl	800787e <_strtol_l.isra.0>
 800798a:	b003      	add	sp, #12
 800798c:	bd30      	pop	{r4, r5, pc}
 800798e:	bf00      	nop
 8007990:	20000010 	.word	0x20000010
 8007994:	200000d8 	.word	0x200000d8

08007998 <__submore>:
 8007998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799c:	460c      	mov	r4, r1
 800799e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80079a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d11b      	bne.n	80079e0 <__submore+0x48>
 80079a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079ac:	f7fd ff24 	bl	80057f8 <_malloc_r>
 80079b0:	b918      	cbnz	r0, 80079ba <__submore+0x22>
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079be:	63a3      	str	r3, [r4, #56]	; 0x38
 80079c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80079c4:	6360      	str	r0, [r4, #52]	; 0x34
 80079c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80079ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80079ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80079d2:	7043      	strb	r3, [r0, #1]
 80079d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80079d8:	7003      	strb	r3, [r0, #0]
 80079da:	6020      	str	r0, [r4, #0]
 80079dc:	2000      	movs	r0, #0
 80079de:	e7ea      	b.n	80079b6 <__submore+0x1e>
 80079e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80079e2:	0077      	lsls	r7, r6, #1
 80079e4:	463a      	mov	r2, r7
 80079e6:	f7ff fbf0 	bl	80071ca <_realloc_r>
 80079ea:	4605      	mov	r5, r0
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d0e0      	beq.n	80079b2 <__submore+0x1a>
 80079f0:	eb00 0806 	add.w	r8, r0, r6
 80079f4:	4601      	mov	r1, r0
 80079f6:	4632      	mov	r2, r6
 80079f8:	4640      	mov	r0, r8
 80079fa:	f7ff fbc2 	bl	8007182 <memcpy>
 80079fe:	f8c4 8000 	str.w	r8, [r4]
 8007a02:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007a06:	e7e9      	b.n	80079dc <__submore+0x44>

08007a08 <_malloc_usable_size_r>:
 8007a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a0c:	1f18      	subs	r0, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bfbc      	itt	lt
 8007a12:	580b      	ldrlt	r3, [r1, r0]
 8007a14:	18c0      	addlt	r0, r0, r3
 8007a16:	4770      	bx	lr

08007a18 <_gettimeofday>:
 8007a18:	2258      	movs	r2, #88	; 0x58
 8007a1a:	4b02      	ldr	r3, [pc, #8]	; (8007a24 <_gettimeofday+0xc>)
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	4770      	bx	lr
 8007a24:	200003b0 	.word	0x200003b0

08007a28 <_init>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	bf00      	nop
 8007a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2e:	bc08      	pop	{r3}
 8007a30:	469e      	mov	lr, r3
 8007a32:	4770      	bx	lr

08007a34 <_fini>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr
